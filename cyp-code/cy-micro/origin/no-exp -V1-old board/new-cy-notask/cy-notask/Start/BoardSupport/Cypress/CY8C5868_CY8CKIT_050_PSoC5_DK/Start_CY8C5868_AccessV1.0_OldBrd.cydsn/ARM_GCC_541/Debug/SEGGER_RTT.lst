ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"SEGGER_RTT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.data
  20              		.align	2
  21              		.type	_aTerminalId, %object
  22              		.size	_aTerminalId, 16
  23              	_aTerminalId:
  24 0000 30       		.byte	48
  25 0001 31       		.byte	49
  26 0002 32       		.byte	50
  27 0003 33       		.byte	51
  28 0004 34       		.byte	52
  29 0005 35       		.byte	53
  30 0006 36       		.byte	54
  31 0007 37       		.byte	55
  32 0008 38       		.byte	56
  33 0009 39       		.byte	57
  34 000a 41       		.byte	65
  35 000b 42       		.byte	66
  36 000c 43       		.byte	67
  37 000d 44       		.byte	68
  38 000e 45       		.byte	69
  39 000f 46       		.byte	70
  40              		.comm	_SEGGER_RTT,168,4
  41              		.bss
  42              		.align	2
  43              	_acUpBuffer:
  44 0000 00000000 		.space	1024
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.align	2
  46              	_acDownBuffer:
  47 0400 00000000 		.space	16
  47      00000000 
  47      00000000 
  47      00000000 
  48              	_ActiveTerminal:
  49 0410 00       		.space	1
  50              		.section	.rodata
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 2


  51              		.align	2
  52              	.LC0:
  53 0000 5465726D 		.ascii	"Terminal\000"
  53      696E616C 
  53      00
  54              		.section	.text._DoInit,"ax",%progbits
  55              		.align	2
  56              		.thumb
  57              		.thumb_func
  58              		.type	_DoInit, %function
  59              	_DoInit:
  60              	.LFB0:
  61              		.file 1 "..\\SEGGER\\SEGGER_RTT.c"
   1:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
   2:..\SEGGER/SEGGER_RTT.c **** *                     SEGGER Microcontroller GmbH                    *
   3:..\SEGGER/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:..\SEGGER/SEGGER_RTT.c **** **********************************************************************
   5:..\SEGGER/SEGGER_RTT.c **** *                                                                    *
   6:..\SEGGER/SEGGER_RTT.c **** *       (c) 1995 - 2022 SEGGER Microcontroller GmbH                  *
   7:..\SEGGER/SEGGER_RTT.c **** *                                                                    *
   8:..\SEGGER/SEGGER_RTT.c **** *       Internet: segger.com  Support: support_embos@segger.com      *
   9:..\SEGGER/SEGGER_RTT.c **** *                                                                    *
  10:..\SEGGER/SEGGER_RTT.c **** **********************************************************************
  11:..\SEGGER/SEGGER_RTT.c **** *                                                                    *
  12:..\SEGGER/SEGGER_RTT.c **** *       embOS * Real time operating system                           *
  13:..\SEGGER/SEGGER_RTT.c **** *                                                                    *
  14:..\SEGGER/SEGGER_RTT.c **** *       Please note:                                                 *
  15:..\SEGGER/SEGGER_RTT.c **** *                                                                    *
  16:..\SEGGER/SEGGER_RTT.c **** *       Knowledge of this file may under no circumstances            *
  17:..\SEGGER/SEGGER_RTT.c **** *       be used to write a similar product or a real-time            *
  18:..\SEGGER/SEGGER_RTT.c **** *       operating system for in-house use.                           *
  19:..\SEGGER/SEGGER_RTT.c **** *                                                                    *
  20:..\SEGGER/SEGGER_RTT.c **** *       Thank you for your fairness !                                *
  21:..\SEGGER/SEGGER_RTT.c **** *                                                                    *
  22:..\SEGGER/SEGGER_RTT.c **** **********************************************************************
  23:..\SEGGER/SEGGER_RTT.c **** *                                                                    *
  24:..\SEGGER/SEGGER_RTT.c **** *       OS version: V5.16.1.0                                        *
  25:..\SEGGER/SEGGER_RTT.c **** *                                                                    *
  26:..\SEGGER/SEGGER_RTT.c **** **********************************************************************
  27:..\SEGGER/SEGGER_RTT.c **** 
  28:..\SEGGER/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  29:..\SEGGER/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  30:..\SEGGER/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  31:..\SEGGER/SEGGER_RTT.c ****           allows real-time communication on targets which support
  32:..\SEGGER/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  33:..\SEGGER/SEGGER_RTT.c **** Revision: $Rev: 24715 $
  34:..\SEGGER/SEGGER_RTT.c **** 
  35:..\SEGGER/SEGGER_RTT.c **** Additional information:
  36:..\SEGGER/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  37:..\SEGGER/SEGGER_RTT.c ****           H->T    Host to target communication
  38:..\SEGGER/SEGGER_RTT.c ****           T->H    Target to host communication
  39:..\SEGGER/SEGGER_RTT.c **** 
  40:..\SEGGER/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  41:..\SEGGER/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  42:..\SEGGER/SEGGER_RTT.c **** 
  43:..\SEGGER/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  44:..\SEGGER/SEGGER_RTT.c **** 
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 3


  45:..\SEGGER/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  46:..\SEGGER/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  47:..\SEGGER/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  48:..\SEGGER/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  49:..\SEGGER/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  50:..\SEGGER/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  51:..\SEGGER/SEGGER_RTT.c **** 
  52:..\SEGGER/SEGGER_RTT.c **** 
  53:..\SEGGER/SEGGER_RTT.c **** ----------------------------------------------------------------------
  54:..\SEGGER/SEGGER_RTT.c **** */
  55:..\SEGGER/SEGGER_RTT.c **** 
  56:..\SEGGER/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  57:..\SEGGER/SEGGER_RTT.c **** 
  58:..\SEGGER/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  59:..\SEGGER/SEGGER_RTT.c **** 
  60:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
  61:..\SEGGER/SEGGER_RTT.c **** *
  62:..\SEGGER/SEGGER_RTT.c **** *       Configuration, default values
  63:..\SEGGER/SEGGER_RTT.c **** *
  64:..\SEGGER/SEGGER_RTT.c **** **********************************************************************
  65:..\SEGGER/SEGGER_RTT.c **** */
  66:..\SEGGER/SEGGER_RTT.c **** 
  67:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  68:..\SEGGER/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
  69:..\SEGGER/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  70:..\SEGGER/SEGGER_RTT.c ****   #endif
  71:..\SEGGER/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
  72:..\SEGGER/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  73:..\SEGGER/SEGGER_RTT.c ****   #endif
  74:..\SEGGER/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  75:..\SEGGER/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  76:..\SEGGER/SEGGER_RTT.c ****   #endif
  77:..\SEGGER/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  78:..\SEGGER/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
  79:..\SEGGER/SEGGER_RTT.c ****   #endif
  80:..\SEGGER/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
  81:..\SEGGER/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  82:..\SEGGER/SEGGER_RTT.c ****   #endif
  83:..\SEGGER/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
  84:..\SEGGER/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  85:..\SEGGER/SEGGER_RTT.c ****   #endif
  86:..\SEGGER/SEGGER_RTT.c **** #endif
  87:..\SEGGER/SEGGER_RTT.c **** 
  88:..\SEGGER/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
  89:..\SEGGER/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
  90:..\SEGGER/SEGGER_RTT.c **** #endif
  91:..\SEGGER/SEGGER_RTT.c **** 
  92:..\SEGGER/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
  93:..\SEGGER/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
  94:..\SEGGER/SEGGER_RTT.c **** #endif
  95:..\SEGGER/SEGGER_RTT.c **** 
  96:..\SEGGER/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
  97:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
  98:..\SEGGER/SEGGER_RTT.c **** #endif
  99:..\SEGGER/SEGGER_RTT.c **** 
 100:..\SEGGER/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 101:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 4


 102:..\SEGGER/SEGGER_RTT.c **** #endif
 103:..\SEGGER/SEGGER_RTT.c **** 
 104:..\SEGGER/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 105:..\SEGGER/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 106:..\SEGGER/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 107:..\SEGGER/SEGGER_RTT.c ****   #endif
 108:..\SEGGER/SEGGER_RTT.c **** #endif
 109:..\SEGGER/SEGGER_RTT.c **** 
 110:..\SEGGER/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 111:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 112:..\SEGGER/SEGGER_RTT.c **** #endif
 113:..\SEGGER/SEGGER_RTT.c **** 
 114:..\SEGGER/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 115:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 116:..\SEGGER/SEGGER_RTT.c **** #endif
 117:..\SEGGER/SEGGER_RTT.c **** 
 118:..\SEGGER/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 119:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 120:..\SEGGER/SEGGER_RTT.c **** #endif
 121:..\SEGGER/SEGGER_RTT.c **** 
 122:..\SEGGER/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 123:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 124:..\SEGGER/SEGGER_RTT.c **** #endif
 125:..\SEGGER/SEGGER_RTT.c **** 
 126:..\SEGGER/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 127:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 128:..\SEGGER/SEGGER_RTT.c **** #endif
 129:..\SEGGER/SEGGER_RTT.c **** 
 130:..\SEGGER/SEGGER_RTT.c **** #ifndef   STRLEN
 131:..\SEGGER/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 132:..\SEGGER/SEGGER_RTT.c **** #endif
 133:..\SEGGER/SEGGER_RTT.c **** 
 134:..\SEGGER/SEGGER_RTT.c **** #ifndef   STRCPY
 135:..\SEGGER/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 136:..\SEGGER/SEGGER_RTT.c **** #endif
 137:..\SEGGER/SEGGER_RTT.c **** 
 138:..\SEGGER/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 139:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 140:..\SEGGER/SEGGER_RTT.c **** #endif
 141:..\SEGGER/SEGGER_RTT.c **** 
 142:..\SEGGER/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 143:..\SEGGER/SEGGER_RTT.c ****   #ifdef  MEMCPY
 144:..\SEGGER/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 145:..\SEGGER/SEGGER_RTT.c ****   #else
 146:..\SEGGER/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 147:..\SEGGER/SEGGER_RTT.c ****   #endif
 148:..\SEGGER/SEGGER_RTT.c **** #endif
 149:..\SEGGER/SEGGER_RTT.c **** 
 150:..\SEGGER/SEGGER_RTT.c **** #ifndef   MIN
 151:..\SEGGER/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 152:..\SEGGER/SEGGER_RTT.c **** #endif
 153:..\SEGGER/SEGGER_RTT.c **** 
 154:..\SEGGER/SEGGER_RTT.c **** #ifndef   MAX
 155:..\SEGGER/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 156:..\SEGGER/SEGGER_RTT.c **** #endif
 157:..\SEGGER/SEGGER_RTT.c **** //
 158:..\SEGGER/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 5


 159:..\SEGGER/SEGGER_RTT.c **** //
 160:..\SEGGER/SEGGER_RTT.c **** #ifndef NULL
 161:..\SEGGER/SEGGER_RTT.c ****   #define NULL 0
 162:..\SEGGER/SEGGER_RTT.c **** #endif
 163:..\SEGGER/SEGGER_RTT.c **** 
 164:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 165:..\SEGGER/SEGGER_RTT.c **** *
 166:..\SEGGER/SEGGER_RTT.c **** *       Defines, fixed
 167:..\SEGGER/SEGGER_RTT.c **** *
 168:..\SEGGER/SEGGER_RTT.c **** **********************************************************************
 169:..\SEGGER/SEGGER_RTT.c **** */
 170:..\SEGGER/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 171:..\SEGGER/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 172:..\SEGGER/SEGGER_RTT.c **** #endif
 173:..\SEGGER/SEGGER_RTT.c **** 
 174:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 175:..\SEGGER/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 176:..\SEGGER/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 177:..\SEGGER/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 178:..\SEGGER/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 179:..\SEGGER/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 180:..\SEGGER/SEGGER_RTT.c ****                                   Var
 181:..\SEGGER/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 182:..\SEGGER/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 183:..\SEGGER/SEGGER_RTT.c ****   #else
 184:..\SEGGER/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 185:..\SEGGER/SEGGER_RTT.c ****   #endif
 186:..\SEGGER/SEGGER_RTT.c **** #else
 187:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 188:..\SEGGER/SEGGER_RTT.c **** #endif
 189:..\SEGGER/SEGGER_RTT.c **** 
 190:..\SEGGER/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 191:..\SEGGER/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 192:..\SEGGER/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 193:..\SEGGER/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 194:..\SEGGER/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 195:..\SEGGER/SEGGER_RTT.c ****                                         Var
 196:..\SEGGER/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 197:..\SEGGER/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 198:..\SEGGER/SEGGER_RTT.c ****   #else
 199:..\SEGGER/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 200:..\SEGGER/SEGGER_RTT.c ****   #endif
 201:..\SEGGER/SEGGER_RTT.c **** #else
 202:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 203:..\SEGGER/SEGGER_RTT.c **** #endif
 204:..\SEGGER/SEGGER_RTT.c **** 
 205:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 206:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 207:..\SEGGER/SEGGER_RTT.c **** #else
 208:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 209:..\SEGGER/SEGGER_RTT.c **** #endif
 210:..\SEGGER/SEGGER_RTT.c **** 
 211:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 212:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 213:..\SEGGER/SEGGER_RTT.c **** #else
 214:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 215:..\SEGGER/SEGGER_RTT.c **** #endif
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 6


 216:..\SEGGER/SEGGER_RTT.c **** 
 217:..\SEGGER/SEGGER_RTT.c **** 
 218:..\SEGGER/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 219:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 220:..\SEGGER/SEGGER_RTT.c **** #else
 221:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 222:..\SEGGER/SEGGER_RTT.c **** #endif
 223:..\SEGGER/SEGGER_RTT.c **** 
 224:..\SEGGER/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 225:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 226:..\SEGGER/SEGGER_RTT.c **** #else
 227:..\SEGGER/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 228:..\SEGGER/SEGGER_RTT.c **** #endif
 229:..\SEGGER/SEGGER_RTT.c **** 
 230:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 231:..\SEGGER/SEGGER_RTT.c **** *
 232:..\SEGGER/SEGGER_RTT.c **** *       Static const data
 233:..\SEGGER/SEGGER_RTT.c **** *
 234:..\SEGGER/SEGGER_RTT.c **** **********************************************************************
 235:..\SEGGER/SEGGER_RTT.c **** */
 236:..\SEGGER/SEGGER_RTT.c **** 
 237:..\SEGGER/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 238:..\SEGGER/SEGGER_RTT.c **** 
 239:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 240:..\SEGGER/SEGGER_RTT.c **** *
 241:..\SEGGER/SEGGER_RTT.c **** *       Static data
 242:..\SEGGER/SEGGER_RTT.c **** *
 243:..\SEGGER/SEGGER_RTT.c **** **********************************************************************
 244:..\SEGGER/SEGGER_RTT.c **** */
 245:..\SEGGER/SEGGER_RTT.c **** 
 246:..\SEGGER/SEGGER_RTT.c **** //
 247:..\SEGGER/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 248:..\SEGGER/SEGGER_RTT.c **** //
 249:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
 250:..\SEGGER/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 251:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT                                                             __attribu
 252:..\SEGGER/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)]   __attribu
 253:..\SEGGER/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)] __attribu
 254:..\SEGGER/SEGGER_RTT.c ****   #elif (defined __ICCARM__)
 255:..\SEGGER/SEGGER_RTT.c ****     RTT_PRAGMA(data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE) SEGGER_RTT_CB _SEGGER_RTT;
 256:..\SEGGER/SEGGER_RTT.c ****     RTT_PRAGMA(data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE) static char   _acUpBuffer  [SEGGER_RT
 257:..\SEGGER/SEGGER_RTT.c ****     RTT_PRAGMA(data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE) static char   _acDownBuffer[SEGGER_RT
 258:..\SEGGER/SEGGER_RTT.c ****   #else
 259:..\SEGGER/SEGGER_RTT.c ****     #error "Don't know how to place _SEGGER_RTT, _acUpBuffer, _acDownBuffer cache-line aligned"
 260:..\SEGGER/SEGGER_RTT.c ****   #endif
 261:..\SEGGER/SEGGER_RTT.c **** #else
 262:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 263:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]))
 264:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]
 265:..\SEGGER/SEGGER_RTT.c **** #endif
 266:..\SEGGER/SEGGER_RTT.c **** 
 267:..\SEGGER/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 268:..\SEGGER/SEGGER_RTT.c **** 
 269:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 270:..\SEGGER/SEGGER_RTT.c **** *
 271:..\SEGGER/SEGGER_RTT.c **** *       Static functions
 272:..\SEGGER/SEGGER_RTT.c **** *
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 7


 273:..\SEGGER/SEGGER_RTT.c **** **********************************************************************
 274:..\SEGGER/SEGGER_RTT.c **** */
 275:..\SEGGER/SEGGER_RTT.c **** 
 276:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 277:..\SEGGER/SEGGER_RTT.c **** *
 278:..\SEGGER/SEGGER_RTT.c **** *       _DoInit()
 279:..\SEGGER/SEGGER_RTT.c **** *
 280:..\SEGGER/SEGGER_RTT.c **** *  Function description
 281:..\SEGGER/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 282:..\SEGGER/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 283:..\SEGGER/SEGGER_RTT.c **** *
 284:..\SEGGER/SEGGER_RTT.c **** */
 285:..\SEGGER/SEGGER_RTT.c **** #define INIT()  {                                                                                  
 286:..\SEGGER/SEGGER_RTT.c ****                   volatile SEGGER_RTT_CB* pRTTCBInit;                                              
 287:..\SEGGER/SEGGER_RTT.c ****                   pRTTCBInit = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_
 288:..\SEGGER/SEGGER_RTT.c ****                   do {                                                                             
 289:..\SEGGER/SEGGER_RTT.c ****                     if (pRTTCBInit->acID[0] == '\0') {                                             
 290:..\SEGGER/SEGGER_RTT.c ****                       _DoInit();                                                                   
 291:..\SEGGER/SEGGER_RTT.c ****                     }                                                                              
 292:..\SEGGER/SEGGER_RTT.c ****                   } while (0);                                                                     
 293:..\SEGGER/SEGGER_RTT.c ****                 }
 294:..\SEGGER/SEGGER_RTT.c **** 
 295:..\SEGGER/SEGGER_RTT.c **** static void _DoInit(void) {
  62              		.loc 1 295 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 8
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66 0000 80B5     		push	{r7, lr}
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 0002 82B0     		sub	sp, sp, #8
  71              		.cfi_def_cfa_offset 16
  72 0004 00AF     		add	r7, sp, #0
  73              		.cfi_def_cfa_register 7
 296:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 297:..\SEGGER/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 298:..\SEGGER/SEGGER_RTT.c ****   unsigned i;
 299:..\SEGGER/SEGGER_RTT.c ****   //
 300:..\SEGGER/SEGGER_RTT.c ****   // Initialize control block
 301:..\SEGGER/SEGGER_RTT.c ****   //
 302:..\SEGGER/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);
  74              		.loc 1 302 0
  75 0006 244B     		ldr	r3, .L4
  76 0008 3B60     		str	r3, [r7]
 303:..\SEGGER/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
  77              		.loc 1 303 0
  78 000a A822     		movs	r2, #168
  79 000c 0021     		movs	r1, #0
  80 000e 3868     		ldr	r0, [r7]
  81 0010 FFF7FEFF 		bl	memset
 304:..\SEGGER/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
  82              		.loc 1 304 0
  83 0014 3B68     		ldr	r3, [r7]
  84 0016 0322     		movs	r2, #3
  85 0018 1A61     		str	r2, [r3, #16]
 305:..\SEGGER/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 8


  86              		.loc 1 305 0
  87 001a 3B68     		ldr	r3, [r7]
  88 001c 0322     		movs	r2, #3
  89 001e 5A61     		str	r2, [r3, #20]
 306:..\SEGGER/SEGGER_RTT.c ****   //
 307:..\SEGGER/SEGGER_RTT.c ****   // Initialize up buffer 0
 308:..\SEGGER/SEGGER_RTT.c ****   //
 309:..\SEGGER/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
  90              		.loc 1 309 0
  91 0020 3B68     		ldr	r3, [r7]
  92 0022 1E4A     		ldr	r2, .L4+4
  93 0024 9A61     		str	r2, [r3, #24]
 310:..\SEGGER/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
  94              		.loc 1 310 0
  95 0026 3B68     		ldr	r3, [r7]
  96 0028 1D4A     		ldr	r2, .L4+8
  97 002a DA61     		str	r2, [r3, #28]
 311:..\SEGGER/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
  98              		.loc 1 311 0
  99 002c 3B68     		ldr	r3, [r7]
 100 002e 4FF48062 		mov	r2, #1024
 101 0032 1A62     		str	r2, [r3, #32]
 312:..\SEGGER/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 102              		.loc 1 312 0
 103 0034 3B68     		ldr	r3, [r7]
 104 0036 0022     		movs	r2, #0
 105 0038 9A62     		str	r2, [r3, #40]
 313:..\SEGGER/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 106              		.loc 1 313 0
 107 003a 3B68     		ldr	r3, [r7]
 108 003c 0022     		movs	r2, #0
 109 003e 5A62     		str	r2, [r3, #36]
 314:..\SEGGER/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 110              		.loc 1 314 0
 111 0040 3B68     		ldr	r3, [r7]
 112 0042 0022     		movs	r2, #0
 113 0044 DA62     		str	r2, [r3, #44]
 315:..\SEGGER/SEGGER_RTT.c ****   //
 316:..\SEGGER/SEGGER_RTT.c ****   // Initialize down buffer 0
 317:..\SEGGER/SEGGER_RTT.c ****   //
 318:..\SEGGER/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 114              		.loc 1 318 0
 115 0046 3B68     		ldr	r3, [r7]
 116 0048 144A     		ldr	r2, .L4+4
 117 004a 1A66     		str	r2, [r3, #96]
 319:..\SEGGER/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 118              		.loc 1 319 0
 119 004c 3B68     		ldr	r3, [r7]
 120 004e 154A     		ldr	r2, .L4+12
 121 0050 5A66     		str	r2, [r3, #100]
 320:..\SEGGER/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 122              		.loc 1 320 0
 123 0052 3B68     		ldr	r3, [r7]
 124 0054 1022     		movs	r2, #16
 125 0056 9A66     		str	r2, [r3, #104]
 321:..\SEGGER/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 126              		.loc 1 321 0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 9


 127 0058 3B68     		ldr	r3, [r7]
 128 005a 0022     		movs	r2, #0
 129 005c 1A67     		str	r2, [r3, #112]
 322:..\SEGGER/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 130              		.loc 1 322 0
 131 005e 3B68     		ldr	r3, [r7]
 132 0060 0022     		movs	r2, #0
 133 0062 DA66     		str	r2, [r3, #108]
 323:..\SEGGER/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 134              		.loc 1 323 0
 135 0064 3B68     		ldr	r3, [r7]
 136 0066 0022     		movs	r2, #0
 137 0068 5A67     		str	r2, [r3, #116]
 324:..\SEGGER/SEGGER_RTT.c ****   //
 325:..\SEGGER/SEGGER_RTT.c ****   // Finish initialization of the control block.
 326:..\SEGGER/SEGGER_RTT.c ****   // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (us
 327:..\SEGGER/SEGGER_RTT.c ****   // as this would cause J-Link to "find" the control block at a wrong address.
 328:..\SEGGER/SEGGER_RTT.c ****   //
 329:..\SEGGER/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 330:..\SEGGER/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 138              		.loc 1 330 0
 139 006a 0023     		movs	r3, #0
 140 006c 7B60     		str	r3, [r7, #4]
 141 006e 0CE0     		b	.L2
 142              	.L3:
 331:..\SEGGER/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 143              		.loc 1 331 0 discriminator 3
 144 0070 7B68     		ldr	r3, [r7, #4]
 145 0072 C3F10F03 		rsb	r3, r3, #15
 146 0076 0C4A     		ldr	r2, .L4+16
 147 0078 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 148 007a 3A68     		ldr	r2, [r7]
 149 007c 7B68     		ldr	r3, [r7, #4]
 150 007e 1344     		add	r3, r3, r2
 151 0080 0A46     		mov	r2, r1
 152 0082 1A70     		strb	r2, [r3]
 330:..\SEGGER/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 153              		.loc 1 330 0 discriminator 3
 154 0084 7B68     		ldr	r3, [r7, #4]
 155 0086 0133     		adds	r3, r3, #1
 156 0088 7B60     		str	r3, [r7, #4]
 157              	.L2:
 330:..\SEGGER/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 158              		.loc 1 330 0 is_stmt 0 discriminator 1
 159 008a 7B68     		ldr	r3, [r7, #4]
 160 008c 0F2B     		cmp	r3, #15
 161 008e EFD9     		bls	.L3
 332:..\SEGGER/SEGGER_RTT.c ****   }
 333:..\SEGGER/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 334:..\SEGGER/SEGGER_RTT.c **** }
 162              		.loc 1 334 0 is_stmt 1
 163 0090 00BF     		nop
 164 0092 0837     		adds	r7, r7, #8
 165              		.cfi_def_cfa_offset 8
 166 0094 BD46     		mov	sp, r7
 167              		.cfi_def_cfa_register 13
 168              		@ sp needed
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 10


 169 0096 80BD     		pop	{r7, pc}
 170              	.L5:
 171              		.align	2
 172              	.L4:
 173 0098 00000000 		.word	_SEGGER_RTT
 174 009c 00000000 		.word	.LC0
 175 00a0 00000000 		.word	_acUpBuffer
 176 00a4 00040000 		.word	_acDownBuffer
 177 00a8 0C000000 		.word	_aInitStr.5095
 178              		.cfi_endproc
 179              	.LFE0:
 180              		.size	_DoInit, .-_DoInit
 181              		.section	.text._WriteBlocking,"ax",%progbits
 182              		.align	2
 183              		.thumb
 184              		.thumb_func
 185              		.type	_WriteBlocking, %function
 186              	_WriteBlocking:
 187              	.LFB1:
 335:..\SEGGER/SEGGER_RTT.c **** 
 336:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 337:..\SEGGER/SEGGER_RTT.c **** *
 338:..\SEGGER/SEGGER_RTT.c **** *       _WriteBlocking()
 339:..\SEGGER/SEGGER_RTT.c **** *
 340:..\SEGGER/SEGGER_RTT.c **** *  Function description
 341:..\SEGGER/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 342:..\SEGGER/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 343:..\SEGGER/SEGGER_RTT.c **** *    read by the host.
 344:..\SEGGER/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 345:..\SEGGER/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 346:..\SEGGER/SEGGER_RTT.c **** *
 347:..\SEGGER/SEGGER_RTT.c **** *  Parameters
 348:..\SEGGER/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 349:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 350:..\SEGGER/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 351:..\SEGGER/SEGGER_RTT.c **** *
 352:..\SEGGER/SEGGER_RTT.c **** *  Return value
 353:..\SEGGER/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 354:..\SEGGER/SEGGER_RTT.c **** */
 355:..\SEGGER/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 188              		.loc 1 355 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 40
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 80B5     		push	{r7, lr}
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 196 0002 8AB0     		sub	sp, sp, #40
 197              		.cfi_def_cfa_offset 48
 198 0004 00AF     		add	r7, sp, #0
 199              		.cfi_def_cfa_register 7
 200 0006 F860     		str	r0, [r7, #12]
 201 0008 B960     		str	r1, [r7, #8]
 202 000a 7A60     		str	r2, [r7, #4]
 356:..\SEGGER/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 357:..\SEGGER/SEGGER_RTT.c ****   unsigned NumBytesWritten;
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 11


 358:..\SEGGER/SEGGER_RTT.c ****   unsigned RdOff;
 359:..\SEGGER/SEGGER_RTT.c ****   unsigned WrOff;
 360:..\SEGGER/SEGGER_RTT.c ****   volatile char* pDst;
 361:..\SEGGER/SEGGER_RTT.c ****   //
 362:..\SEGGER/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 363:..\SEGGER/SEGGER_RTT.c ****   //
 364:..\SEGGER/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 203              		.loc 1 364 0
 204 000c 0023     		movs	r3, #0
 205 000e 3B62     		str	r3, [r7, #32]
 365:..\SEGGER/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 206              		.loc 1 365 0
 207 0010 FB68     		ldr	r3, [r7, #12]
 208 0012 DB68     		ldr	r3, [r3, #12]
 209 0014 FB61     		str	r3, [r7, #28]
 210              	.L10:
 366:..\SEGGER/SEGGER_RTT.c ****   do {
 367:..\SEGGER/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 211              		.loc 1 367 0
 212 0016 FB68     		ldr	r3, [r7, #12]
 213 0018 1B69     		ldr	r3, [r3, #16]
 214 001a BB61     		str	r3, [r7, #24]
 368:..\SEGGER/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 215              		.loc 1 368 0
 216 001c BA69     		ldr	r2, [r7, #24]
 217 001e FB69     		ldr	r3, [r7, #28]
 218 0020 9A42     		cmp	r2, r3
 219 0022 05D9     		bls	.L7
 369:..\SEGGER/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 220              		.loc 1 369 0
 221 0024 BA69     		ldr	r2, [r7, #24]
 222 0026 FB69     		ldr	r3, [r7, #28]
 223 0028 D31A     		subs	r3, r2, r3
 224 002a 013B     		subs	r3, r3, #1
 225 002c 7B62     		str	r3, [r7, #36]
 226 002e 07E0     		b	.L8
 227              	.L7:
 370:..\SEGGER/SEGGER_RTT.c ****     } else {
 371:..\SEGGER/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 228              		.loc 1 371 0
 229 0030 FB68     		ldr	r3, [r7, #12]
 230 0032 9A68     		ldr	r2, [r3, #8]
 231 0034 B969     		ldr	r1, [r7, #24]
 232 0036 FB69     		ldr	r3, [r7, #28]
 233 0038 CB1A     		subs	r3, r1, r3
 234 003a 1344     		add	r3, r3, r2
 235 003c 013B     		subs	r3, r3, #1
 236 003e 7B62     		str	r3, [r7, #36]
 237              	.L8:
 372:..\SEGGER/SEGGER_RTT.c ****     }
 373:..\SEGGER/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 238              		.loc 1 373 0
 239 0040 FB68     		ldr	r3, [r7, #12]
 240 0042 9A68     		ldr	r2, [r3, #8]
 241 0044 FB69     		ldr	r3, [r7, #28]
 242 0046 D31A     		subs	r3, r2, r3
 243 0048 7A6A     		ldr	r2, [r7, #36]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 12


 244 004a 9342     		cmp	r3, r2
 245 004c 28BF     		it	cs
 246 004e 1346     		movcs	r3, r2
 247 0050 7B62     		str	r3, [r7, #36]
 374:..\SEGGER/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 248              		.loc 1 374 0
 249 0052 7A6A     		ldr	r2, [r7, #36]
 250 0054 7B68     		ldr	r3, [r7, #4]
 251 0056 9342     		cmp	r3, r2
 252 0058 28BF     		it	cs
 253 005a 1346     		movcs	r3, r2
 254 005c 7B62     		str	r3, [r7, #36]
 375:..\SEGGER/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 255              		.loc 1 375 0
 256 005e FB68     		ldr	r3, [r7, #12]
 257 0060 5A68     		ldr	r2, [r3, #4]
 258 0062 FB69     		ldr	r3, [r7, #28]
 259 0064 1344     		add	r3, r3, r2
 260 0066 7B61     		str	r3, [r7, #20]
 376:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 377:..\SEGGER/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 378:..\SEGGER/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 379:..\SEGGER/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 380:..\SEGGER/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 381:..\SEGGER/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 382:..\SEGGER/SEGGER_RTT.c ****     };
 383:..\SEGGER/SEGGER_RTT.c **** #else
 384:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 261              		.loc 1 384 0
 262 0068 7A6A     		ldr	r2, [r7, #36]
 263 006a B968     		ldr	r1, [r7, #8]
 264 006c 7869     		ldr	r0, [r7, #20]
 265 006e FFF7FEFF 		bl	memcpy
 385:..\SEGGER/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 266              		.loc 1 385 0
 267 0072 3A6A     		ldr	r2, [r7, #32]
 268 0074 7B6A     		ldr	r3, [r7, #36]
 269 0076 1344     		add	r3, r3, r2
 270 0078 3B62     		str	r3, [r7, #32]
 386:..\SEGGER/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 271              		.loc 1 386 0
 272 007a BA68     		ldr	r2, [r7, #8]
 273 007c 7B6A     		ldr	r3, [r7, #36]
 274 007e 1344     		add	r3, r3, r2
 275 0080 BB60     		str	r3, [r7, #8]
 387:..\SEGGER/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 276              		.loc 1 387 0
 277 0082 7A68     		ldr	r2, [r7, #4]
 278 0084 7B6A     		ldr	r3, [r7, #36]
 279 0086 D31A     		subs	r3, r2, r3
 280 0088 7B60     		str	r3, [r7, #4]
 388:..\SEGGER/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 281              		.loc 1 388 0
 282 008a FA69     		ldr	r2, [r7, #28]
 283 008c 7B6A     		ldr	r3, [r7, #36]
 284 008e 1344     		add	r3, r3, r2
 285 0090 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 13


 389:..\SEGGER/SEGGER_RTT.c **** #endif
 390:..\SEGGER/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 286              		.loc 1 390 0
 287 0092 FB68     		ldr	r3, [r7, #12]
 288 0094 9A68     		ldr	r2, [r3, #8]
 289 0096 FB69     		ldr	r3, [r7, #28]
 290 0098 9A42     		cmp	r2, r3
 291 009a 01D1     		bne	.L9
 391:..\SEGGER/SEGGER_RTT.c ****       WrOff = 0u;
 292              		.loc 1 391 0
 293 009c 0023     		movs	r3, #0
 294 009e FB61     		str	r3, [r7, #28]
 295              	.L9:
 392:..\SEGGER/SEGGER_RTT.c ****     }
 393:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 394:..\SEGGER/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 296              		.loc 1 394 0
 297 00a0 FB68     		ldr	r3, [r7, #12]
 298 00a2 FA69     		ldr	r2, [r7, #28]
 299 00a4 DA60     		str	r2, [r3, #12]
 395:..\SEGGER/SEGGER_RTT.c ****   } while (NumBytes);
 300              		.loc 1 395 0
 301 00a6 7B68     		ldr	r3, [r7, #4]
 302 00a8 002B     		cmp	r3, #0
 303 00aa B4D1     		bne	.L10
 396:..\SEGGER/SEGGER_RTT.c ****   return NumBytesWritten;
 304              		.loc 1 396 0
 305 00ac 3B6A     		ldr	r3, [r7, #32]
 397:..\SEGGER/SEGGER_RTT.c **** }
 306              		.loc 1 397 0
 307 00ae 1846     		mov	r0, r3
 308 00b0 2837     		adds	r7, r7, #40
 309              		.cfi_def_cfa_offset 8
 310 00b2 BD46     		mov	sp, r7
 311              		.cfi_def_cfa_register 13
 312              		@ sp needed
 313 00b4 80BD     		pop	{r7, pc}
 314              		.cfi_endproc
 315              	.LFE1:
 316              		.size	_WriteBlocking, .-_WriteBlocking
 317 00b6 00BF     		.section	.text._WriteNoCheck,"ax",%progbits
 318              		.align	2
 319              		.thumb
 320              		.thumb_func
 321              		.type	_WriteNoCheck, %function
 322              	_WriteNoCheck:
 323              	.LFB2:
 398:..\SEGGER/SEGGER_RTT.c **** 
 399:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 400:..\SEGGER/SEGGER_RTT.c **** *
 401:..\SEGGER/SEGGER_RTT.c **** *       _WriteNoCheck()
 402:..\SEGGER/SEGGER_RTT.c **** *
 403:..\SEGGER/SEGGER_RTT.c **** *  Function description
 404:..\SEGGER/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 405:..\SEGGER/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 406:..\SEGGER/SEGGER_RTT.c **** *    read by the host.
 407:..\SEGGER/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 14


 408:..\SEGGER/SEGGER_RTT.c **** *
 409:..\SEGGER/SEGGER_RTT.c **** *  Parameters
 410:..\SEGGER/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 411:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 412:..\SEGGER/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 413:..\SEGGER/SEGGER_RTT.c **** *
 414:..\SEGGER/SEGGER_RTT.c **** *  Notes
 415:..\SEGGER/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 416:..\SEGGER/SEGGER_RTT.c **** */
 417:..\SEGGER/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 324              		.loc 1 417 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 32
 327              		@ frame_needed = 1, uses_anonymous_args = 0
 328 0000 80B5     		push	{r7, lr}
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 7, -8
 331              		.cfi_offset 14, -4
 332 0002 88B0     		sub	sp, sp, #32
 333              		.cfi_def_cfa_offset 40
 334 0004 00AF     		add	r7, sp, #0
 335              		.cfi_def_cfa_register 7
 336 0006 F860     		str	r0, [r7, #12]
 337 0008 B960     		str	r1, [r7, #8]
 338 000a 7A60     		str	r2, [r7, #4]
 418:..\SEGGER/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 419:..\SEGGER/SEGGER_RTT.c ****   unsigned WrOff;
 420:..\SEGGER/SEGGER_RTT.c ****   unsigned Rem;
 421:..\SEGGER/SEGGER_RTT.c ****   volatile char* pDst;
 422:..\SEGGER/SEGGER_RTT.c **** 
 423:..\SEGGER/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 339              		.loc 1 423 0
 340 000c FB68     		ldr	r3, [r7, #12]
 341 000e DB68     		ldr	r3, [r3, #12]
 342 0010 FB61     		str	r3, [r7, #28]
 424:..\SEGGER/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 343              		.loc 1 424 0
 344 0012 FB68     		ldr	r3, [r7, #12]
 345 0014 9A68     		ldr	r2, [r3, #8]
 346 0016 FB69     		ldr	r3, [r7, #28]
 347 0018 D31A     		subs	r3, r2, r3
 348 001a BB61     		str	r3, [r7, #24]
 425:..\SEGGER/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 349              		.loc 1 425 0
 350 001c BA69     		ldr	r2, [r7, #24]
 351 001e 7B68     		ldr	r3, [r7, #4]
 352 0020 9A42     		cmp	r2, r3
 353 0022 0FD9     		bls	.L13
 426:..\SEGGER/SEGGER_RTT.c ****     //
 427:..\SEGGER/SEGGER_RTT.c ****     // All data fits before wrap around
 428:..\SEGGER/SEGGER_RTT.c ****     //
 429:..\SEGGER/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 354              		.loc 1 429 0
 355 0024 FB68     		ldr	r3, [r7, #12]
 356 0026 5A68     		ldr	r2, [r3, #4]
 357 0028 FB69     		ldr	r3, [r7, #28]
 358 002a 1344     		add	r3, r3, r2
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 15


 359 002c 7B61     		str	r3, [r7, #20]
 430:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 431:..\SEGGER/SEGGER_RTT.c ****     WrOff += NumBytes;
 432:..\SEGGER/SEGGER_RTT.c ****     while (NumBytes--) {
 433:..\SEGGER/SEGGER_RTT.c ****       *pDst++ = *pData++;
 434:..\SEGGER/SEGGER_RTT.c ****     };
 435:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 436:..\SEGGER/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 437:..\SEGGER/SEGGER_RTT.c **** #else
 438:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 360              		.loc 1 438 0
 361 002e 7A68     		ldr	r2, [r7, #4]
 362 0030 B968     		ldr	r1, [r7, #8]
 363 0032 7869     		ldr	r0, [r7, #20]
 364 0034 FFF7FEFF 		bl	memcpy
 439:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 440:..\SEGGER/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 365              		.loc 1 440 0
 366 0038 FA69     		ldr	r2, [r7, #28]
 367 003a 7B68     		ldr	r3, [r7, #4]
 368 003c 1A44     		add	r2, r2, r3
 369 003e FB68     		ldr	r3, [r7, #12]
 370 0040 DA60     		str	r2, [r3, #12]
 441:..\SEGGER/SEGGER_RTT.c **** #endif
 442:..\SEGGER/SEGGER_RTT.c ****   } else {
 443:..\SEGGER/SEGGER_RTT.c ****     //
 444:..\SEGGER/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 445:..\SEGGER/SEGGER_RTT.c ****     //
 446:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 447:..\SEGGER/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 448:..\SEGGER/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 449:..\SEGGER/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 450:..\SEGGER/SEGGER_RTT.c ****       *pDst++ = *pData++;
 451:..\SEGGER/SEGGER_RTT.c ****     };
 452:..\SEGGER/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 453:..\SEGGER/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 454:..\SEGGER/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 455:..\SEGGER/SEGGER_RTT.c ****       *pDst++ = *pData++;
 456:..\SEGGER/SEGGER_RTT.c ****     };
 457:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 458:..\SEGGER/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 459:..\SEGGER/SEGGER_RTT.c **** #else
 460:..\SEGGER/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 461:..\SEGGER/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 462:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 463:..\SEGGER/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 464:..\SEGGER/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 465:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 466:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 467:..\SEGGER/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 468:..\SEGGER/SEGGER_RTT.c **** #endif
 469:..\SEGGER/SEGGER_RTT.c ****   }
 470:..\SEGGER/SEGGER_RTT.c **** }
 371              		.loc 1 470 0
 372 0042 1DE0     		b	.L15
 373              	.L13:
 460:..\SEGGER/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 16


 374              		.loc 1 460 0
 375 0044 BB69     		ldr	r3, [r7, #24]
 376 0046 3B61     		str	r3, [r7, #16]
 461:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 377              		.loc 1 461 0
 378 0048 FB68     		ldr	r3, [r7, #12]
 379 004a 5A68     		ldr	r2, [r3, #4]
 380 004c FB69     		ldr	r3, [r7, #28]
 381 004e 1344     		add	r3, r3, r2
 382 0050 7B61     		str	r3, [r7, #20]
 462:..\SEGGER/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 383              		.loc 1 462 0
 384 0052 3A69     		ldr	r2, [r7, #16]
 385 0054 B968     		ldr	r1, [r7, #8]
 386 0056 7869     		ldr	r0, [r7, #20]
 387 0058 FFF7FEFF 		bl	memcpy
 463:..\SEGGER/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 388              		.loc 1 463 0
 389 005c 7A68     		ldr	r2, [r7, #4]
 390 005e BB69     		ldr	r3, [r7, #24]
 391 0060 D31A     		subs	r3, r2, r3
 392 0062 3B61     		str	r3, [r7, #16]
 464:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 393              		.loc 1 464 0
 394 0064 FB68     		ldr	r3, [r7, #12]
 395 0066 5B68     		ldr	r3, [r3, #4]
 396 0068 7B61     		str	r3, [r7, #20]
 465:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 397              		.loc 1 465 0
 398 006a BA68     		ldr	r2, [r7, #8]
 399 006c BB69     		ldr	r3, [r7, #24]
 400 006e 1344     		add	r3, r3, r2
 401 0070 3A69     		ldr	r2, [r7, #16]
 402 0072 1946     		mov	r1, r3
 403 0074 7869     		ldr	r0, [r7, #20]
 404 0076 FFF7FEFF 		bl	memcpy
 467:..\SEGGER/SEGGER_RTT.c **** #endif
 405              		.loc 1 467 0
 406 007a FB68     		ldr	r3, [r7, #12]
 407 007c 3A69     		ldr	r2, [r7, #16]
 408 007e DA60     		str	r2, [r3, #12]
 409              	.L15:
 410              		.loc 1 470 0
 411 0080 00BF     		nop
 412 0082 2037     		adds	r7, r7, #32
 413              		.cfi_def_cfa_offset 8
 414 0084 BD46     		mov	sp, r7
 415              		.cfi_def_cfa_register 13
 416              		@ sp needed
 417 0086 80BD     		pop	{r7, pc}
 418              		.cfi_endproc
 419              	.LFE2:
 420              		.size	_WriteNoCheck, .-_WriteNoCheck
 421              		.section	.text._PostTerminalSwitch,"ax",%progbits
 422              		.align	2
 423              		.thumb
 424              		.thumb_func
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 17


 425              		.type	_PostTerminalSwitch, %function
 426              	_PostTerminalSwitch:
 427              	.LFB3:
 471:..\SEGGER/SEGGER_RTT.c **** 
 472:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 473:..\SEGGER/SEGGER_RTT.c **** *
 474:..\SEGGER/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 475:..\SEGGER/SEGGER_RTT.c **** *
 476:..\SEGGER/SEGGER_RTT.c **** *  Function description
 477:..\SEGGER/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 478:..\SEGGER/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 479:..\SEGGER/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 480:..\SEGGER/SEGGER_RTT.c **** *
 481:..\SEGGER/SEGGER_RTT.c **** *  Parameters
 482:..\SEGGER/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 483:..\SEGGER/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 484:..\SEGGER/SEGGER_RTT.c **** */
 485:..\SEGGER/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 428              		.loc 1 485 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 16
 431              		@ frame_needed = 1, uses_anonymous_args = 0
 432 0000 80B5     		push	{r7, lr}
 433              		.cfi_def_cfa_offset 8
 434              		.cfi_offset 7, -8
 435              		.cfi_offset 14, -4
 436 0002 84B0     		sub	sp, sp, #16
 437              		.cfi_def_cfa_offset 24
 438 0004 00AF     		add	r7, sp, #0
 439              		.cfi_def_cfa_register 7
 440 0006 7860     		str	r0, [r7, #4]
 441 0008 0B46     		mov	r3, r1
 442 000a FB70     		strb	r3, [r7, #3]
 486:..\SEGGER/SEGGER_RTT.c ****   unsigned char ac[2];
 487:..\SEGGER/SEGGER_RTT.c **** 
 488:..\SEGGER/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 443              		.loc 1 488 0
 444 000c FF23     		movs	r3, #255
 445 000e 3B73     		strb	r3, [r7, #12]
 489:..\SEGGER/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 446              		.loc 1 489 0
 447 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 448 0012 074A     		ldr	r2, .L17
 449 0014 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 450 0016 7B73     		strb	r3, [r7, #13]
 490:..\SEGGER/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 451              		.loc 1 490 0
 452 0018 07F10C03 		add	r3, r7, #12
 453 001c 0222     		movs	r2, #2
 454 001e 1946     		mov	r1, r3
 455 0020 7868     		ldr	r0, [r7, #4]
 456 0022 FFF7FEFF 		bl	_WriteBlocking
 491:..\SEGGER/SEGGER_RTT.c **** }
 457              		.loc 1 491 0
 458 0026 00BF     		nop
 459 0028 1037     		adds	r7, r7, #16
 460              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 18


 461 002a BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 002c 80BD     		pop	{r7, pc}
 465              	.L18:
 466 002e 00BF     		.align	2
 467              	.L17:
 468 0030 00000000 		.word	_aTerminalId
 469              		.cfi_endproc
 470              	.LFE3:
 471              		.size	_PostTerminalSwitch, .-_PostTerminalSwitch
 472              		.section	.text._GetAvailWriteSpace,"ax",%progbits
 473              		.align	2
 474              		.thumb
 475              		.thumb_func
 476              		.type	_GetAvailWriteSpace, %function
 477              	_GetAvailWriteSpace:
 478              	.LFB4:
 492:..\SEGGER/SEGGER_RTT.c **** 
 493:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 494:..\SEGGER/SEGGER_RTT.c **** *
 495:..\SEGGER/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 496:..\SEGGER/SEGGER_RTT.c **** *
 497:..\SEGGER/SEGGER_RTT.c **** *  Function description
 498:..\SEGGER/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 499:..\SEGGER/SEGGER_RTT.c **** *    buffer without blocking.
 500:..\SEGGER/SEGGER_RTT.c **** *
 501:..\SEGGER/SEGGER_RTT.c **** *  Parameters
 502:..\SEGGER/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 503:..\SEGGER/SEGGER_RTT.c **** *
 504:..\SEGGER/SEGGER_RTT.c **** *  Return value
 505:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 506:..\SEGGER/SEGGER_RTT.c **** */
 507:..\SEGGER/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 479              		.loc 1 507 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 24
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484 0000 80B4     		push	{r7}
 485              		.cfi_def_cfa_offset 4
 486              		.cfi_offset 7, -4
 487 0002 87B0     		sub	sp, sp, #28
 488              		.cfi_def_cfa_offset 32
 489 0004 00AF     		add	r7, sp, #0
 490              		.cfi_def_cfa_register 7
 491 0006 7860     		str	r0, [r7, #4]
 508:..\SEGGER/SEGGER_RTT.c ****   unsigned RdOff;
 509:..\SEGGER/SEGGER_RTT.c ****   unsigned WrOff;
 510:..\SEGGER/SEGGER_RTT.c ****   unsigned r;
 511:..\SEGGER/SEGGER_RTT.c ****   //
 512:..\SEGGER/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 513:..\SEGGER/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 514:..\SEGGER/SEGGER_RTT.c ****   //
 515:..\SEGGER/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 492              		.loc 1 515 0
 493 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 19


 494 000a 1B69     		ldr	r3, [r3, #16]
 495 000c 3B61     		str	r3, [r7, #16]
 516:..\SEGGER/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 496              		.loc 1 516 0
 497 000e 7B68     		ldr	r3, [r7, #4]
 498 0010 DB68     		ldr	r3, [r3, #12]
 499 0012 FB60     		str	r3, [r7, #12]
 517:..\SEGGER/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 500              		.loc 1 517 0
 501 0014 3A69     		ldr	r2, [r7, #16]
 502 0016 FB68     		ldr	r3, [r7, #12]
 503 0018 9A42     		cmp	r2, r3
 504 001a 08D8     		bhi	.L20
 518:..\SEGGER/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 505              		.loc 1 518 0
 506 001c 7B68     		ldr	r3, [r7, #4]
 507 001e 9A68     		ldr	r2, [r3, #8]
 508 0020 FB68     		ldr	r3, [r7, #12]
 509 0022 D21A     		subs	r2, r2, r3
 510 0024 3B69     		ldr	r3, [r7, #16]
 511 0026 1344     		add	r3, r3, r2
 512 0028 013B     		subs	r3, r3, #1
 513 002a 7B61     		str	r3, [r7, #20]
 514 002c 04E0     		b	.L21
 515              	.L20:
 519:..\SEGGER/SEGGER_RTT.c ****   } else {
 520:..\SEGGER/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
 516              		.loc 1 520 0
 517 002e 3A69     		ldr	r2, [r7, #16]
 518 0030 FB68     		ldr	r3, [r7, #12]
 519 0032 D31A     		subs	r3, r2, r3
 520 0034 013B     		subs	r3, r3, #1
 521 0036 7B61     		str	r3, [r7, #20]
 522              	.L21:
 521:..\SEGGER/SEGGER_RTT.c ****   }
 522:..\SEGGER/SEGGER_RTT.c ****   return r;
 523              		.loc 1 522 0
 524 0038 7B69     		ldr	r3, [r7, #20]
 523:..\SEGGER/SEGGER_RTT.c **** }
 525              		.loc 1 523 0
 526 003a 1846     		mov	r0, r3
 527 003c 1C37     		adds	r7, r7, #28
 528              		.cfi_def_cfa_offset 4
 529 003e BD46     		mov	sp, r7
 530              		.cfi_def_cfa_register 13
 531              		@ sp needed
 532 0040 80BC     		pop	{r7}
 533              		.cfi_restore 7
 534              		.cfi_def_cfa_offset 0
 535 0042 7047     		bx	lr
 536              		.cfi_endproc
 537              	.LFE4:
 538              		.size	_GetAvailWriteSpace, .-_GetAvailWriteSpace
 539              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 540              		.align	2
 541              		.global	SEGGER_RTT_ReadUpBufferNoLock
 542              		.thumb
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 20


 543              		.thumb_func
 544              		.type	SEGGER_RTT_ReadUpBufferNoLock, %function
 545              	SEGGER_RTT_ReadUpBufferNoLock:
 546              	.LFB5:
 524:..\SEGGER/SEGGER_RTT.c **** 
 525:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 526:..\SEGGER/SEGGER_RTT.c **** *
 527:..\SEGGER/SEGGER_RTT.c **** *       Public code
 528:..\SEGGER/SEGGER_RTT.c **** *
 529:..\SEGGER/SEGGER_RTT.c **** **********************************************************************
 530:..\SEGGER/SEGGER_RTT.c **** */
 531:..\SEGGER/SEGGER_RTT.c **** 
 532:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 533:..\SEGGER/SEGGER_RTT.c **** *
 534:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 535:..\SEGGER/SEGGER_RTT.c **** *
 536:..\SEGGER/SEGGER_RTT.c **** *  Function description
 537:..\SEGGER/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 538:..\SEGGER/SEGGER_RTT.c **** *    which have been previously stored by the application.
 539:..\SEGGER/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 540:..\SEGGER/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 541:..\SEGGER/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 542:..\SEGGER/SEGGER_RTT.c **** *
 543:..\SEGGER/SEGGER_RTT.c **** *  Parameters
 544:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 545:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 546:..\SEGGER/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 547:..\SEGGER/SEGGER_RTT.c **** *
 548:..\SEGGER/SEGGER_RTT.c **** *  Return value
 549:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes that have been read.
 550:..\SEGGER/SEGGER_RTT.c **** *
 551:..\SEGGER/SEGGER_RTT.c **** *  Additional information
 552:..\SEGGER/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 553:..\SEGGER/SEGGER_RTT.c **** */
 554:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 547              		.loc 1 554 0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 48
 550              		@ frame_needed = 1, uses_anonymous_args = 0
 551 0000 80B5     		push	{r7, lr}
 552              		.cfi_def_cfa_offset 8
 553              		.cfi_offset 7, -8
 554              		.cfi_offset 14, -4
 555 0002 8CB0     		sub	sp, sp, #48
 556              		.cfi_def_cfa_offset 56
 557 0004 00AF     		add	r7, sp, #0
 558              		.cfi_def_cfa_register 7
 559 0006 F860     		str	r0, [r7, #12]
 560 0008 B960     		str	r1, [r7, #8]
 561 000a 7A60     		str	r2, [r7, #4]
 562              	.LBB2:
 555:..\SEGGER/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 556:..\SEGGER/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 557:..\SEGGER/SEGGER_RTT.c ****   unsigned                RdOff;
 558:..\SEGGER/SEGGER_RTT.c ****   unsigned                WrOff;
 559:..\SEGGER/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 560:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 21


 561:..\SEGGER/SEGGER_RTT.c ****   volatile char*          pSrc;
 562:..\SEGGER/SEGGER_RTT.c **** 
 563:..\SEGGER/SEGGER_RTT.c ****   INIT();
 563              		.loc 1 563 0
 564 000c 3E4B     		ldr	r3, .L29
 565 000e 3B62     		str	r3, [r7, #32]
 566 0010 3B6A     		ldr	r3, [r7, #32]
 567 0012 1B78     		ldrb	r3, [r3]
 568 0014 DBB2     		uxtb	r3, r3
 569 0016 002B     		cmp	r3, #0
 570 0018 01D1     		bne	.L24
 571              		.loc 1 563 0 is_stmt 0 discriminator 1
 572 001a FFF7FEFF 		bl	_DoInit
 573              	.L24:
 574              	.LBE2:
 564:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 575              		.loc 1 564 0 is_stmt 1
 576 001e FB68     		ldr	r3, [r7, #12]
 577 0020 5A1C     		adds	r2, r3, #1
 578 0022 1346     		mov	r3, r2
 579 0024 5B00     		lsls	r3, r3, #1
 580 0026 1344     		add	r3, r3, r2
 581 0028 DB00     		lsls	r3, r3, #3
 582 002a 374A     		ldr	r2, .L29
 583 002c 1344     		add	r3, r3, r2
 584 002e FB61     		str	r3, [r7, #28]
 565:..\SEGGER/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 585              		.loc 1 565 0
 586 0030 BB68     		ldr	r3, [r7, #8]
 587 0032 7B62     		str	r3, [r7, #36]
 566:..\SEGGER/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 588              		.loc 1 566 0
 589 0034 FB69     		ldr	r3, [r7, #28]
 590 0036 1B69     		ldr	r3, [r3, #16]
 591 0038 BB62     		str	r3, [r7, #40]
 567:..\SEGGER/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 592              		.loc 1 567 0
 593 003a FB69     		ldr	r3, [r7, #28]
 594 003c DB68     		ldr	r3, [r3, #12]
 595 003e BB61     		str	r3, [r7, #24]
 568:..\SEGGER/SEGGER_RTT.c ****   NumBytesRead = 0u;
 596              		.loc 1 568 0
 597 0040 0023     		movs	r3, #0
 598 0042 FB62     		str	r3, [r7, #44]
 569:..\SEGGER/SEGGER_RTT.c ****   //
 570:..\SEGGER/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 571:..\SEGGER/SEGGER_RTT.c ****   //
 572:..\SEGGER/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 599              		.loc 1 572 0
 600 0044 BA6A     		ldr	r2, [r7, #40]
 601 0046 BB69     		ldr	r3, [r7, #24]
 602 0048 9A42     		cmp	r2, r3
 603 004a 2BD9     		bls	.L25
 573:..\SEGGER/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 604              		.loc 1 573 0
 605 004c FB69     		ldr	r3, [r7, #28]
 606 004e 9A68     		ldr	r2, [r3, #8]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 22


 607 0050 BB6A     		ldr	r3, [r7, #40]
 608 0052 D31A     		subs	r3, r2, r3
 609 0054 7B61     		str	r3, [r7, #20]
 574:..\SEGGER/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 610              		.loc 1 574 0
 611 0056 7A69     		ldr	r2, [r7, #20]
 612 0058 7B68     		ldr	r3, [r7, #4]
 613 005a 9342     		cmp	r3, r2
 614 005c 28BF     		it	cs
 615 005e 1346     		movcs	r3, r2
 616 0060 7B61     		str	r3, [r7, #20]
 575:..\SEGGER/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 617              		.loc 1 575 0
 618 0062 FB69     		ldr	r3, [r7, #28]
 619 0064 5A68     		ldr	r2, [r3, #4]
 620 0066 BB6A     		ldr	r3, [r7, #40]
 621 0068 1344     		add	r3, r3, r2
 622 006a 3B61     		str	r3, [r7, #16]
 576:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 577:..\SEGGER/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 578:..\SEGGER/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 579:..\SEGGER/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 580:..\SEGGER/SEGGER_RTT.c ****     while (NumBytesRem--) {
 581:..\SEGGER/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 582:..\SEGGER/SEGGER_RTT.c ****     };
 583:..\SEGGER/SEGGER_RTT.c **** #else
 584:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 623              		.loc 1 584 0
 624 006c 7A69     		ldr	r2, [r7, #20]
 625 006e 3969     		ldr	r1, [r7, #16]
 626 0070 786A     		ldr	r0, [r7, #36]
 627 0072 FFF7FEFF 		bl	memcpy
 585:..\SEGGER/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 628              		.loc 1 585 0
 629 0076 FA6A     		ldr	r2, [r7, #44]
 630 0078 7B69     		ldr	r3, [r7, #20]
 631 007a 1344     		add	r3, r3, r2
 632 007c FB62     		str	r3, [r7, #44]
 586:..\SEGGER/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 633              		.loc 1 586 0
 634 007e 7A6A     		ldr	r2, [r7, #36]
 635 0080 7B69     		ldr	r3, [r7, #20]
 636 0082 1344     		add	r3, r3, r2
 637 0084 7B62     		str	r3, [r7, #36]
 587:..\SEGGER/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 638              		.loc 1 587 0
 639 0086 7A68     		ldr	r2, [r7, #4]
 640 0088 7B69     		ldr	r3, [r7, #20]
 641 008a D31A     		subs	r3, r2, r3
 642 008c 7B60     		str	r3, [r7, #4]
 588:..\SEGGER/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 643              		.loc 1 588 0
 644 008e BA6A     		ldr	r2, [r7, #40]
 645 0090 7B69     		ldr	r3, [r7, #20]
 646 0092 1344     		add	r3, r3, r2
 647 0094 BB62     		str	r3, [r7, #40]
 589:..\SEGGER/SEGGER_RTT.c **** #endif
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 23


 590:..\SEGGER/SEGGER_RTT.c ****     //
 591:..\SEGGER/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 592:..\SEGGER/SEGGER_RTT.c ****     //
 593:..\SEGGER/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 648              		.loc 1 593 0
 649 0096 FB69     		ldr	r3, [r7, #28]
 650 0098 9A68     		ldr	r2, [r3, #8]
 651 009a BB6A     		ldr	r3, [r7, #40]
 652 009c 9A42     		cmp	r2, r3
 653 009e 01D1     		bne	.L25
 594:..\SEGGER/SEGGER_RTT.c ****       RdOff = 0u;
 654              		.loc 1 594 0
 655 00a0 0023     		movs	r3, #0
 656 00a2 BB62     		str	r3, [r7, #40]
 657              	.L25:
 595:..\SEGGER/SEGGER_RTT.c ****     }
 596:..\SEGGER/SEGGER_RTT.c ****   }
 597:..\SEGGER/SEGGER_RTT.c ****   //
 598:..\SEGGER/SEGGER_RTT.c ****   // Read remaining items of buffer
 599:..\SEGGER/SEGGER_RTT.c ****   //
 600:..\SEGGER/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 658              		.loc 1 600 0
 659 00a4 BA69     		ldr	r2, [r7, #24]
 660 00a6 BB6A     		ldr	r3, [r7, #40]
 661 00a8 D31A     		subs	r3, r2, r3
 662 00aa 7B61     		str	r3, [r7, #20]
 601:..\SEGGER/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 663              		.loc 1 601 0
 664 00ac 7A69     		ldr	r2, [r7, #20]
 665 00ae 7B68     		ldr	r3, [r7, #4]
 666 00b0 9342     		cmp	r3, r2
 667 00b2 28BF     		it	cs
 668 00b4 1346     		movcs	r3, r2
 669 00b6 7B61     		str	r3, [r7, #20]
 602:..\SEGGER/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 670              		.loc 1 602 0
 671 00b8 7B69     		ldr	r3, [r7, #20]
 672 00ba 002B     		cmp	r3, #0
 673 00bc 19D0     		beq	.L26
 603:..\SEGGER/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 674              		.loc 1 603 0
 675 00be FB69     		ldr	r3, [r7, #28]
 676 00c0 5A68     		ldr	r2, [r3, #4]
 677 00c2 BB6A     		ldr	r3, [r7, #40]
 678 00c4 1344     		add	r3, r3, r2
 679 00c6 3B61     		str	r3, [r7, #16]
 604:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 605:..\SEGGER/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 606:..\SEGGER/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 607:..\SEGGER/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 608:..\SEGGER/SEGGER_RTT.c ****     while (NumBytesRem--) {
 609:..\SEGGER/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 610:..\SEGGER/SEGGER_RTT.c ****     };
 611:..\SEGGER/SEGGER_RTT.c **** #else
 612:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 680              		.loc 1 612 0
 681 00c8 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 24


 682 00ca 3969     		ldr	r1, [r7, #16]
 683 00cc 786A     		ldr	r0, [r7, #36]
 684 00ce FFF7FEFF 		bl	memcpy
 613:..\SEGGER/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 685              		.loc 1 613 0
 686 00d2 FA6A     		ldr	r2, [r7, #44]
 687 00d4 7B69     		ldr	r3, [r7, #20]
 688 00d6 1344     		add	r3, r3, r2
 689 00d8 FB62     		str	r3, [r7, #44]
 614:..\SEGGER/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 690              		.loc 1 614 0
 691 00da 7A6A     		ldr	r2, [r7, #36]
 692 00dc 7B69     		ldr	r3, [r7, #20]
 693 00de 1344     		add	r3, r3, r2
 694 00e0 7B62     		str	r3, [r7, #36]
 615:..\SEGGER/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 695              		.loc 1 615 0
 696 00e2 7A68     		ldr	r2, [r7, #4]
 697 00e4 7B69     		ldr	r3, [r7, #20]
 698 00e6 D31A     		subs	r3, r2, r3
 699 00e8 7B60     		str	r3, [r7, #4]
 616:..\SEGGER/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 700              		.loc 1 616 0
 701 00ea BA6A     		ldr	r2, [r7, #40]
 702 00ec 7B69     		ldr	r3, [r7, #20]
 703 00ee 1344     		add	r3, r3, r2
 704 00f0 BB62     		str	r3, [r7, #40]
 705              	.L26:
 617:..\SEGGER/SEGGER_RTT.c **** #endif
 618:..\SEGGER/SEGGER_RTT.c ****   }
 619:..\SEGGER/SEGGER_RTT.c ****   //
 620:..\SEGGER/SEGGER_RTT.c ****   // Update read offset of buffer
 621:..\SEGGER/SEGGER_RTT.c ****   //
 622:..\SEGGER/SEGGER_RTT.c ****   if (NumBytesRead) {
 706              		.loc 1 622 0
 707 00f2 FB6A     		ldr	r3, [r7, #44]
 708 00f4 002B     		cmp	r3, #0
 709 00f6 02D0     		beq	.L27
 623:..\SEGGER/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 710              		.loc 1 623 0
 711 00f8 FB69     		ldr	r3, [r7, #28]
 712 00fa BA6A     		ldr	r2, [r7, #40]
 713 00fc 1A61     		str	r2, [r3, #16]
 714              	.L27:
 624:..\SEGGER/SEGGER_RTT.c ****   }
 625:..\SEGGER/SEGGER_RTT.c ****   //
 626:..\SEGGER/SEGGER_RTT.c ****   return NumBytesRead;
 715              		.loc 1 626 0
 716 00fe FB6A     		ldr	r3, [r7, #44]
 627:..\SEGGER/SEGGER_RTT.c **** }
 717              		.loc 1 627 0
 718 0100 1846     		mov	r0, r3
 719 0102 3037     		adds	r7, r7, #48
 720              		.cfi_def_cfa_offset 8
 721 0104 BD46     		mov	sp, r7
 722              		.cfi_def_cfa_register 13
 723              		@ sp needed
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 25


 724 0106 80BD     		pop	{r7, pc}
 725              	.L30:
 726              		.align	2
 727              	.L29:
 728 0108 00000000 		.word	_SEGGER_RTT
 729              		.cfi_endproc
 730              	.LFE5:
 731              		.size	SEGGER_RTT_ReadUpBufferNoLock, .-SEGGER_RTT_ReadUpBufferNoLock
 732              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 733              		.align	2
 734              		.global	SEGGER_RTT_ReadNoLock
 735              		.thumb
 736              		.thumb_func
 737              		.type	SEGGER_RTT_ReadNoLock, %function
 738              	SEGGER_RTT_ReadNoLock:
 739              	.LFB6:
 628:..\SEGGER/SEGGER_RTT.c **** 
 629:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 630:..\SEGGER/SEGGER_RTT.c **** *
 631:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 632:..\SEGGER/SEGGER_RTT.c **** *
 633:..\SEGGER/SEGGER_RTT.c **** *  Function description
 634:..\SEGGER/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 635:..\SEGGER/SEGGER_RTT.c **** *    which have been previously stored by the host.
 636:..\SEGGER/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 637:..\SEGGER/SEGGER_RTT.c **** *
 638:..\SEGGER/SEGGER_RTT.c **** *  Parameters
 639:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 640:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 641:..\SEGGER/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 642:..\SEGGER/SEGGER_RTT.c **** *
 643:..\SEGGER/SEGGER_RTT.c **** *  Return value
 644:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes that have been read.
 645:..\SEGGER/SEGGER_RTT.c **** */
 646:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 740              		.loc 1 646 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 48
 743              		@ frame_needed = 1, uses_anonymous_args = 0
 744 0000 80B5     		push	{r7, lr}
 745              		.cfi_def_cfa_offset 8
 746              		.cfi_offset 7, -8
 747              		.cfi_offset 14, -4
 748 0002 8CB0     		sub	sp, sp, #48
 749              		.cfi_def_cfa_offset 56
 750 0004 00AF     		add	r7, sp, #0
 751              		.cfi_def_cfa_register 7
 752 0006 F860     		str	r0, [r7, #12]
 753 0008 B960     		str	r1, [r7, #8]
 754 000a 7A60     		str	r2, [r7, #4]
 755              	.LBB3:
 647:..\SEGGER/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 648:..\SEGGER/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 649:..\SEGGER/SEGGER_RTT.c ****   unsigned                RdOff;
 650:..\SEGGER/SEGGER_RTT.c ****   unsigned                WrOff;
 651:..\SEGGER/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 652:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 26


 653:..\SEGGER/SEGGER_RTT.c ****   volatile char*          pSrc;
 654:..\SEGGER/SEGGER_RTT.c ****   //
 655:..\SEGGER/SEGGER_RTT.c ****   INIT();
 756              		.loc 1 655 0
 757 000c 3E4B     		ldr	r3, .L37
 758 000e 3B62     		str	r3, [r7, #32]
 759 0010 3B6A     		ldr	r3, [r7, #32]
 760 0012 1B78     		ldrb	r3, [r3]
 761 0014 DBB2     		uxtb	r3, r3
 762 0016 002B     		cmp	r3, #0
 763 0018 01D1     		bne	.L32
 764              		.loc 1 655 0 is_stmt 0 discriminator 1
 765 001a FFF7FEFF 		bl	_DoInit
 766              	.L32:
 767              	.LBE3:
 656:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 768              		.loc 1 656 0 is_stmt 1
 769 001e FA68     		ldr	r2, [r7, #12]
 770 0020 1346     		mov	r3, r2
 771 0022 5B00     		lsls	r3, r3, #1
 772 0024 1344     		add	r3, r3, r2
 773 0026 DB00     		lsls	r3, r3, #3
 774 0028 6033     		adds	r3, r3, #96
 775 002a 374A     		ldr	r2, .L37
 776 002c 1344     		add	r3, r3, r2
 777 002e FB61     		str	r3, [r7, #28]
 657:..\SEGGER/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 778              		.loc 1 657 0
 779 0030 BB68     		ldr	r3, [r7, #8]
 780 0032 7B62     		str	r3, [r7, #36]
 658:..\SEGGER/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 781              		.loc 1 658 0
 782 0034 FB69     		ldr	r3, [r7, #28]
 783 0036 1B69     		ldr	r3, [r3, #16]
 784 0038 BB62     		str	r3, [r7, #40]
 659:..\SEGGER/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 785              		.loc 1 659 0
 786 003a FB69     		ldr	r3, [r7, #28]
 787 003c DB68     		ldr	r3, [r3, #12]
 788 003e BB61     		str	r3, [r7, #24]
 660:..\SEGGER/SEGGER_RTT.c ****   NumBytesRead = 0u;
 789              		.loc 1 660 0
 790 0040 0023     		movs	r3, #0
 791 0042 FB62     		str	r3, [r7, #44]
 661:..\SEGGER/SEGGER_RTT.c ****   //
 662:..\SEGGER/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 663:..\SEGGER/SEGGER_RTT.c ****   //
 664:..\SEGGER/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 792              		.loc 1 664 0
 793 0044 BA6A     		ldr	r2, [r7, #40]
 794 0046 BB69     		ldr	r3, [r7, #24]
 795 0048 9A42     		cmp	r2, r3
 796 004a 2BD9     		bls	.L33
 665:..\SEGGER/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 797              		.loc 1 665 0
 798 004c FB69     		ldr	r3, [r7, #28]
 799 004e 9A68     		ldr	r2, [r3, #8]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 27


 800 0050 BB6A     		ldr	r3, [r7, #40]
 801 0052 D31A     		subs	r3, r2, r3
 802 0054 7B61     		str	r3, [r7, #20]
 666:..\SEGGER/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 803              		.loc 1 666 0
 804 0056 7A69     		ldr	r2, [r7, #20]
 805 0058 7B68     		ldr	r3, [r7, #4]
 806 005a 9342     		cmp	r3, r2
 807 005c 28BF     		it	cs
 808 005e 1346     		movcs	r3, r2
 809 0060 7B61     		str	r3, [r7, #20]
 667:..\SEGGER/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 810              		.loc 1 667 0
 811 0062 FB69     		ldr	r3, [r7, #28]
 812 0064 5A68     		ldr	r2, [r3, #4]
 813 0066 BB6A     		ldr	r3, [r7, #40]
 814 0068 1344     		add	r3, r3, r2
 815 006a 3B61     		str	r3, [r7, #16]
 668:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 669:..\SEGGER/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 670:..\SEGGER/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 671:..\SEGGER/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 672:..\SEGGER/SEGGER_RTT.c ****     while (NumBytesRem--) {
 673:..\SEGGER/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 674:..\SEGGER/SEGGER_RTT.c ****     };
 675:..\SEGGER/SEGGER_RTT.c **** #else
 676:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 816              		.loc 1 676 0
 817 006c 7A69     		ldr	r2, [r7, #20]
 818 006e 3969     		ldr	r1, [r7, #16]
 819 0070 786A     		ldr	r0, [r7, #36]
 820 0072 FFF7FEFF 		bl	memcpy
 677:..\SEGGER/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 821              		.loc 1 677 0
 822 0076 FA6A     		ldr	r2, [r7, #44]
 823 0078 7B69     		ldr	r3, [r7, #20]
 824 007a 1344     		add	r3, r3, r2
 825 007c FB62     		str	r3, [r7, #44]
 678:..\SEGGER/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 826              		.loc 1 678 0
 827 007e 7A6A     		ldr	r2, [r7, #36]
 828 0080 7B69     		ldr	r3, [r7, #20]
 829 0082 1344     		add	r3, r3, r2
 830 0084 7B62     		str	r3, [r7, #36]
 679:..\SEGGER/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 831              		.loc 1 679 0
 832 0086 7A68     		ldr	r2, [r7, #4]
 833 0088 7B69     		ldr	r3, [r7, #20]
 834 008a D31A     		subs	r3, r2, r3
 835 008c 7B60     		str	r3, [r7, #4]
 680:..\SEGGER/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 836              		.loc 1 680 0
 837 008e BA6A     		ldr	r2, [r7, #40]
 838 0090 7B69     		ldr	r3, [r7, #20]
 839 0092 1344     		add	r3, r3, r2
 840 0094 BB62     		str	r3, [r7, #40]
 681:..\SEGGER/SEGGER_RTT.c **** #endif
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 28


 682:..\SEGGER/SEGGER_RTT.c ****     //
 683:..\SEGGER/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 684:..\SEGGER/SEGGER_RTT.c ****     //
 685:..\SEGGER/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 841              		.loc 1 685 0
 842 0096 FB69     		ldr	r3, [r7, #28]
 843 0098 9A68     		ldr	r2, [r3, #8]
 844 009a BB6A     		ldr	r3, [r7, #40]
 845 009c 9A42     		cmp	r2, r3
 846 009e 01D1     		bne	.L33
 686:..\SEGGER/SEGGER_RTT.c ****       RdOff = 0u;
 847              		.loc 1 686 0
 848 00a0 0023     		movs	r3, #0
 849 00a2 BB62     		str	r3, [r7, #40]
 850              	.L33:
 687:..\SEGGER/SEGGER_RTT.c ****     }
 688:..\SEGGER/SEGGER_RTT.c ****   }
 689:..\SEGGER/SEGGER_RTT.c ****   //
 690:..\SEGGER/SEGGER_RTT.c ****   // Read remaining items of buffer
 691:..\SEGGER/SEGGER_RTT.c ****   //
 692:..\SEGGER/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 851              		.loc 1 692 0
 852 00a4 BA69     		ldr	r2, [r7, #24]
 853 00a6 BB6A     		ldr	r3, [r7, #40]
 854 00a8 D31A     		subs	r3, r2, r3
 855 00aa 7B61     		str	r3, [r7, #20]
 693:..\SEGGER/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 856              		.loc 1 693 0
 857 00ac 7A69     		ldr	r2, [r7, #20]
 858 00ae 7B68     		ldr	r3, [r7, #4]
 859 00b0 9342     		cmp	r3, r2
 860 00b2 28BF     		it	cs
 861 00b4 1346     		movcs	r3, r2
 862 00b6 7B61     		str	r3, [r7, #20]
 694:..\SEGGER/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 863              		.loc 1 694 0
 864 00b8 7B69     		ldr	r3, [r7, #20]
 865 00ba 002B     		cmp	r3, #0
 866 00bc 19D0     		beq	.L34
 695:..\SEGGER/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 867              		.loc 1 695 0
 868 00be FB69     		ldr	r3, [r7, #28]
 869 00c0 5A68     		ldr	r2, [r3, #4]
 870 00c2 BB6A     		ldr	r3, [r7, #40]
 871 00c4 1344     		add	r3, r3, r2
 872 00c6 3B61     		str	r3, [r7, #16]
 696:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 697:..\SEGGER/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 698:..\SEGGER/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 699:..\SEGGER/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 700:..\SEGGER/SEGGER_RTT.c ****     while (NumBytesRem--) {
 701:..\SEGGER/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 702:..\SEGGER/SEGGER_RTT.c ****     };
 703:..\SEGGER/SEGGER_RTT.c **** #else
 704:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 873              		.loc 1 704 0
 874 00c8 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 29


 875 00ca 3969     		ldr	r1, [r7, #16]
 876 00cc 786A     		ldr	r0, [r7, #36]
 877 00ce FFF7FEFF 		bl	memcpy
 705:..\SEGGER/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 878              		.loc 1 705 0
 879 00d2 FA6A     		ldr	r2, [r7, #44]
 880 00d4 7B69     		ldr	r3, [r7, #20]
 881 00d6 1344     		add	r3, r3, r2
 882 00d8 FB62     		str	r3, [r7, #44]
 706:..\SEGGER/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 883              		.loc 1 706 0
 884 00da 7A6A     		ldr	r2, [r7, #36]
 885 00dc 7B69     		ldr	r3, [r7, #20]
 886 00de 1344     		add	r3, r3, r2
 887 00e0 7B62     		str	r3, [r7, #36]
 707:..\SEGGER/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 888              		.loc 1 707 0
 889 00e2 7A68     		ldr	r2, [r7, #4]
 890 00e4 7B69     		ldr	r3, [r7, #20]
 891 00e6 D31A     		subs	r3, r2, r3
 892 00e8 7B60     		str	r3, [r7, #4]
 708:..\SEGGER/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 893              		.loc 1 708 0
 894 00ea BA6A     		ldr	r2, [r7, #40]
 895 00ec 7B69     		ldr	r3, [r7, #20]
 896 00ee 1344     		add	r3, r3, r2
 897 00f0 BB62     		str	r3, [r7, #40]
 898              	.L34:
 709:..\SEGGER/SEGGER_RTT.c **** #endif
 710:..\SEGGER/SEGGER_RTT.c ****   }
 711:..\SEGGER/SEGGER_RTT.c ****   if (NumBytesRead) {
 899              		.loc 1 711 0
 900 00f2 FB6A     		ldr	r3, [r7, #44]
 901 00f4 002B     		cmp	r3, #0
 902 00f6 02D0     		beq	.L35
 712:..\SEGGER/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 903              		.loc 1 712 0
 904 00f8 FB69     		ldr	r3, [r7, #28]
 905 00fa BA6A     		ldr	r2, [r7, #40]
 906 00fc 1A61     		str	r2, [r3, #16]
 907              	.L35:
 713:..\SEGGER/SEGGER_RTT.c ****   }
 714:..\SEGGER/SEGGER_RTT.c ****   //
 715:..\SEGGER/SEGGER_RTT.c ****   return NumBytesRead;
 908              		.loc 1 715 0
 909 00fe FB6A     		ldr	r3, [r7, #44]
 716:..\SEGGER/SEGGER_RTT.c **** }
 910              		.loc 1 716 0
 911 0100 1846     		mov	r0, r3
 912 0102 3037     		adds	r7, r7, #48
 913              		.cfi_def_cfa_offset 8
 914 0104 BD46     		mov	sp, r7
 915              		.cfi_def_cfa_register 13
 916              		@ sp needed
 917 0106 80BD     		pop	{r7, pc}
 918              	.L38:
 919              		.align	2
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 30


 920              	.L37:
 921 0108 00000000 		.word	_SEGGER_RTT
 922              		.cfi_endproc
 923              	.LFE6:
 924              		.size	SEGGER_RTT_ReadNoLock, .-SEGGER_RTT_ReadNoLock
 925              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 926              		.align	2
 927              		.global	SEGGER_RTT_ReadUpBuffer
 928              		.thumb
 929              		.thumb_func
 930              		.type	SEGGER_RTT_ReadUpBuffer, %function
 931              	SEGGER_RTT_ReadUpBuffer:
 932              	.LFB7:
 717:..\SEGGER/SEGGER_RTT.c **** 
 718:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 719:..\SEGGER/SEGGER_RTT.c **** *
 720:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 721:..\SEGGER/SEGGER_RTT.c **** *
 722:..\SEGGER/SEGGER_RTT.c **** *  Function description
 723:..\SEGGER/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 724:..\SEGGER/SEGGER_RTT.c **** *    which have been previously stored by the application.
 725:..\SEGGER/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 726:..\SEGGER/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 727:..\SEGGER/SEGGER_RTT.c **** *
 728:..\SEGGER/SEGGER_RTT.c **** *  Parameters
 729:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 730:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 731:..\SEGGER/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 732:..\SEGGER/SEGGER_RTT.c **** *
 733:..\SEGGER/SEGGER_RTT.c **** *  Return value
 734:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes that have been read.
 735:..\SEGGER/SEGGER_RTT.c **** *
 736:..\SEGGER/SEGGER_RTT.c **** *  Additional information
 737:..\SEGGER/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 738:..\SEGGER/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 739:..\SEGGER/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 740:..\SEGGER/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer, 
 741:..\SEGGER/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 742:..\SEGGER/SEGGER_RTT.c **** */
 743:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 933              		.loc 1 743 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 24
 936              		@ frame_needed = 1, uses_anonymous_args = 0
 937 0000 80B5     		push	{r7, lr}
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 86B0     		sub	sp, sp, #24
 942              		.cfi_def_cfa_offset 32
 943 0004 00AF     		add	r7, sp, #0
 944              		.cfi_def_cfa_register 7
 945 0006 F860     		str	r0, [r7, #12]
 946 0008 B960     		str	r1, [r7, #8]
 947 000a 7A60     		str	r2, [r7, #4]
 948              	.LBB4:
 744:..\SEGGER/SEGGER_RTT.c ****   unsigned NumBytesRead;
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 31


 745:..\SEGGER/SEGGER_RTT.c **** 
 746:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 949              		.loc 1 746 0
 950              		.syntax unified
 951              	@ 746 "..\SEGGER\SEGGER_RTT.c" 1
 952 000c EFF31183 		mrs   r3, basepri  
 953 0010 4FF02001 		mov   r1, #32       
 954 0014 81F31188 		msr   basepri, r1  
 955              		
 956              	@ 0 "" 2
 957              		.thumb
 958              		.syntax unified
 959 0018 7B61     		str	r3, [r7, #20]
 747:..\SEGGER/SEGGER_RTT.c ****   //
 748:..\SEGGER/SEGGER_RTT.c ****   // Call the non-locking read function
 749:..\SEGGER/SEGGER_RTT.c ****   //
 750:..\SEGGER/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 960              		.loc 1 750 0
 961 001a 7A68     		ldr	r2, [r7, #4]
 962 001c B968     		ldr	r1, [r7, #8]
 963 001e F868     		ldr	r0, [r7, #12]
 964 0020 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 965 0024 3861     		str	r0, [r7, #16]
 751:..\SEGGER/SEGGER_RTT.c ****   //
 752:..\SEGGER/SEGGER_RTT.c ****   // Finish up.
 753:..\SEGGER/SEGGER_RTT.c ****   //
 754:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 966              		.loc 1 754 0
 967 0026 7B69     		ldr	r3, [r7, #20]
 968              		.syntax unified
 969              	@ 754 "..\SEGGER\SEGGER_RTT.c" 1
 970 0028 83F31188 		msr   basepri, r3  
 971              		
 972              	@ 0 "" 2
 973              		.thumb
 974              		.syntax unified
 975              	.LBE4:
 755:..\SEGGER/SEGGER_RTT.c ****   //
 756:..\SEGGER/SEGGER_RTT.c ****   return NumBytesRead;
 976              		.loc 1 756 0
 977 002c 3B69     		ldr	r3, [r7, #16]
 757:..\SEGGER/SEGGER_RTT.c **** }
 978              		.loc 1 757 0
 979 002e 1846     		mov	r0, r3
 980 0030 1837     		adds	r7, r7, #24
 981              		.cfi_def_cfa_offset 8
 982 0032 BD46     		mov	sp, r7
 983              		.cfi_def_cfa_register 13
 984              		@ sp needed
 985 0034 80BD     		pop	{r7, pc}
 986              		.cfi_endproc
 987              	.LFE7:
 988              		.size	SEGGER_RTT_ReadUpBuffer, .-SEGGER_RTT_ReadUpBuffer
 989 0036 00BF     		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 990              		.align	2
 991              		.global	SEGGER_RTT_Read
 992              		.thumb
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 32


 993              		.thumb_func
 994              		.type	SEGGER_RTT_Read, %function
 995              	SEGGER_RTT_Read:
 996              	.LFB8:
 758:..\SEGGER/SEGGER_RTT.c **** 
 759:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 760:..\SEGGER/SEGGER_RTT.c **** *
 761:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 762:..\SEGGER/SEGGER_RTT.c **** *
 763:..\SEGGER/SEGGER_RTT.c **** *  Function description
 764:..\SEGGER/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 765:..\SEGGER/SEGGER_RTT.c **** *    which have been previously stored by the host.
 766:..\SEGGER/SEGGER_RTT.c **** *
 767:..\SEGGER/SEGGER_RTT.c **** *  Parameters
 768:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 769:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 770:..\SEGGER/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 771:..\SEGGER/SEGGER_RTT.c **** *
 772:..\SEGGER/SEGGER_RTT.c **** *  Return value
 773:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes that have been read.
 774:..\SEGGER/SEGGER_RTT.c **** */
 775:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 997              		.loc 1 775 0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 24
 1000              		@ frame_needed = 1, uses_anonymous_args = 0
 1001 0000 80B5     		push	{r7, lr}
 1002              		.cfi_def_cfa_offset 8
 1003              		.cfi_offset 7, -8
 1004              		.cfi_offset 14, -4
 1005 0002 86B0     		sub	sp, sp, #24
 1006              		.cfi_def_cfa_offset 32
 1007 0004 00AF     		add	r7, sp, #0
 1008              		.cfi_def_cfa_register 7
 1009 0006 F860     		str	r0, [r7, #12]
 1010 0008 B960     		str	r1, [r7, #8]
 1011 000a 7A60     		str	r2, [r7, #4]
 1012              	.LBB5:
 776:..\SEGGER/SEGGER_RTT.c ****   unsigned NumBytesRead;
 777:..\SEGGER/SEGGER_RTT.c **** 
 778:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1013              		.loc 1 778 0
 1014              		.syntax unified
 1015              	@ 778 "..\SEGGER\SEGGER_RTT.c" 1
 1016 000c EFF31183 		mrs   r3, basepri  
 1017 0010 4FF02001 		mov   r1, #32       
 1018 0014 81F31188 		msr   basepri, r1  
 1019              		
 1020              	@ 0 "" 2
 1021              		.thumb
 1022              		.syntax unified
 1023 0018 7B61     		str	r3, [r7, #20]
 779:..\SEGGER/SEGGER_RTT.c ****   //
 780:..\SEGGER/SEGGER_RTT.c ****   // Call the non-locking read function
 781:..\SEGGER/SEGGER_RTT.c ****   //
 782:..\SEGGER/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 1024              		.loc 1 782 0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 33


 1025 001a 7A68     		ldr	r2, [r7, #4]
 1026 001c B968     		ldr	r1, [r7, #8]
 1027 001e F868     		ldr	r0, [r7, #12]
 1028 0020 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 1029 0024 3861     		str	r0, [r7, #16]
 783:..\SEGGER/SEGGER_RTT.c ****   //
 784:..\SEGGER/SEGGER_RTT.c ****   // Finish up.
 785:..\SEGGER/SEGGER_RTT.c ****   //
 786:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1030              		.loc 1 786 0
 1031 0026 7B69     		ldr	r3, [r7, #20]
 1032              		.syntax unified
 1033              	@ 786 "..\SEGGER\SEGGER_RTT.c" 1
 1034 0028 83F31188 		msr   basepri, r3  
 1035              		
 1036              	@ 0 "" 2
 1037              		.thumb
 1038              		.syntax unified
 1039              	.LBE5:
 787:..\SEGGER/SEGGER_RTT.c ****   //
 788:..\SEGGER/SEGGER_RTT.c ****   return NumBytesRead;
 1040              		.loc 1 788 0
 1041 002c 3B69     		ldr	r3, [r7, #16]
 789:..\SEGGER/SEGGER_RTT.c **** }
 1042              		.loc 1 789 0
 1043 002e 1846     		mov	r0, r3
 1044 0030 1837     		adds	r7, r7, #24
 1045              		.cfi_def_cfa_offset 8
 1046 0032 BD46     		mov	sp, r7
 1047              		.cfi_def_cfa_register 13
 1048              		@ sp needed
 1049 0034 80BD     		pop	{r7, pc}
 1050              		.cfi_endproc
 1051              	.LFE8:
 1052              		.size	SEGGER_RTT_Read, .-SEGGER_RTT_Read
 1053 0036 00BF     		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 1054              		.align	2
 1055              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 1056              		.thumb
 1057              		.thumb_func
 1058              		.type	SEGGER_RTT_WriteWithOverwriteNoLock, %function
 1059              	SEGGER_RTT_WriteWithOverwriteNoLock:
 1060              	.LFB9:
 790:..\SEGGER/SEGGER_RTT.c **** 
 791:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 792:..\SEGGER/SEGGER_RTT.c **** *
 793:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 794:..\SEGGER/SEGGER_RTT.c **** *
 795:..\SEGGER/SEGGER_RTT.c **** *  Function description
 796:..\SEGGER/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 797:..\SEGGER/SEGGER_RTT.c **** *    control block.
 798:..\SEGGER/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 799:..\SEGGER/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 800:..\SEGGER/SEGGER_RTT.c **** *
 801:..\SEGGER/SEGGER_RTT.c **** *  Parameters
 802:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 803:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 34


 804:..\SEGGER/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 805:..\SEGGER/SEGGER_RTT.c **** *
 806:..\SEGGER/SEGGER_RTT.c **** *  Notes
 807:..\SEGGER/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 808:..\SEGGER/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 809:..\SEGGER/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 810:..\SEGGER/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 811:..\SEGGER/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 812:..\SEGGER/SEGGER_RTT.c **** *        connection reads RTT data.
 813:..\SEGGER/SEGGER_RTT.c **** */
 814:..\SEGGER/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 1061              		.loc 1 814 0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 32
 1064              		@ frame_needed = 1, uses_anonymous_args = 0
 1065 0000 80B5     		push	{r7, lr}
 1066              		.cfi_def_cfa_offset 8
 1067              		.cfi_offset 7, -8
 1068              		.cfi_offset 14, -4
 1069 0002 88B0     		sub	sp, sp, #32
 1070              		.cfi_def_cfa_offset 40
 1071 0004 00AF     		add	r7, sp, #0
 1072              		.cfi_def_cfa_register 7
 1073 0006 F860     		str	r0, [r7, #12]
 1074 0008 B960     		str	r1, [r7, #8]
 1075 000a 7A60     		str	r2, [r7, #4]
 815:..\SEGGER/SEGGER_RTT.c ****   const char*           pData;
 816:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 817:..\SEGGER/SEGGER_RTT.c ****   unsigned              Avail;
 818:..\SEGGER/SEGGER_RTT.c ****   volatile char*        pDst;
 819:..\SEGGER/SEGGER_RTT.c ****   //
 820:..\SEGGER/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 821:..\SEGGER/SEGGER_RTT.c ****   //
 822:..\SEGGER/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1076              		.loc 1 822 0
 1077 000c BB68     		ldr	r3, [r7, #8]
 1078 000e FB61     		str	r3, [r7, #28]
 823:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1079              		.loc 1 823 0
 1080 0010 FB68     		ldr	r3, [r7, #12]
 1081 0012 5A1C     		adds	r2, r3, #1
 1082 0014 1346     		mov	r3, r2
 1083 0016 5B00     		lsls	r3, r3, #1
 1084 0018 1344     		add	r3, r3, r2
 1085 001a DB00     		lsls	r3, r3, #3
 1086 001c 3E4A     		ldr	r2, .L53
 1087 001e 1344     		add	r3, r3, r2
 1088 0020 7B61     		str	r3, [r7, #20]
 824:..\SEGGER/SEGGER_RTT.c ****   //
 825:..\SEGGER/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 826:..\SEGGER/SEGGER_RTT.c ****   //
 827:..\SEGGER/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1089              		.loc 1 827 0
 1090 0022 7B69     		ldr	r3, [r7, #20]
 1091 0024 DA68     		ldr	r2, [r3, #12]
 1092 0026 7B69     		ldr	r3, [r7, #20]
 1093 0028 1B69     		ldr	r3, [r3, #16]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 35


 1094 002a 9A42     		cmp	r2, r3
 1095 002c 04D1     		bne	.L44
 828:..\SEGGER/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1096              		.loc 1 828 0
 1097 002e 7B69     		ldr	r3, [r7, #20]
 1098 0030 9B68     		ldr	r3, [r3, #8]
 1099 0032 013B     		subs	r3, r3, #1
 1100 0034 BB61     		str	r3, [r7, #24]
 1101 0036 17E0     		b	.L45
 1102              	.L44:
 829:..\SEGGER/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1103              		.loc 1 829 0
 1104 0038 7B69     		ldr	r3, [r7, #20]
 1105 003a DA68     		ldr	r2, [r3, #12]
 1106 003c 7B69     		ldr	r3, [r7, #20]
 1107 003e 1B69     		ldr	r3, [r3, #16]
 1108 0040 9A42     		cmp	r2, r3
 1109 0042 07D2     		bcs	.L46
 830:..\SEGGER/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1110              		.loc 1 830 0
 1111 0044 7B69     		ldr	r3, [r7, #20]
 1112 0046 1A69     		ldr	r2, [r3, #16]
 1113 0048 7B69     		ldr	r3, [r7, #20]
 1114 004a DB68     		ldr	r3, [r3, #12]
 1115 004c D31A     		subs	r3, r2, r3
 1116 004e 013B     		subs	r3, r3, #1
 1117 0050 BB61     		str	r3, [r7, #24]
 1118 0052 09E0     		b	.L45
 1119              	.L46:
 831:..\SEGGER/SEGGER_RTT.c ****   } else {
 832:..\SEGGER/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 1120              		.loc 1 832 0
 1121 0054 7B69     		ldr	r3, [r7, #20]
 1122 0056 1A69     		ldr	r2, [r3, #16]
 1123 0058 7B69     		ldr	r3, [r7, #20]
 1124 005a DB68     		ldr	r3, [r3, #12]
 1125 005c D21A     		subs	r2, r2, r3
 1126 005e 7B69     		ldr	r3, [r7, #20]
 1127 0060 9B68     		ldr	r3, [r3, #8]
 1128 0062 1344     		add	r3, r3, r2
 1129 0064 013B     		subs	r3, r3, #1
 1130 0066 BB61     		str	r3, [r7, #24]
 1131              	.L45:
 833:..\SEGGER/SEGGER_RTT.c ****   }
 834:..\SEGGER/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1132              		.loc 1 834 0
 1133 0068 7A68     		ldr	r2, [r7, #4]
 1134 006a BB69     		ldr	r3, [r7, #24]
 1135 006c 9A42     		cmp	r2, r3
 1136 006e 15D9     		bls	.L47
 835:..\SEGGER/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1137              		.loc 1 835 0
 1138 0070 7B69     		ldr	r3, [r7, #20]
 1139 0072 1A69     		ldr	r2, [r3, #16]
 1140 0074 7968     		ldr	r1, [r7, #4]
 1141 0076 BB69     		ldr	r3, [r7, #24]
 1142 0078 CB1A     		subs	r3, r1, r3
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 36


 1143 007a 1A44     		add	r2, r2, r3
 1144 007c 7B69     		ldr	r3, [r7, #20]
 1145 007e 1A61     		str	r2, [r3, #16]
 836:..\SEGGER/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1146              		.loc 1 836 0
 1147 0080 06E0     		b	.L48
 1148              	.L49:
 837:..\SEGGER/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1149              		.loc 1 837 0
 1150 0082 7B69     		ldr	r3, [r7, #20]
 1151 0084 1A69     		ldr	r2, [r3, #16]
 1152 0086 7B69     		ldr	r3, [r7, #20]
 1153 0088 9B68     		ldr	r3, [r3, #8]
 1154 008a D21A     		subs	r2, r2, r3
 1155 008c 7B69     		ldr	r3, [r7, #20]
 1156 008e 1A61     		str	r2, [r3, #16]
 1157              	.L48:
 836:..\SEGGER/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1158              		.loc 1 836 0
 1159 0090 7B69     		ldr	r3, [r7, #20]
 1160 0092 1A69     		ldr	r2, [r3, #16]
 1161 0094 7B69     		ldr	r3, [r7, #20]
 1162 0096 9B68     		ldr	r3, [r3, #8]
 1163 0098 9A42     		cmp	r2, r3
 1164 009a F2D2     		bcs	.L49
 1165              	.L47:
 838:..\SEGGER/SEGGER_RTT.c ****     }
 839:..\SEGGER/SEGGER_RTT.c ****   }
 840:..\SEGGER/SEGGER_RTT.c ****   //
 841:..\SEGGER/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 842:..\SEGGER/SEGGER_RTT.c ****   //
 843:..\SEGGER/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1166              		.loc 1 843 0
 1167 009c 7B69     		ldr	r3, [r7, #20]
 1168 009e 9A68     		ldr	r2, [r3, #8]
 1169 00a0 7B69     		ldr	r3, [r7, #20]
 1170 00a2 DB68     		ldr	r3, [r3, #12]
 1171 00a4 D31A     		subs	r3, r2, r3
 1172 00a6 BB61     		str	r3, [r7, #24]
 1173              	.L52:
 844:..\SEGGER/SEGGER_RTT.c ****   do {
 845:..\SEGGER/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1174              		.loc 1 845 0
 1175 00a8 BA69     		ldr	r2, [r7, #24]
 1176 00aa 7B68     		ldr	r3, [r7, #4]
 1177 00ac 9A42     		cmp	r2, r3
 1178 00ae 11D9     		bls	.L50
 846:..\SEGGER/SEGGER_RTT.c ****       //
 847:..\SEGGER/SEGGER_RTT.c ****       // Last round
 848:..\SEGGER/SEGGER_RTT.c ****       //
 849:..\SEGGER/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1179              		.loc 1 849 0
 1180 00b0 7B69     		ldr	r3, [r7, #20]
 1181 00b2 5A68     		ldr	r2, [r3, #4]
 1182 00b4 7B69     		ldr	r3, [r7, #20]
 1183 00b6 DB68     		ldr	r3, [r3, #12]
 1184 00b8 1344     		add	r3, r3, r2
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 37


 1185 00ba 3B61     		str	r3, [r7, #16]
 850:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 851:..\SEGGER/SEGGER_RTT.c ****       Avail = NumBytes;
 852:..\SEGGER/SEGGER_RTT.c ****       while (NumBytes--) {
 853:..\SEGGER/SEGGER_RTT.c ****         *pDst++ = *pData++;
 854:..\SEGGER/SEGGER_RTT.c ****       };
 855:..\SEGGER/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 856:..\SEGGER/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 857:..\SEGGER/SEGGER_RTT.c **** #else
 858:..\SEGGER/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 1186              		.loc 1 858 0
 1187 00bc 7A68     		ldr	r2, [r7, #4]
 1188 00be F969     		ldr	r1, [r7, #28]
 1189 00c0 3869     		ldr	r0, [r7, #16]
 1190 00c2 FFF7FEFF 		bl	memcpy
 859:..\SEGGER/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 860:..\SEGGER/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1191              		.loc 1 860 0
 1192 00c6 7B69     		ldr	r3, [r7, #20]
 1193 00c8 DA68     		ldr	r2, [r3, #12]
 1194 00ca 7B68     		ldr	r3, [r7, #4]
 1195 00cc 1A44     		add	r2, r2, r3
 1196 00ce 7B69     		ldr	r3, [r7, #20]
 1197 00d0 DA60     		str	r2, [r3, #12]
 861:..\SEGGER/SEGGER_RTT.c **** #endif
 862:..\SEGGER/SEGGER_RTT.c ****       break;
 1198              		.loc 1 862 0
 1199 00d2 1CE0     		b	.L51
 1200              	.L50:
 863:..\SEGGER/SEGGER_RTT.c ****     } else {
 864:..\SEGGER/SEGGER_RTT.c ****       //
 865:..\SEGGER/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 866:..\SEGGER/SEGGER_RTT.c ****       //
 867:..\SEGGER/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1201              		.loc 1 867 0
 1202 00d4 7B69     		ldr	r3, [r7, #20]
 1203 00d6 5A68     		ldr	r2, [r3, #4]
 1204 00d8 7B69     		ldr	r3, [r7, #20]
 1205 00da DB68     		ldr	r3, [r3, #12]
 1206 00dc 1344     		add	r3, r3, r2
 1207 00de 3B61     		str	r3, [r7, #16]
 868:..\SEGGER/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 869:..\SEGGER/SEGGER_RTT.c ****       NumBytes -= Avail;
 870:..\SEGGER/SEGGER_RTT.c ****       while (Avail--) {
 871:..\SEGGER/SEGGER_RTT.c ****         *pDst++ = *pData++;
 872:..\SEGGER/SEGGER_RTT.c ****       };
 873:..\SEGGER/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 874:..\SEGGER/SEGGER_RTT.c ****       pRing->WrOff = 0;
 875:..\SEGGER/SEGGER_RTT.c **** #else
 876:..\SEGGER/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 1208              		.loc 1 876 0
 1209 00e0 BA69     		ldr	r2, [r7, #24]
 1210 00e2 F969     		ldr	r1, [r7, #28]
 1211 00e4 3869     		ldr	r0, [r7, #16]
 1212 00e6 FFF7FEFF 		bl	memcpy
 877:..\SEGGER/SEGGER_RTT.c ****       pData += Avail;
 1213              		.loc 1 877 0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 38


 1214 00ea FA69     		ldr	r2, [r7, #28]
 1215 00ec BB69     		ldr	r3, [r7, #24]
 1216 00ee 1344     		add	r3, r3, r2
 1217 00f0 FB61     		str	r3, [r7, #28]
 878:..\SEGGER/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 879:..\SEGGER/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1218              		.loc 1 879 0
 1219 00f2 7B69     		ldr	r3, [r7, #20]
 1220 00f4 0022     		movs	r2, #0
 1221 00f6 DA60     		str	r2, [r3, #12]
 880:..\SEGGER/SEGGER_RTT.c ****       NumBytes -= Avail;
 1222              		.loc 1 880 0
 1223 00f8 7A68     		ldr	r2, [r7, #4]
 1224 00fa BB69     		ldr	r3, [r7, #24]
 1225 00fc D31A     		subs	r3, r2, r3
 1226 00fe 7B60     		str	r3, [r7, #4]
 881:..\SEGGER/SEGGER_RTT.c **** #endif
 882:..\SEGGER/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1227              		.loc 1 882 0
 1228 0100 7B69     		ldr	r3, [r7, #20]
 1229 0102 9B68     		ldr	r3, [r3, #8]
 1230 0104 013B     		subs	r3, r3, #1
 1231 0106 BB61     		str	r3, [r7, #24]
 883:..\SEGGER/SEGGER_RTT.c ****     }
 884:..\SEGGER/SEGGER_RTT.c ****   } while (NumBytes);
 1232              		.loc 1 884 0
 1233 0108 7B68     		ldr	r3, [r7, #4]
 1234 010a 002B     		cmp	r3, #0
 1235 010c CCD1     		bne	.L52
 1236              	.L51:
 885:..\SEGGER/SEGGER_RTT.c **** }
 1237              		.loc 1 885 0
 1238 010e 00BF     		nop
 1239 0110 2037     		adds	r7, r7, #32
 1240              		.cfi_def_cfa_offset 8
 1241 0112 BD46     		mov	sp, r7
 1242              		.cfi_def_cfa_register 13
 1243              		@ sp needed
 1244 0114 80BD     		pop	{r7, pc}
 1245              	.L54:
 1246 0116 00BF     		.align	2
 1247              	.L53:
 1248 0118 00000000 		.word	_SEGGER_RTT
 1249              		.cfi_endproc
 1250              	.LFE9:
 1251              		.size	SEGGER_RTT_WriteWithOverwriteNoLock, .-SEGGER_RTT_WriteWithOverwriteNoLock
 1252              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1253              		.align	2
 1254              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1255              		.thumb
 1256              		.thumb_func
 1257              		.type	SEGGER_RTT_WriteDownBufferNoLock, %function
 1258              	SEGGER_RTT_WriteDownBufferNoLock:
 1259              	.LFB10:
 886:..\SEGGER/SEGGER_RTT.c **** 
 887:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 888:..\SEGGER/SEGGER_RTT.c **** *
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 39


 889:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 890:..\SEGGER/SEGGER_RTT.c **** *
 891:..\SEGGER/SEGGER_RTT.c **** *  Function description
 892:..\SEGGER/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 893:..\SEGGER/SEGGER_RTT.c **** *    control block which is then read by the host.
 894:..\SEGGER/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 895:..\SEGGER/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 896:..\SEGGER/SEGGER_RTT.c **** *
 897:..\SEGGER/SEGGER_RTT.c **** *  Parameters
 898:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 899:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 900:..\SEGGER/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 901:..\SEGGER/SEGGER_RTT.c **** *                 MUST be > 0!!!
 902:..\SEGGER/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 903:..\SEGGER/SEGGER_RTT.c **** *
 904:..\SEGGER/SEGGER_RTT.c **** *  Return value
 905:..\SEGGER/SEGGER_RTT.c **** *    1: Data has been copied
 906:..\SEGGER/SEGGER_RTT.c **** *    0: No space, data has not been copied
 907:..\SEGGER/SEGGER_RTT.c **** *
 908:..\SEGGER/SEGGER_RTT.c **** *  Notes
 909:..\SEGGER/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 910:..\SEGGER/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 911:..\SEGGER/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 912:..\SEGGER/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 913:..\SEGGER/SEGGER_RTT.c **** */
 914:..\SEGGER/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 915:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 916:..\SEGGER/SEGGER_RTT.c ****   const char*           pData;
 917:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 918:..\SEGGER/SEGGER_RTT.c ****   unsigned              Avail;
 919:..\SEGGER/SEGGER_RTT.c ****   unsigned              RdOff;
 920:..\SEGGER/SEGGER_RTT.c ****   unsigned              WrOff;
 921:..\SEGGER/SEGGER_RTT.c ****   unsigned              Rem;
 922:..\SEGGER/SEGGER_RTT.c ****   volatile char*        pDst;
 923:..\SEGGER/SEGGER_RTT.c ****   //
 924:..\SEGGER/SEGGER_RTT.c ****   // Cases:
 925:..\SEGGER/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 926:..\SEGGER/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 927:..\SEGGER/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 928:..\SEGGER/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 929:..\SEGGER/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 930:..\SEGGER/SEGGER_RTT.c ****   //
 931:..\SEGGER/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 932:..\SEGGER/SEGGER_RTT.c ****   //
 933:..\SEGGER/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 934:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 935:..\SEGGER/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 936:..\SEGGER/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 937:..\SEGGER/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 938:..\SEGGER/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 939:..\SEGGER/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 940:..\SEGGER/SEGGER_RTT.c **** CopyStraight:
 941:..\SEGGER/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 942:..\SEGGER/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 943:..\SEGGER/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 944:..\SEGGER/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 945:..\SEGGER/SEGGER_RTT.c ****       return 1;
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 40


 946:..\SEGGER/SEGGER_RTT.c ****     }
 947:..\SEGGER/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 948:..\SEGGER/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 949:..\SEGGER/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 950:..\SEGGER/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 951:..\SEGGER/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 952:..\SEGGER/SEGGER_RTT.c ****       NumBytes -= Rem;
 953:..\SEGGER/SEGGER_RTT.c ****       //
 954:..\SEGGER/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 955:..\SEGGER/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 956:..\SEGGER/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 957:..\SEGGER/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 958:..\SEGGER/SEGGER_RTT.c ****       //
 959:..\SEGGER/SEGGER_RTT.c ****       if (NumBytes) {
 960:..\SEGGER/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 961:..\SEGGER/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 962:..\SEGGER/SEGGER_RTT.c ****       }
 963:..\SEGGER/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 964:..\SEGGER/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 965:..\SEGGER/SEGGER_RTT.c ****       return 1;
 966:..\SEGGER/SEGGER_RTT.c ****     }
 967:..\SEGGER/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 968:..\SEGGER/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 969:..\SEGGER/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 970:..\SEGGER/SEGGER_RTT.c ****       goto CopyStraight;
 971:..\SEGGER/SEGGER_RTT.c ****     }
 972:..\SEGGER/SEGGER_RTT.c ****   }
 973:..\SEGGER/SEGGER_RTT.c ****   return 0;     // No space in buffer
 974:..\SEGGER/SEGGER_RTT.c **** }
 975:..\SEGGER/SEGGER_RTT.c **** #endif
 976:..\SEGGER/SEGGER_RTT.c **** 
 977:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
 978:..\SEGGER/SEGGER_RTT.c **** *
 979:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 980:..\SEGGER/SEGGER_RTT.c **** *
 981:..\SEGGER/SEGGER_RTT.c **** *  Function description
 982:..\SEGGER/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 983:..\SEGGER/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
 984:..\SEGGER/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
 985:..\SEGGER/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 986:..\SEGGER/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
 987:..\SEGGER/SEGGER_RTT.c **** *
 988:..\SEGGER/SEGGER_RTT.c **** *  Parameters
 989:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
 990:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 991:..\SEGGER/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 992:..\SEGGER/SEGGER_RTT.c **** *
 993:..\SEGGER/SEGGER_RTT.c **** *  Return value
 994:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
 995:..\SEGGER/SEGGER_RTT.c **** *
 996:..\SEGGER/SEGGER_RTT.c **** *  Notes
 997:..\SEGGER/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 998:..\SEGGER/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 999:..\SEGGER/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1000:..\SEGGER/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1001:..\SEGGER/SEGGER_RTT.c **** *
1002:..\SEGGER/SEGGER_RTT.c **** *  Additional information
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 41


1003:..\SEGGER/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1004:..\SEGGER/SEGGER_RTT.c **** */
1005:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1260              		.loc 1 1005 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 32
 1263              		@ frame_needed = 1, uses_anonymous_args = 0
 1264 0000 80B5     		push	{r7, lr}
 1265              		.cfi_def_cfa_offset 8
 1266              		.cfi_offset 7, -8
 1267              		.cfi_offset 14, -4
 1268 0002 88B0     		sub	sp, sp, #32
 1269              		.cfi_def_cfa_offset 40
 1270 0004 00AF     		add	r7, sp, #0
 1271              		.cfi_def_cfa_register 7
 1272 0006 F860     		str	r0, [r7, #12]
 1273 0008 B960     		str	r1, [r7, #8]
 1274 000a 7A60     		str	r2, [r7, #4]
1006:..\SEGGER/SEGGER_RTT.c ****   unsigned                Status;
1007:..\SEGGER/SEGGER_RTT.c ****   unsigned                Avail;
1008:..\SEGGER/SEGGER_RTT.c ****   const char*             pData;
1009:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
1010:..\SEGGER/SEGGER_RTT.c ****   //
1011:..\SEGGER/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1012:..\SEGGER/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1013:..\SEGGER/SEGGER_RTT.c ****   //
1014:..\SEGGER/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1275              		.loc 1 1014 0
 1276 000c BB68     		ldr	r3, [r7, #8]
 1277 000e BB61     		str	r3, [r7, #24]
1015:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF)
 1278              		.loc 1 1015 0
 1279 0010 FA68     		ldr	r2, [r7, #12]
 1280 0012 1346     		mov	r3, r2
 1281 0014 5B00     		lsls	r3, r3, #1
 1282 0016 1344     		add	r3, r3, r2
 1283 0018 DB00     		lsls	r3, r3, #3
 1284 001a 6033     		adds	r3, r3, #96
 1285 001c 1E4A     		ldr	r2, .L65
 1286 001e 1344     		add	r3, r3, r2
 1287 0020 7B61     		str	r3, [r7, #20]
1016:..\SEGGER/SEGGER_RTT.c ****   //
1017:..\SEGGER/SEGGER_RTT.c ****   // How we output depends upon the mode...
1018:..\SEGGER/SEGGER_RTT.c ****   //
1019:..\SEGGER/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1288              		.loc 1 1019 0
 1289 0022 7B69     		ldr	r3, [r7, #20]
 1290 0024 5B69     		ldr	r3, [r3, #20]
 1291 0026 012B     		cmp	r3, #1
 1292 0028 17D0     		beq	.L57
 1293 002a 012B     		cmp	r3, #1
 1294 002c 02D3     		bcc	.L58
 1295 002e 022B     		cmp	r3, #2
 1296 0030 23D0     		beq	.L59
 1297 0032 29E0     		b	.L64
 1298              	.L58:
1020:..\SEGGER/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 42


1021:..\SEGGER/SEGGER_RTT.c ****     //
1022:..\SEGGER/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1023:..\SEGGER/SEGGER_RTT.c ****     // of this output, don't bother.
1024:..\SEGGER/SEGGER_RTT.c ****     //
1025:..\SEGGER/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1299              		.loc 1 1025 0
 1300 0034 7869     		ldr	r0, [r7, #20]
 1301 0036 FFF7FEFF 		bl	_GetAvailWriteSpace
 1302 003a 3861     		str	r0, [r7, #16]
1026:..\SEGGER/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1303              		.loc 1 1026 0
 1304 003c 3A69     		ldr	r2, [r7, #16]
 1305 003e 7B68     		ldr	r3, [r7, #4]
 1306 0040 9A42     		cmp	r2, r3
 1307 0042 02D2     		bcs	.L60
1027:..\SEGGER/SEGGER_RTT.c ****       Status = 0u;
 1308              		.loc 1 1027 0
 1309 0044 0023     		movs	r3, #0
 1310 0046 FB61     		str	r3, [r7, #28]
1028:..\SEGGER/SEGGER_RTT.c ****     } else {
1029:..\SEGGER/SEGGER_RTT.c ****       Status = NumBytes;
1030:..\SEGGER/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1031:..\SEGGER/SEGGER_RTT.c ****     }
1032:..\SEGGER/SEGGER_RTT.c ****     break;
 1311              		.loc 1 1032 0
 1312 0048 21E0     		b	.L62
 1313              	.L60:
1029:..\SEGGER/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1314              		.loc 1 1029 0
 1315 004a 7B68     		ldr	r3, [r7, #4]
 1316 004c FB61     		str	r3, [r7, #28]
1030:..\SEGGER/SEGGER_RTT.c ****     }
 1317              		.loc 1 1030 0
 1318 004e 7A68     		ldr	r2, [r7, #4]
 1319 0050 B969     		ldr	r1, [r7, #24]
 1320 0052 7869     		ldr	r0, [r7, #20]
 1321 0054 FFF7FEFF 		bl	_WriteNoCheck
 1322              		.loc 1 1032 0
 1323 0058 19E0     		b	.L62
 1324              	.L57:
1033:..\SEGGER/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1034:..\SEGGER/SEGGER_RTT.c ****     //
1035:..\SEGGER/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1036:..\SEGGER/SEGGER_RTT.c ****     //
1037:..\SEGGER/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1325              		.loc 1 1037 0
 1326 005a 7869     		ldr	r0, [r7, #20]
 1327 005c FFF7FEFF 		bl	_GetAvailWriteSpace
 1328 0060 3861     		str	r0, [r7, #16]
1038:..\SEGGER/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1329              		.loc 1 1038 0
 1330 0062 7A68     		ldr	r2, [r7, #4]
 1331 0064 3B69     		ldr	r3, [r7, #16]
 1332 0066 9342     		cmp	r3, r2
 1333 0068 28BF     		it	cs
 1334 006a 1346     		movcs	r3, r2
 1335 006c FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 43


1039:..\SEGGER/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1336              		.loc 1 1039 0
 1337 006e FA69     		ldr	r2, [r7, #28]
 1338 0070 B969     		ldr	r1, [r7, #24]
 1339 0072 7869     		ldr	r0, [r7, #20]
 1340 0074 FFF7FEFF 		bl	_WriteNoCheck
1040:..\SEGGER/SEGGER_RTT.c ****     break;
 1341              		.loc 1 1040 0
 1342 0078 09E0     		b	.L62
 1343              	.L59:
1041:..\SEGGER/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1042:..\SEGGER/SEGGER_RTT.c ****     //
1043:..\SEGGER/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1044:..\SEGGER/SEGGER_RTT.c ****     //
1045:..\SEGGER/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 1344              		.loc 1 1045 0
 1345 007a 7A68     		ldr	r2, [r7, #4]
 1346 007c B969     		ldr	r1, [r7, #24]
 1347 007e 7869     		ldr	r0, [r7, #20]
 1348 0080 FFF7FEFF 		bl	_WriteBlocking
 1349 0084 F861     		str	r0, [r7, #28]
1046:..\SEGGER/SEGGER_RTT.c ****     break;
 1350              		.loc 1 1046 0
 1351 0086 02E0     		b	.L62
 1352              	.L64:
1047:..\SEGGER/SEGGER_RTT.c ****   default:
1048:..\SEGGER/SEGGER_RTT.c ****     Status = 0u;
 1353              		.loc 1 1048 0
 1354 0088 0023     		movs	r3, #0
 1355 008a FB61     		str	r3, [r7, #28]
1049:..\SEGGER/SEGGER_RTT.c ****     break;
 1356              		.loc 1 1049 0
 1357 008c 00BF     		nop
 1358              	.L62:
1050:..\SEGGER/SEGGER_RTT.c ****   }
1051:..\SEGGER/SEGGER_RTT.c ****   //
1052:..\SEGGER/SEGGER_RTT.c ****   // Finish up.
1053:..\SEGGER/SEGGER_RTT.c ****   //
1054:..\SEGGER/SEGGER_RTT.c ****   return Status;
 1359              		.loc 1 1054 0
 1360 008e FB69     		ldr	r3, [r7, #28]
1055:..\SEGGER/SEGGER_RTT.c **** }
 1361              		.loc 1 1055 0
 1362 0090 1846     		mov	r0, r3
 1363 0092 2037     		adds	r7, r7, #32
 1364              		.cfi_def_cfa_offset 8
 1365 0094 BD46     		mov	sp, r7
 1366              		.cfi_def_cfa_register 13
 1367              		@ sp needed
 1368 0096 80BD     		pop	{r7, pc}
 1369              	.L66:
 1370              		.align	2
 1371              	.L65:
 1372 0098 00000000 		.word	_SEGGER_RTT
 1373              		.cfi_endproc
 1374              	.LFE10:
 1375              		.size	SEGGER_RTT_WriteDownBufferNoLock, .-SEGGER_RTT_WriteDownBufferNoLock
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 44


 1376              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1377              		.align	2
 1378              		.global	SEGGER_RTT_WriteNoLock
 1379              		.thumb
 1380              		.thumb_func
 1381              		.type	SEGGER_RTT_WriteNoLock, %function
 1382              	SEGGER_RTT_WriteNoLock:
 1383              	.LFB11:
1056:..\SEGGER/SEGGER_RTT.c **** 
1057:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1058:..\SEGGER/SEGGER_RTT.c **** *
1059:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1060:..\SEGGER/SEGGER_RTT.c **** *
1061:..\SEGGER/SEGGER_RTT.c **** *  Function description
1062:..\SEGGER/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1063:..\SEGGER/SEGGER_RTT.c **** *    control block which is then read by the host.
1064:..\SEGGER/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1065:..\SEGGER/SEGGER_RTT.c **** *
1066:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1067:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1068:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1069:..\SEGGER/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1070:..\SEGGER/SEGGER_RTT.c **** *
1071:..\SEGGER/SEGGER_RTT.c **** *  Return value
1072:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1073:..\SEGGER/SEGGER_RTT.c **** *
1074:..\SEGGER/SEGGER_RTT.c **** *  Notes
1075:..\SEGGER/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1076:..\SEGGER/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1077:..\SEGGER/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1078:..\SEGGER/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1079:..\SEGGER/SEGGER_RTT.c **** */
1080:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1384              		.loc 1 1080 0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 32
 1387              		@ frame_needed = 1, uses_anonymous_args = 0
 1388 0000 80B5     		push	{r7, lr}
 1389              		.cfi_def_cfa_offset 8
 1390              		.cfi_offset 7, -8
 1391              		.cfi_offset 14, -4
 1392 0002 88B0     		sub	sp, sp, #32
 1393              		.cfi_def_cfa_offset 40
 1394 0004 00AF     		add	r7, sp, #0
 1395              		.cfi_def_cfa_register 7
 1396 0006 F860     		str	r0, [r7, #12]
 1397 0008 B960     		str	r1, [r7, #8]
 1398 000a 7A60     		str	r2, [r7, #4]
1081:..\SEGGER/SEGGER_RTT.c ****   unsigned              Status;
1082:..\SEGGER/SEGGER_RTT.c ****   unsigned              Avail;
1083:..\SEGGER/SEGGER_RTT.c ****   const char*           pData;
1084:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1085:..\SEGGER/SEGGER_RTT.c ****   //
1086:..\SEGGER/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1087:..\SEGGER/SEGGER_RTT.c ****   //
1088:..\SEGGER/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1399              		.loc 1 1088 0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 45


 1400 000c BB68     		ldr	r3, [r7, #8]
 1401 000e BB61     		str	r3, [r7, #24]
1089:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1402              		.loc 1 1089 0
 1403 0010 FB68     		ldr	r3, [r7, #12]
 1404 0012 5A1C     		adds	r2, r3, #1
 1405 0014 1346     		mov	r3, r2
 1406 0016 5B00     		lsls	r3, r3, #1
 1407 0018 1344     		add	r3, r3, r2
 1408 001a DB00     		lsls	r3, r3, #3
 1409 001c 1E4A     		ldr	r2, .L77
 1410 001e 1344     		add	r3, r3, r2
 1411 0020 7B61     		str	r3, [r7, #20]
1090:..\SEGGER/SEGGER_RTT.c ****   //
1091:..\SEGGER/SEGGER_RTT.c ****   // How we output depends upon the mode...
1092:..\SEGGER/SEGGER_RTT.c ****   //
1093:..\SEGGER/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1412              		.loc 1 1093 0
 1413 0022 7B69     		ldr	r3, [r7, #20]
 1414 0024 5B69     		ldr	r3, [r3, #20]
 1415 0026 012B     		cmp	r3, #1
 1416 0028 17D0     		beq	.L69
 1417 002a 012B     		cmp	r3, #1
 1418 002c 02D3     		bcc	.L70
 1419 002e 022B     		cmp	r3, #2
 1420 0030 23D0     		beq	.L71
 1421 0032 29E0     		b	.L76
 1422              	.L70:
1094:..\SEGGER/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1095:..\SEGGER/SEGGER_RTT.c ****     //
1096:..\SEGGER/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1097:..\SEGGER/SEGGER_RTT.c ****     // of this output, don't bother.
1098:..\SEGGER/SEGGER_RTT.c ****     //
1099:..\SEGGER/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1423              		.loc 1 1099 0
 1424 0034 7869     		ldr	r0, [r7, #20]
 1425 0036 FFF7FEFF 		bl	_GetAvailWriteSpace
 1426 003a 3861     		str	r0, [r7, #16]
1100:..\SEGGER/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1427              		.loc 1 1100 0
 1428 003c 3A69     		ldr	r2, [r7, #16]
 1429 003e 7B68     		ldr	r3, [r7, #4]
 1430 0040 9A42     		cmp	r2, r3
 1431 0042 02D2     		bcs	.L72
1101:..\SEGGER/SEGGER_RTT.c ****       Status = 0u;
 1432              		.loc 1 1101 0
 1433 0044 0023     		movs	r3, #0
 1434 0046 FB61     		str	r3, [r7, #28]
1102:..\SEGGER/SEGGER_RTT.c ****     } else {
1103:..\SEGGER/SEGGER_RTT.c ****       Status = NumBytes;
1104:..\SEGGER/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1105:..\SEGGER/SEGGER_RTT.c ****     }
1106:..\SEGGER/SEGGER_RTT.c ****     break;
 1435              		.loc 1 1106 0
 1436 0048 21E0     		b	.L74
 1437              	.L72:
1103:..\SEGGER/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 46


 1438              		.loc 1 1103 0
 1439 004a 7B68     		ldr	r3, [r7, #4]
 1440 004c FB61     		str	r3, [r7, #28]
1104:..\SEGGER/SEGGER_RTT.c ****     }
 1441              		.loc 1 1104 0
 1442 004e 7A68     		ldr	r2, [r7, #4]
 1443 0050 B969     		ldr	r1, [r7, #24]
 1444 0052 7869     		ldr	r0, [r7, #20]
 1445 0054 FFF7FEFF 		bl	_WriteNoCheck
 1446              		.loc 1 1106 0
 1447 0058 19E0     		b	.L74
 1448              	.L69:
1107:..\SEGGER/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1108:..\SEGGER/SEGGER_RTT.c ****     //
1109:..\SEGGER/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1110:..\SEGGER/SEGGER_RTT.c ****     //
1111:..\SEGGER/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1449              		.loc 1 1111 0
 1450 005a 7869     		ldr	r0, [r7, #20]
 1451 005c FFF7FEFF 		bl	_GetAvailWriteSpace
 1452 0060 3861     		str	r0, [r7, #16]
1112:..\SEGGER/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1453              		.loc 1 1112 0
 1454 0062 7A68     		ldr	r2, [r7, #4]
 1455 0064 3B69     		ldr	r3, [r7, #16]
 1456 0066 9342     		cmp	r3, r2
 1457 0068 28BF     		it	cs
 1458 006a 1346     		movcs	r3, r2
 1459 006c FB61     		str	r3, [r7, #28]
1113:..\SEGGER/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1460              		.loc 1 1113 0
 1461 006e FA69     		ldr	r2, [r7, #28]
 1462 0070 B969     		ldr	r1, [r7, #24]
 1463 0072 7869     		ldr	r0, [r7, #20]
 1464 0074 FFF7FEFF 		bl	_WriteNoCheck
1114:..\SEGGER/SEGGER_RTT.c ****     break;
 1465              		.loc 1 1114 0
 1466 0078 09E0     		b	.L74
 1467              	.L71:
1115:..\SEGGER/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1116:..\SEGGER/SEGGER_RTT.c ****     //
1117:..\SEGGER/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1118:..\SEGGER/SEGGER_RTT.c ****     //
1119:..\SEGGER/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 1468              		.loc 1 1119 0
 1469 007a 7A68     		ldr	r2, [r7, #4]
 1470 007c B969     		ldr	r1, [r7, #24]
 1471 007e 7869     		ldr	r0, [r7, #20]
 1472 0080 FFF7FEFF 		bl	_WriteBlocking
 1473 0084 F861     		str	r0, [r7, #28]
1120:..\SEGGER/SEGGER_RTT.c ****     break;
 1474              		.loc 1 1120 0
 1475 0086 02E0     		b	.L74
 1476              	.L76:
1121:..\SEGGER/SEGGER_RTT.c ****   default:
1122:..\SEGGER/SEGGER_RTT.c ****     Status = 0u;
 1477              		.loc 1 1122 0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 47


 1478 0088 0023     		movs	r3, #0
 1479 008a FB61     		str	r3, [r7, #28]
1123:..\SEGGER/SEGGER_RTT.c ****     break;
 1480              		.loc 1 1123 0
 1481 008c 00BF     		nop
 1482              	.L74:
1124:..\SEGGER/SEGGER_RTT.c ****   }
1125:..\SEGGER/SEGGER_RTT.c ****   //
1126:..\SEGGER/SEGGER_RTT.c ****   // Finish up.
1127:..\SEGGER/SEGGER_RTT.c ****   //
1128:..\SEGGER/SEGGER_RTT.c ****   return Status;
 1483              		.loc 1 1128 0
 1484 008e FB69     		ldr	r3, [r7, #28]
1129:..\SEGGER/SEGGER_RTT.c **** }
 1485              		.loc 1 1129 0
 1486 0090 1846     		mov	r0, r3
 1487 0092 2037     		adds	r7, r7, #32
 1488              		.cfi_def_cfa_offset 8
 1489 0094 BD46     		mov	sp, r7
 1490              		.cfi_def_cfa_register 13
 1491              		@ sp needed
 1492 0096 80BD     		pop	{r7, pc}
 1493              	.L78:
 1494              		.align	2
 1495              	.L77:
 1496 0098 00000000 		.word	_SEGGER_RTT
 1497              		.cfi_endproc
 1498              	.LFE11:
 1499              		.size	SEGGER_RTT_WriteNoLock, .-SEGGER_RTT_WriteNoLock
 1500              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1501              		.align	2
 1502              		.global	SEGGER_RTT_WriteDownBuffer
 1503              		.thumb
 1504              		.thumb_func
 1505              		.type	SEGGER_RTT_WriteDownBuffer, %function
 1506              	SEGGER_RTT_WriteDownBuffer:
 1507              	.LFB12:
1130:..\SEGGER/SEGGER_RTT.c **** 
1131:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1132:..\SEGGER/SEGGER_RTT.c **** *
1133:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1134:..\SEGGER/SEGGER_RTT.c **** *
1135:..\SEGGER/SEGGER_RTT.c **** *  Function description
1136:..\SEGGER/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1137:..\SEGGER/SEGGER_RTT.c **** *
1138:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1139:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1140:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1141:..\SEGGER/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1142:..\SEGGER/SEGGER_RTT.c **** *
1143:..\SEGGER/SEGGER_RTT.c **** *  Return value
1144:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1145:..\SEGGER/SEGGER_RTT.c **** *
1146:..\SEGGER/SEGGER_RTT.c **** *  Notes
1147:..\SEGGER/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1148:..\SEGGER/SEGGER_RTT.c **** *
1149:..\SEGGER/SEGGER_RTT.c **** *  Additional information
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 48


1150:..\SEGGER/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1151:..\SEGGER/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1152:..\SEGGER/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1153:..\SEGGER/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer, 
1154:..\SEGGER/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1155:..\SEGGER/SEGGER_RTT.c **** */
1156:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1508              		.loc 1 1156 0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 32
 1511              		@ frame_needed = 1, uses_anonymous_args = 0
 1512 0000 80B5     		push	{r7, lr}
 1513              		.cfi_def_cfa_offset 8
 1514              		.cfi_offset 7, -8
 1515              		.cfi_offset 14, -4
 1516 0002 88B0     		sub	sp, sp, #32
 1517              		.cfi_def_cfa_offset 40
 1518 0004 00AF     		add	r7, sp, #0
 1519              		.cfi_def_cfa_register 7
 1520 0006 F860     		str	r0, [r7, #12]
 1521 0008 B960     		str	r1, [r7, #8]
 1522 000a 7A60     		str	r2, [r7, #4]
 1523              	.LBB6:
1157:..\SEGGER/SEGGER_RTT.c ****   unsigned Status;
1158:..\SEGGER/SEGGER_RTT.c **** 
1159:..\SEGGER/SEGGER_RTT.c ****   INIT();
 1524              		.loc 1 1159 0
 1525 000c 0E4B     		ldr	r3, .L82
 1526 000e FB61     		str	r3, [r7, #28]
 1527 0010 FB69     		ldr	r3, [r7, #28]
 1528 0012 1B78     		ldrb	r3, [r3]
 1529 0014 DBB2     		uxtb	r3, r3
 1530 0016 002B     		cmp	r3, #0
 1531 0018 01D1     		bne	.L80
 1532              		.loc 1 1159 0 is_stmt 0 discriminator 1
 1533 001a FFF7FEFF 		bl	_DoInit
 1534              	.L80:
 1535              	.LBE6:
 1536              	.LBB7:
1160:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1537              		.loc 1 1160 0 is_stmt 1
 1538              		.syntax unified
 1539              	@ 1160 "..\SEGGER\SEGGER_RTT.c" 1
 1540 001e EFF31183 		mrs   r3, basepri  
 1541 0022 4FF02001 		mov   r1, #32       
 1542 0026 81F31188 		msr   basepri, r1  
 1543              		
 1544              	@ 0 "" 2
 1545              		.thumb
 1546              		.syntax unified
 1547 002a BB61     		str	r3, [r7, #24]
1161:..\SEGGER/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1548              		.loc 1 1161 0
 1549 002c 7A68     		ldr	r2, [r7, #4]
 1550 002e B968     		ldr	r1, [r7, #8]
 1551 0030 F868     		ldr	r0, [r7, #12]
 1552 0032 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 49


 1553 0036 7861     		str	r0, [r7, #20]
1162:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1554              		.loc 1 1162 0
 1555 0038 BB69     		ldr	r3, [r7, #24]
 1556              		.syntax unified
 1557              	@ 1162 "..\SEGGER\SEGGER_RTT.c" 1
 1558 003a 83F31188 		msr   basepri, r3  
 1559              		
 1560              	@ 0 "" 2
 1561              		.thumb
 1562              		.syntax unified
 1563              	.LBE7:
1163:..\SEGGER/SEGGER_RTT.c ****   return Status;
 1564              		.loc 1 1163 0
 1565 003e 7B69     		ldr	r3, [r7, #20]
1164:..\SEGGER/SEGGER_RTT.c **** }
 1566              		.loc 1 1164 0
 1567 0040 1846     		mov	r0, r3
 1568 0042 2037     		adds	r7, r7, #32
 1569              		.cfi_def_cfa_offset 8
 1570 0044 BD46     		mov	sp, r7
 1571              		.cfi_def_cfa_register 13
 1572              		@ sp needed
 1573 0046 80BD     		pop	{r7, pc}
 1574              	.L83:
 1575              		.align	2
 1576              	.L82:
 1577 0048 00000000 		.word	_SEGGER_RTT
 1578              		.cfi_endproc
 1579              	.LFE12:
 1580              		.size	SEGGER_RTT_WriteDownBuffer, .-SEGGER_RTT_WriteDownBuffer
 1581              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1582              		.align	2
 1583              		.global	SEGGER_RTT_Write
 1584              		.thumb
 1585              		.thumb_func
 1586              		.type	SEGGER_RTT_Write, %function
 1587              	SEGGER_RTT_Write:
 1588              	.LFB13:
1165:..\SEGGER/SEGGER_RTT.c **** 
1166:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1167:..\SEGGER/SEGGER_RTT.c **** *
1168:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1169:..\SEGGER/SEGGER_RTT.c **** *
1170:..\SEGGER/SEGGER_RTT.c **** *  Function description
1171:..\SEGGER/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1172:..\SEGGER/SEGGER_RTT.c **** *    control block which is then read by the host.
1173:..\SEGGER/SEGGER_RTT.c **** *
1174:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1175:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1176:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1177:..\SEGGER/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1178:..\SEGGER/SEGGER_RTT.c **** *
1179:..\SEGGER/SEGGER_RTT.c **** *  Return value
1180:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1181:..\SEGGER/SEGGER_RTT.c **** *
1182:..\SEGGER/SEGGER_RTT.c **** *  Notes
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 50


1183:..\SEGGER/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1184:..\SEGGER/SEGGER_RTT.c **** */
1185:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1589              		.loc 1 1185 0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 32
 1592              		@ frame_needed = 1, uses_anonymous_args = 0
 1593 0000 80B5     		push	{r7, lr}
 1594              		.cfi_def_cfa_offset 8
 1595              		.cfi_offset 7, -8
 1596              		.cfi_offset 14, -4
 1597 0002 88B0     		sub	sp, sp, #32
 1598              		.cfi_def_cfa_offset 40
 1599 0004 00AF     		add	r7, sp, #0
 1600              		.cfi_def_cfa_register 7
 1601 0006 F860     		str	r0, [r7, #12]
 1602 0008 B960     		str	r1, [r7, #8]
 1603 000a 7A60     		str	r2, [r7, #4]
 1604              	.LBB8:
1186:..\SEGGER/SEGGER_RTT.c ****   unsigned Status;
1187:..\SEGGER/SEGGER_RTT.c **** 
1188:..\SEGGER/SEGGER_RTT.c ****   INIT();
 1605              		.loc 1 1188 0
 1606 000c 0E4B     		ldr	r3, .L87
 1607 000e FB61     		str	r3, [r7, #28]
 1608 0010 FB69     		ldr	r3, [r7, #28]
 1609 0012 1B78     		ldrb	r3, [r3]
 1610 0014 DBB2     		uxtb	r3, r3
 1611 0016 002B     		cmp	r3, #0
 1612 0018 01D1     		bne	.L85
 1613              		.loc 1 1188 0 is_stmt 0 discriminator 1
 1614 001a FFF7FEFF 		bl	_DoInit
 1615              	.L85:
 1616              	.LBE8:
 1617              	.LBB9:
1189:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1618              		.loc 1 1189 0 is_stmt 1
 1619              		.syntax unified
 1620              	@ 1189 "..\SEGGER\SEGGER_RTT.c" 1
 1621 001e EFF31183 		mrs   r3, basepri  
 1622 0022 4FF02001 		mov   r1, #32       
 1623 0026 81F31188 		msr   basepri, r1  
 1624              		
 1625              	@ 0 "" 2
 1626              		.thumb
 1627              		.syntax unified
 1628 002a BB61     		str	r3, [r7, #24]
1190:..\SEGGER/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1629              		.loc 1 1190 0
 1630 002c 7A68     		ldr	r2, [r7, #4]
 1631 002e B968     		ldr	r1, [r7, #8]
 1632 0030 F868     		ldr	r0, [r7, #12]
 1633 0032 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1634 0036 7861     		str	r0, [r7, #20]
1191:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1635              		.loc 1 1191 0
 1636 0038 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 51


 1637              		.syntax unified
 1638              	@ 1191 "..\SEGGER\SEGGER_RTT.c" 1
 1639 003a 83F31188 		msr   basepri, r3  
 1640              		
 1641              	@ 0 "" 2
 1642              		.thumb
 1643              		.syntax unified
 1644              	.LBE9:
1192:..\SEGGER/SEGGER_RTT.c ****   return Status;
 1645              		.loc 1 1192 0
 1646 003e 7B69     		ldr	r3, [r7, #20]
1193:..\SEGGER/SEGGER_RTT.c **** }
 1647              		.loc 1 1193 0
 1648 0040 1846     		mov	r0, r3
 1649 0042 2037     		adds	r7, r7, #32
 1650              		.cfi_def_cfa_offset 8
 1651 0044 BD46     		mov	sp, r7
 1652              		.cfi_def_cfa_register 13
 1653              		@ sp needed
 1654 0046 80BD     		pop	{r7, pc}
 1655              	.L88:
 1656              		.align	2
 1657              	.L87:
 1658 0048 00000000 		.word	_SEGGER_RTT
 1659              		.cfi_endproc
 1660              	.LFE13:
 1661              		.size	SEGGER_RTT_Write, .-SEGGER_RTT_Write
 1662              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1663              		.align	2
 1664              		.global	SEGGER_RTT_WriteString
 1665              		.thumb
 1666              		.thumb_func
 1667              		.type	SEGGER_RTT_WriteString, %function
 1668              	SEGGER_RTT_WriteString:
 1669              	.LFB14:
1194:..\SEGGER/SEGGER_RTT.c **** 
1195:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1196:..\SEGGER/SEGGER_RTT.c **** *
1197:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1198:..\SEGGER/SEGGER_RTT.c **** *
1199:..\SEGGER/SEGGER_RTT.c **** *  Function description
1200:..\SEGGER/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1201:..\SEGGER/SEGGER_RTT.c **** *    This data is read by the host.
1202:..\SEGGER/SEGGER_RTT.c **** *
1203:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1204:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1205:..\SEGGER/SEGGER_RTT.c **** *    s            Pointer to string.
1206:..\SEGGER/SEGGER_RTT.c **** *
1207:..\SEGGER/SEGGER_RTT.c **** *  Return value
1208:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1209:..\SEGGER/SEGGER_RTT.c **** *
1210:..\SEGGER/SEGGER_RTT.c **** *  Notes
1211:..\SEGGER/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1212:..\SEGGER/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1213:..\SEGGER/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1214:..\SEGGER/SEGGER_RTT.c **** */
1215:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 52


 1670              		.loc 1 1215 0
 1671              		.cfi_startproc
 1672              		@ args = 0, pretend = 0, frame = 16
 1673              		@ frame_needed = 1, uses_anonymous_args = 0
 1674 0000 80B5     		push	{r7, lr}
 1675              		.cfi_def_cfa_offset 8
 1676              		.cfi_offset 7, -8
 1677              		.cfi_offset 14, -4
 1678 0002 84B0     		sub	sp, sp, #16
 1679              		.cfi_def_cfa_offset 24
 1680 0004 00AF     		add	r7, sp, #0
 1681              		.cfi_def_cfa_register 7
 1682 0006 7860     		str	r0, [r7, #4]
 1683 0008 3960     		str	r1, [r7]
1216:..\SEGGER/SEGGER_RTT.c ****   unsigned Len;
1217:..\SEGGER/SEGGER_RTT.c **** 
1218:..\SEGGER/SEGGER_RTT.c ****   Len = STRLEN(s);
 1684              		.loc 1 1218 0
 1685 000a 3868     		ldr	r0, [r7]
 1686 000c FFF7FEFF 		bl	strlen
 1687 0010 F860     		str	r0, [r7, #12]
1219:..\SEGGER/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1688              		.loc 1 1219 0
 1689 0012 FA68     		ldr	r2, [r7, #12]
 1690 0014 3968     		ldr	r1, [r7]
 1691 0016 7868     		ldr	r0, [r7, #4]
 1692 0018 FFF7FEFF 		bl	SEGGER_RTT_Write
 1693 001c 0346     		mov	r3, r0
1220:..\SEGGER/SEGGER_RTT.c **** }
 1694              		.loc 1 1220 0
 1695 001e 1846     		mov	r0, r3
 1696 0020 1037     		adds	r7, r7, #16
 1697              		.cfi_def_cfa_offset 8
 1698 0022 BD46     		mov	sp, r7
 1699              		.cfi_def_cfa_register 13
 1700              		@ sp needed
 1701 0024 80BD     		pop	{r7, pc}
 1702              		.cfi_endproc
 1703              	.LFE14:
 1704              		.size	SEGGER_RTT_WriteString, .-SEGGER_RTT_WriteString
 1705 0026 00BF     		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1706              		.align	2
 1707              		.global	SEGGER_RTT_PutCharSkipNoLock
 1708              		.thumb
 1709              		.thumb_func
 1710              		.type	SEGGER_RTT_PutCharSkipNoLock, %function
 1711              	SEGGER_RTT_PutCharSkipNoLock:
 1712              	.LFB15:
1221:..\SEGGER/SEGGER_RTT.c **** 
1222:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1223:..\SEGGER/SEGGER_RTT.c **** *
1224:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1225:..\SEGGER/SEGGER_RTT.c **** *
1226:..\SEGGER/SEGGER_RTT.c **** *  Function description
1227:..\SEGGER/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1228:..\SEGGER/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1229:..\SEGGER/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 53


1230:..\SEGGER/SEGGER_RTT.c **** *
1231:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1232:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1233:..\SEGGER/SEGGER_RTT.c **** *    c            Byte to be stored.
1234:..\SEGGER/SEGGER_RTT.c **** *
1235:..\SEGGER/SEGGER_RTT.c **** *  Return value
1236:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1237:..\SEGGER/SEGGER_RTT.c **** *
1238:..\SEGGER/SEGGER_RTT.c **** *  Notes
1239:..\SEGGER/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1240:..\SEGGER/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1241:..\SEGGER/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1242:..\SEGGER/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1243:..\SEGGER/SEGGER_RTT.c **** */
1244:..\SEGGER/SEGGER_RTT.c **** 
1245:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1713              		.loc 1 1245 0
 1714              		.cfi_startproc
 1715              		@ args = 0, pretend = 0, frame = 24
 1716              		@ frame_needed = 1, uses_anonymous_args = 0
 1717              		@ link register save eliminated.
 1718 0000 80B4     		push	{r7}
 1719              		.cfi_def_cfa_offset 4
 1720              		.cfi_offset 7, -4
 1721 0002 87B0     		sub	sp, sp, #28
 1722              		.cfi_def_cfa_offset 32
 1723 0004 00AF     		add	r7, sp, #0
 1724              		.cfi_def_cfa_register 7
 1725 0006 7860     		str	r0, [r7, #4]
 1726 0008 0B46     		mov	r3, r1
 1727 000a FB70     		strb	r3, [r7, #3]
1246:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1247:..\SEGGER/SEGGER_RTT.c ****   unsigned              WrOff;
1248:..\SEGGER/SEGGER_RTT.c ****   unsigned              Status;
1249:..\SEGGER/SEGGER_RTT.c ****   volatile char*        pDst;
1250:..\SEGGER/SEGGER_RTT.c ****   //
1251:..\SEGGER/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1252:..\SEGGER/SEGGER_RTT.c ****   //
1253:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1728              		.loc 1 1253 0
 1729 000c 7B68     		ldr	r3, [r7, #4]
 1730 000e 5A1C     		adds	r2, r3, #1
 1731 0010 1346     		mov	r3, r2
 1732 0012 5B00     		lsls	r3, r3, #1
 1733 0014 1344     		add	r3, r3, r2
 1734 0016 DB00     		lsls	r3, r3, #3
 1735 0018 144A     		ldr	r2, .L96
 1736 001a 1344     		add	r3, r3, r2
 1737 001c FB60     		str	r3, [r7, #12]
1254:..\SEGGER/SEGGER_RTT.c ****   //
1255:..\SEGGER/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1256:..\SEGGER/SEGGER_RTT.c ****   //
1257:..\SEGGER/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1738              		.loc 1 1257 0
 1739 001e FB68     		ldr	r3, [r7, #12]
 1740 0020 DB68     		ldr	r3, [r3, #12]
 1741 0022 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 54


 1742 0024 7B61     		str	r3, [r7, #20]
1258:..\SEGGER/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1743              		.loc 1 1258 0
 1744 0026 FB68     		ldr	r3, [r7, #12]
 1745 0028 9A68     		ldr	r2, [r3, #8]
 1746 002a 7B69     		ldr	r3, [r7, #20]
 1747 002c 9A42     		cmp	r2, r3
 1748 002e 01D1     		bne	.L92
1259:..\SEGGER/SEGGER_RTT.c ****     WrOff = 0;
 1749              		.loc 1 1259 0
 1750 0030 0023     		movs	r3, #0
 1751 0032 7B61     		str	r3, [r7, #20]
 1752              	.L92:
1260:..\SEGGER/SEGGER_RTT.c ****   }
1261:..\SEGGER/SEGGER_RTT.c ****   //
1262:..\SEGGER/SEGGER_RTT.c ****   // Output byte if free space is available
1263:..\SEGGER/SEGGER_RTT.c ****   //
1264:..\SEGGER/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1753              		.loc 1 1264 0
 1754 0034 FB68     		ldr	r3, [r7, #12]
 1755 0036 1A69     		ldr	r2, [r3, #16]
 1756 0038 7B69     		ldr	r3, [r7, #20]
 1757 003a 9A42     		cmp	r2, r3
 1758 003c 0ED0     		beq	.L93
1265:..\SEGGER/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1759              		.loc 1 1265 0
 1760 003e FB68     		ldr	r3, [r7, #12]
 1761 0040 5A68     		ldr	r2, [r3, #4]
 1762 0042 FB68     		ldr	r3, [r7, #12]
 1763 0044 DB68     		ldr	r3, [r3, #12]
 1764 0046 1344     		add	r3, r3, r2
 1765 0048 BB60     		str	r3, [r7, #8]
1266:..\SEGGER/SEGGER_RTT.c ****     *pDst = c;
 1766              		.loc 1 1266 0
 1767 004a BB68     		ldr	r3, [r7, #8]
 1768 004c FA78     		ldrb	r2, [r7, #3]
 1769 004e 1A70     		strb	r2, [r3]
1267:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
1268:..\SEGGER/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1770              		.loc 1 1268 0
 1771 0050 FB68     		ldr	r3, [r7, #12]
 1772 0052 7A69     		ldr	r2, [r7, #20]
 1773 0054 DA60     		str	r2, [r3, #12]
1269:..\SEGGER/SEGGER_RTT.c ****     Status = 1;
 1774              		.loc 1 1269 0
 1775 0056 0123     		movs	r3, #1
 1776 0058 3B61     		str	r3, [r7, #16]
 1777 005a 01E0     		b	.L94
 1778              	.L93:
1270:..\SEGGER/SEGGER_RTT.c ****   } else {
1271:..\SEGGER/SEGGER_RTT.c ****     Status = 0;
 1779              		.loc 1 1271 0
 1780 005c 0023     		movs	r3, #0
 1781 005e 3B61     		str	r3, [r7, #16]
 1782              	.L94:
1272:..\SEGGER/SEGGER_RTT.c ****   }
1273:..\SEGGER/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 55


1274:..\SEGGER/SEGGER_RTT.c ****   return Status;
 1783              		.loc 1 1274 0
 1784 0060 3B69     		ldr	r3, [r7, #16]
1275:..\SEGGER/SEGGER_RTT.c **** }
 1785              		.loc 1 1275 0
 1786 0062 1846     		mov	r0, r3
 1787 0064 1C37     		adds	r7, r7, #28
 1788              		.cfi_def_cfa_offset 4
 1789 0066 BD46     		mov	sp, r7
 1790              		.cfi_def_cfa_register 13
 1791              		@ sp needed
 1792 0068 80BC     		pop	{r7}
 1793              		.cfi_restore 7
 1794              		.cfi_def_cfa_offset 0
 1795 006a 7047     		bx	lr
 1796              	.L97:
 1797              		.align	2
 1798              	.L96:
 1799 006c 00000000 		.word	_SEGGER_RTT
 1800              		.cfi_endproc
 1801              	.LFE15:
 1802              		.size	SEGGER_RTT_PutCharSkipNoLock, .-SEGGER_RTT_PutCharSkipNoLock
 1803              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1804              		.align	2
 1805              		.global	SEGGER_RTT_PutCharSkip
 1806              		.thumb
 1807              		.thumb_func
 1808              		.type	SEGGER_RTT_PutCharSkip, %function
 1809              	SEGGER_RTT_PutCharSkip:
 1810              	.LFB16:
1276:..\SEGGER/SEGGER_RTT.c **** 
1277:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1278:..\SEGGER/SEGGER_RTT.c **** *
1279:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1280:..\SEGGER/SEGGER_RTT.c **** *
1281:..\SEGGER/SEGGER_RTT.c **** *  Function description
1282:..\SEGGER/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1283:..\SEGGER/SEGGER_RTT.c **** *
1284:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1285:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1286:..\SEGGER/SEGGER_RTT.c **** *    c            Byte to be stored.
1287:..\SEGGER/SEGGER_RTT.c **** *
1288:..\SEGGER/SEGGER_RTT.c **** *  Return value
1289:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1290:..\SEGGER/SEGGER_RTT.c **** *
1291:..\SEGGER/SEGGER_RTT.c **** *  Notes
1292:..\SEGGER/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1293:..\SEGGER/SEGGER_RTT.c **** */
1294:..\SEGGER/SEGGER_RTT.c **** 
1295:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1811              		.loc 1 1295 0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 32
 1814              		@ frame_needed = 1, uses_anonymous_args = 0
 1815 0000 80B5     		push	{r7, lr}
 1816              		.cfi_def_cfa_offset 8
 1817              		.cfi_offset 7, -8
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 56


 1818              		.cfi_offset 14, -4
 1819 0002 88B0     		sub	sp, sp, #32
 1820              		.cfi_def_cfa_offset 40
 1821 0004 00AF     		add	r7, sp, #0
 1822              		.cfi_def_cfa_register 7
 1823 0006 7860     		str	r0, [r7, #4]
 1824 0008 0B46     		mov	r3, r1
 1825 000a FB70     		strb	r3, [r7, #3]
 1826              	.LBB10:
1296:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1297:..\SEGGER/SEGGER_RTT.c ****   unsigned              WrOff;
1298:..\SEGGER/SEGGER_RTT.c ****   unsigned              Status;
1299:..\SEGGER/SEGGER_RTT.c ****   volatile char*        pDst;
1300:..\SEGGER/SEGGER_RTT.c ****   //
1301:..\SEGGER/SEGGER_RTT.c ****   // Prepare
1302:..\SEGGER/SEGGER_RTT.c ****   //
1303:..\SEGGER/SEGGER_RTT.c ****   INIT();
 1827              		.loc 1 1303 0
 1828 000c 204B     		ldr	r3, .L104
 1829 000e 7B61     		str	r3, [r7, #20]
 1830 0010 7B69     		ldr	r3, [r7, #20]
 1831 0012 1B78     		ldrb	r3, [r3]
 1832 0014 DBB2     		uxtb	r3, r3
 1833 0016 002B     		cmp	r3, #0
 1834 0018 01D1     		bne	.L99
 1835              		.loc 1 1303 0 is_stmt 0 discriminator 1
 1836 001a FFF7FEFF 		bl	_DoInit
 1837              	.L99:
 1838              	.LBE10:
 1839              	.LBB11:
1304:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1840              		.loc 1 1304 0 is_stmt 1
 1841              		.syntax unified
 1842              	@ 1304 "..\SEGGER\SEGGER_RTT.c" 1
 1843 001e EFF31183 		mrs   r3, basepri  
 1844 0022 4FF02001 		mov   r1, #32       
 1845 0026 81F31188 		msr   basepri, r1  
 1846              		
 1847              	@ 0 "" 2
 1848              		.thumb
 1849              		.syntax unified
 1850 002a 3B61     		str	r3, [r7, #16]
1305:..\SEGGER/SEGGER_RTT.c ****   //
1306:..\SEGGER/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1307:..\SEGGER/SEGGER_RTT.c ****   //
1308:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1851              		.loc 1 1308 0
 1852 002c 7B68     		ldr	r3, [r7, #4]
 1853 002e 5A1C     		adds	r2, r3, #1
 1854 0030 1346     		mov	r3, r2
 1855 0032 5B00     		lsls	r3, r3, #1
 1856 0034 1344     		add	r3, r3, r2
 1857 0036 DB00     		lsls	r3, r3, #3
 1858 0038 154A     		ldr	r2, .L104
 1859 003a 1344     		add	r3, r3, r2
 1860 003c FB60     		str	r3, [r7, #12]
1309:..\SEGGER/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 57


1310:..\SEGGER/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1311:..\SEGGER/SEGGER_RTT.c ****   //
1312:..\SEGGER/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1861              		.loc 1 1312 0
 1862 003e FB68     		ldr	r3, [r7, #12]
 1863 0040 DB68     		ldr	r3, [r3, #12]
 1864 0042 0133     		adds	r3, r3, #1
 1865 0044 FB61     		str	r3, [r7, #28]
1313:..\SEGGER/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1866              		.loc 1 1313 0
 1867 0046 FB68     		ldr	r3, [r7, #12]
 1868 0048 9A68     		ldr	r2, [r3, #8]
 1869 004a FB69     		ldr	r3, [r7, #28]
 1870 004c 9A42     		cmp	r2, r3
 1871 004e 01D1     		bne	.L100
1314:..\SEGGER/SEGGER_RTT.c ****     WrOff = 0;
 1872              		.loc 1 1314 0
 1873 0050 0023     		movs	r3, #0
 1874 0052 FB61     		str	r3, [r7, #28]
 1875              	.L100:
1315:..\SEGGER/SEGGER_RTT.c ****   }
1316:..\SEGGER/SEGGER_RTT.c ****   //
1317:..\SEGGER/SEGGER_RTT.c ****   // Output byte if free space is available
1318:..\SEGGER/SEGGER_RTT.c ****   //
1319:..\SEGGER/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1876              		.loc 1 1319 0
 1877 0054 FB68     		ldr	r3, [r7, #12]
 1878 0056 1A69     		ldr	r2, [r3, #16]
 1879 0058 FB69     		ldr	r3, [r7, #28]
 1880 005a 9A42     		cmp	r2, r3
 1881 005c 0ED0     		beq	.L101
1320:..\SEGGER/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1882              		.loc 1 1320 0
 1883 005e FB68     		ldr	r3, [r7, #12]
 1884 0060 5A68     		ldr	r2, [r3, #4]
 1885 0062 FB68     		ldr	r3, [r7, #12]
 1886 0064 DB68     		ldr	r3, [r3, #12]
 1887 0066 1344     		add	r3, r3, r2
 1888 0068 BB60     		str	r3, [r7, #8]
1321:..\SEGGER/SEGGER_RTT.c ****     *pDst = c;
 1889              		.loc 1 1321 0
 1890 006a BB68     		ldr	r3, [r7, #8]
 1891 006c FA78     		ldrb	r2, [r7, #3]
 1892 006e 1A70     		strb	r2, [r3]
1322:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
1323:..\SEGGER/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1893              		.loc 1 1323 0
 1894 0070 FB68     		ldr	r3, [r7, #12]
 1895 0072 FA69     		ldr	r2, [r7, #28]
 1896 0074 DA60     		str	r2, [r3, #12]
1324:..\SEGGER/SEGGER_RTT.c ****     Status = 1;
 1897              		.loc 1 1324 0
 1898 0076 0123     		movs	r3, #1
 1899 0078 BB61     		str	r3, [r7, #24]
 1900 007a 01E0     		b	.L102
 1901              	.L101:
1325:..\SEGGER/SEGGER_RTT.c ****   } else {
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 58


1326:..\SEGGER/SEGGER_RTT.c ****     Status = 0;
 1902              		.loc 1 1326 0
 1903 007c 0023     		movs	r3, #0
 1904 007e BB61     		str	r3, [r7, #24]
 1905              	.L102:
1327:..\SEGGER/SEGGER_RTT.c ****   }
1328:..\SEGGER/SEGGER_RTT.c ****   //
1329:..\SEGGER/SEGGER_RTT.c ****   // Finish up.
1330:..\SEGGER/SEGGER_RTT.c ****   //
1331:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1906              		.loc 1 1331 0
 1907 0080 3B69     		ldr	r3, [r7, #16]
 1908              		.syntax unified
 1909              	@ 1331 "..\SEGGER\SEGGER_RTT.c" 1
 1910 0082 83F31188 		msr   basepri, r3  
 1911              		
 1912              	@ 0 "" 2
 1913              		.thumb
 1914              		.syntax unified
 1915              	.LBE11:
1332:..\SEGGER/SEGGER_RTT.c ****   //
1333:..\SEGGER/SEGGER_RTT.c ****   return Status;
 1916              		.loc 1 1333 0
 1917 0086 BB69     		ldr	r3, [r7, #24]
1334:..\SEGGER/SEGGER_RTT.c **** }
 1918              		.loc 1 1334 0
 1919 0088 1846     		mov	r0, r3
 1920 008a 2037     		adds	r7, r7, #32
 1921              		.cfi_def_cfa_offset 8
 1922 008c BD46     		mov	sp, r7
 1923              		.cfi_def_cfa_register 13
 1924              		@ sp needed
 1925 008e 80BD     		pop	{r7, pc}
 1926              	.L105:
 1927              		.align	2
 1928              	.L104:
 1929 0090 00000000 		.word	_SEGGER_RTT
 1930              		.cfi_endproc
 1931              	.LFE16:
 1932              		.size	SEGGER_RTT_PutCharSkip, .-SEGGER_RTT_PutCharSkip
 1933              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 1934              		.align	2
 1935              		.global	SEGGER_RTT_PutChar
 1936              		.thumb
 1937              		.thumb_func
 1938              		.type	SEGGER_RTT_PutChar, %function
 1939              	SEGGER_RTT_PutChar:
 1940              	.LFB17:
1335:..\SEGGER/SEGGER_RTT.c **** 
1336:..\SEGGER/SEGGER_RTT.c ****  /*********************************************************************
1337:..\SEGGER/SEGGER_RTT.c **** *
1338:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1339:..\SEGGER/SEGGER_RTT.c **** *
1340:..\SEGGER/SEGGER_RTT.c **** *  Function description
1341:..\SEGGER/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1342:..\SEGGER/SEGGER_RTT.c **** *
1343:..\SEGGER/SEGGER_RTT.c **** *  Parameters
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 59


1344:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1345:..\SEGGER/SEGGER_RTT.c **** *    c            Byte to be stored.
1346:..\SEGGER/SEGGER_RTT.c **** *
1347:..\SEGGER/SEGGER_RTT.c **** *  Return value
1348:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1349:..\SEGGER/SEGGER_RTT.c **** *
1350:..\SEGGER/SEGGER_RTT.c **** *  Notes
1351:..\SEGGER/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1352:..\SEGGER/SEGGER_RTT.c **** */
1353:..\SEGGER/SEGGER_RTT.c **** 
1354:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 1941              		.loc 1 1354 0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 32
 1944              		@ frame_needed = 1, uses_anonymous_args = 0
 1945 0000 80B5     		push	{r7, lr}
 1946              		.cfi_def_cfa_offset 8
 1947              		.cfi_offset 7, -8
 1948              		.cfi_offset 14, -4
 1949 0002 88B0     		sub	sp, sp, #32
 1950              		.cfi_def_cfa_offset 40
 1951 0004 00AF     		add	r7, sp, #0
 1952              		.cfi_def_cfa_register 7
 1953 0006 7860     		str	r0, [r7, #4]
 1954 0008 0B46     		mov	r3, r1
 1955 000a FB70     		strb	r3, [r7, #3]
 1956              	.LBB12:
1355:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1356:..\SEGGER/SEGGER_RTT.c ****   unsigned              WrOff;
1357:..\SEGGER/SEGGER_RTT.c ****   unsigned              Status;
1358:..\SEGGER/SEGGER_RTT.c ****   volatile char*        pDst;
1359:..\SEGGER/SEGGER_RTT.c ****   //
1360:..\SEGGER/SEGGER_RTT.c ****   // Prepare
1361:..\SEGGER/SEGGER_RTT.c ****   //
1362:..\SEGGER/SEGGER_RTT.c ****   INIT();
 1957              		.loc 1 1362 0
 1958 000c 254B     		ldr	r3, .L114
 1959 000e 7B61     		str	r3, [r7, #20]
 1960 0010 7B69     		ldr	r3, [r7, #20]
 1961 0012 1B78     		ldrb	r3, [r3]
 1962 0014 DBB2     		uxtb	r3, r3
 1963 0016 002B     		cmp	r3, #0
 1964 0018 01D1     		bne	.L107
 1965              		.loc 1 1362 0 is_stmt 0 discriminator 1
 1966 001a FFF7FEFF 		bl	_DoInit
 1967              	.L107:
 1968              	.LBE12:
 1969              	.LBB13:
1363:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1970              		.loc 1 1363 0 is_stmt 1
 1971              		.syntax unified
 1972              	@ 1363 "..\SEGGER\SEGGER_RTT.c" 1
 1973 001e EFF31183 		mrs   r3, basepri  
 1974 0022 4FF02001 		mov   r1, #32       
 1975 0026 81F31188 		msr   basepri, r1  
 1976              		
 1977              	@ 0 "" 2
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 60


 1978              		.thumb
 1979              		.syntax unified
 1980 002a 3B61     		str	r3, [r7, #16]
1364:..\SEGGER/SEGGER_RTT.c ****   //
1365:..\SEGGER/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1366:..\SEGGER/SEGGER_RTT.c ****   //
1367:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1981              		.loc 1 1367 0
 1982 002c 7B68     		ldr	r3, [r7, #4]
 1983 002e 5A1C     		adds	r2, r3, #1
 1984 0030 1346     		mov	r3, r2
 1985 0032 5B00     		lsls	r3, r3, #1
 1986 0034 1344     		add	r3, r3, r2
 1987 0036 DB00     		lsls	r3, r3, #3
 1988 0038 1A4A     		ldr	r2, .L114
 1989 003a 1344     		add	r3, r3, r2
 1990 003c FB60     		str	r3, [r7, #12]
1368:..\SEGGER/SEGGER_RTT.c ****   //
1369:..\SEGGER/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1370:..\SEGGER/SEGGER_RTT.c ****   //
1371:..\SEGGER/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1991              		.loc 1 1371 0
 1992 003e FB68     		ldr	r3, [r7, #12]
 1993 0040 DB68     		ldr	r3, [r3, #12]
 1994 0042 0133     		adds	r3, r3, #1
 1995 0044 FB61     		str	r3, [r7, #28]
1372:..\SEGGER/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1996              		.loc 1 1372 0
 1997 0046 FB68     		ldr	r3, [r7, #12]
 1998 0048 9A68     		ldr	r2, [r3, #8]
 1999 004a FB69     		ldr	r3, [r7, #28]
 2000 004c 9A42     		cmp	r2, r3
 2001 004e 01D1     		bne	.L108
1373:..\SEGGER/SEGGER_RTT.c ****     WrOff = 0;
 2002              		.loc 1 1373 0
 2003 0050 0023     		movs	r3, #0
 2004 0052 FB61     		str	r3, [r7, #28]
 2005              	.L108:
1374:..\SEGGER/SEGGER_RTT.c ****   }
1375:..\SEGGER/SEGGER_RTT.c ****   //
1376:..\SEGGER/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1377:..\SEGGER/SEGGER_RTT.c ****   //
1378:..\SEGGER/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2006              		.loc 1 1378 0
 2007 0054 FB68     		ldr	r3, [r7, #12]
 2008 0056 5B69     		ldr	r3, [r3, #20]
 2009 0058 022B     		cmp	r3, #2
 2010 005a 05D1     		bne	.L109
1379:..\SEGGER/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
 2011              		.loc 1 1379 0
 2012 005c 00BF     		nop
 2013              	.L110:
 2014              		.loc 1 1379 0 is_stmt 0 discriminator 1
 2015 005e FB68     		ldr	r3, [r7, #12]
 2016 0060 1A69     		ldr	r2, [r3, #16]
 2017 0062 FB69     		ldr	r3, [r7, #28]
 2018 0064 9A42     		cmp	r2, r3
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 61


 2019 0066 FAD0     		beq	.L110
 2020              	.L109:
1380:..\SEGGER/SEGGER_RTT.c ****       ;
1381:..\SEGGER/SEGGER_RTT.c ****     }
1382:..\SEGGER/SEGGER_RTT.c ****   }
1383:..\SEGGER/SEGGER_RTT.c ****   //
1384:..\SEGGER/SEGGER_RTT.c ****   // Output byte if free space is available
1385:..\SEGGER/SEGGER_RTT.c ****   //
1386:..\SEGGER/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2021              		.loc 1 1386 0 is_stmt 1
 2022 0068 FB68     		ldr	r3, [r7, #12]
 2023 006a 1A69     		ldr	r2, [r3, #16]
 2024 006c FB69     		ldr	r3, [r7, #28]
 2025 006e 9A42     		cmp	r2, r3
 2026 0070 0ED0     		beq	.L111
1387:..\SEGGER/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2027              		.loc 1 1387 0
 2028 0072 FB68     		ldr	r3, [r7, #12]
 2029 0074 5A68     		ldr	r2, [r3, #4]
 2030 0076 FB68     		ldr	r3, [r7, #12]
 2031 0078 DB68     		ldr	r3, [r3, #12]
 2032 007a 1344     		add	r3, r3, r2
 2033 007c BB60     		str	r3, [r7, #8]
1388:..\SEGGER/SEGGER_RTT.c ****     *pDst = c;
 2034              		.loc 1 1388 0
 2035 007e BB68     		ldr	r3, [r7, #8]
 2036 0080 FA78     		ldrb	r2, [r7, #3]
 2037 0082 1A70     		strb	r2, [r3]
1389:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
1390:..\SEGGER/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2038              		.loc 1 1390 0
 2039 0084 FB68     		ldr	r3, [r7, #12]
 2040 0086 FA69     		ldr	r2, [r7, #28]
 2041 0088 DA60     		str	r2, [r3, #12]
1391:..\SEGGER/SEGGER_RTT.c ****     Status = 1;
 2042              		.loc 1 1391 0
 2043 008a 0123     		movs	r3, #1
 2044 008c BB61     		str	r3, [r7, #24]
 2045 008e 01E0     		b	.L112
 2046              	.L111:
1392:..\SEGGER/SEGGER_RTT.c ****   } else {
1393:..\SEGGER/SEGGER_RTT.c ****     Status = 0;
 2047              		.loc 1 1393 0
 2048 0090 0023     		movs	r3, #0
 2049 0092 BB61     		str	r3, [r7, #24]
 2050              	.L112:
1394:..\SEGGER/SEGGER_RTT.c ****   }
1395:..\SEGGER/SEGGER_RTT.c ****   //
1396:..\SEGGER/SEGGER_RTT.c ****   // Finish up.
1397:..\SEGGER/SEGGER_RTT.c ****   //
1398:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2051              		.loc 1 1398 0
 2052 0094 3B69     		ldr	r3, [r7, #16]
 2053              		.syntax unified
 2054              	@ 1398 "..\SEGGER\SEGGER_RTT.c" 1
 2055 0096 83F31188 		msr   basepri, r3  
 2056              		
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 62


 2057              	@ 0 "" 2
 2058              		.thumb
 2059              		.syntax unified
 2060              	.LBE13:
1399:..\SEGGER/SEGGER_RTT.c ****   return Status;
 2061              		.loc 1 1399 0
 2062 009a BB69     		ldr	r3, [r7, #24]
1400:..\SEGGER/SEGGER_RTT.c **** }
 2063              		.loc 1 1400 0
 2064 009c 1846     		mov	r0, r3
 2065 009e 2037     		adds	r7, r7, #32
 2066              		.cfi_def_cfa_offset 8
 2067 00a0 BD46     		mov	sp, r7
 2068              		.cfi_def_cfa_register 13
 2069              		@ sp needed
 2070 00a2 80BD     		pop	{r7, pc}
 2071              	.L115:
 2072              		.align	2
 2073              	.L114:
 2074 00a4 00000000 		.word	_SEGGER_RTT
 2075              		.cfi_endproc
 2076              	.LFE17:
 2077              		.size	SEGGER_RTT_PutChar, .-SEGGER_RTT_PutChar
 2078              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2079              		.align	2
 2080              		.global	SEGGER_RTT_GetKey
 2081              		.thumb
 2082              		.thumb_func
 2083              		.type	SEGGER_RTT_GetKey, %function
 2084              	SEGGER_RTT_GetKey:
 2085              	.LFB18:
1401:..\SEGGER/SEGGER_RTT.c **** 
1402:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1403:..\SEGGER/SEGGER_RTT.c **** *
1404:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1405:..\SEGGER/SEGGER_RTT.c **** *
1406:..\SEGGER/SEGGER_RTT.c **** *  Function description
1407:..\SEGGER/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1408:..\SEGGER/SEGGER_RTT.c **** *    Host has previously stored data there.
1409:..\SEGGER/SEGGER_RTT.c **** *
1410:..\SEGGER/SEGGER_RTT.c **** *  Return value
1411:..\SEGGER/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1412:..\SEGGER/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1413:..\SEGGER/SEGGER_RTT.c **** *
1414:..\SEGGER/SEGGER_RTT.c **** *  Notes
1415:..\SEGGER/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1416:..\SEGGER/SEGGER_RTT.c **** */
1417:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2086              		.loc 1 1417 0
 2087              		.cfi_startproc
 2088              		@ args = 0, pretend = 0, frame = 8
 2089              		@ frame_needed = 1, uses_anonymous_args = 0
 2090 0000 80B5     		push	{r7, lr}
 2091              		.cfi_def_cfa_offset 8
 2092              		.cfi_offset 7, -8
 2093              		.cfi_offset 14, -4
 2094 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 63


 2095              		.cfi_def_cfa_offset 16
 2096 0004 00AF     		add	r7, sp, #0
 2097              		.cfi_def_cfa_register 7
1418:..\SEGGER/SEGGER_RTT.c ****   char c;
1419:..\SEGGER/SEGGER_RTT.c ****   int r;
1420:..\SEGGER/SEGGER_RTT.c **** 
1421:..\SEGGER/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2098              		.loc 1 1421 0
 2099 0006 FB1C     		adds	r3, r7, #3
 2100 0008 0122     		movs	r2, #1
 2101 000a 1946     		mov	r1, r3
 2102 000c 0020     		movs	r0, #0
 2103 000e FFF7FEFF 		bl	SEGGER_RTT_Read
 2104 0012 0346     		mov	r3, r0
 2105 0014 7B60     		str	r3, [r7, #4]
1422:..\SEGGER/SEGGER_RTT.c ****   if (r == 1) {
 2106              		.loc 1 1422 0
 2107 0016 7B68     		ldr	r3, [r7, #4]
 2108 0018 012B     		cmp	r3, #1
 2109 001a 02D1     		bne	.L117
1423:..\SEGGER/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2110              		.loc 1 1423 0
 2111 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2112 001e 7B60     		str	r3, [r7, #4]
 2113 0020 02E0     		b	.L118
 2114              	.L117:
1424:..\SEGGER/SEGGER_RTT.c ****   } else {
1425:..\SEGGER/SEGGER_RTT.c ****     r = -1;
 2115              		.loc 1 1425 0
 2116 0022 4FF0FF33 		mov	r3, #-1
 2117 0026 7B60     		str	r3, [r7, #4]
 2118              	.L118:
1426:..\SEGGER/SEGGER_RTT.c ****   }
1427:..\SEGGER/SEGGER_RTT.c ****   return r;
 2119              		.loc 1 1427 0
 2120 0028 7B68     		ldr	r3, [r7, #4]
1428:..\SEGGER/SEGGER_RTT.c **** }
 2121              		.loc 1 1428 0
 2122 002a 1846     		mov	r0, r3
 2123 002c 0837     		adds	r7, r7, #8
 2124              		.cfi_def_cfa_offset 8
 2125 002e BD46     		mov	sp, r7
 2126              		.cfi_def_cfa_register 13
 2127              		@ sp needed
 2128 0030 80BD     		pop	{r7, pc}
 2129              		.cfi_endproc
 2130              	.LFE18:
 2131              		.size	SEGGER_RTT_GetKey, .-SEGGER_RTT_GetKey
 2132 0032 00BF     		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2133              		.align	2
 2134              		.global	SEGGER_RTT_WaitKey
 2135              		.thumb
 2136              		.thumb_func
 2137              		.type	SEGGER_RTT_WaitKey, %function
 2138              	SEGGER_RTT_WaitKey:
 2139              	.LFB19:
1429:..\SEGGER/SEGGER_RTT.c **** 
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 64


1430:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1431:..\SEGGER/SEGGER_RTT.c **** *
1432:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1433:..\SEGGER/SEGGER_RTT.c **** *
1434:..\SEGGER/SEGGER_RTT.c **** *  Function description
1435:..\SEGGER/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1436:..\SEGGER/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1437:..\SEGGER/SEGGER_RTT.c **** *
1438:..\SEGGER/SEGGER_RTT.c **** *  Return value
1439:..\SEGGER/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1440:..\SEGGER/SEGGER_RTT.c **** *
1441:..\SEGGER/SEGGER_RTT.c **** *  Notes
1442:..\SEGGER/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1443:..\SEGGER/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1444:..\SEGGER/SEGGER_RTT.c **** */
1445:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2140              		.loc 1 1445 0
 2141              		.cfi_startproc
 2142              		@ args = 0, pretend = 0, frame = 8
 2143              		@ frame_needed = 1, uses_anonymous_args = 0
 2144 0000 80B5     		push	{r7, lr}
 2145              		.cfi_def_cfa_offset 8
 2146              		.cfi_offset 7, -8
 2147              		.cfi_offset 14, -4
 2148 0002 82B0     		sub	sp, sp, #8
 2149              		.cfi_def_cfa_offset 16
 2150 0004 00AF     		add	r7, sp, #0
 2151              		.cfi_def_cfa_register 7
 2152              	.L121:
1446:..\SEGGER/SEGGER_RTT.c ****   int r;
1447:..\SEGGER/SEGGER_RTT.c **** 
1448:..\SEGGER/SEGGER_RTT.c ****   do {
1449:..\SEGGER/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2153              		.loc 1 1449 0 discriminator 1
 2154 0006 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2155 000a 7860     		str	r0, [r7, #4]
1450:..\SEGGER/SEGGER_RTT.c ****   } while (r < 0);
 2156              		.loc 1 1450 0 discriminator 1
 2157 000c 7B68     		ldr	r3, [r7, #4]
 2158 000e 002B     		cmp	r3, #0
 2159 0010 F9DB     		blt	.L121
1451:..\SEGGER/SEGGER_RTT.c ****   return r;
 2160              		.loc 1 1451 0
 2161 0012 7B68     		ldr	r3, [r7, #4]
1452:..\SEGGER/SEGGER_RTT.c **** }
 2162              		.loc 1 1452 0
 2163 0014 1846     		mov	r0, r3
 2164 0016 0837     		adds	r7, r7, #8
 2165              		.cfi_def_cfa_offset 8
 2166 0018 BD46     		mov	sp, r7
 2167              		.cfi_def_cfa_register 13
 2168              		@ sp needed
 2169 001a 80BD     		pop	{r7, pc}
 2170              		.cfi_endproc
 2171              	.LFE19:
 2172              		.size	SEGGER_RTT_WaitKey, .-SEGGER_RTT_WaitKey
 2173              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 65


 2174              		.align	2
 2175              		.global	SEGGER_RTT_HasKey
 2176              		.thumb
 2177              		.thumb_func
 2178              		.type	SEGGER_RTT_HasKey, %function
 2179              	SEGGER_RTT_HasKey:
 2180              	.LFB20:
1453:..\SEGGER/SEGGER_RTT.c **** 
1454:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1455:..\SEGGER/SEGGER_RTT.c **** *
1456:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1457:..\SEGGER/SEGGER_RTT.c **** *
1458:..\SEGGER/SEGGER_RTT.c **** *  Function description
1459:..\SEGGER/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1460:..\SEGGER/SEGGER_RTT.c **** *
1461:..\SEGGER/SEGGER_RTT.c **** *  Return value
1462:..\SEGGER/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1463:..\SEGGER/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1464:..\SEGGER/SEGGER_RTT.c **** *
1465:..\SEGGER/SEGGER_RTT.c **** *  Notes
1466:..\SEGGER/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1467:..\SEGGER/SEGGER_RTT.c **** */
1468:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2181              		.loc 1 1468 0
 2182              		.cfi_startproc
 2183              		@ args = 0, pretend = 0, frame = 16
 2184              		@ frame_needed = 1, uses_anonymous_args = 0
 2185 0000 80B5     		push	{r7, lr}
 2186              		.cfi_def_cfa_offset 8
 2187              		.cfi_offset 7, -8
 2188              		.cfi_offset 14, -4
 2189 0002 84B0     		sub	sp, sp, #16
 2190              		.cfi_def_cfa_offset 24
 2191 0004 00AF     		add	r7, sp, #0
 2192              		.cfi_def_cfa_register 7
 2193              	.LBB14:
1469:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
1470:..\SEGGER/SEGGER_RTT.c ****   unsigned RdOff;
1471:..\SEGGER/SEGGER_RTT.c ****   int r;
1472:..\SEGGER/SEGGER_RTT.c **** 
1473:..\SEGGER/SEGGER_RTT.c ****   INIT();
 2194              		.loc 1 1473 0
 2195 0006 0E4B     		ldr	r3, .L128
 2196 0008 BB60     		str	r3, [r7, #8]
 2197 000a BB68     		ldr	r3, [r7, #8]
 2198 000c 1B78     		ldrb	r3, [r3]
 2199 000e DBB2     		uxtb	r3, r3
 2200 0010 002B     		cmp	r3, #0
 2201 0012 01D1     		bne	.L124
 2202              		.loc 1 1473 0 is_stmt 0 discriminator 1
 2203 0014 FFF7FEFF 		bl	_DoInit
 2204              	.L124:
 2205              	.LBE14:
1474:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2206              		.loc 1 1474 0 is_stmt 1
 2207 0018 0A4B     		ldr	r3, .L128+4
 2208 001a 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 66


1475:..\SEGGER/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2209              		.loc 1 1475 0
 2210 001c 7B68     		ldr	r3, [r7, #4]
 2211 001e 1B69     		ldr	r3, [r3, #16]
 2212 0020 3B60     		str	r3, [r7]
1476:..\SEGGER/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2213              		.loc 1 1476 0
 2214 0022 7B68     		ldr	r3, [r7, #4]
 2215 0024 DA68     		ldr	r2, [r3, #12]
 2216 0026 3B68     		ldr	r3, [r7]
 2217 0028 9A42     		cmp	r2, r3
 2218 002a 02D0     		beq	.L125
1477:..\SEGGER/SEGGER_RTT.c ****     r = 1;
 2219              		.loc 1 1477 0
 2220 002c 0123     		movs	r3, #1
 2221 002e FB60     		str	r3, [r7, #12]
 2222 0030 01E0     		b	.L126
 2223              	.L125:
1478:..\SEGGER/SEGGER_RTT.c ****   } else {
1479:..\SEGGER/SEGGER_RTT.c ****     r = 0;
 2224              		.loc 1 1479 0
 2225 0032 0023     		movs	r3, #0
 2226 0034 FB60     		str	r3, [r7, #12]
 2227              	.L126:
1480:..\SEGGER/SEGGER_RTT.c ****   }
1481:..\SEGGER/SEGGER_RTT.c ****   return r;
 2228              		.loc 1 1481 0
 2229 0036 FB68     		ldr	r3, [r7, #12]
1482:..\SEGGER/SEGGER_RTT.c **** }
 2230              		.loc 1 1482 0
 2231 0038 1846     		mov	r0, r3
 2232 003a 1037     		adds	r7, r7, #16
 2233              		.cfi_def_cfa_offset 8
 2234 003c BD46     		mov	sp, r7
 2235              		.cfi_def_cfa_register 13
 2236              		@ sp needed
 2237 003e 80BD     		pop	{r7, pc}
 2238              	.L129:
 2239              		.align	2
 2240              	.L128:
 2241 0040 00000000 		.word	_SEGGER_RTT
 2242 0044 60000000 		.word	_SEGGER_RTT+96
 2243              		.cfi_endproc
 2244              	.LFE20:
 2245              		.size	SEGGER_RTT_HasKey, .-SEGGER_RTT_HasKey
 2246              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2247              		.align	2
 2248              		.global	SEGGER_RTT_HasData
 2249              		.thumb
 2250              		.thumb_func
 2251              		.type	SEGGER_RTT_HasData, %function
 2252              	SEGGER_RTT_HasData:
 2253              	.LFB21:
1483:..\SEGGER/SEGGER_RTT.c **** 
1484:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1485:..\SEGGER/SEGGER_RTT.c **** *
1486:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 67


1487:..\SEGGER/SEGGER_RTT.c **** *
1488:..\SEGGER/SEGGER_RTT.c **** *  Function description
1489:..\SEGGER/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1490:..\SEGGER/SEGGER_RTT.c **** *
1491:..\SEGGER/SEGGER_RTT.c **** *  Return value:
1492:..\SEGGER/SEGGER_RTT.c **** *  ==0:  No data
1493:..\SEGGER/SEGGER_RTT.c **** *  !=0:  Data in buffer
1494:..\SEGGER/SEGGER_RTT.c **** *
1495:..\SEGGER/SEGGER_RTT.c **** */
1496:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2254              		.loc 1 1496 0
 2255              		.cfi_startproc
 2256              		@ args = 0, pretend = 0, frame = 16
 2257              		@ frame_needed = 1, uses_anonymous_args = 0
 2258              		@ link register save eliminated.
 2259 0000 80B4     		push	{r7}
 2260              		.cfi_def_cfa_offset 4
 2261              		.cfi_offset 7, -4
 2262 0002 85B0     		sub	sp, sp, #20
 2263              		.cfi_def_cfa_offset 24
 2264 0004 00AF     		add	r7, sp, #0
 2265              		.cfi_def_cfa_register 7
 2266 0006 7860     		str	r0, [r7, #4]
1497:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
1498:..\SEGGER/SEGGER_RTT.c ****   unsigned                v;
1499:..\SEGGER/SEGGER_RTT.c **** 
1500:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2267              		.loc 1 1500 0
 2268 0008 7A68     		ldr	r2, [r7, #4]
 2269 000a 1346     		mov	r3, r2
 2270 000c 5B00     		lsls	r3, r3, #1
 2271 000e 1344     		add	r3, r3, r2
 2272 0010 DB00     		lsls	r3, r3, #3
 2273 0012 6033     		adds	r3, r3, #96
 2274 0014 074A     		ldr	r2, .L132
 2275 0016 1344     		add	r3, r3, r2
 2276 0018 FB60     		str	r3, [r7, #12]
1501:..\SEGGER/SEGGER_RTT.c ****   v = pRing->WrOff;
 2277              		.loc 1 1501 0
 2278 001a FB68     		ldr	r3, [r7, #12]
 2279 001c DB68     		ldr	r3, [r3, #12]
 2280 001e BB60     		str	r3, [r7, #8]
1502:..\SEGGER/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2281              		.loc 1 1502 0
 2282 0020 FB68     		ldr	r3, [r7, #12]
 2283 0022 1B69     		ldr	r3, [r3, #16]
 2284 0024 BA68     		ldr	r2, [r7, #8]
 2285 0026 D31A     		subs	r3, r2, r3
1503:..\SEGGER/SEGGER_RTT.c **** }
 2286              		.loc 1 1503 0
 2287 0028 1846     		mov	r0, r3
 2288 002a 1437     		adds	r7, r7, #20
 2289              		.cfi_def_cfa_offset 4
 2290 002c BD46     		mov	sp, r7
 2291              		.cfi_def_cfa_register 13
 2292              		@ sp needed
 2293 002e 80BC     		pop	{r7}
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 68


 2294              		.cfi_restore 7
 2295              		.cfi_def_cfa_offset 0
 2296 0030 7047     		bx	lr
 2297              	.L133:
 2298 0032 00BF     		.align	2
 2299              	.L132:
 2300 0034 00000000 		.word	_SEGGER_RTT
 2301              		.cfi_endproc
 2302              	.LFE21:
 2303              		.size	SEGGER_RTT_HasData, .-SEGGER_RTT_HasData
 2304              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2305              		.align	2
 2306              		.global	SEGGER_RTT_HasDataUp
 2307              		.thumb
 2308              		.thumb_func
 2309              		.type	SEGGER_RTT_HasDataUp, %function
 2310              	SEGGER_RTT_HasDataUp:
 2311              	.LFB22:
1504:..\SEGGER/SEGGER_RTT.c **** 
1505:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1506:..\SEGGER/SEGGER_RTT.c **** *
1507:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1508:..\SEGGER/SEGGER_RTT.c **** *
1509:..\SEGGER/SEGGER_RTT.c **** *  Function description
1510:..\SEGGER/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1511:..\SEGGER/SEGGER_RTT.c **** *
1512:..\SEGGER/SEGGER_RTT.c **** *  Return value:
1513:..\SEGGER/SEGGER_RTT.c **** *  ==0:  No data
1514:..\SEGGER/SEGGER_RTT.c **** *  !=0:  Data in buffer
1515:..\SEGGER/SEGGER_RTT.c **** *
1516:..\SEGGER/SEGGER_RTT.c **** */
1517:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2312              		.loc 1 1517 0
 2313              		.cfi_startproc
 2314              		@ args = 0, pretend = 0, frame = 16
 2315              		@ frame_needed = 1, uses_anonymous_args = 0
 2316              		@ link register save eliminated.
 2317 0000 80B4     		push	{r7}
 2318              		.cfi_def_cfa_offset 4
 2319              		.cfi_offset 7, -4
 2320 0002 85B0     		sub	sp, sp, #20
 2321              		.cfi_def_cfa_offset 24
 2322 0004 00AF     		add	r7, sp, #0
 2323              		.cfi_def_cfa_register 7
 2324 0006 7860     		str	r0, [r7, #4]
1518:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1519:..\SEGGER/SEGGER_RTT.c ****   unsigned                v;
1520:..\SEGGER/SEGGER_RTT.c **** 
1521:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2325              		.loc 1 1521 0
 2326 0008 7B68     		ldr	r3, [r7, #4]
 2327 000a 5A1C     		adds	r2, r3, #1
 2328 000c 1346     		mov	r3, r2
 2329 000e 5B00     		lsls	r3, r3, #1
 2330 0010 1344     		add	r3, r3, r2
 2331 0012 DB00     		lsls	r3, r3, #3
 2332 0014 074A     		ldr	r2, .L136
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 69


 2333 0016 1344     		add	r3, r3, r2
 2334 0018 FB60     		str	r3, [r7, #12]
1522:..\SEGGER/SEGGER_RTT.c ****   v = pRing->RdOff;
 2335              		.loc 1 1522 0
 2336 001a FB68     		ldr	r3, [r7, #12]
 2337 001c 1B69     		ldr	r3, [r3, #16]
 2338 001e BB60     		str	r3, [r7, #8]
1523:..\SEGGER/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2339              		.loc 1 1523 0
 2340 0020 FB68     		ldr	r3, [r7, #12]
 2341 0022 DA68     		ldr	r2, [r3, #12]
 2342 0024 BB68     		ldr	r3, [r7, #8]
 2343 0026 D31A     		subs	r3, r2, r3
1524:..\SEGGER/SEGGER_RTT.c **** }
 2344              		.loc 1 1524 0
 2345 0028 1846     		mov	r0, r3
 2346 002a 1437     		adds	r7, r7, #20
 2347              		.cfi_def_cfa_offset 4
 2348 002c BD46     		mov	sp, r7
 2349              		.cfi_def_cfa_register 13
 2350              		@ sp needed
 2351 002e 80BC     		pop	{r7}
 2352              		.cfi_restore 7
 2353              		.cfi_def_cfa_offset 0
 2354 0030 7047     		bx	lr
 2355              	.L137:
 2356 0032 00BF     		.align	2
 2357              	.L136:
 2358 0034 00000000 		.word	_SEGGER_RTT
 2359              		.cfi_endproc
 2360              	.LFE22:
 2361              		.size	SEGGER_RTT_HasDataUp, .-SEGGER_RTT_HasDataUp
 2362              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2363              		.align	2
 2364              		.global	SEGGER_RTT_AllocDownBuffer
 2365              		.thumb
 2366              		.thumb_func
 2367              		.type	SEGGER_RTT_AllocDownBuffer, %function
 2368              	SEGGER_RTT_AllocDownBuffer:
 2369              	.LFB23:
1525:..\SEGGER/SEGGER_RTT.c **** 
1526:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1527:..\SEGGER/SEGGER_RTT.c **** *
1528:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1529:..\SEGGER/SEGGER_RTT.c **** *
1530:..\SEGGER/SEGGER_RTT.c **** *  Function description
1531:..\SEGGER/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1532:..\SEGGER/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1533:..\SEGGER/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1534:..\SEGGER/SEGGER_RTT.c **** *
1535:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1536:..\SEGGER/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1537:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1538:..\SEGGER/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1539:..\SEGGER/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1540:..\SEGGER/SEGGER_RTT.c **** *
1541:..\SEGGER/SEGGER_RTT.c **** *  Return value
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 70


1542:..\SEGGER/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1543:..\SEGGER/SEGGER_RTT.c **** *     < 0 - Error
1544:..\SEGGER/SEGGER_RTT.c **** */
1545:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2370              		.loc 1 1545 0
 2371              		.cfi_startproc
 2372              		@ args = 0, pretend = 0, frame = 32
 2373              		@ frame_needed = 1, uses_anonymous_args = 0
 2374 0000 80B5     		push	{r7, lr}
 2375              		.cfi_def_cfa_offset 8
 2376              		.cfi_offset 7, -8
 2377              		.cfi_offset 14, -4
 2378 0002 88B0     		sub	sp, sp, #32
 2379              		.cfi_def_cfa_offset 40
 2380 0004 00AF     		add	r7, sp, #0
 2381              		.cfi_def_cfa_register 7
 2382 0006 F860     		str	r0, [r7, #12]
 2383 0008 B960     		str	r1, [r7, #8]
 2384 000a 7A60     		str	r2, [r7, #4]
 2385 000c 3B60     		str	r3, [r7]
 2386              	.LBB15:
1546:..\SEGGER/SEGGER_RTT.c ****   int BufferIndex;
1547:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1548:..\SEGGER/SEGGER_RTT.c **** 
1549:..\SEGGER/SEGGER_RTT.c ****   INIT();
 2387              		.loc 1 1549 0
 2388 000e 3B4B     		ldr	r3, .L147
 2389 0010 BB61     		str	r3, [r7, #24]
 2390 0012 BB69     		ldr	r3, [r7, #24]
 2391 0014 1B78     		ldrb	r3, [r3]
 2392 0016 DBB2     		uxtb	r3, r3
 2393 0018 002B     		cmp	r3, #0
 2394 001a 01D1     		bne	.L139
 2395              		.loc 1 1549 0 is_stmt 0 discriminator 1
 2396 001c FFF7FEFF 		bl	_DoInit
 2397              	.L139:
 2398              	.LBE15:
 2399              	.LBB16:
1550:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2400              		.loc 1 1550 0 is_stmt 1
 2401              		.syntax unified
 2402              	@ 1550 "..\SEGGER\SEGGER_RTT.c" 1
 2403 0020 EFF31183 		mrs   r3, basepri  
 2404 0024 4FF02001 		mov   r1, #32       
 2405 0028 81F31188 		msr   basepri, r1  
 2406              		
 2407              	@ 0 "" 2
 2408              		.thumb
 2409              		.syntax unified
 2410 002c 7B61     		str	r3, [r7, #20]
1551:..\SEGGER/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2411              		.loc 1 1551 0
 2412 002e 334B     		ldr	r3, .L147
 2413 0030 3B61     		str	r3, [r7, #16]
1552:..\SEGGER/SEGGER_RTT.c ****   BufferIndex = 0;
 2414              		.loc 1 1552 0
 2415 0032 0023     		movs	r3, #0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 71


 2416 0034 FB61     		str	r3, [r7, #28]
 2417              	.L142:
1553:..\SEGGER/SEGGER_RTT.c ****   do {
1554:..\SEGGER/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
 2418              		.loc 1 1554 0
 2419 0036 3969     		ldr	r1, [r7, #16]
 2420 0038 FA69     		ldr	r2, [r7, #28]
 2421 003a 1346     		mov	r3, r2
 2422 003c 5B00     		lsls	r3, r3, #1
 2423 003e 1344     		add	r3, r3, r2
 2424 0040 DB00     		lsls	r3, r3, #3
 2425 0042 0B44     		add	r3, r3, r1
 2426 0044 6433     		adds	r3, r3, #100
 2427 0046 1B68     		ldr	r3, [r3]
 2428 0048 002B     		cmp	r3, #0
 2429 004a 08D0     		beq	.L146
1555:..\SEGGER/SEGGER_RTT.c ****       break;
1556:..\SEGGER/SEGGER_RTT.c ****     }
1557:..\SEGGER/SEGGER_RTT.c ****     BufferIndex++;
 2430              		.loc 1 1557 0
 2431 004c FB69     		ldr	r3, [r7, #28]
 2432 004e 0133     		adds	r3, r3, #1
 2433 0050 FB61     		str	r3, [r7, #28]
1558:..\SEGGER/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2434              		.loc 1 1558 0
 2435 0052 3B69     		ldr	r3, [r7, #16]
 2436 0054 5A69     		ldr	r2, [r3, #20]
 2437 0056 FB69     		ldr	r3, [r7, #28]
 2438 0058 9A42     		cmp	r2, r3
 2439 005a ECDC     		bgt	.L142
 2440 005c 00E0     		b	.L141
 2441              	.L146:
1555:..\SEGGER/SEGGER_RTT.c ****       break;
 2442              		.loc 1 1555 0
 2443 005e 00BF     		nop
 2444              	.L141:
1559:..\SEGGER/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2445              		.loc 1 1559 0
 2446 0060 3B69     		ldr	r3, [r7, #16]
 2447 0062 5A69     		ldr	r2, [r3, #20]
 2448 0064 FB69     		ldr	r3, [r7, #28]
 2449 0066 9A42     		cmp	r2, r3
 2450 0068 3CDD     		ble	.L143
1560:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2451              		.loc 1 1560 0
 2452 006a 3969     		ldr	r1, [r7, #16]
 2453 006c FA69     		ldr	r2, [r7, #28]
 2454 006e 1346     		mov	r3, r2
 2455 0070 5B00     		lsls	r3, r3, #1
 2456 0072 1344     		add	r3, r3, r2
 2457 0074 DB00     		lsls	r3, r3, #3
 2458 0076 0B44     		add	r3, r3, r1
 2459 0078 6033     		adds	r3, r3, #96
 2460 007a FA68     		ldr	r2, [r7, #12]
 2461 007c 1A60     		str	r2, [r3]
1561:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2462              		.loc 1 1561 0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 72


 2463 007e 3969     		ldr	r1, [r7, #16]
 2464 0080 FA69     		ldr	r2, [r7, #28]
 2465 0082 1346     		mov	r3, r2
 2466 0084 5B00     		lsls	r3, r3, #1
 2467 0086 1344     		add	r3, r3, r2
 2468 0088 DB00     		lsls	r3, r3, #3
 2469 008a 0B44     		add	r3, r3, r1
 2470 008c 6433     		adds	r3, r3, #100
 2471 008e BA68     		ldr	r2, [r7, #8]
 2472 0090 1A60     		str	r2, [r3]
1562:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2473              		.loc 1 1562 0
 2474 0092 3969     		ldr	r1, [r7, #16]
 2475 0094 FA69     		ldr	r2, [r7, #28]
 2476 0096 1346     		mov	r3, r2
 2477 0098 5B00     		lsls	r3, r3, #1
 2478 009a 1344     		add	r3, r3, r2
 2479 009c DB00     		lsls	r3, r3, #3
 2480 009e 0B44     		add	r3, r3, r1
 2481 00a0 6833     		adds	r3, r3, #104
 2482 00a2 7A68     		ldr	r2, [r7, #4]
 2483 00a4 1A60     		str	r2, [r3]
1563:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2484              		.loc 1 1563 0
 2485 00a6 3969     		ldr	r1, [r7, #16]
 2486 00a8 FA69     		ldr	r2, [r7, #28]
 2487 00aa 1346     		mov	r3, r2
 2488 00ac 5B00     		lsls	r3, r3, #1
 2489 00ae 1344     		add	r3, r3, r2
 2490 00b0 DB00     		lsls	r3, r3, #3
 2491 00b2 0B44     		add	r3, r3, r1
 2492 00b4 7033     		adds	r3, r3, #112
 2493 00b6 0022     		movs	r2, #0
 2494 00b8 1A60     		str	r2, [r3]
1564:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2495              		.loc 1 1564 0
 2496 00ba 3969     		ldr	r1, [r7, #16]
 2497 00bc FA69     		ldr	r2, [r7, #28]
 2498 00be 1346     		mov	r3, r2
 2499 00c0 5B00     		lsls	r3, r3, #1
 2500 00c2 1344     		add	r3, r3, r2
 2501 00c4 DB00     		lsls	r3, r3, #3
 2502 00c6 0B44     		add	r3, r3, r1
 2503 00c8 6C33     		adds	r3, r3, #108
 2504 00ca 0022     		movs	r2, #0
 2505 00cc 1A60     		str	r2, [r3]
1565:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2506              		.loc 1 1565 0
 2507 00ce 3969     		ldr	r1, [r7, #16]
 2508 00d0 FA69     		ldr	r2, [r7, #28]
 2509 00d2 1346     		mov	r3, r2
 2510 00d4 5B00     		lsls	r3, r3, #1
 2511 00d6 1344     		add	r3, r3, r2
 2512 00d8 DB00     		lsls	r3, r3, #3
 2513 00da 0B44     		add	r3, r3, r1
 2514 00dc 7433     		adds	r3, r3, #116
 2515 00de 3A68     		ldr	r2, [r7]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 73


 2516 00e0 1A60     		str	r2, [r3]
 2517 00e2 02E0     		b	.L144
 2518              	.L143:
1566:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
1567:..\SEGGER/SEGGER_RTT.c ****   } else {
1568:..\SEGGER/SEGGER_RTT.c ****     BufferIndex = -1;
 2519              		.loc 1 1568 0
 2520 00e4 4FF0FF33 		mov	r3, #-1
 2521 00e8 FB61     		str	r3, [r7, #28]
 2522              	.L144:
1569:..\SEGGER/SEGGER_RTT.c ****   }
1570:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2523              		.loc 1 1570 0
 2524 00ea 7B69     		ldr	r3, [r7, #20]
 2525              		.syntax unified
 2526              	@ 1570 "..\SEGGER\SEGGER_RTT.c" 1
 2527 00ec 83F31188 		msr   basepri, r3  
 2528              		
 2529              	@ 0 "" 2
 2530              		.thumb
 2531              		.syntax unified
 2532              	.LBE16:
1571:..\SEGGER/SEGGER_RTT.c ****   return BufferIndex;
 2533              		.loc 1 1571 0
 2534 00f0 FB69     		ldr	r3, [r7, #28]
1572:..\SEGGER/SEGGER_RTT.c **** }
 2535              		.loc 1 1572 0
 2536 00f2 1846     		mov	r0, r3
 2537 00f4 2037     		adds	r7, r7, #32
 2538              		.cfi_def_cfa_offset 8
 2539 00f6 BD46     		mov	sp, r7
 2540              		.cfi_def_cfa_register 13
 2541              		@ sp needed
 2542 00f8 80BD     		pop	{r7, pc}
 2543              	.L148:
 2544 00fa 00BF     		.align	2
 2545              	.L147:
 2546 00fc 00000000 		.word	_SEGGER_RTT
 2547              		.cfi_endproc
 2548              	.LFE23:
 2549              		.size	SEGGER_RTT_AllocDownBuffer, .-SEGGER_RTT_AllocDownBuffer
 2550              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2551              		.align	2
 2552              		.global	SEGGER_RTT_AllocUpBuffer
 2553              		.thumb
 2554              		.thumb_func
 2555              		.type	SEGGER_RTT_AllocUpBuffer, %function
 2556              	SEGGER_RTT_AllocUpBuffer:
 2557              	.LFB24:
1573:..\SEGGER/SEGGER_RTT.c **** 
1574:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1575:..\SEGGER/SEGGER_RTT.c **** *
1576:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1577:..\SEGGER/SEGGER_RTT.c **** *
1578:..\SEGGER/SEGGER_RTT.c **** *  Function description
1579:..\SEGGER/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1580:..\SEGGER/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 74


1581:..\SEGGER/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1582:..\SEGGER/SEGGER_RTT.c **** *
1583:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1584:..\SEGGER/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1585:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1586:..\SEGGER/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1587:..\SEGGER/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1588:..\SEGGER/SEGGER_RTT.c **** *
1589:..\SEGGER/SEGGER_RTT.c **** *  Return value
1590:..\SEGGER/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1591:..\SEGGER/SEGGER_RTT.c **** *     < 0 - Error
1592:..\SEGGER/SEGGER_RTT.c **** */
1593:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2558              		.loc 1 1593 0
 2559              		.cfi_startproc
 2560              		@ args = 0, pretend = 0, frame = 32
 2561              		@ frame_needed = 1, uses_anonymous_args = 0
 2562 0000 80B5     		push	{r7, lr}
 2563              		.cfi_def_cfa_offset 8
 2564              		.cfi_offset 7, -8
 2565              		.cfi_offset 14, -4
 2566 0002 88B0     		sub	sp, sp, #32
 2567              		.cfi_def_cfa_offset 40
 2568 0004 00AF     		add	r7, sp, #0
 2569              		.cfi_def_cfa_register 7
 2570 0006 F860     		str	r0, [r7, #12]
 2571 0008 B960     		str	r1, [r7, #8]
 2572 000a 7A60     		str	r2, [r7, #4]
 2573 000c 3B60     		str	r3, [r7]
 2574              	.LBB17:
1594:..\SEGGER/SEGGER_RTT.c ****   int BufferIndex;
1595:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1596:..\SEGGER/SEGGER_RTT.c **** 
1597:..\SEGGER/SEGGER_RTT.c ****   INIT();
 2575              		.loc 1 1597 0
 2576 000e 3C4B     		ldr	r3, .L158
 2577 0010 BB61     		str	r3, [r7, #24]
 2578 0012 BB69     		ldr	r3, [r7, #24]
 2579 0014 1B78     		ldrb	r3, [r3]
 2580 0016 DBB2     		uxtb	r3, r3
 2581 0018 002B     		cmp	r3, #0
 2582 001a 01D1     		bne	.L150
 2583              		.loc 1 1597 0 is_stmt 0 discriminator 1
 2584 001c FFF7FEFF 		bl	_DoInit
 2585              	.L150:
 2586              	.LBE17:
 2587              	.LBB18:
1598:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2588              		.loc 1 1598 0 is_stmt 1
 2589              		.syntax unified
 2590              	@ 1598 "..\SEGGER\SEGGER_RTT.c" 1
 2591 0020 EFF31183 		mrs   r3, basepri  
 2592 0024 4FF02001 		mov   r1, #32       
 2593 0028 81F31188 		msr   basepri, r1  
 2594              		
 2595              	@ 0 "" 2
 2596              		.thumb
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 75


 2597              		.syntax unified
 2598 002c 7B61     		str	r3, [r7, #20]
1599:..\SEGGER/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2599              		.loc 1 1599 0
 2600 002e 344B     		ldr	r3, .L158
 2601 0030 3B61     		str	r3, [r7, #16]
1600:..\SEGGER/SEGGER_RTT.c ****   BufferIndex = 0;
 2602              		.loc 1 1600 0
 2603 0032 0023     		movs	r3, #0
 2604 0034 FB61     		str	r3, [r7, #28]
 2605              	.L153:
1601:..\SEGGER/SEGGER_RTT.c ****   do {
1602:..\SEGGER/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 2606              		.loc 1 1602 0
 2607 0036 3969     		ldr	r1, [r7, #16]
 2608 0038 FB69     		ldr	r3, [r7, #28]
 2609 003a 5A1C     		adds	r2, r3, #1
 2610 003c 1346     		mov	r3, r2
 2611 003e 5B00     		lsls	r3, r3, #1
 2612 0040 1344     		add	r3, r3, r2
 2613 0042 DB00     		lsls	r3, r3, #3
 2614 0044 0B44     		add	r3, r3, r1
 2615 0046 0433     		adds	r3, r3, #4
 2616 0048 1B68     		ldr	r3, [r3]
 2617 004a 002B     		cmp	r3, #0
 2618 004c 08D0     		beq	.L157
1603:..\SEGGER/SEGGER_RTT.c ****       break;
1604:..\SEGGER/SEGGER_RTT.c ****     }
1605:..\SEGGER/SEGGER_RTT.c ****     BufferIndex++;
 2619              		.loc 1 1605 0
 2620 004e FB69     		ldr	r3, [r7, #28]
 2621 0050 0133     		adds	r3, r3, #1
 2622 0052 FB61     		str	r3, [r7, #28]
1606:..\SEGGER/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 2623              		.loc 1 1606 0
 2624 0054 3B69     		ldr	r3, [r7, #16]
 2625 0056 1A69     		ldr	r2, [r3, #16]
 2626 0058 FB69     		ldr	r3, [r7, #28]
 2627 005a 9A42     		cmp	r2, r3
 2628 005c EBDC     		bgt	.L153
 2629 005e 00E0     		b	.L152
 2630              	.L157:
1603:..\SEGGER/SEGGER_RTT.c ****       break;
 2631              		.loc 1 1603 0
 2632 0060 00BF     		nop
 2633              	.L152:
1607:..\SEGGER/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 2634              		.loc 1 1607 0
 2635 0062 3B69     		ldr	r3, [r7, #16]
 2636 0064 1A69     		ldr	r2, [r3, #16]
 2637 0066 FB69     		ldr	r3, [r7, #28]
 2638 0068 9A42     		cmp	r2, r3
 2639 006a 3DDD     		ble	.L154
1608:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 2640              		.loc 1 1608 0
 2641 006c 3969     		ldr	r1, [r7, #16]
 2642 006e FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 76


 2643 0070 5A1C     		adds	r2, r3, #1
 2644 0072 1346     		mov	r3, r2
 2645 0074 5B00     		lsls	r3, r3, #1
 2646 0076 1344     		add	r3, r3, r2
 2647 0078 DB00     		lsls	r3, r3, #3
 2648 007a 0B44     		add	r3, r3, r1
 2649 007c FA68     		ldr	r2, [r7, #12]
 2650 007e 1A60     		str	r2, [r3]
1609:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2651              		.loc 1 1609 0
 2652 0080 3969     		ldr	r1, [r7, #16]
 2653 0082 FB69     		ldr	r3, [r7, #28]
 2654 0084 5A1C     		adds	r2, r3, #1
 2655 0086 1346     		mov	r3, r2
 2656 0088 5B00     		lsls	r3, r3, #1
 2657 008a 1344     		add	r3, r3, r2
 2658 008c DB00     		lsls	r3, r3, #3
 2659 008e 0B44     		add	r3, r3, r1
 2660 0090 0433     		adds	r3, r3, #4
 2661 0092 BA68     		ldr	r2, [r7, #8]
 2662 0094 1A60     		str	r2, [r3]
1610:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2663              		.loc 1 1610 0
 2664 0096 3969     		ldr	r1, [r7, #16]
 2665 0098 FA69     		ldr	r2, [r7, #28]
 2666 009a 1346     		mov	r3, r2
 2667 009c 5B00     		lsls	r3, r3, #1
 2668 009e 1344     		add	r3, r3, r2
 2669 00a0 DB00     		lsls	r3, r3, #3
 2670 00a2 0B44     		add	r3, r3, r1
 2671 00a4 2033     		adds	r3, r3, #32
 2672 00a6 7A68     		ldr	r2, [r7, #4]
 2673 00a8 1A60     		str	r2, [r3]
1611:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 2674              		.loc 1 1611 0
 2675 00aa 3969     		ldr	r1, [r7, #16]
 2676 00ac FA69     		ldr	r2, [r7, #28]
 2677 00ae 1346     		mov	r3, r2
 2678 00b0 5B00     		lsls	r3, r3, #1
 2679 00b2 1344     		add	r3, r3, r2
 2680 00b4 DB00     		lsls	r3, r3, #3
 2681 00b6 0B44     		add	r3, r3, r1
 2682 00b8 2833     		adds	r3, r3, #40
 2683 00ba 0022     		movs	r2, #0
 2684 00bc 1A60     		str	r2, [r3]
1612:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 2685              		.loc 1 1612 0
 2686 00be 3969     		ldr	r1, [r7, #16]
 2687 00c0 FA69     		ldr	r2, [r7, #28]
 2688 00c2 1346     		mov	r3, r2
 2689 00c4 5B00     		lsls	r3, r3, #1
 2690 00c6 1344     		add	r3, r3, r2
 2691 00c8 DB00     		lsls	r3, r3, #3
 2692 00ca 0B44     		add	r3, r3, r1
 2693 00cc 2433     		adds	r3, r3, #36
 2694 00ce 0022     		movs	r2, #0
 2695 00d0 1A60     		str	r2, [r3]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 77


1613:..\SEGGER/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 2696              		.loc 1 1613 0
 2697 00d2 3969     		ldr	r1, [r7, #16]
 2698 00d4 FA69     		ldr	r2, [r7, #28]
 2699 00d6 1346     		mov	r3, r2
 2700 00d8 5B00     		lsls	r3, r3, #1
 2701 00da 1344     		add	r3, r3, r2
 2702 00dc DB00     		lsls	r3, r3, #3
 2703 00de 0B44     		add	r3, r3, r1
 2704 00e0 2C33     		adds	r3, r3, #44
 2705 00e2 3A68     		ldr	r2, [r7]
 2706 00e4 1A60     		str	r2, [r3]
 2707 00e6 02E0     		b	.L155
 2708              	.L154:
1614:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
1615:..\SEGGER/SEGGER_RTT.c ****   } else {
1616:..\SEGGER/SEGGER_RTT.c ****     BufferIndex = -1;
 2709              		.loc 1 1616 0
 2710 00e8 4FF0FF33 		mov	r3, #-1
 2711 00ec FB61     		str	r3, [r7, #28]
 2712              	.L155:
1617:..\SEGGER/SEGGER_RTT.c ****   }
1618:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2713              		.loc 1 1618 0
 2714 00ee 7B69     		ldr	r3, [r7, #20]
 2715              		.syntax unified
 2716              	@ 1618 "..\SEGGER\SEGGER_RTT.c" 1
 2717 00f0 83F31188 		msr   basepri, r3  
 2718              		
 2719              	@ 0 "" 2
 2720              		.thumb
 2721              		.syntax unified
 2722              	.LBE18:
1619:..\SEGGER/SEGGER_RTT.c ****   return BufferIndex;
 2723              		.loc 1 1619 0
 2724 00f4 FB69     		ldr	r3, [r7, #28]
1620:..\SEGGER/SEGGER_RTT.c **** }
 2725              		.loc 1 1620 0
 2726 00f6 1846     		mov	r0, r3
 2727 00f8 2037     		adds	r7, r7, #32
 2728              		.cfi_def_cfa_offset 8
 2729 00fa BD46     		mov	sp, r7
 2730              		.cfi_def_cfa_register 13
 2731              		@ sp needed
 2732 00fc 80BD     		pop	{r7, pc}
 2733              	.L159:
 2734 00fe 00BF     		.align	2
 2735              	.L158:
 2736 0100 00000000 		.word	_SEGGER_RTT
 2737              		.cfi_endproc
 2738              	.LFE24:
 2739              		.size	SEGGER_RTT_AllocUpBuffer, .-SEGGER_RTT_AllocUpBuffer
 2740              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2741              		.align	2
 2742              		.global	SEGGER_RTT_ConfigUpBuffer
 2743              		.thumb
 2744              		.thumb_func
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 78


 2745              		.type	SEGGER_RTT_ConfigUpBuffer, %function
 2746              	SEGGER_RTT_ConfigUpBuffer:
 2747              	.LFB25:
1621:..\SEGGER/SEGGER_RTT.c **** 
1622:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1623:..\SEGGER/SEGGER_RTT.c **** *
1624:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1625:..\SEGGER/SEGGER_RTT.c **** *
1626:..\SEGGER/SEGGER_RTT.c **** *  Function description
1627:..\SEGGER/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1628:..\SEGGER/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1629:..\SEGGER/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1630:..\SEGGER/SEGGER_RTT.c **** *
1631:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1632:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1633:..\SEGGER/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1634:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1635:..\SEGGER/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1636:..\SEGGER/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1637:..\SEGGER/SEGGER_RTT.c **** *
1638:..\SEGGER/SEGGER_RTT.c **** *  Return value
1639:..\SEGGER/SEGGER_RTT.c **** *    >= 0 - O.K.
1640:..\SEGGER/SEGGER_RTT.c **** *     < 0 - Error
1641:..\SEGGER/SEGGER_RTT.c **** *
1642:..\SEGGER/SEGGER_RTT.c **** *  Additional information
1643:..\SEGGER/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1644:..\SEGGER/SEGGER_RTT.c **** *    May only be called once per buffer.
1645:..\SEGGER/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1646:..\SEGGER/SEGGER_RTT.c **** */
1647:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2748              		.loc 1 1647 0
 2749              		.cfi_startproc
 2750              		@ args = 4, pretend = 0, frame = 40
 2751              		@ frame_needed = 1, uses_anonymous_args = 0
 2752 0000 80B5     		push	{r7, lr}
 2753              		.cfi_def_cfa_offset 8
 2754              		.cfi_offset 7, -8
 2755              		.cfi_offset 14, -4
 2756 0002 8AB0     		sub	sp, sp, #40
 2757              		.cfi_def_cfa_offset 48
 2758 0004 00AF     		add	r7, sp, #0
 2759              		.cfi_def_cfa_register 7
 2760 0006 F860     		str	r0, [r7, #12]
 2761 0008 B960     		str	r1, [r7, #8]
 2762 000a 7A60     		str	r2, [r7, #4]
 2763 000c 3B60     		str	r3, [r7]
 2764              	.LBB19:
1648:..\SEGGER/SEGGER_RTT.c ****   int r;
1649:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1650:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1651:..\SEGGER/SEGGER_RTT.c **** 
1652:..\SEGGER/SEGGER_RTT.c ****   INIT();
 2765              		.loc 1 1652 0
 2766 000e 204B     		ldr	r3, .L166
 2767 0010 3B62     		str	r3, [r7, #32]
 2768 0012 3B6A     		ldr	r3, [r7, #32]
 2769 0014 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 79


 2770 0016 DBB2     		uxtb	r3, r3
 2771 0018 002B     		cmp	r3, #0
 2772 001a 01D1     		bne	.L161
 2773              		.loc 1 1652 0 is_stmt 0 discriminator 1
 2774 001c FFF7FEFF 		bl	_DoInit
 2775              	.L161:
 2776              	.LBE19:
1653:..\SEGGER/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2777              		.loc 1 1653 0 is_stmt 1
 2778 0020 1B4B     		ldr	r3, .L166
 2779 0022 FB61     		str	r3, [r7, #28]
1654:..\SEGGER/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 2780              		.loc 1 1654 0
 2781 0024 FB68     		ldr	r3, [r7, #12]
 2782 0026 022B     		cmp	r3, #2
 2783 0028 2AD8     		bhi	.L162
 2784              	.LBB20:
1655:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2785              		.loc 1 1655 0
 2786              		.syntax unified
 2787              	@ 1655 "..\SEGGER\SEGGER_RTT.c" 1
 2788 002a EFF31183 		mrs   r3, basepri  
 2789 002e 4FF02001 		mov   r1, #32       
 2790 0032 81F31188 		msr   basepri, r1  
 2791              		
 2792              	@ 0 "" 2
 2793              		.thumb
 2794              		.syntax unified
 2795 0036 BB61     		str	r3, [r7, #24]
1656:..\SEGGER/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 2796              		.loc 1 1656 0
 2797 0038 FB68     		ldr	r3, [r7, #12]
 2798 003a 5A1C     		adds	r2, r3, #1
 2799 003c 1346     		mov	r3, r2
 2800 003e 5B00     		lsls	r3, r3, #1
 2801 0040 1344     		add	r3, r3, r2
 2802 0042 DB00     		lsls	r3, r3, #3
 2803 0044 FA69     		ldr	r2, [r7, #28]
 2804 0046 1344     		add	r3, r3, r2
 2805 0048 7B61     		str	r3, [r7, #20]
1657:..\SEGGER/SEGGER_RTT.c ****     if (BufferIndex) {
 2806              		.loc 1 1657 0
 2807 004a FB68     		ldr	r3, [r7, #12]
 2808 004c 002B     		cmp	r3, #0
 2809 004e 0ED0     		beq	.L163
1658:..\SEGGER/SEGGER_RTT.c ****       pUp->sName        = sName;
 2810              		.loc 1 1658 0
 2811 0050 7B69     		ldr	r3, [r7, #20]
 2812 0052 BA68     		ldr	r2, [r7, #8]
 2813 0054 1A60     		str	r2, [r3]
1659:..\SEGGER/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 2814              		.loc 1 1659 0
 2815 0056 7B69     		ldr	r3, [r7, #20]
 2816 0058 7A68     		ldr	r2, [r7, #4]
 2817 005a 5A60     		str	r2, [r3, #4]
1660:..\SEGGER/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 2818              		.loc 1 1660 0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 80


 2819 005c 7B69     		ldr	r3, [r7, #20]
 2820 005e 3A68     		ldr	r2, [r7]
 2821 0060 9A60     		str	r2, [r3, #8]
1661:..\SEGGER/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 2822              		.loc 1 1661 0
 2823 0062 7B69     		ldr	r3, [r7, #20]
 2824 0064 0022     		movs	r2, #0
 2825 0066 1A61     		str	r2, [r3, #16]
1662:..\SEGGER/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 2826              		.loc 1 1662 0
 2827 0068 7B69     		ldr	r3, [r7, #20]
 2828 006a 0022     		movs	r2, #0
 2829 006c DA60     		str	r2, [r3, #12]
 2830              	.L163:
1663:..\SEGGER/SEGGER_RTT.c ****     }
1664:..\SEGGER/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 2831              		.loc 1 1664 0
 2832 006e 7B69     		ldr	r3, [r7, #20]
 2833 0070 3A6B     		ldr	r2, [r7, #48]
 2834 0072 5A61     		str	r2, [r3, #20]
1665:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2835              		.loc 1 1665 0
 2836 0074 BB69     		ldr	r3, [r7, #24]
 2837              		.syntax unified
 2838              	@ 1665 "..\SEGGER\SEGGER_RTT.c" 1
 2839 0076 83F31188 		msr   basepri, r3  
 2840              		
 2841              	@ 0 "" 2
 2842              		.thumb
 2843              		.syntax unified
 2844              	.LBE20:
1666:..\SEGGER/SEGGER_RTT.c ****     r =  0;
 2845              		.loc 1 1666 0
 2846 007a 0023     		movs	r3, #0
 2847 007c 7B62     		str	r3, [r7, #36]
 2848 007e 02E0     		b	.L164
 2849              	.L162:
1667:..\SEGGER/SEGGER_RTT.c ****   } else {
1668:..\SEGGER/SEGGER_RTT.c ****     r = -1;
 2850              		.loc 1 1668 0
 2851 0080 4FF0FF33 		mov	r3, #-1
 2852 0084 7B62     		str	r3, [r7, #36]
 2853              	.L164:
1669:..\SEGGER/SEGGER_RTT.c ****   }
1670:..\SEGGER/SEGGER_RTT.c ****   return r;
 2854              		.loc 1 1670 0
 2855 0086 7B6A     		ldr	r3, [r7, #36]
1671:..\SEGGER/SEGGER_RTT.c **** }
 2856              		.loc 1 1671 0
 2857 0088 1846     		mov	r0, r3
 2858 008a 2837     		adds	r7, r7, #40
 2859              		.cfi_def_cfa_offset 8
 2860 008c BD46     		mov	sp, r7
 2861              		.cfi_def_cfa_register 13
 2862              		@ sp needed
 2863 008e 80BD     		pop	{r7, pc}
 2864              	.L167:
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 81


 2865              		.align	2
 2866              	.L166:
 2867 0090 00000000 		.word	_SEGGER_RTT
 2868              		.cfi_endproc
 2869              	.LFE25:
 2870              		.size	SEGGER_RTT_ConfigUpBuffer, .-SEGGER_RTT_ConfigUpBuffer
 2871              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2872              		.align	2
 2873              		.global	SEGGER_RTT_ConfigDownBuffer
 2874              		.thumb
 2875              		.thumb_func
 2876              		.type	SEGGER_RTT_ConfigDownBuffer, %function
 2877              	SEGGER_RTT_ConfigDownBuffer:
 2878              	.LFB26:
1672:..\SEGGER/SEGGER_RTT.c **** 
1673:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1674:..\SEGGER/SEGGER_RTT.c **** *
1675:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1676:..\SEGGER/SEGGER_RTT.c **** *
1677:..\SEGGER/SEGGER_RTT.c **** *  Function description
1678:..\SEGGER/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1679:..\SEGGER/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1680:..\SEGGER/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1681:..\SEGGER/SEGGER_RTT.c **** *
1682:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1683:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1684:..\SEGGER/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1685:..\SEGGER/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1686:..\SEGGER/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1687:..\SEGGER/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1688:..\SEGGER/SEGGER_RTT.c **** *
1689:..\SEGGER/SEGGER_RTT.c **** *  Return value
1690:..\SEGGER/SEGGER_RTT.c **** *    >= 0  O.K.
1691:..\SEGGER/SEGGER_RTT.c **** *     < 0  Error
1692:..\SEGGER/SEGGER_RTT.c **** *
1693:..\SEGGER/SEGGER_RTT.c **** *  Additional information
1694:..\SEGGER/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1695:..\SEGGER/SEGGER_RTT.c **** *    May only be called once per buffer.
1696:..\SEGGER/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1697:..\SEGGER/SEGGER_RTT.c **** */
1698:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2879              		.loc 1 1698 0
 2880              		.cfi_startproc
 2881              		@ args = 4, pretend = 0, frame = 40
 2882              		@ frame_needed = 1, uses_anonymous_args = 0
 2883 0000 80B5     		push	{r7, lr}
 2884              		.cfi_def_cfa_offset 8
 2885              		.cfi_offset 7, -8
 2886              		.cfi_offset 14, -4
 2887 0002 8AB0     		sub	sp, sp, #40
 2888              		.cfi_def_cfa_offset 48
 2889 0004 00AF     		add	r7, sp, #0
 2890              		.cfi_def_cfa_register 7
 2891 0006 F860     		str	r0, [r7, #12]
 2892 0008 B960     		str	r1, [r7, #8]
 2893 000a 7A60     		str	r2, [r7, #4]
 2894 000c 3B60     		str	r3, [r7]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 82


 2895              	.LBB21:
1699:..\SEGGER/SEGGER_RTT.c ****   int r;
1700:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1701:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1702:..\SEGGER/SEGGER_RTT.c **** 
1703:..\SEGGER/SEGGER_RTT.c ****   INIT();
 2896              		.loc 1 1703 0
 2897 000e 204B     		ldr	r3, .L174
 2898 0010 3B62     		str	r3, [r7, #32]
 2899 0012 3B6A     		ldr	r3, [r7, #32]
 2900 0014 1B78     		ldrb	r3, [r3]
 2901 0016 DBB2     		uxtb	r3, r3
 2902 0018 002B     		cmp	r3, #0
 2903 001a 01D1     		bne	.L169
 2904              		.loc 1 1703 0 is_stmt 0 discriminator 1
 2905 001c FFF7FEFF 		bl	_DoInit
 2906              	.L169:
 2907              	.LBE21:
1704:..\SEGGER/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2908              		.loc 1 1704 0 is_stmt 1
 2909 0020 1B4B     		ldr	r3, .L174
 2910 0022 FB61     		str	r3, [r7, #28]
1705:..\SEGGER/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 2911              		.loc 1 1705 0
 2912 0024 FB68     		ldr	r3, [r7, #12]
 2913 0026 022B     		cmp	r3, #2
 2914 0028 2AD8     		bhi	.L170
 2915              	.LBB22:
1706:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2916              		.loc 1 1706 0
 2917              		.syntax unified
 2918              	@ 1706 "..\SEGGER\SEGGER_RTT.c" 1
 2919 002a EFF31183 		mrs   r3, basepri  
 2920 002e 4FF02001 		mov   r1, #32       
 2921 0032 81F31188 		msr   basepri, r1  
 2922              		
 2923              	@ 0 "" 2
 2924              		.thumb
 2925              		.syntax unified
 2926 0036 BB61     		str	r3, [r7, #24]
1707:..\SEGGER/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 2927              		.loc 1 1707 0
 2928 0038 FA68     		ldr	r2, [r7, #12]
 2929 003a 1346     		mov	r3, r2
 2930 003c 5B00     		lsls	r3, r3, #1
 2931 003e 1344     		add	r3, r3, r2
 2932 0040 DB00     		lsls	r3, r3, #3
 2933 0042 6033     		adds	r3, r3, #96
 2934 0044 FA69     		ldr	r2, [r7, #28]
 2935 0046 1344     		add	r3, r3, r2
 2936 0048 7B61     		str	r3, [r7, #20]
1708:..\SEGGER/SEGGER_RTT.c ****     if (BufferIndex) {
 2937              		.loc 1 1708 0
 2938 004a FB68     		ldr	r3, [r7, #12]
 2939 004c 002B     		cmp	r3, #0
 2940 004e 0ED0     		beq	.L171
1709:..\SEGGER/SEGGER_RTT.c ****       pDown->sName        = sName;
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 83


 2941              		.loc 1 1709 0
 2942 0050 7B69     		ldr	r3, [r7, #20]
 2943 0052 BA68     		ldr	r2, [r7, #8]
 2944 0054 1A60     		str	r2, [r3]
1710:..\SEGGER/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 2945              		.loc 1 1710 0
 2946 0056 7B69     		ldr	r3, [r7, #20]
 2947 0058 7A68     		ldr	r2, [r7, #4]
 2948 005a 5A60     		str	r2, [r3, #4]
1711:..\SEGGER/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 2949              		.loc 1 1711 0
 2950 005c 7B69     		ldr	r3, [r7, #20]
 2951 005e 3A68     		ldr	r2, [r7]
 2952 0060 9A60     		str	r2, [r3, #8]
1712:..\SEGGER/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 2953              		.loc 1 1712 0
 2954 0062 7B69     		ldr	r3, [r7, #20]
 2955 0064 0022     		movs	r2, #0
 2956 0066 1A61     		str	r2, [r3, #16]
1713:..\SEGGER/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 2957              		.loc 1 1713 0
 2958 0068 7B69     		ldr	r3, [r7, #20]
 2959 006a 0022     		movs	r2, #0
 2960 006c DA60     		str	r2, [r3, #12]
 2961              	.L171:
1714:..\SEGGER/SEGGER_RTT.c ****     }
1715:..\SEGGER/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 2962              		.loc 1 1715 0
 2963 006e 7B69     		ldr	r3, [r7, #20]
 2964 0070 3A6B     		ldr	r2, [r7, #48]
 2965 0072 5A61     		str	r2, [r3, #20]
1716:..\SEGGER/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
1717:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2966              		.loc 1 1717 0
 2967 0074 BB69     		ldr	r3, [r7, #24]
 2968              		.syntax unified
 2969              	@ 1717 "..\SEGGER\SEGGER_RTT.c" 1
 2970 0076 83F31188 		msr   basepri, r3  
 2971              		
 2972              	@ 0 "" 2
 2973              		.thumb
 2974              		.syntax unified
 2975              	.LBE22:
1718:..\SEGGER/SEGGER_RTT.c ****     r =  0;
 2976              		.loc 1 1718 0
 2977 007a 0023     		movs	r3, #0
 2978 007c 7B62     		str	r3, [r7, #36]
 2979 007e 02E0     		b	.L172
 2980              	.L170:
1719:..\SEGGER/SEGGER_RTT.c ****   } else {
1720:..\SEGGER/SEGGER_RTT.c ****     r = -1;
 2981              		.loc 1 1720 0
 2982 0080 4FF0FF33 		mov	r3, #-1
 2983 0084 7B62     		str	r3, [r7, #36]
 2984              	.L172:
1721:..\SEGGER/SEGGER_RTT.c ****   }
1722:..\SEGGER/SEGGER_RTT.c ****   return r;
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 84


 2985              		.loc 1 1722 0
 2986 0086 7B6A     		ldr	r3, [r7, #36]
1723:..\SEGGER/SEGGER_RTT.c **** }
 2987              		.loc 1 1723 0
 2988 0088 1846     		mov	r0, r3
 2989 008a 2837     		adds	r7, r7, #40
 2990              		.cfi_def_cfa_offset 8
 2991 008c BD46     		mov	sp, r7
 2992              		.cfi_def_cfa_register 13
 2993              		@ sp needed
 2994 008e 80BD     		pop	{r7, pc}
 2995              	.L175:
 2996              		.align	2
 2997              	.L174:
 2998 0090 00000000 		.word	_SEGGER_RTT
 2999              		.cfi_endproc
 3000              	.LFE26:
 3001              		.size	SEGGER_RTT_ConfigDownBuffer, .-SEGGER_RTT_ConfigDownBuffer
 3002              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 3003              		.align	2
 3004              		.global	SEGGER_RTT_SetNameUpBuffer
 3005              		.thumb
 3006              		.thumb_func
 3007              		.type	SEGGER_RTT_SetNameUpBuffer, %function
 3008              	SEGGER_RTT_SetNameUpBuffer:
 3009              	.LFB27:
1724:..\SEGGER/SEGGER_RTT.c **** 
1725:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1726:..\SEGGER/SEGGER_RTT.c **** *
1727:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1728:..\SEGGER/SEGGER_RTT.c **** *
1729:..\SEGGER/SEGGER_RTT.c **** *  Function description
1730:..\SEGGER/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1731:..\SEGGER/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1732:..\SEGGER/SEGGER_RTT.c **** *
1733:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1734:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1735:..\SEGGER/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1736:..\SEGGER/SEGGER_RTT.c **** *
1737:..\SEGGER/SEGGER_RTT.c **** *  Return value
1738:..\SEGGER/SEGGER_RTT.c **** *    >= 0  O.K.
1739:..\SEGGER/SEGGER_RTT.c **** *     < 0  Error
1740:..\SEGGER/SEGGER_RTT.c **** */
1741:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 3010              		.loc 1 1741 0
 3011              		.cfi_startproc
 3012              		@ args = 0, pretend = 0, frame = 32
 3013              		@ frame_needed = 1, uses_anonymous_args = 0
 3014 0000 80B5     		push	{r7, lr}
 3015              		.cfi_def_cfa_offset 8
 3016              		.cfi_offset 7, -8
 3017              		.cfi_offset 14, -4
 3018 0002 88B0     		sub	sp, sp, #32
 3019              		.cfi_def_cfa_offset 40
 3020 0004 00AF     		add	r7, sp, #0
 3021              		.cfi_def_cfa_register 7
 3022 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 85


 3023 0008 3960     		str	r1, [r7]
 3024              	.LBB23:
1742:..\SEGGER/SEGGER_RTT.c ****   int r;
1743:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1744:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1745:..\SEGGER/SEGGER_RTT.c **** 
1746:..\SEGGER/SEGGER_RTT.c ****   INIT();
 3025              		.loc 1 1746 0
 3026 000a 174B     		ldr	r3, .L181
 3027 000c BB61     		str	r3, [r7, #24]
 3028 000e BB69     		ldr	r3, [r7, #24]
 3029 0010 1B78     		ldrb	r3, [r3]
 3030 0012 DBB2     		uxtb	r3, r3
 3031 0014 002B     		cmp	r3, #0
 3032 0016 01D1     		bne	.L177
 3033              		.loc 1 1746 0 is_stmt 0 discriminator 1
 3034 0018 FFF7FEFF 		bl	_DoInit
 3035              	.L177:
 3036              	.LBE23:
1747:..\SEGGER/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3037              		.loc 1 1747 0 is_stmt 1
 3038 001c 124B     		ldr	r3, .L181
 3039 001e 7B61     		str	r3, [r7, #20]
1748:..\SEGGER/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3040              		.loc 1 1748 0
 3041 0020 7B68     		ldr	r3, [r7, #4]
 3042 0022 022B     		cmp	r3, #2
 3043 0024 18D8     		bhi	.L178
 3044              	.LBB24:
1749:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3045              		.loc 1 1749 0
 3046              		.syntax unified
 3047              	@ 1749 "..\SEGGER\SEGGER_RTT.c" 1
 3048 0026 EFF31183 		mrs   r3, basepri  
 3049 002a 4FF02001 		mov   r1, #32       
 3050 002e 81F31188 		msr   basepri, r1  
 3051              		
 3052              	@ 0 "" 2
 3053              		.thumb
 3054              		.syntax unified
 3055 0032 3B61     		str	r3, [r7, #16]
1750:..\SEGGER/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3056              		.loc 1 1750 0
 3057 0034 7B68     		ldr	r3, [r7, #4]
 3058 0036 5A1C     		adds	r2, r3, #1
 3059 0038 1346     		mov	r3, r2
 3060 003a 5B00     		lsls	r3, r3, #1
 3061 003c 1344     		add	r3, r3, r2
 3062 003e DB00     		lsls	r3, r3, #3
 3063 0040 7A69     		ldr	r2, [r7, #20]
 3064 0042 1344     		add	r3, r3, r2
 3065 0044 FB60     		str	r3, [r7, #12]
1751:..\SEGGER/SEGGER_RTT.c ****     pUp->sName = sName;
 3066              		.loc 1 1751 0
 3067 0046 FB68     		ldr	r3, [r7, #12]
 3068 0048 3A68     		ldr	r2, [r7]
 3069 004a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 86


1752:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3070              		.loc 1 1752 0
 3071 004c 3B69     		ldr	r3, [r7, #16]
 3072              		.syntax unified
 3073              	@ 1752 "..\SEGGER\SEGGER_RTT.c" 1
 3074 004e 83F31188 		msr   basepri, r3  
 3075              		
 3076              	@ 0 "" 2
 3077              		.thumb
 3078              		.syntax unified
 3079              	.LBE24:
1753:..\SEGGER/SEGGER_RTT.c ****     r =  0;
 3080              		.loc 1 1753 0
 3081 0052 0023     		movs	r3, #0
 3082 0054 FB61     		str	r3, [r7, #28]
 3083 0056 02E0     		b	.L179
 3084              	.L178:
1754:..\SEGGER/SEGGER_RTT.c ****   } else {
1755:..\SEGGER/SEGGER_RTT.c ****     r = -1;
 3085              		.loc 1 1755 0
 3086 0058 4FF0FF33 		mov	r3, #-1
 3087 005c FB61     		str	r3, [r7, #28]
 3088              	.L179:
1756:..\SEGGER/SEGGER_RTT.c ****   }
1757:..\SEGGER/SEGGER_RTT.c ****   return r;
 3089              		.loc 1 1757 0
 3090 005e FB69     		ldr	r3, [r7, #28]
1758:..\SEGGER/SEGGER_RTT.c **** }
 3091              		.loc 1 1758 0
 3092 0060 1846     		mov	r0, r3
 3093 0062 2037     		adds	r7, r7, #32
 3094              		.cfi_def_cfa_offset 8
 3095 0064 BD46     		mov	sp, r7
 3096              		.cfi_def_cfa_register 13
 3097              		@ sp needed
 3098 0066 80BD     		pop	{r7, pc}
 3099              	.L182:
 3100              		.align	2
 3101              	.L181:
 3102 0068 00000000 		.word	_SEGGER_RTT
 3103              		.cfi_endproc
 3104              	.LFE27:
 3105              		.size	SEGGER_RTT_SetNameUpBuffer, .-SEGGER_RTT_SetNameUpBuffer
 3106              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3107              		.align	2
 3108              		.global	SEGGER_RTT_SetNameDownBuffer
 3109              		.thumb
 3110              		.thumb_func
 3111              		.type	SEGGER_RTT_SetNameDownBuffer, %function
 3112              	SEGGER_RTT_SetNameDownBuffer:
 3113              	.LFB28:
1759:..\SEGGER/SEGGER_RTT.c **** 
1760:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1761:..\SEGGER/SEGGER_RTT.c **** *
1762:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1763:..\SEGGER/SEGGER_RTT.c **** *
1764:..\SEGGER/SEGGER_RTT.c **** *  Function description
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 87


1765:..\SEGGER/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1766:..\SEGGER/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1767:..\SEGGER/SEGGER_RTT.c **** *
1768:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1769:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1770:..\SEGGER/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1771:..\SEGGER/SEGGER_RTT.c **** *
1772:..\SEGGER/SEGGER_RTT.c **** *  Return value
1773:..\SEGGER/SEGGER_RTT.c **** *    >= 0  O.K.
1774:..\SEGGER/SEGGER_RTT.c **** *     < 0  Error
1775:..\SEGGER/SEGGER_RTT.c **** */
1776:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3114              		.loc 1 1776 0
 3115              		.cfi_startproc
 3116              		@ args = 0, pretend = 0, frame = 32
 3117              		@ frame_needed = 1, uses_anonymous_args = 0
 3118 0000 80B5     		push	{r7, lr}
 3119              		.cfi_def_cfa_offset 8
 3120              		.cfi_offset 7, -8
 3121              		.cfi_offset 14, -4
 3122 0002 88B0     		sub	sp, sp, #32
 3123              		.cfi_def_cfa_offset 40
 3124 0004 00AF     		add	r7, sp, #0
 3125              		.cfi_def_cfa_register 7
 3126 0006 7860     		str	r0, [r7, #4]
 3127 0008 3960     		str	r1, [r7]
 3128              	.LBB25:
1777:..\SEGGER/SEGGER_RTT.c ****   int r;
1778:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1779:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1780:..\SEGGER/SEGGER_RTT.c **** 
1781:..\SEGGER/SEGGER_RTT.c ****   INIT();
 3129              		.loc 1 1781 0
 3130 000a 174B     		ldr	r3, .L188
 3131 000c BB61     		str	r3, [r7, #24]
 3132 000e BB69     		ldr	r3, [r7, #24]
 3133 0010 1B78     		ldrb	r3, [r3]
 3134 0012 DBB2     		uxtb	r3, r3
 3135 0014 002B     		cmp	r3, #0
 3136 0016 01D1     		bne	.L184
 3137              		.loc 1 1781 0 is_stmt 0 discriminator 1
 3138 0018 FFF7FEFF 		bl	_DoInit
 3139              	.L184:
 3140              	.LBE25:
1782:..\SEGGER/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3141              		.loc 1 1782 0 is_stmt 1
 3142 001c 124B     		ldr	r3, .L188
 3143 001e 7B61     		str	r3, [r7, #20]
1783:..\SEGGER/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3144              		.loc 1 1783 0
 3145 0020 7B68     		ldr	r3, [r7, #4]
 3146 0022 022B     		cmp	r3, #2
 3147 0024 18D8     		bhi	.L185
 3148              	.LBB26:
1784:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3149              		.loc 1 1784 0
 3150              		.syntax unified
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 88


 3151              	@ 1784 "..\SEGGER\SEGGER_RTT.c" 1
 3152 0026 EFF31183 		mrs   r3, basepri  
 3153 002a 4FF02001 		mov   r1, #32       
 3154 002e 81F31188 		msr   basepri, r1  
 3155              		
 3156              	@ 0 "" 2
 3157              		.thumb
 3158              		.syntax unified
 3159 0032 3B61     		str	r3, [r7, #16]
1785:..\SEGGER/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3160              		.loc 1 1785 0
 3161 0034 7A68     		ldr	r2, [r7, #4]
 3162 0036 1346     		mov	r3, r2
 3163 0038 5B00     		lsls	r3, r3, #1
 3164 003a 1344     		add	r3, r3, r2
 3165 003c DB00     		lsls	r3, r3, #3
 3166 003e 6033     		adds	r3, r3, #96
 3167 0040 7A69     		ldr	r2, [r7, #20]
 3168 0042 1344     		add	r3, r3, r2
 3169 0044 FB60     		str	r3, [r7, #12]
1786:..\SEGGER/SEGGER_RTT.c ****     pDown->sName = sName;
 3170              		.loc 1 1786 0
 3171 0046 FB68     		ldr	r3, [r7, #12]
 3172 0048 3A68     		ldr	r2, [r7]
 3173 004a 1A60     		str	r2, [r3]
1787:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3174              		.loc 1 1787 0
 3175 004c 3B69     		ldr	r3, [r7, #16]
 3176              		.syntax unified
 3177              	@ 1787 "..\SEGGER\SEGGER_RTT.c" 1
 3178 004e 83F31188 		msr   basepri, r3  
 3179              		
 3180              	@ 0 "" 2
 3181              		.thumb
 3182              		.syntax unified
 3183              	.LBE26:
1788:..\SEGGER/SEGGER_RTT.c ****     r =  0;
 3184              		.loc 1 1788 0
 3185 0052 0023     		movs	r3, #0
 3186 0054 FB61     		str	r3, [r7, #28]
 3187 0056 02E0     		b	.L186
 3188              	.L185:
1789:..\SEGGER/SEGGER_RTT.c ****   } else {
1790:..\SEGGER/SEGGER_RTT.c ****     r = -1;
 3189              		.loc 1 1790 0
 3190 0058 4FF0FF33 		mov	r3, #-1
 3191 005c FB61     		str	r3, [r7, #28]
 3192              	.L186:
1791:..\SEGGER/SEGGER_RTT.c ****   }
1792:..\SEGGER/SEGGER_RTT.c ****   return r;
 3193              		.loc 1 1792 0
 3194 005e FB69     		ldr	r3, [r7, #28]
1793:..\SEGGER/SEGGER_RTT.c **** }
 3195              		.loc 1 1793 0
 3196 0060 1846     		mov	r0, r3
 3197 0062 2037     		adds	r7, r7, #32
 3198              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 89


 3199 0064 BD46     		mov	sp, r7
 3200              		.cfi_def_cfa_register 13
 3201              		@ sp needed
 3202 0066 80BD     		pop	{r7, pc}
 3203              	.L189:
 3204              		.align	2
 3205              	.L188:
 3206 0068 00000000 		.word	_SEGGER_RTT
 3207              		.cfi_endproc
 3208              	.LFE28:
 3209              		.size	SEGGER_RTT_SetNameDownBuffer, .-SEGGER_RTT_SetNameDownBuffer
 3210              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3211              		.align	2
 3212              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3213              		.thumb
 3214              		.thumb_func
 3215              		.type	SEGGER_RTT_SetFlagsUpBuffer, %function
 3216              	SEGGER_RTT_SetFlagsUpBuffer:
 3217              	.LFB29:
1794:..\SEGGER/SEGGER_RTT.c **** 
1795:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1796:..\SEGGER/SEGGER_RTT.c **** *
1797:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1798:..\SEGGER/SEGGER_RTT.c **** *
1799:..\SEGGER/SEGGER_RTT.c **** *  Function description
1800:..\SEGGER/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1801:..\SEGGER/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1802:..\SEGGER/SEGGER_RTT.c **** *
1803:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1804:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1805:..\SEGGER/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1806:..\SEGGER/SEGGER_RTT.c **** *
1807:..\SEGGER/SEGGER_RTT.c **** *  Return value
1808:..\SEGGER/SEGGER_RTT.c **** *    >= 0  O.K.
1809:..\SEGGER/SEGGER_RTT.c **** *     < 0  Error
1810:..\SEGGER/SEGGER_RTT.c **** */
1811:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3218              		.loc 1 1811 0
 3219              		.cfi_startproc
 3220              		@ args = 0, pretend = 0, frame = 32
 3221              		@ frame_needed = 1, uses_anonymous_args = 0
 3222 0000 80B5     		push	{r7, lr}
 3223              		.cfi_def_cfa_offset 8
 3224              		.cfi_offset 7, -8
 3225              		.cfi_offset 14, -4
 3226 0002 88B0     		sub	sp, sp, #32
 3227              		.cfi_def_cfa_offset 40
 3228 0004 00AF     		add	r7, sp, #0
 3229              		.cfi_def_cfa_register 7
 3230 0006 7860     		str	r0, [r7, #4]
 3231 0008 3960     		str	r1, [r7]
 3232              	.LBB27:
1812:..\SEGGER/SEGGER_RTT.c ****   int r;
1813:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1814:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1815:..\SEGGER/SEGGER_RTT.c **** 
1816:..\SEGGER/SEGGER_RTT.c ****   INIT();
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 90


 3233              		.loc 1 1816 0
 3234 000a 174B     		ldr	r3, .L195
 3235 000c BB61     		str	r3, [r7, #24]
 3236 000e BB69     		ldr	r3, [r7, #24]
 3237 0010 1B78     		ldrb	r3, [r3]
 3238 0012 DBB2     		uxtb	r3, r3
 3239 0014 002B     		cmp	r3, #0
 3240 0016 01D1     		bne	.L191
 3241              		.loc 1 1816 0 is_stmt 0 discriminator 1
 3242 0018 FFF7FEFF 		bl	_DoInit
 3243              	.L191:
 3244              	.LBE27:
1817:..\SEGGER/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3245              		.loc 1 1817 0 is_stmt 1
 3246 001c 124B     		ldr	r3, .L195
 3247 001e 7B61     		str	r3, [r7, #20]
1818:..\SEGGER/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3248              		.loc 1 1818 0
 3249 0020 7B68     		ldr	r3, [r7, #4]
 3250 0022 022B     		cmp	r3, #2
 3251 0024 18D8     		bhi	.L192
 3252              	.LBB28:
1819:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3253              		.loc 1 1819 0
 3254              		.syntax unified
 3255              	@ 1819 "..\SEGGER\SEGGER_RTT.c" 1
 3256 0026 EFF31183 		mrs   r3, basepri  
 3257 002a 4FF02001 		mov   r1, #32       
 3258 002e 81F31188 		msr   basepri, r1  
 3259              		
 3260              	@ 0 "" 2
 3261              		.thumb
 3262              		.syntax unified
 3263 0032 3B61     		str	r3, [r7, #16]
1820:..\SEGGER/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3264              		.loc 1 1820 0
 3265 0034 7B68     		ldr	r3, [r7, #4]
 3266 0036 5A1C     		adds	r2, r3, #1
 3267 0038 1346     		mov	r3, r2
 3268 003a 5B00     		lsls	r3, r3, #1
 3269 003c 1344     		add	r3, r3, r2
 3270 003e DB00     		lsls	r3, r3, #3
 3271 0040 7A69     		ldr	r2, [r7, #20]
 3272 0042 1344     		add	r3, r3, r2
 3273 0044 FB60     		str	r3, [r7, #12]
1821:..\SEGGER/SEGGER_RTT.c ****     pUp->Flags = Flags;
 3274              		.loc 1 1821 0
 3275 0046 FB68     		ldr	r3, [r7, #12]
 3276 0048 3A68     		ldr	r2, [r7]
 3277 004a 5A61     		str	r2, [r3, #20]
1822:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3278              		.loc 1 1822 0
 3279 004c 3B69     		ldr	r3, [r7, #16]
 3280              		.syntax unified
 3281              	@ 1822 "..\SEGGER\SEGGER_RTT.c" 1
 3282 004e 83F31188 		msr   basepri, r3  
 3283              		
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 91


 3284              	@ 0 "" 2
 3285              		.thumb
 3286              		.syntax unified
 3287              	.LBE28:
1823:..\SEGGER/SEGGER_RTT.c ****     r =  0;
 3288              		.loc 1 1823 0
 3289 0052 0023     		movs	r3, #0
 3290 0054 FB61     		str	r3, [r7, #28]
 3291 0056 02E0     		b	.L193
 3292              	.L192:
1824:..\SEGGER/SEGGER_RTT.c ****   } else {
1825:..\SEGGER/SEGGER_RTT.c ****     r = -1;
 3293              		.loc 1 1825 0
 3294 0058 4FF0FF33 		mov	r3, #-1
 3295 005c FB61     		str	r3, [r7, #28]
 3296              	.L193:
1826:..\SEGGER/SEGGER_RTT.c ****   }
1827:..\SEGGER/SEGGER_RTT.c ****   return r;
 3297              		.loc 1 1827 0
 3298 005e FB69     		ldr	r3, [r7, #28]
1828:..\SEGGER/SEGGER_RTT.c **** }
 3299              		.loc 1 1828 0
 3300 0060 1846     		mov	r0, r3
 3301 0062 2037     		adds	r7, r7, #32
 3302              		.cfi_def_cfa_offset 8
 3303 0064 BD46     		mov	sp, r7
 3304              		.cfi_def_cfa_register 13
 3305              		@ sp needed
 3306 0066 80BD     		pop	{r7, pc}
 3307              	.L196:
 3308              		.align	2
 3309              	.L195:
 3310 0068 00000000 		.word	_SEGGER_RTT
 3311              		.cfi_endproc
 3312              	.LFE29:
 3313              		.size	SEGGER_RTT_SetFlagsUpBuffer, .-SEGGER_RTT_SetFlagsUpBuffer
 3314              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3315              		.align	2
 3316              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3317              		.thumb
 3318              		.thumb_func
 3319              		.type	SEGGER_RTT_SetFlagsDownBuffer, %function
 3320              	SEGGER_RTT_SetFlagsDownBuffer:
 3321              	.LFB30:
1829:..\SEGGER/SEGGER_RTT.c **** 
1830:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1831:..\SEGGER/SEGGER_RTT.c **** *
1832:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1833:..\SEGGER/SEGGER_RTT.c **** *
1834:..\SEGGER/SEGGER_RTT.c **** *  Function description
1835:..\SEGGER/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1836:..\SEGGER/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1837:..\SEGGER/SEGGER_RTT.c **** *
1838:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1839:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1840:..\SEGGER/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1841:..\SEGGER/SEGGER_RTT.c **** *
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 92


1842:..\SEGGER/SEGGER_RTT.c **** *  Return value
1843:..\SEGGER/SEGGER_RTT.c **** *    >= 0  O.K.
1844:..\SEGGER/SEGGER_RTT.c **** *     < 0  Error
1845:..\SEGGER/SEGGER_RTT.c **** */
1846:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3322              		.loc 1 1846 0
 3323              		.cfi_startproc
 3324              		@ args = 0, pretend = 0, frame = 32
 3325              		@ frame_needed = 1, uses_anonymous_args = 0
 3326 0000 80B5     		push	{r7, lr}
 3327              		.cfi_def_cfa_offset 8
 3328              		.cfi_offset 7, -8
 3329              		.cfi_offset 14, -4
 3330 0002 88B0     		sub	sp, sp, #32
 3331              		.cfi_def_cfa_offset 40
 3332 0004 00AF     		add	r7, sp, #0
 3333              		.cfi_def_cfa_register 7
 3334 0006 7860     		str	r0, [r7, #4]
 3335 0008 3960     		str	r1, [r7]
 3336              	.LBB29:
1847:..\SEGGER/SEGGER_RTT.c ****   int r;
1848:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1849:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1850:..\SEGGER/SEGGER_RTT.c **** 
1851:..\SEGGER/SEGGER_RTT.c ****   INIT();
 3337              		.loc 1 1851 0
 3338 000a 174B     		ldr	r3, .L202
 3339 000c BB61     		str	r3, [r7, #24]
 3340 000e BB69     		ldr	r3, [r7, #24]
 3341 0010 1B78     		ldrb	r3, [r3]
 3342 0012 DBB2     		uxtb	r3, r3
 3343 0014 002B     		cmp	r3, #0
 3344 0016 01D1     		bne	.L198
 3345              		.loc 1 1851 0 is_stmt 0 discriminator 1
 3346 0018 FFF7FEFF 		bl	_DoInit
 3347              	.L198:
 3348              	.LBE29:
1852:..\SEGGER/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3349              		.loc 1 1852 0 is_stmt 1
 3350 001c 124B     		ldr	r3, .L202
 3351 001e 7B61     		str	r3, [r7, #20]
1853:..\SEGGER/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3352              		.loc 1 1853 0
 3353 0020 7B68     		ldr	r3, [r7, #4]
 3354 0022 022B     		cmp	r3, #2
 3355 0024 18D8     		bhi	.L199
 3356              	.LBB30:
1854:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3357              		.loc 1 1854 0
 3358              		.syntax unified
 3359              	@ 1854 "..\SEGGER\SEGGER_RTT.c" 1
 3360 0026 EFF31183 		mrs   r3, basepri  
 3361 002a 4FF02001 		mov   r1, #32       
 3362 002e 81F31188 		msr   basepri, r1  
 3363              		
 3364              	@ 0 "" 2
 3365              		.thumb
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 93


 3366              		.syntax unified
 3367 0032 3B61     		str	r3, [r7, #16]
1855:..\SEGGER/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3368              		.loc 1 1855 0
 3369 0034 7A68     		ldr	r2, [r7, #4]
 3370 0036 1346     		mov	r3, r2
 3371 0038 5B00     		lsls	r3, r3, #1
 3372 003a 1344     		add	r3, r3, r2
 3373 003c DB00     		lsls	r3, r3, #3
 3374 003e 6033     		adds	r3, r3, #96
 3375 0040 7A69     		ldr	r2, [r7, #20]
 3376 0042 1344     		add	r3, r3, r2
 3377 0044 FB60     		str	r3, [r7, #12]
1856:..\SEGGER/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3378              		.loc 1 1856 0
 3379 0046 FB68     		ldr	r3, [r7, #12]
 3380 0048 3A68     		ldr	r2, [r7]
 3381 004a 5A61     		str	r2, [r3, #20]
1857:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3382              		.loc 1 1857 0
 3383 004c 3B69     		ldr	r3, [r7, #16]
 3384              		.syntax unified
 3385              	@ 1857 "..\SEGGER\SEGGER_RTT.c" 1
 3386 004e 83F31188 		msr   basepri, r3  
 3387              		
 3388              	@ 0 "" 2
 3389              		.thumb
 3390              		.syntax unified
 3391              	.LBE30:
1858:..\SEGGER/SEGGER_RTT.c ****     r =  0;
 3392              		.loc 1 1858 0
 3393 0052 0023     		movs	r3, #0
 3394 0054 FB61     		str	r3, [r7, #28]
 3395 0056 02E0     		b	.L200
 3396              	.L199:
1859:..\SEGGER/SEGGER_RTT.c ****   } else {
1860:..\SEGGER/SEGGER_RTT.c ****     r = -1;
 3397              		.loc 1 1860 0
 3398 0058 4FF0FF33 		mov	r3, #-1
 3399 005c FB61     		str	r3, [r7, #28]
 3400              	.L200:
1861:..\SEGGER/SEGGER_RTT.c ****   }
1862:..\SEGGER/SEGGER_RTT.c ****   return r;
 3401              		.loc 1 1862 0
 3402 005e FB69     		ldr	r3, [r7, #28]
1863:..\SEGGER/SEGGER_RTT.c **** }
 3403              		.loc 1 1863 0
 3404 0060 1846     		mov	r0, r3
 3405 0062 2037     		adds	r7, r7, #32
 3406              		.cfi_def_cfa_offset 8
 3407 0064 BD46     		mov	sp, r7
 3408              		.cfi_def_cfa_register 13
 3409              		@ sp needed
 3410 0066 80BD     		pop	{r7, pc}
 3411              	.L203:
 3412              		.align	2
 3413              	.L202:
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 94


 3414 0068 00000000 		.word	_SEGGER_RTT
 3415              		.cfi_endproc
 3416              	.LFE30:
 3417              		.size	SEGGER_RTT_SetFlagsDownBuffer, .-SEGGER_RTT_SetFlagsDownBuffer
 3418              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3419              		.align	2
 3420              		.global	SEGGER_RTT_Init
 3421              		.thumb
 3422              		.thumb_func
 3423              		.type	SEGGER_RTT_Init, %function
 3424              	SEGGER_RTT_Init:
 3425              	.LFB31:
1864:..\SEGGER/SEGGER_RTT.c **** 
1865:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1866:..\SEGGER/SEGGER_RTT.c **** *
1867:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1868:..\SEGGER/SEGGER_RTT.c **** *
1869:..\SEGGER/SEGGER_RTT.c **** *  Function description
1870:..\SEGGER/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1871:..\SEGGER/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1872:..\SEGGER/SEGGER_RTT.c **** *
1873:..\SEGGER/SEGGER_RTT.c **** */
1874:..\SEGGER/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3426              		.loc 1 1874 0
 3427              		.cfi_startproc
 3428              		@ args = 0, pretend = 0, frame = 0
 3429              		@ frame_needed = 1, uses_anonymous_args = 0
 3430 0000 80B5     		push	{r7, lr}
 3431              		.cfi_def_cfa_offset 8
 3432              		.cfi_offset 7, -8
 3433              		.cfi_offset 14, -4
 3434 0002 00AF     		add	r7, sp, #0
 3435              		.cfi_def_cfa_register 7
1875:..\SEGGER/SEGGER_RTT.c ****   _DoInit();
 3436              		.loc 1 1875 0
 3437 0004 FFF7FEFF 		bl	_DoInit
1876:..\SEGGER/SEGGER_RTT.c **** }
 3438              		.loc 1 1876 0
 3439 0008 00BF     		nop
 3440 000a 80BD     		pop	{r7, pc}
 3441              		.cfi_endproc
 3442              	.LFE31:
 3443              		.size	SEGGER_RTT_Init, .-SEGGER_RTT_Init
 3444              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3445              		.align	2
 3446              		.global	SEGGER_RTT_SetTerminal
 3447              		.thumb
 3448              		.thumb_func
 3449              		.type	SEGGER_RTT_SetTerminal, %function
 3450              	SEGGER_RTT_SetTerminal:
 3451              	.LFB32:
1877:..\SEGGER/SEGGER_RTT.c **** 
1878:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1879:..\SEGGER/SEGGER_RTT.c **** *
1880:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1881:..\SEGGER/SEGGER_RTT.c **** *
1882:..\SEGGER/SEGGER_RTT.c **** *  Function description
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 95


1883:..\SEGGER/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1884:..\SEGGER/SEGGER_RTT.c **** *
1885:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1886:..\SEGGER/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1887:..\SEGGER/SEGGER_RTT.c **** *
1888:..\SEGGER/SEGGER_RTT.c **** *  Return value
1889:..\SEGGER/SEGGER_RTT.c **** *    >= 0  O.K.
1890:..\SEGGER/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1891:..\SEGGER/SEGGER_RTT.c **** *
1892:..\SEGGER/SEGGER_RTT.c **** *  Notes
1893:..\SEGGER/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
1894:..\SEGGER/SEGGER_RTT.c **** */
1895:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3452              		.loc 1 1895 0
 3453              		.cfi_startproc
 3454              		@ args = 0, pretend = 0, frame = 32
 3455              		@ frame_needed = 1, uses_anonymous_args = 0
 3456 0000 80B5     		push	{r7, lr}
 3457              		.cfi_def_cfa_offset 8
 3458              		.cfi_offset 7, -8
 3459              		.cfi_offset 14, -4
 3460 0002 88B0     		sub	sp, sp, #32
 3461              		.cfi_def_cfa_offset 40
 3462 0004 00AF     		add	r7, sp, #0
 3463              		.cfi_def_cfa_register 7
 3464 0006 0346     		mov	r3, r0
 3465 0008 FB71     		strb	r3, [r7, #7]
 3466              	.LBB31:
1896:..\SEGGER/SEGGER_RTT.c ****   unsigned char         ac[2];
1897:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1898:..\SEGGER/SEGGER_RTT.c ****   unsigned Avail;
1899:..\SEGGER/SEGGER_RTT.c ****   int r;
1900:..\SEGGER/SEGGER_RTT.c **** 
1901:..\SEGGER/SEGGER_RTT.c ****   INIT();
 3467              		.loc 1 1901 0
 3468 000a 274B     		ldr	r3, .L213
 3469 000c BB61     		str	r3, [r7, #24]
 3470 000e BB69     		ldr	r3, [r7, #24]
 3471 0010 1B78     		ldrb	r3, [r3]
 3472 0012 DBB2     		uxtb	r3, r3
 3473 0014 002B     		cmp	r3, #0
 3474 0016 01D1     		bne	.L206
 3475              		.loc 1 1901 0 is_stmt 0 discriminator 1
 3476 0018 FFF7FEFF 		bl	_DoInit
 3477              	.L206:
 3478              	.LBE31:
1902:..\SEGGER/SEGGER_RTT.c ****   r = 0;
 3479              		.loc 1 1902 0 is_stmt 1
 3480 001c 0023     		movs	r3, #0
 3481 001e FB61     		str	r3, [r7, #28]
1903:..\SEGGER/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3482              		.loc 1 1903 0
 3483 0020 FF23     		movs	r3, #255
 3484 0022 3B72     		strb	r3, [r7, #8]
1904:..\SEGGER/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3485              		.loc 1 1904 0
 3486 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 96


 3487 0026 0F2B     		cmp	r3, #15
 3488 0028 36D8     		bhi	.L207
1905:..\SEGGER/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3489              		.loc 1 1905 0
 3490 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3491 002c 1F4A     		ldr	r2, .L213+4
 3492 002e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3493 0030 7B72     		strb	r3, [r7, #9]
1906:..\SEGGER/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3494              		.loc 1 1906 0
 3495 0032 1F4B     		ldr	r3, .L213+8
 3496 0034 7B61     		str	r3, [r7, #20]
 3497              	.LBB32:
1907:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
 3498              		.loc 1 1907 0
 3499              		.syntax unified
 3500              	@ 1907 "..\SEGGER\SEGGER_RTT.c" 1
 3501 0036 EFF31183 		mrs   r3, basepri  
 3502 003a 4FF02001 		mov   r1, #32       
 3503 003e 81F31188 		msr   basepri, r1  
 3504              		
 3505              	@ 0 "" 2
 3506              		.thumb
 3507              		.syntax unified
 3508 0042 3B61     		str	r3, [r7, #16]
1908:..\SEGGER/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3509              		.loc 1 1908 0
 3510 0044 7B69     		ldr	r3, [r7, #20]
 3511 0046 5B69     		ldr	r3, [r3, #20]
 3512 0048 03F00303 		and	r3, r3, #3
 3513 004c 022B     		cmp	r3, #2
 3514 004e 0AD1     		bne	.L208
1909:..\SEGGER/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
 3515              		.loc 1 1909 0
 3516 0050 184A     		ldr	r2, .L213+12
 3517 0052 FB79     		ldrb	r3, [r7, #7]
 3518 0054 1370     		strb	r3, [r2]
1910:..\SEGGER/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3519              		.loc 1 1910 0
 3520 0056 07F10803 		add	r3, r7, #8
 3521 005a 0222     		movs	r2, #2
 3522 005c 1946     		mov	r1, r3
 3523 005e 7869     		ldr	r0, [r7, #20]
 3524 0060 FFF7FEFF 		bl	_WriteBlocking
 3525 0064 14E0     		b	.L209
 3526              	.L208:
1911:..\SEGGER/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1912:..\SEGGER/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3527              		.loc 1 1912 0
 3528 0066 7869     		ldr	r0, [r7, #20]
 3529 0068 FFF7FEFF 		bl	_GetAvailWriteSpace
 3530 006c F860     		str	r0, [r7, #12]
1913:..\SEGGER/SEGGER_RTT.c ****       if (Avail >= 2) {
 3531              		.loc 1 1913 0
 3532 006e FB68     		ldr	r3, [r7, #12]
 3533 0070 012B     		cmp	r3, #1
 3534 0072 0AD9     		bls	.L210
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 97


1914:..\SEGGER/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
 3535              		.loc 1 1914 0
 3536 0074 0F4A     		ldr	r2, .L213+12
 3537 0076 FB79     		ldrb	r3, [r7, #7]
 3538 0078 1370     		strb	r3, [r2]
1915:..\SEGGER/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3539              		.loc 1 1915 0
 3540 007a 07F10803 		add	r3, r7, #8
 3541 007e 0222     		movs	r2, #2
 3542 0080 1946     		mov	r1, r3
 3543 0082 7869     		ldr	r0, [r7, #20]
 3544 0084 FFF7FEFF 		bl	_WriteNoCheck
 3545 0088 02E0     		b	.L209
 3546              	.L210:
1916:..\SEGGER/SEGGER_RTT.c ****       } else {
1917:..\SEGGER/SEGGER_RTT.c ****         r = -1;
 3547              		.loc 1 1917 0
 3548 008a 4FF0FF33 		mov	r3, #-1
 3549 008e FB61     		str	r3, [r7, #28]
 3550              	.L209:
1918:..\SEGGER/SEGGER_RTT.c ****       }
1919:..\SEGGER/SEGGER_RTT.c ****     }
1920:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3551              		.loc 1 1920 0
 3552 0090 3B69     		ldr	r3, [r7, #16]
 3553              		.syntax unified
 3554              	@ 1920 "..\SEGGER\SEGGER_RTT.c" 1
 3555 0092 83F31188 		msr   basepri, r3  
 3556              		
 3557              	@ 0 "" 2
 3558              		.thumb
 3559              		.syntax unified
 3560              	.LBE32:
 3561 0096 02E0     		b	.L211
 3562              	.L207:
1921:..\SEGGER/SEGGER_RTT.c ****   } else {
1922:..\SEGGER/SEGGER_RTT.c ****     r = -1;
 3563              		.loc 1 1922 0
 3564 0098 4FF0FF33 		mov	r3, #-1
 3565 009c FB61     		str	r3, [r7, #28]
 3566              	.L211:
1923:..\SEGGER/SEGGER_RTT.c ****   }
1924:..\SEGGER/SEGGER_RTT.c ****   return r;
 3567              		.loc 1 1924 0
 3568 009e FB69     		ldr	r3, [r7, #28]
1925:..\SEGGER/SEGGER_RTT.c **** }
 3569              		.loc 1 1925 0
 3570 00a0 1846     		mov	r0, r3
 3571 00a2 2037     		adds	r7, r7, #32
 3572              		.cfi_def_cfa_offset 8
 3573 00a4 BD46     		mov	sp, r7
 3574              		.cfi_def_cfa_register 13
 3575              		@ sp needed
 3576 00a6 80BD     		pop	{r7, pc}
 3577              	.L214:
 3578              		.align	2
 3579              	.L213:
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 98


 3580 00a8 00000000 		.word	_SEGGER_RTT
 3581 00ac 00000000 		.word	_aTerminalId
 3582 00b0 18000000 		.word	_SEGGER_RTT+24
 3583 00b4 10040000 		.word	_ActiveTerminal
 3584              		.cfi_endproc
 3585              	.LFE32:
 3586              		.size	SEGGER_RTT_SetTerminal, .-SEGGER_RTT_SetTerminal
 3587              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3588              		.align	2
 3589              		.global	SEGGER_RTT_TerminalOut
 3590              		.thumb
 3591              		.thumb_func
 3592              		.type	SEGGER_RTT_TerminalOut, %function
 3593              	SEGGER_RTT_TerminalOut:
 3594              	.LFB33:
1926:..\SEGGER/SEGGER_RTT.c **** 
1927:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
1928:..\SEGGER/SEGGER_RTT.c **** *
1929:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1930:..\SEGGER/SEGGER_RTT.c **** *
1931:..\SEGGER/SEGGER_RTT.c **** *  Function description
1932:..\SEGGER/SEGGER_RTT.c **** *    Writes a string to the given terminal
1933:..\SEGGER/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1934:..\SEGGER/SEGGER_RTT.c **** *
1935:..\SEGGER/SEGGER_RTT.c **** *  Parameters
1936:..\SEGGER/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1937:..\SEGGER/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1938:..\SEGGER/SEGGER_RTT.c **** *
1939:..\SEGGER/SEGGER_RTT.c **** *  Return value
1940:..\SEGGER/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1941:..\SEGGER/SEGGER_RTT.c **** *     < 0 - Error.
1942:..\SEGGER/SEGGER_RTT.c **** *
1943:..\SEGGER/SEGGER_RTT.c **** */
1944:..\SEGGER/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3595              		.loc 1 1944 0
 3596              		.cfi_startproc
 3597              		@ args = 0, pretend = 0, frame = 32
 3598              		@ frame_needed = 1, uses_anonymous_args = 0
 3599 0000 80B5     		push	{r7, lr}
 3600              		.cfi_def_cfa_offset 8
 3601              		.cfi_offset 7, -8
 3602              		.cfi_offset 14, -4
 3603 0002 88B0     		sub	sp, sp, #32
 3604              		.cfi_def_cfa_offset 40
 3605 0004 00AF     		add	r7, sp, #0
 3606              		.cfi_def_cfa_register 7
 3607 0006 0346     		mov	r3, r0
 3608 0008 3960     		str	r1, [r7]
 3609 000a FB71     		strb	r3, [r7, #7]
 3610              	.LBB33:
1945:..\SEGGER/SEGGER_RTT.c ****   int                   Status;
1946:..\SEGGER/SEGGER_RTT.c ****   unsigned              FragLen;
1947:..\SEGGER/SEGGER_RTT.c ****   unsigned              Avail;
1948:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1949:..\SEGGER/SEGGER_RTT.c ****   //
1950:..\SEGGER/SEGGER_RTT.c ****   INIT();
 3611              		.loc 1 1950 0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 99


 3612 000c 424B     		ldr	r3, .L230
 3613 000e BB61     		str	r3, [r7, #24]
 3614 0010 BB69     		ldr	r3, [r7, #24]
 3615 0012 1B78     		ldrb	r3, [r3]
 3616 0014 DBB2     		uxtb	r3, r3
 3617 0016 002B     		cmp	r3, #0
 3618 0018 01D1     		bne	.L216
 3619              		.loc 1 1950 0 is_stmt 0 discriminator 1
 3620 001a FFF7FEFF 		bl	_DoInit
 3621              	.L216:
 3622              	.LBE33:
1951:..\SEGGER/SEGGER_RTT.c ****   //
1952:..\SEGGER/SEGGER_RTT.c ****   // Validate terminal ID.
1953:..\SEGGER/SEGGER_RTT.c ****   //
1954:..\SEGGER/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3623              		.loc 1 1954 0 is_stmt 1
 3624 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3625 0020 0F2B     		cmp	r3, #15
 3626 0022 71D8     		bhi	.L217
1955:..\SEGGER/SEGGER_RTT.c ****     //
1956:..\SEGGER/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1957:..\SEGGER/SEGGER_RTT.c ****     //
1958:..\SEGGER/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3627              		.loc 1 1958 0
 3628 0024 3D4B     		ldr	r3, .L230+4
 3629 0026 7B61     		str	r3, [r7, #20]
1959:..\SEGGER/SEGGER_RTT.c ****     //
1960:..\SEGGER/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1961:..\SEGGER/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1962:..\SEGGER/SEGGER_RTT.c ****     //
1963:..\SEGGER/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3630              		.loc 1 1963 0
 3631 0028 3868     		ldr	r0, [r7]
 3632 002a FFF7FEFF 		bl	strlen
 3633 002e 3861     		str	r0, [r7, #16]
 3634              	.LBB34:
1964:..\SEGGER/SEGGER_RTT.c ****     //
1965:..\SEGGER/SEGGER_RTT.c ****     // How we output depends upon the mode...
1966:..\SEGGER/SEGGER_RTT.c ****     //
1967:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3635              		.loc 1 1967 0
 3636              		.syntax unified
 3637              	@ 1967 "..\SEGGER\SEGGER_RTT.c" 1
 3638 0030 EFF31183 		mrs   r3, basepri  
 3639 0034 4FF02001 		mov   r1, #32       
 3640 0038 81F31188 		msr   basepri, r1  
 3641              		
 3642              	@ 0 "" 2
 3643              		.thumb
 3644              		.syntax unified
 3645 003c FB60     		str	r3, [r7, #12]
1968:..\SEGGER/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3646              		.loc 1 1968 0
 3647 003e 7869     		ldr	r0, [r7, #20]
 3648 0040 FFF7FEFF 		bl	_GetAvailWriteSpace
 3649 0044 B860     		str	r0, [r7, #8]
1969:..\SEGGER/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 100


 3650              		.loc 1 1969 0
 3651 0046 7B69     		ldr	r3, [r7, #20]
 3652 0048 5B69     		ldr	r3, [r3, #20]
 3653 004a 03F00303 		and	r3, r3, #3
 3654 004e 012B     		cmp	r3, #1
 3655 0050 1FD0     		beq	.L219
 3656 0052 012B     		cmp	r3, #1
 3657 0054 02D3     		bcc	.L220
 3658 0056 022B     		cmp	r3, #2
 3659 0058 3BD0     		beq	.L221
 3660 005a 4DE0     		b	.L229
 3661              	.L220:
1970:..\SEGGER/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1971:..\SEGGER/SEGGER_RTT.c ****       //
1972:..\SEGGER/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1973:..\SEGGER/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1974:..\SEGGER/SEGGER_RTT.c ****       //
1975:..\SEGGER/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
 3662              		.loc 1 1975 0
 3663 005c 3B69     		ldr	r3, [r7, #16]
 3664 005e 1A1D     		adds	r2, r3, #4
 3665 0060 BB68     		ldr	r3, [r7, #8]
 3666 0062 9A42     		cmp	r2, r3
 3667 0064 02D9     		bls	.L222
1976:..\SEGGER/SEGGER_RTT.c ****         Status = 0;
 3668              		.loc 1 1976 0
 3669 0066 0023     		movs	r3, #0
 3670 0068 FB61     		str	r3, [r7, #28]
1977:..\SEGGER/SEGGER_RTT.c ****       } else {
1978:..\SEGGER/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1979:..\SEGGER/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1980:..\SEGGER/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1981:..\SEGGER/SEGGER_RTT.c ****       }
1982:..\SEGGER/SEGGER_RTT.c ****       break;
 3671              		.loc 1 1982 0
 3672 006a 49E0     		b	.L224
 3673              	.L222:
1978:..\SEGGER/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3674              		.loc 1 1978 0
 3675 006c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3676 006e 1946     		mov	r1, r3
 3677 0070 7869     		ldr	r0, [r7, #20]
 3678 0072 FFF7FEFF 		bl	_PostTerminalSwitch
1979:..\SEGGER/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3679              		.loc 1 1979 0
 3680 0076 3A69     		ldr	r2, [r7, #16]
 3681 0078 3968     		ldr	r1, [r7]
 3682 007a 7869     		ldr	r0, [r7, #20]
 3683 007c FFF7FEFF 		bl	_WriteBlocking
 3684 0080 0346     		mov	r3, r0
 3685 0082 FB61     		str	r3, [r7, #28]
1980:..\SEGGER/SEGGER_RTT.c ****       }
 3686              		.loc 1 1980 0
 3687 0084 264B     		ldr	r3, .L230+8
 3688 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3689 0088 1946     		mov	r1, r3
 3690 008a 7869     		ldr	r0, [r7, #20]
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 101


 3691 008c FFF7FEFF 		bl	_PostTerminalSwitch
 3692              		.loc 1 1982 0
 3693 0090 36E0     		b	.L224
 3694              	.L219:
1983:..\SEGGER/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1984:..\SEGGER/SEGGER_RTT.c ****       //
1985:..\SEGGER/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
1986:..\SEGGER/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
1987:..\SEGGER/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
1988:..\SEGGER/SEGGER_RTT.c ****       //
1989:..\SEGGER/SEGGER_RTT.c ****       if (Avail < 4u) {
 3695              		.loc 1 1989 0
 3696 0092 BB68     		ldr	r3, [r7, #8]
 3697 0094 032B     		cmp	r3, #3
 3698 0096 03D8     		bhi	.L225
1990:..\SEGGER/SEGGER_RTT.c ****         Status = -1;
 3699              		.loc 1 1990 0
 3700 0098 4FF0FF33 		mov	r3, #-1
 3701 009c FB61     		str	r3, [r7, #28]
1991:..\SEGGER/SEGGER_RTT.c ****       } else {
1992:..\SEGGER/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1993:..\SEGGER/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
1994:..\SEGGER/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1995:..\SEGGER/SEGGER_RTT.c ****       }
1996:..\SEGGER/SEGGER_RTT.c ****       break;
 3702              		.loc 1 1996 0
 3703 009e 2FE0     		b	.L224
 3704              	.L225:
1992:..\SEGGER/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3705              		.loc 1 1992 0
 3706 00a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3707 00a2 1946     		mov	r1, r3
 3708 00a4 7869     		ldr	r0, [r7, #20]
 3709 00a6 FFF7FEFF 		bl	_PostTerminalSwitch
1993:..\SEGGER/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3710              		.loc 1 1993 0
 3711 00aa BB68     		ldr	r3, [r7, #8]
 3712 00ac 1A1F     		subs	r2, r3, #4
 3713 00ae 3B69     		ldr	r3, [r7, #16]
 3714 00b0 9342     		cmp	r3, r2
 3715 00b2 28BF     		it	cs
 3716 00b4 1346     		movcs	r3, r2
 3717 00b6 1A46     		mov	r2, r3
 3718 00b8 3968     		ldr	r1, [r7]
 3719 00ba 7869     		ldr	r0, [r7, #20]
 3720 00bc FFF7FEFF 		bl	_WriteBlocking
 3721 00c0 0346     		mov	r3, r0
 3722 00c2 FB61     		str	r3, [r7, #28]
1994:..\SEGGER/SEGGER_RTT.c ****       }
 3723              		.loc 1 1994 0
 3724 00c4 164B     		ldr	r3, .L230+8
 3725 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3726 00c8 1946     		mov	r1, r3
 3727 00ca 7869     		ldr	r0, [r7, #20]
 3728 00cc FFF7FEFF 		bl	_PostTerminalSwitch
 3729              		.loc 1 1996 0
 3730 00d0 16E0     		b	.L224
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 102


 3731              	.L221:
1997:..\SEGGER/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1998:..\SEGGER/SEGGER_RTT.c ****       //
1999:..\SEGGER/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2000:..\SEGGER/SEGGER_RTT.c ****       //
2001:..\SEGGER/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
 3732              		.loc 1 2001 0
 3733 00d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3734 00d4 1946     		mov	r1, r3
 3735 00d6 7869     		ldr	r0, [r7, #20]
 3736 00d8 FFF7FEFF 		bl	_PostTerminalSwitch
2002:..\SEGGER/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3737              		.loc 1 2002 0
 3738 00dc 3A69     		ldr	r2, [r7, #16]
 3739 00de 3968     		ldr	r1, [r7]
 3740 00e0 7869     		ldr	r0, [r7, #20]
 3741 00e2 FFF7FEFF 		bl	_WriteBlocking
 3742 00e6 0346     		mov	r3, r0
 3743 00e8 FB61     		str	r3, [r7, #28]
2003:..\SEGGER/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3744              		.loc 1 2003 0
 3745 00ea 0D4B     		ldr	r3, .L230+8
 3746 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3747 00ee 1946     		mov	r1, r3
 3748 00f0 7869     		ldr	r0, [r7, #20]
 3749 00f2 FFF7FEFF 		bl	_PostTerminalSwitch
2004:..\SEGGER/SEGGER_RTT.c ****       break;
 3750              		.loc 1 2004 0
 3751 00f6 03E0     		b	.L224
 3752              	.L229:
2005:..\SEGGER/SEGGER_RTT.c ****     default:
2006:..\SEGGER/SEGGER_RTT.c ****       Status = -1;
 3753              		.loc 1 2006 0
 3754 00f8 4FF0FF33 		mov	r3, #-1
 3755 00fc FB61     		str	r3, [r7, #28]
2007:..\SEGGER/SEGGER_RTT.c ****       break;
 3756              		.loc 1 2007 0
 3757 00fe 00BF     		nop
 3758              	.L224:
2008:..\SEGGER/SEGGER_RTT.c ****     }
2009:..\SEGGER/SEGGER_RTT.c ****     //
2010:..\SEGGER/SEGGER_RTT.c ****     // Finish up.
2011:..\SEGGER/SEGGER_RTT.c ****     //
2012:..\SEGGER/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3759              		.loc 1 2012 0
 3760 0100 FB68     		ldr	r3, [r7, #12]
 3761              		.syntax unified
 3762              	@ 2012 "..\SEGGER\SEGGER_RTT.c" 1
 3763 0102 83F31188 		msr   basepri, r3  
 3764              		
 3765              	@ 0 "" 2
 3766              		.thumb
 3767              		.syntax unified
 3768              	.LBE34:
 3769 0106 02E0     		b	.L227
 3770              	.L217:
2013:..\SEGGER/SEGGER_RTT.c ****   } else {
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 103


2014:..\SEGGER/SEGGER_RTT.c ****     Status = -1;
 3771              		.loc 1 2014 0
 3772 0108 4FF0FF33 		mov	r3, #-1
 3773 010c FB61     		str	r3, [r7, #28]
 3774              	.L227:
2015:..\SEGGER/SEGGER_RTT.c ****   }
2016:..\SEGGER/SEGGER_RTT.c ****   return Status;
 3775              		.loc 1 2016 0
 3776 010e FB69     		ldr	r3, [r7, #28]
2017:..\SEGGER/SEGGER_RTT.c **** }
 3777              		.loc 1 2017 0
 3778 0110 1846     		mov	r0, r3
 3779 0112 2037     		adds	r7, r7, #32
 3780              		.cfi_def_cfa_offset 8
 3781 0114 BD46     		mov	sp, r7
 3782              		.cfi_def_cfa_register 13
 3783              		@ sp needed
 3784 0116 80BD     		pop	{r7, pc}
 3785              	.L231:
 3786              		.align	2
 3787              	.L230:
 3788 0118 00000000 		.word	_SEGGER_RTT
 3789 011c 18000000 		.word	_SEGGER_RTT+24
 3790 0120 10040000 		.word	_ActiveTerminal
 3791              		.cfi_endproc
 3792              	.LFE33:
 3793              		.size	SEGGER_RTT_TerminalOut, .-SEGGER_RTT_TerminalOut
 3794              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 3795              		.align	2
 3796              		.global	SEGGER_RTT_GetAvailWriteSpace
 3797              		.thumb
 3798              		.thumb_func
 3799              		.type	SEGGER_RTT_GetAvailWriteSpace, %function
 3800              	SEGGER_RTT_GetAvailWriteSpace:
 3801              	.LFB34:
2018:..\SEGGER/SEGGER_RTT.c **** 
2019:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
2020:..\SEGGER/SEGGER_RTT.c **** *
2021:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
2022:..\SEGGER/SEGGER_RTT.c **** *
2023:..\SEGGER/SEGGER_RTT.c **** *  Function description
2024:..\SEGGER/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2025:..\SEGGER/SEGGER_RTT.c **** *
2026:..\SEGGER/SEGGER_RTT.c **** *  Parameters
2027:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2028:..\SEGGER/SEGGER_RTT.c **** *
2029:..\SEGGER/SEGGER_RTT.c **** *  Return value
2030:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2031:..\SEGGER/SEGGER_RTT.c **** */
2032:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 3802              		.loc 1 2032 0
 3803              		.cfi_startproc
 3804              		@ args = 0, pretend = 0, frame = 16
 3805              		@ frame_needed = 1, uses_anonymous_args = 0
 3806 0000 80B5     		push	{r7, lr}
 3807              		.cfi_def_cfa_offset 8
 3808              		.cfi_offset 7, -8
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 104


 3809              		.cfi_offset 14, -4
 3810 0002 84B0     		sub	sp, sp, #16
 3811              		.cfi_def_cfa_offset 24
 3812 0004 00AF     		add	r7, sp, #0
 3813              		.cfi_def_cfa_register 7
 3814 0006 7860     		str	r0, [r7, #4]
2033:..\SEGGER/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
2034:..\SEGGER/SEGGER_RTT.c **** 
2035:..\SEGGER/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 3815              		.loc 1 2035 0
 3816 0008 7B68     		ldr	r3, [r7, #4]
 3817 000a 5A1C     		adds	r2, r3, #1
 3818 000c 1346     		mov	r3, r2
 3819 000e 5B00     		lsls	r3, r3, #1
 3820 0010 1344     		add	r3, r3, r2
 3821 0012 DB00     		lsls	r3, r3, #3
 3822 0014 054A     		ldr	r2, .L234
 3823 0016 1344     		add	r3, r3, r2
 3824 0018 FB60     		str	r3, [r7, #12]
2036:..\SEGGER/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 3825              		.loc 1 2036 0
 3826 001a F868     		ldr	r0, [r7, #12]
 3827 001c FFF7FEFF 		bl	_GetAvailWriteSpace
 3828 0020 0346     		mov	r3, r0
2037:..\SEGGER/SEGGER_RTT.c **** }
 3829              		.loc 1 2037 0
 3830 0022 1846     		mov	r0, r3
 3831 0024 1037     		adds	r7, r7, #16
 3832              		.cfi_def_cfa_offset 8
 3833 0026 BD46     		mov	sp, r7
 3834              		.cfi_def_cfa_register 13
 3835              		@ sp needed
 3836 0028 80BD     		pop	{r7, pc}
 3837              	.L235:
 3838 002a 00BF     		.align	2
 3839              	.L234:
 3840 002c 00000000 		.word	_SEGGER_RTT
 3841              		.cfi_endproc
 3842              	.LFE34:
 3843              		.size	SEGGER_RTT_GetAvailWriteSpace, .-SEGGER_RTT_GetAvailWriteSpace
 3844              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 3845              		.align	2
 3846              		.global	SEGGER_RTT_GetBytesInBuffer
 3847              		.thumb
 3848              		.thumb_func
 3849              		.type	SEGGER_RTT_GetBytesInBuffer, %function
 3850              	SEGGER_RTT_GetBytesInBuffer:
 3851              	.LFB35:
2038:..\SEGGER/SEGGER_RTT.c **** 
2039:..\SEGGER/SEGGER_RTT.c **** 
2040:..\SEGGER/SEGGER_RTT.c **** /*********************************************************************
2041:..\SEGGER/SEGGER_RTT.c **** *
2042:..\SEGGER/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2043:..\SEGGER/SEGGER_RTT.c **** *
2044:..\SEGGER/SEGGER_RTT.c **** *  Function description
2045:..\SEGGER/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2046:..\SEGGER/SEGGER_RTT.c **** *
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 105


2047:..\SEGGER/SEGGER_RTT.c **** *  Parameters
2048:..\SEGGER/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2049:..\SEGGER/SEGGER_RTT.c **** *
2050:..\SEGGER/SEGGER_RTT.c **** *  Return value
2051:..\SEGGER/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2052:..\SEGGER/SEGGER_RTT.c **** */
2053:..\SEGGER/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 3852              		.loc 1 2053 0
 3853              		.cfi_startproc
 3854              		@ args = 0, pretend = 0, frame = 24
 3855              		@ frame_needed = 1, uses_anonymous_args = 0
 3856              		@ link register save eliminated.
 3857 0000 80B4     		push	{r7}
 3858              		.cfi_def_cfa_offset 4
 3859              		.cfi_offset 7, -4
 3860 0002 87B0     		sub	sp, sp, #28
 3861              		.cfi_def_cfa_offset 32
 3862 0004 00AF     		add	r7, sp, #0
 3863              		.cfi_def_cfa_register 7
 3864 0006 7860     		str	r0, [r7, #4]
2054:..\SEGGER/SEGGER_RTT.c ****   unsigned RdOff;
2055:..\SEGGER/SEGGER_RTT.c ****   unsigned WrOff;
2056:..\SEGGER/SEGGER_RTT.c ****   unsigned r;
2057:..\SEGGER/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
2058:..\SEGGER/SEGGER_RTT.c ****   //
2059:..\SEGGER/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2060:..\SEGGER/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2061:..\SEGGER/SEGGER_RTT.c ****   //
2062:..\SEGGER/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3865              		.loc 1 2062 0
 3866 0008 194B     		ldr	r3, .L240
 3867 000a 3B61     		str	r3, [r7, #16]
2063:..\SEGGER/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 3868              		.loc 1 2063 0
 3869 000c 3969     		ldr	r1, [r7, #16]
 3870 000e 7A68     		ldr	r2, [r7, #4]
 3871 0010 1346     		mov	r3, r2
 3872 0012 5B00     		lsls	r3, r3, #1
 3873 0014 1344     		add	r3, r3, r2
 3874 0016 DB00     		lsls	r3, r3, #3
 3875 0018 0B44     		add	r3, r3, r1
 3876 001a 2833     		adds	r3, r3, #40
 3877 001c 1B68     		ldr	r3, [r3]
 3878 001e FB60     		str	r3, [r7, #12]
2064:..\SEGGER/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 3879              		.loc 1 2064 0
 3880 0020 3969     		ldr	r1, [r7, #16]
 3881 0022 7A68     		ldr	r2, [r7, #4]
 3882 0024 1346     		mov	r3, r2
 3883 0026 5B00     		lsls	r3, r3, #1
 3884 0028 1344     		add	r3, r3, r2
 3885 002a DB00     		lsls	r3, r3, #3
 3886 002c 0B44     		add	r3, r3, r1
 3887 002e 2433     		adds	r3, r3, #36
 3888 0030 1B68     		ldr	r3, [r3]
 3889 0032 BB60     		str	r3, [r7, #8]
2065:..\SEGGER/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 106


 3890              		.loc 1 2065 0
 3891 0034 FA68     		ldr	r2, [r7, #12]
 3892 0036 BB68     		ldr	r3, [r7, #8]
 3893 0038 9A42     		cmp	r2, r3
 3894 003a 04D8     		bhi	.L237
2066:..\SEGGER/SEGGER_RTT.c ****     r = WrOff - RdOff;
 3895              		.loc 1 2066 0
 3896 003c BA68     		ldr	r2, [r7, #8]
 3897 003e FB68     		ldr	r3, [r7, #12]
 3898 0040 D31A     		subs	r3, r2, r3
 3899 0042 7B61     		str	r3, [r7, #20]
 3900 0044 0DE0     		b	.L238
 3901              	.L237:
2067:..\SEGGER/SEGGER_RTT.c ****   } else {
2068:..\SEGGER/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 3902              		.loc 1 2068 0
 3903 0046 3969     		ldr	r1, [r7, #16]
 3904 0048 7A68     		ldr	r2, [r7, #4]
 3905 004a 1346     		mov	r3, r2
 3906 004c 5B00     		lsls	r3, r3, #1
 3907 004e 1344     		add	r3, r3, r2
 3908 0050 DB00     		lsls	r3, r3, #3
 3909 0052 0B44     		add	r3, r3, r1
 3910 0054 2033     		adds	r3, r3, #32
 3911 0056 1A68     		ldr	r2, [r3]
 3912 0058 F968     		ldr	r1, [r7, #12]
 3913 005a BB68     		ldr	r3, [r7, #8]
 3914 005c CB1A     		subs	r3, r1, r3
 3915 005e 1344     		add	r3, r3, r2
 3916 0060 7B61     		str	r3, [r7, #20]
 3917              	.L238:
2069:..\SEGGER/SEGGER_RTT.c ****   }
2070:..\SEGGER/SEGGER_RTT.c ****   return r;
 3918              		.loc 1 2070 0
 3919 0062 7B69     		ldr	r3, [r7, #20]
2071:..\SEGGER/SEGGER_RTT.c **** }
 3920              		.loc 1 2071 0
 3921 0064 1846     		mov	r0, r3
 3922 0066 1C37     		adds	r7, r7, #28
 3923              		.cfi_def_cfa_offset 4
 3924 0068 BD46     		mov	sp, r7
 3925              		.cfi_def_cfa_register 13
 3926              		@ sp needed
 3927 006a 80BC     		pop	{r7}
 3928              		.cfi_restore 7
 3929              		.cfi_def_cfa_offset 0
 3930 006c 7047     		bx	lr
 3931              	.L241:
 3932 006e 00BF     		.align	2
 3933              	.L240:
 3934 0070 00000000 		.word	_SEGGER_RTT
 3935              		.cfi_endproc
 3936              	.LFE35:
 3937              		.size	SEGGER_RTT_GetBytesInBuffer, .-SEGGER_RTT_GetBytesInBuffer
 3938              		.section	.rodata
 3939 0009 000000   		.align	2
 3940              		.type	_aInitStr.5095, %object
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 107


 3941              		.size	_aInitStr.5095, 17
 3942              	_aInitStr.5095:
 3943 000c 00000000 		.ascii	"\000\000\000\000\000\000TTR REGGES\000"
 3943      00005454 
 3943      52205245 
 3943      47474553 
 3943      00
 3944              		.text
 3945              	.Letext0:
 3946              		.file 2 "..\\SEGGER\\SEGGER_RTT.h"
 3947              		.section	.debug_info,"",%progbits
 3948              	.Ldebug_info0:
 3949 0000 5C140000 		.4byte	0x145c
 3950 0004 0400     		.2byte	0x4
 3951 0006 00000000 		.4byte	.Ldebug_abbrev0
 3952 000a 04       		.byte	0x4
 3953 000b 01       		.uleb128 0x1
 3954 000c 60000000 		.4byte	.LASF84
 3955 0010 0C       		.byte	0xc
 3956 0011 FB050000 		.4byte	.LASF85
 3957 0015 54020000 		.4byte	.LASF86
 3958 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3959 001d 00000000 		.4byte	0
 3960 0021 00000000 		.4byte	.Ldebug_line0
 3961 0025 02       		.uleb128 0x2
 3962 0026 04       		.byte	0x4
 3963 0027 07       		.byte	0x7
 3964 0028 35030000 		.4byte	.LASF0
 3965 002c 03       		.uleb128 0x3
 3966 002d 04       		.byte	0x4
 3967 002e 05       		.byte	0x5
 3968 002f 696E7400 		.ascii	"int\000"
 3969 0033 02       		.uleb128 0x2
 3970 0034 08       		.byte	0x8
 3971 0035 05       		.byte	0x5
 3972 0036 83010000 		.4byte	.LASF1
 3973 003a 02       		.uleb128 0x2
 3974 003b 08       		.byte	0x8
 3975 003c 04       		.byte	0x4
 3976 003d 3A040000 		.4byte	.LASF2
 3977 0041 02       		.uleb128 0x2
 3978 0042 01       		.byte	0x1
 3979 0043 06       		.byte	0x6
 3980 0044 91010000 		.4byte	.LASF3
 3981 0048 02       		.uleb128 0x2
 3982 0049 01       		.byte	0x1
 3983 004a 08       		.byte	0x8
 3984 004b 03050000 		.4byte	.LASF4
 3985 004f 02       		.uleb128 0x2
 3986 0050 02       		.byte	0x2
 3987 0051 05       		.byte	0x5
 3988 0052 28050000 		.4byte	.LASF5
 3989 0056 02       		.uleb128 0x2
 3990 0057 02       		.byte	0x2
 3991 0058 07       		.byte	0x7
 3992 0059 78030000 		.4byte	.LASF6
 3993 005d 02       		.uleb128 0x2
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 108


 3994 005e 04       		.byte	0x4
 3995 005f 05       		.byte	0x5
 3996 0060 24020000 		.4byte	.LASF7
 3997 0064 02       		.uleb128 0x2
 3998 0065 04       		.byte	0x4
 3999 0066 07       		.byte	0x7
 4000 0067 47030000 		.4byte	.LASF8
 4001 006b 02       		.uleb128 0x2
 4002 006c 08       		.byte	0x8
 4003 006d 07       		.byte	0x7
 4004 006e 05010000 		.4byte	.LASF9
 4005 0072 02       		.uleb128 0x2
 4006 0073 04       		.byte	0x4
 4007 0074 07       		.byte	0x7
 4008 0075 2B040000 		.4byte	.LASF10
 4009 0079 04       		.uleb128 0x4
 4010 007a 04       		.byte	0x4
 4011 007b 05       		.uleb128 0x5
 4012 007c 04       		.byte	0x4
 4013 007d 81000000 		.4byte	0x81
 4014 0081 02       		.uleb128 0x2
 4015 0082 01       		.byte	0x1
 4016 0083 08       		.byte	0x8
 4017 0084 9C050000 		.4byte	.LASF11
 4018 0088 05       		.uleb128 0x5
 4019 0089 04       		.byte	0x4
 4020 008a 48000000 		.4byte	0x48
 4021 008e 05       		.uleb128 0x5
 4022 008f 04       		.byte	0x4
 4023 0090 94000000 		.4byte	0x94
 4024 0094 06       		.uleb128 0x6
 4025 0095 81000000 		.4byte	0x81
 4026 0099 05       		.uleb128 0x5
 4027 009a 04       		.byte	0x4
 4028 009b 9F000000 		.4byte	0x9f
 4029 009f 07       		.uleb128 0x7
 4030 00a0 08       		.uleb128 0x8
 4031 00a1 18       		.byte	0x18
 4032 00a2 02       		.byte	0x2
 4033 00a3 1B01     		.2byte	0x11b
 4034 00a5 F8000000 		.4byte	0xf8
 4035 00a9 09       		.uleb128 0x9
 4036 00aa DC030000 		.4byte	.LASF12
 4037 00ae 02       		.byte	0x2
 4038 00af 1C01     		.2byte	0x11c
 4039 00b1 8E000000 		.4byte	0x8e
 4040 00b5 00       		.byte	0
 4041 00b6 09       		.uleb128 0x9
 4042 00b7 59030000 		.4byte	.LASF13
 4043 00bb 02       		.byte	0x2
 4044 00bc 1D01     		.2byte	0x11d
 4045 00be 7B000000 		.4byte	0x7b
 4046 00c2 04       		.byte	0x4
 4047 00c3 09       		.uleb128 0x9
 4048 00c4 B5040000 		.4byte	.LASF14
 4049 00c8 02       		.byte	0x2
 4050 00c9 1E01     		.2byte	0x11e
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 109


 4051 00cb 25000000 		.4byte	0x25
 4052 00cf 08       		.byte	0x8
 4053 00d0 09       		.uleb128 0x9
 4054 00d1 A5060000 		.4byte	.LASF15
 4055 00d5 02       		.byte	0x2
 4056 00d6 1F01     		.2byte	0x11f
 4057 00d8 25000000 		.4byte	0x25
 4058 00dc 0C       		.byte	0xc
 4059 00dd 09       		.uleb128 0x9
 4060 00de 1B030000 		.4byte	.LASF16
 4061 00e2 02       		.byte	0x2
 4062 00e3 2001     		.2byte	0x120
 4063 00e5 F8000000 		.4byte	0xf8
 4064 00e9 10       		.byte	0x10
 4065 00ea 09       		.uleb128 0x9
 4066 00eb EC050000 		.4byte	.LASF17
 4067 00ef 02       		.byte	0x2
 4068 00f0 2101     		.2byte	0x121
 4069 00f2 25000000 		.4byte	0x25
 4070 00f6 14       		.byte	0x14
 4071 00f7 00       		.byte	0
 4072 00f8 0A       		.uleb128 0xa
 4073 00f9 25000000 		.4byte	0x25
 4074 00fd 0B       		.uleb128 0xb
 4075 00fe 43000000 		.4byte	.LASF18
 4076 0102 02       		.byte	0x2
 4077 0103 2201     		.2byte	0x122
 4078 0105 A0000000 		.4byte	0xa0
 4079 0109 08       		.uleb128 0x8
 4080 010a 18       		.byte	0x18
 4081 010b 02       		.byte	0x2
 4082 010c 2801     		.2byte	0x128
 4083 010e 61010000 		.4byte	0x161
 4084 0112 09       		.uleb128 0x9
 4085 0113 DC030000 		.4byte	.LASF12
 4086 0117 02       		.byte	0x2
 4087 0118 2901     		.2byte	0x129
 4088 011a 8E000000 		.4byte	0x8e
 4089 011e 00       		.byte	0
 4090 011f 09       		.uleb128 0x9
 4091 0120 59030000 		.4byte	.LASF13
 4092 0124 02       		.byte	0x2
 4093 0125 2A01     		.2byte	0x12a
 4094 0127 7B000000 		.4byte	0x7b
 4095 012b 04       		.byte	0x4
 4096 012c 09       		.uleb128 0x9
 4097 012d B5040000 		.4byte	.LASF14
 4098 0131 02       		.byte	0x2
 4099 0132 2B01     		.2byte	0x12b
 4100 0134 25000000 		.4byte	0x25
 4101 0138 08       		.byte	0x8
 4102 0139 09       		.uleb128 0x9
 4103 013a A5060000 		.4byte	.LASF15
 4104 013e 02       		.byte	0x2
 4105 013f 2C01     		.2byte	0x12c
 4106 0141 F8000000 		.4byte	0xf8
 4107 0145 0C       		.byte	0xc
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 110


 4108 0146 09       		.uleb128 0x9
 4109 0147 1B030000 		.4byte	.LASF16
 4110 014b 02       		.byte	0x2
 4111 014c 2D01     		.2byte	0x12d
 4112 014e 25000000 		.4byte	0x25
 4113 0152 10       		.byte	0x10
 4114 0153 09       		.uleb128 0x9
 4115 0154 EC050000 		.4byte	.LASF17
 4116 0158 02       		.byte	0x2
 4117 0159 2E01     		.2byte	0x12e
 4118 015b 25000000 		.4byte	0x25
 4119 015f 14       		.byte	0x14
 4120 0160 00       		.byte	0
 4121 0161 0B       		.uleb128 0xb
 4122 0162 EE000000 		.4byte	.LASF19
 4123 0166 02       		.byte	0x2
 4124 0167 2F01     		.2byte	0x12f
 4125 0169 09010000 		.4byte	0x109
 4126 016d 08       		.uleb128 0x8
 4127 016e A8       		.byte	0xa8
 4128 016f 02       		.byte	0x2
 4129 0170 3601     		.2byte	0x136
 4130 0172 B8010000 		.4byte	0x1b8
 4131 0176 09       		.uleb128 0x9
 4132 0177 E5040000 		.4byte	.LASF20
 4133 017b 02       		.byte	0x2
 4134 017c 3701     		.2byte	0x137
 4135 017e B8010000 		.4byte	0x1b8
 4136 0182 00       		.byte	0
 4137 0183 09       		.uleb128 0x9
 4138 0184 68030000 		.4byte	.LASF21
 4139 0188 02       		.byte	0x2
 4140 0189 3801     		.2byte	0x138
 4141 018b 2C000000 		.4byte	0x2c
 4142 018f 10       		.byte	0x10
 4143 0190 09       		.uleb128 0x9
 4144 0191 15000000 		.4byte	.LASF22
 4145 0195 02       		.byte	0x2
 4146 0196 3901     		.2byte	0x139
 4147 0198 2C000000 		.4byte	0x2c
 4148 019c 14       		.byte	0x14
 4149 019d 0C       		.uleb128 0xc
 4150 019e 61557000 		.ascii	"aUp\000"
 4151 01a2 02       		.byte	0x2
 4152 01a3 3A01     		.2byte	0x13a
 4153 01a5 C8010000 		.4byte	0x1c8
 4154 01a9 18       		.byte	0x18
 4155 01aa 09       		.uleb128 0x9
 4156 01ab 7F050000 		.4byte	.LASF23
 4157 01af 02       		.byte	0x2
 4158 01b0 3B01     		.2byte	0x13b
 4159 01b2 D8010000 		.4byte	0x1d8
 4160 01b6 60       		.byte	0x60
 4161 01b7 00       		.byte	0
 4162 01b8 0D       		.uleb128 0xd
 4163 01b9 81000000 		.4byte	0x81
 4164 01bd C8010000 		.4byte	0x1c8
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 111


 4165 01c1 0E       		.uleb128 0xe
 4166 01c2 72000000 		.4byte	0x72
 4167 01c6 0F       		.byte	0xf
 4168 01c7 00       		.byte	0
 4169 01c8 0D       		.uleb128 0xd
 4170 01c9 FD000000 		.4byte	0xfd
 4171 01cd D8010000 		.4byte	0x1d8
 4172 01d1 0E       		.uleb128 0xe
 4173 01d2 72000000 		.4byte	0x72
 4174 01d6 02       		.byte	0x2
 4175 01d7 00       		.byte	0
 4176 01d8 0D       		.uleb128 0xd
 4177 01d9 61010000 		.4byte	0x161
 4178 01dd E8010000 		.4byte	0x1e8
 4179 01e1 0E       		.uleb128 0xe
 4180 01e2 72000000 		.4byte	0x72
 4181 01e6 02       		.byte	0x2
 4182 01e7 00       		.byte	0
 4183 01e8 0B       		.uleb128 0xb
 4184 01e9 1D040000 		.4byte	.LASF24
 4185 01ed 02       		.byte	0x2
 4186 01ee 3F01     		.2byte	0x13f
 4187 01f0 6D010000 		.4byte	0x16d
 4188 01f4 0F       		.uleb128 0xf
 4189 01f5 58000000 		.4byte	.LASF31
 4190 01f9 01       		.byte	0x1
 4191 01fa 2701     		.2byte	0x127
 4192 01fc 00000000 		.4byte	.LFB0
 4193 0200 AC000000 		.4byte	.LFE0-.LFB0
 4194 0204 01       		.uleb128 0x1
 4195 0205 9C       		.byte	0x9c
 4196 0206 37020000 		.4byte	0x237
 4197 020a 10       		.uleb128 0x10
 4198 020b 7000     		.ascii	"p\000"
 4199 020d 01       		.byte	0x1
 4200 020e 2801     		.2byte	0x128
 4201 0210 37020000 		.4byte	0x237
 4202 0214 02       		.uleb128 0x2
 4203 0215 91       		.byte	0x91
 4204 0216 70       		.sleb128 -16
 4205 0217 11       		.uleb128 0x11
 4206 0218 3C060000 		.4byte	.LASF25
 4207 021c 01       		.byte	0x1
 4208 021d 2901     		.2byte	0x129
 4209 021f 52020000 		.4byte	0x252
 4210 0223 05       		.uleb128 0x5
 4211 0224 03       		.byte	0x3
 4212 0225 0C000000 		.4byte	_aInitStr.5095
 4213 0229 10       		.uleb128 0x10
 4214 022a 6900     		.ascii	"i\000"
 4215 022c 01       		.byte	0x1
 4216 022d 2A01     		.2byte	0x12a
 4217 022f 25000000 		.4byte	0x25
 4218 0233 02       		.uleb128 0x2
 4219 0234 91       		.byte	0x91
 4220 0235 74       		.sleb128 -12
 4221 0236 00       		.byte	0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 112


 4222 0237 05       		.uleb128 0x5
 4223 0238 04       		.byte	0x4
 4224 0239 3D020000 		.4byte	0x23d
 4225 023d 0A       		.uleb128 0xa
 4226 023e E8010000 		.4byte	0x1e8
 4227 0242 0D       		.uleb128 0xd
 4228 0243 94000000 		.4byte	0x94
 4229 0247 52020000 		.4byte	0x252
 4230 024b 0E       		.uleb128 0xe
 4231 024c 72000000 		.4byte	0x72
 4232 0250 10       		.byte	0x10
 4233 0251 00       		.byte	0
 4234 0252 06       		.uleb128 0x6
 4235 0253 42020000 		.4byte	0x242
 4236 0257 12       		.uleb128 0x12
 4237 0258 C2050000 		.4byte	.LASF37
 4238 025c 01       		.byte	0x1
 4239 025d 6301     		.2byte	0x163
 4240 025f 25000000 		.4byte	0x25
 4241 0263 00000000 		.4byte	.LFB1
 4242 0267 B6000000 		.4byte	.LFE1-.LFB1
 4243 026b 01       		.uleb128 0x1
 4244 026c 9C       		.byte	0x9c
 4245 026d EA020000 		.4byte	0x2ea
 4246 0271 13       		.uleb128 0x13
 4247 0272 34040000 		.4byte	.LASF26
 4248 0276 01       		.byte	0x1
 4249 0277 6301     		.2byte	0x163
 4250 0279 EA020000 		.4byte	0x2ea
 4251 027d 02       		.uleb128 0x2
 4252 027e 91       		.byte	0x91
 4253 027f 5C       		.sleb128 -36
 4254 0280 13       		.uleb128 0x13
 4255 0281 59030000 		.4byte	.LASF13
 4256 0285 01       		.byte	0x1
 4257 0286 6301     		.2byte	0x163
 4258 0288 8E000000 		.4byte	0x8e
 4259 028c 02       		.uleb128 0x2
 4260 028d 91       		.byte	0x91
 4261 028e 58       		.sleb128 -40
 4262 028f 13       		.uleb128 0x13
 4263 0290 F2050000 		.4byte	.LASF27
 4264 0294 01       		.byte	0x1
 4265 0295 6301     		.2byte	0x163
 4266 0297 25000000 		.4byte	0x25
 4267 029b 02       		.uleb128 0x2
 4268 029c 91       		.byte	0x91
 4269 029d 54       		.sleb128 -44
 4270 029e 11       		.uleb128 0x11
 4271 029f 46040000 		.4byte	.LASF28
 4272 02a3 01       		.byte	0x1
 4273 02a4 6401     		.2byte	0x164
 4274 02a6 25000000 		.4byte	0x25
 4275 02aa 02       		.uleb128 0x2
 4276 02ab 91       		.byte	0x91
 4277 02ac 74       		.sleb128 -12
 4278 02ad 11       		.uleb128 0x11
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 113


 4279 02ae E2030000 		.4byte	.LASF29
 4280 02b2 01       		.byte	0x1
 4281 02b3 6501     		.2byte	0x165
 4282 02b5 25000000 		.4byte	0x25
 4283 02b9 02       		.uleb128 0x2
 4284 02ba 91       		.byte	0x91
 4285 02bb 70       		.sleb128 -16
 4286 02bc 11       		.uleb128 0x11
 4287 02bd 1B030000 		.4byte	.LASF16
 4288 02c1 01       		.byte	0x1
 4289 02c2 6601     		.2byte	0x166
 4290 02c4 25000000 		.4byte	0x25
 4291 02c8 02       		.uleb128 0x2
 4292 02c9 91       		.byte	0x91
 4293 02ca 68       		.sleb128 -24
 4294 02cb 11       		.uleb128 0x11
 4295 02cc A5060000 		.4byte	.LASF15
 4296 02d0 01       		.byte	0x1
 4297 02d1 6701     		.2byte	0x167
 4298 02d3 25000000 		.4byte	0x25
 4299 02d7 02       		.uleb128 0x2
 4300 02d8 91       		.byte	0x91
 4301 02d9 6C       		.sleb128 -20
 4302 02da 11       		.uleb128 0x11
 4303 02db 39020000 		.4byte	.LASF30
 4304 02df 01       		.byte	0x1
 4305 02e0 6801     		.2byte	0x168
 4306 02e2 F0020000 		.4byte	0x2f0
 4307 02e6 02       		.uleb128 0x2
 4308 02e7 91       		.byte	0x91
 4309 02e8 64       		.sleb128 -28
 4310 02e9 00       		.byte	0
 4311 02ea 05       		.uleb128 0x5
 4312 02eb 04       		.byte	0x4
 4313 02ec FD000000 		.4byte	0xfd
 4314 02f0 05       		.uleb128 0x5
 4315 02f1 04       		.byte	0x4
 4316 02f2 F6020000 		.4byte	0x2f6
 4317 02f6 0A       		.uleb128 0xa
 4318 02f7 81000000 		.4byte	0x81
 4319 02fb 0F       		.uleb128 0xf
 4320 02fc 9D010000 		.4byte	.LASF32
 4321 0300 01       		.byte	0x1
 4322 0301 A101     		.2byte	0x1a1
 4323 0303 00000000 		.4byte	.LFB2
 4324 0307 88000000 		.4byte	.LFE2-.LFB2
 4325 030b 01       		.uleb128 0x1
 4326 030c 9C       		.byte	0x9c
 4327 030d 7B030000 		.4byte	0x37b
 4328 0311 13       		.uleb128 0x13
 4329 0312 34040000 		.4byte	.LASF26
 4330 0316 01       		.byte	0x1
 4331 0317 A101     		.2byte	0x1a1
 4332 0319 EA020000 		.4byte	0x2ea
 4333 031d 02       		.uleb128 0x2
 4334 031e 91       		.byte	0x91
 4335 031f 64       		.sleb128 -28
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 114


 4336 0320 13       		.uleb128 0x13
 4337 0321 15030000 		.4byte	.LASF33
 4338 0325 01       		.byte	0x1
 4339 0326 A101     		.2byte	0x1a1
 4340 0328 8E000000 		.4byte	0x8e
 4341 032c 02       		.uleb128 0x2
 4342 032d 91       		.byte	0x91
 4343 032e 60       		.sleb128 -32
 4344 032f 13       		.uleb128 0x13
 4345 0330 F2050000 		.4byte	.LASF27
 4346 0334 01       		.byte	0x1
 4347 0335 A101     		.2byte	0x1a1
 4348 0337 25000000 		.4byte	0x25
 4349 033b 02       		.uleb128 0x2
 4350 033c 91       		.byte	0x91
 4351 033d 5C       		.sleb128 -36
 4352 033e 11       		.uleb128 0x11
 4353 033f 0E040000 		.4byte	.LASF34
 4354 0343 01       		.byte	0x1
 4355 0344 A201     		.2byte	0x1a2
 4356 0346 25000000 		.4byte	0x25
 4357 034a 02       		.uleb128 0x2
 4358 034b 91       		.byte	0x91
 4359 034c 68       		.sleb128 -24
 4360 034d 11       		.uleb128 0x11
 4361 034e A5060000 		.4byte	.LASF15
 4362 0352 01       		.byte	0x1
 4363 0353 A301     		.2byte	0x1a3
 4364 0355 25000000 		.4byte	0x25
 4365 0359 02       		.uleb128 0x2
 4366 035a 91       		.byte	0x91
 4367 035b 74       		.sleb128 -12
 4368 035c 10       		.uleb128 0x10
 4369 035d 52656D00 		.ascii	"Rem\000"
 4370 0361 01       		.byte	0x1
 4371 0362 A401     		.2byte	0x1a4
 4372 0364 25000000 		.4byte	0x25
 4373 0368 02       		.uleb128 0x2
 4374 0369 91       		.byte	0x91
 4375 036a 70       		.sleb128 -16
 4376 036b 11       		.uleb128 0x11
 4377 036c 39020000 		.4byte	.LASF30
 4378 0370 01       		.byte	0x1
 4379 0371 A501     		.2byte	0x1a5
 4380 0373 F0020000 		.4byte	0x2f0
 4381 0377 02       		.uleb128 0x2
 4382 0378 91       		.byte	0x91
 4383 0379 6C       		.sleb128 -20
 4384 037a 00       		.byte	0
 4385 037b 0F       		.uleb128 0xf
 4386 037c 79060000 		.4byte	.LASF35
 4387 0380 01       		.byte	0x1
 4388 0381 E501     		.2byte	0x1e5
 4389 0383 00000000 		.4byte	.LFB3
 4390 0387 34000000 		.4byte	.LFE3-.LFB3
 4391 038b 01       		.uleb128 0x1
 4392 038c 9C       		.byte	0x9c
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 115


 4393 038d BE030000 		.4byte	0x3be
 4394 0391 13       		.uleb128 0x13
 4395 0392 34040000 		.4byte	.LASF26
 4396 0396 01       		.byte	0x1
 4397 0397 E501     		.2byte	0x1e5
 4398 0399 EA020000 		.4byte	0x2ea
 4399 039d 02       		.uleb128 0x2
 4400 039e 91       		.byte	0x91
 4401 039f 6C       		.sleb128 -20
 4402 03a0 13       		.uleb128 0x13
 4403 03a1 BE060000 		.4byte	.LASF36
 4404 03a5 01       		.byte	0x1
 4405 03a6 E501     		.2byte	0x1e5
 4406 03a8 48000000 		.4byte	0x48
 4407 03ac 02       		.uleb128 0x2
 4408 03ad 91       		.byte	0x91
 4409 03ae 6B       		.sleb128 -21
 4410 03af 10       		.uleb128 0x10
 4411 03b0 616300   		.ascii	"ac\000"
 4412 03b3 01       		.byte	0x1
 4413 03b4 E601     		.2byte	0x1e6
 4414 03b6 BE030000 		.4byte	0x3be
 4415 03ba 02       		.uleb128 0x2
 4416 03bb 91       		.byte	0x91
 4417 03bc 74       		.sleb128 -12
 4418 03bd 00       		.byte	0
 4419 03be 0D       		.uleb128 0xd
 4420 03bf 48000000 		.4byte	0x48
 4421 03c3 CE030000 		.4byte	0x3ce
 4422 03c7 0E       		.uleb128 0xe
 4423 03c8 72000000 		.4byte	0x72
 4424 03cc 01       		.byte	0x1
 4425 03cd 00       		.byte	0
 4426 03ce 14       		.uleb128 0x14
 4427 03cf 21030000 		.4byte	.LASF38
 4428 03d3 01       		.byte	0x1
 4429 03d4 FB01     		.2byte	0x1fb
 4430 03d6 25000000 		.4byte	0x25
 4431 03da 00000000 		.4byte	.LFB4
 4432 03de 44000000 		.4byte	.LFE4-.LFB4
 4433 03e2 01       		.uleb128 0x1
 4434 03e3 9C       		.byte	0x9c
 4435 03e4 23040000 		.4byte	0x423
 4436 03e8 13       		.uleb128 0x13
 4437 03e9 34040000 		.4byte	.LASF26
 4438 03ed 01       		.byte	0x1
 4439 03ee FB01     		.2byte	0x1fb
 4440 03f0 EA020000 		.4byte	0x2ea
 4441 03f4 02       		.uleb128 0x2
 4442 03f5 91       		.byte	0x91
 4443 03f6 64       		.sleb128 -28
 4444 03f7 11       		.uleb128 0x11
 4445 03f8 1B030000 		.4byte	.LASF16
 4446 03fc 01       		.byte	0x1
 4447 03fd FC01     		.2byte	0x1fc
 4448 03ff 25000000 		.4byte	0x25
 4449 0403 02       		.uleb128 0x2
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 116


 4450 0404 91       		.byte	0x91
 4451 0405 70       		.sleb128 -16
 4452 0406 11       		.uleb128 0x11
 4453 0407 A5060000 		.4byte	.LASF15
 4454 040b 01       		.byte	0x1
 4455 040c FD01     		.2byte	0x1fd
 4456 040e 25000000 		.4byte	0x25
 4457 0412 02       		.uleb128 0x2
 4458 0413 91       		.byte	0x91
 4459 0414 6C       		.sleb128 -20
 4460 0415 10       		.uleb128 0x10
 4461 0416 7200     		.ascii	"r\000"
 4462 0418 01       		.byte	0x1
 4463 0419 FE01     		.2byte	0x1fe
 4464 041b 25000000 		.4byte	0x25
 4465 041f 02       		.uleb128 0x2
 4466 0420 91       		.byte	0x91
 4467 0421 74       		.sleb128 -12
 4468 0422 00       		.byte	0
 4469 0423 15       		.uleb128 0x15
 4470 0424 2F010000 		.4byte	.LASF45
 4471 0428 01       		.byte	0x1
 4472 0429 2A02     		.2byte	0x22a
 4473 042b 25000000 		.4byte	0x25
 4474 042f 00000000 		.4byte	.LFB5
 4475 0433 0C010000 		.4byte	.LFE5-.LFB5
 4476 0437 01       		.uleb128 0x1
 4477 0438 9C       		.byte	0x9c
 4478 0439 ED040000 		.4byte	0x4ed
 4479 043d 13       		.uleb128 0x13
 4480 043e BD030000 		.4byte	.LASF39
 4481 0442 01       		.byte	0x1
 4482 0443 2A02     		.2byte	0x22a
 4483 0445 25000000 		.4byte	0x25
 4484 0449 02       		.uleb128 0x2
 4485 044a 91       		.byte	0x91
 4486 044b 54       		.sleb128 -44
 4487 044c 13       		.uleb128 0x13
 4488 044d 15030000 		.4byte	.LASF33
 4489 0451 01       		.byte	0x1
 4490 0452 2A02     		.2byte	0x22a
 4491 0454 79000000 		.4byte	0x79
 4492 0458 02       		.uleb128 0x2
 4493 0459 91       		.byte	0x91
 4494 045a 50       		.sleb128 -48
 4495 045b 13       		.uleb128 0x13
 4496 045c 56040000 		.4byte	.LASF40
 4497 0460 01       		.byte	0x1
 4498 0461 2A02     		.2byte	0x22a
 4499 0463 25000000 		.4byte	0x25
 4500 0467 02       		.uleb128 0x2
 4501 0468 91       		.byte	0x91
 4502 0469 4C       		.sleb128 -52
 4503 046a 11       		.uleb128 0x11
 4504 046b 5D060000 		.4byte	.LASF41
 4505 046f 01       		.byte	0x1
 4506 0470 2B02     		.2byte	0x22b
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 117


 4507 0472 25000000 		.4byte	0x25
 4508 0476 02       		.uleb128 0x2
 4509 0477 91       		.byte	0x91
 4510 0478 5C       		.sleb128 -36
 4511 0479 11       		.uleb128 0x11
 4512 047a 12060000 		.4byte	.LASF42
 4513 047e 01       		.byte	0x1
 4514 047f 2C02     		.2byte	0x22c
 4515 0481 25000000 		.4byte	0x25
 4516 0485 02       		.uleb128 0x2
 4517 0486 91       		.byte	0x91
 4518 0487 74       		.sleb128 -12
 4519 0488 11       		.uleb128 0x11
 4520 0489 1B030000 		.4byte	.LASF16
 4521 048d 01       		.byte	0x1
 4522 048e 2D02     		.2byte	0x22d
 4523 0490 25000000 		.4byte	0x25
 4524 0494 02       		.uleb128 0x2
 4525 0495 91       		.byte	0x91
 4526 0496 70       		.sleb128 -16
 4527 0497 11       		.uleb128 0x11
 4528 0498 A5060000 		.4byte	.LASF15
 4529 049c 01       		.byte	0x1
 4530 049d 2E02     		.2byte	0x22e
 4531 049f 25000000 		.4byte	0x25
 4532 04a3 02       		.uleb128 0x2
 4533 04a4 91       		.byte	0x91
 4534 04a5 60       		.sleb128 -32
 4535 04a6 11       		.uleb128 0x11
 4536 04a7 59030000 		.4byte	.LASF13
 4537 04ab 01       		.byte	0x1
 4538 04ac 2F02     		.2byte	0x22f
 4539 04ae 88000000 		.4byte	0x88
 4540 04b2 02       		.uleb128 0x2
 4541 04b3 91       		.byte	0x91
 4542 04b4 6C       		.sleb128 -20
 4543 04b5 11       		.uleb128 0x11
 4544 04b6 34040000 		.4byte	.LASF26
 4545 04ba 01       		.byte	0x1
 4546 04bb 3002     		.2byte	0x230
 4547 04bd EA020000 		.4byte	0x2ea
 4548 04c1 02       		.uleb128 0x2
 4549 04c2 91       		.byte	0x91
 4550 04c3 64       		.sleb128 -28
 4551 04c4 11       		.uleb128 0x11
 4552 04c5 42030000 		.4byte	.LASF43
 4553 04c9 01       		.byte	0x1
 4554 04ca 3102     		.2byte	0x231
 4555 04cc F0020000 		.4byte	0x2f0
 4556 04d0 02       		.uleb128 0x2
 4557 04d1 91       		.byte	0x91
 4558 04d2 58       		.sleb128 -40
 4559 04d3 16       		.uleb128 0x16
 4560 04d4 0C000000 		.4byte	.LBB2
 4561 04d8 12000000 		.4byte	.LBE2-.LBB2
 4562 04dc 11       		.uleb128 0x11
 4563 04dd 9A060000 		.4byte	.LASF44
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 118


 4564 04e1 01       		.byte	0x1
 4565 04e2 3302     		.2byte	0x233
 4566 04e4 37020000 		.4byte	0x237
 4567 04e8 02       		.uleb128 0x2
 4568 04e9 91       		.byte	0x91
 4569 04ea 68       		.sleb128 -24
 4570 04eb 00       		.byte	0
 4571 04ec 00       		.byte	0
 4572 04ed 15       		.uleb128 0x15
 4573 04ee 3E020000 		.4byte	.LASF46
 4574 04f2 01       		.byte	0x1
 4575 04f3 8602     		.2byte	0x286
 4576 04f5 25000000 		.4byte	0x25
 4577 04f9 00000000 		.4byte	.LFB6
 4578 04fd 0C010000 		.4byte	.LFE6-.LFB6
 4579 0501 01       		.uleb128 0x1
 4580 0502 9C       		.byte	0x9c
 4581 0503 B7050000 		.4byte	0x5b7
 4582 0507 13       		.uleb128 0x13
 4583 0508 BD030000 		.4byte	.LASF39
 4584 050c 01       		.byte	0x1
 4585 050d 8602     		.2byte	0x286
 4586 050f 25000000 		.4byte	0x25
 4587 0513 02       		.uleb128 0x2
 4588 0514 91       		.byte	0x91
 4589 0515 54       		.sleb128 -44
 4590 0516 13       		.uleb128 0x13
 4591 0517 15030000 		.4byte	.LASF33
 4592 051b 01       		.byte	0x1
 4593 051c 8602     		.2byte	0x286
 4594 051e 79000000 		.4byte	0x79
 4595 0522 02       		.uleb128 0x2
 4596 0523 91       		.byte	0x91
 4597 0524 50       		.sleb128 -48
 4598 0525 13       		.uleb128 0x13
 4599 0526 56040000 		.4byte	.LASF40
 4600 052a 01       		.byte	0x1
 4601 052b 8602     		.2byte	0x286
 4602 052d 25000000 		.4byte	0x25
 4603 0531 02       		.uleb128 0x2
 4604 0532 91       		.byte	0x91
 4605 0533 4C       		.sleb128 -52
 4606 0534 11       		.uleb128 0x11
 4607 0535 5D060000 		.4byte	.LASF41
 4608 0539 01       		.byte	0x1
 4609 053a 8702     		.2byte	0x287
 4610 053c 25000000 		.4byte	0x25
 4611 0540 02       		.uleb128 0x2
 4612 0541 91       		.byte	0x91
 4613 0542 5C       		.sleb128 -36
 4614 0543 11       		.uleb128 0x11
 4615 0544 12060000 		.4byte	.LASF42
 4616 0548 01       		.byte	0x1
 4617 0549 8802     		.2byte	0x288
 4618 054b 25000000 		.4byte	0x25
 4619 054f 02       		.uleb128 0x2
 4620 0550 91       		.byte	0x91
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 119


 4621 0551 74       		.sleb128 -12
 4622 0552 11       		.uleb128 0x11
 4623 0553 1B030000 		.4byte	.LASF16
 4624 0557 01       		.byte	0x1
 4625 0558 8902     		.2byte	0x289
 4626 055a 25000000 		.4byte	0x25
 4627 055e 02       		.uleb128 0x2
 4628 055f 91       		.byte	0x91
 4629 0560 70       		.sleb128 -16
 4630 0561 11       		.uleb128 0x11
 4631 0562 A5060000 		.4byte	.LASF15
 4632 0566 01       		.byte	0x1
 4633 0567 8A02     		.2byte	0x28a
 4634 0569 25000000 		.4byte	0x25
 4635 056d 02       		.uleb128 0x2
 4636 056e 91       		.byte	0x91
 4637 056f 60       		.sleb128 -32
 4638 0570 11       		.uleb128 0x11
 4639 0571 59030000 		.4byte	.LASF13
 4640 0575 01       		.byte	0x1
 4641 0576 8B02     		.2byte	0x28b
 4642 0578 88000000 		.4byte	0x88
 4643 057c 02       		.uleb128 0x2
 4644 057d 91       		.byte	0x91
 4645 057e 6C       		.sleb128 -20
 4646 057f 11       		.uleb128 0x11
 4647 0580 34040000 		.4byte	.LASF26
 4648 0584 01       		.byte	0x1
 4649 0585 8C02     		.2byte	0x28c
 4650 0587 B7050000 		.4byte	0x5b7
 4651 058b 02       		.uleb128 0x2
 4652 058c 91       		.byte	0x91
 4653 058d 64       		.sleb128 -28
 4654 058e 11       		.uleb128 0x11
 4655 058f 42030000 		.4byte	.LASF43
 4656 0593 01       		.byte	0x1
 4657 0594 8D02     		.2byte	0x28d
 4658 0596 F0020000 		.4byte	0x2f0
 4659 059a 02       		.uleb128 0x2
 4660 059b 91       		.byte	0x91
 4661 059c 58       		.sleb128 -40
 4662 059d 16       		.uleb128 0x16
 4663 059e 0C000000 		.4byte	.LBB3
 4664 05a2 12000000 		.4byte	.LBE3-.LBB3
 4665 05a6 11       		.uleb128 0x11
 4666 05a7 9A060000 		.4byte	.LASF44
 4667 05ab 01       		.byte	0x1
 4668 05ac 8F02     		.2byte	0x28f
 4669 05ae 37020000 		.4byte	0x237
 4670 05b2 02       		.uleb128 0x2
 4671 05b3 91       		.byte	0x91
 4672 05b4 68       		.sleb128 -24
 4673 05b5 00       		.byte	0
 4674 05b6 00       		.byte	0
 4675 05b7 05       		.uleb128 0x5
 4676 05b8 04       		.byte	0x4
 4677 05b9 61010000 		.4byte	0x161
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 120


 4678 05bd 15       		.uleb128 0x15
 4679 05be 6B010000 		.4byte	.LASF47
 4680 05c2 01       		.byte	0x1
 4681 05c3 E702     		.2byte	0x2e7
 4682 05c5 25000000 		.4byte	0x25
 4683 05c9 00000000 		.4byte	.LFB7
 4684 05cd 36000000 		.4byte	.LFE7-.LFB7
 4685 05d1 01       		.uleb128 0x1
 4686 05d2 9C       		.byte	0x9c
 4687 05d3 2D060000 		.4byte	0x62d
 4688 05d7 13       		.uleb128 0x13
 4689 05d8 BD030000 		.4byte	.LASF39
 4690 05dc 01       		.byte	0x1
 4691 05dd E702     		.2byte	0x2e7
 4692 05df 25000000 		.4byte	0x25
 4693 05e3 02       		.uleb128 0x2
 4694 05e4 91       		.byte	0x91
 4695 05e5 6C       		.sleb128 -20
 4696 05e6 13       		.uleb128 0x13
 4697 05e7 59030000 		.4byte	.LASF13
 4698 05eb 01       		.byte	0x1
 4699 05ec E702     		.2byte	0x2e7
 4700 05ee 79000000 		.4byte	0x79
 4701 05f2 02       		.uleb128 0x2
 4702 05f3 91       		.byte	0x91
 4703 05f4 68       		.sleb128 -24
 4704 05f5 13       		.uleb128 0x13
 4705 05f6 56040000 		.4byte	.LASF40
 4706 05fa 01       		.byte	0x1
 4707 05fb E702     		.2byte	0x2e7
 4708 05fd 25000000 		.4byte	0x25
 4709 0601 02       		.uleb128 0x2
 4710 0602 91       		.byte	0x91
 4711 0603 64       		.sleb128 -28
 4712 0604 11       		.uleb128 0x11
 4713 0605 12060000 		.4byte	.LASF42
 4714 0609 01       		.byte	0x1
 4715 060a E802     		.2byte	0x2e8
 4716 060c 25000000 		.4byte	0x25
 4717 0610 02       		.uleb128 0x2
 4718 0611 91       		.byte	0x91
 4719 0612 70       		.sleb128 -16
 4720 0613 16       		.uleb128 0x16
 4721 0614 0C000000 		.4byte	.LBB4
 4722 0618 20000000 		.4byte	.LBE4-.LBB4
 4723 061c 11       		.uleb128 0x11
 4724 061d 3A050000 		.4byte	.LASF48
 4725 0621 01       		.byte	0x1
 4726 0622 EA02     		.2byte	0x2ea
 4727 0624 25000000 		.4byte	0x25
 4728 0628 02       		.uleb128 0x2
 4729 0629 91       		.byte	0x91
 4730 062a 74       		.sleb128 -12
 4731 062b 00       		.byte	0
 4732 062c 00       		.byte	0
 4733 062d 15       		.uleb128 0x15
 4734 062e 6F050000 		.4byte	.LASF49
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 121


 4735 0632 01       		.byte	0x1
 4736 0633 0703     		.2byte	0x307
 4737 0635 25000000 		.4byte	0x25
 4738 0639 00000000 		.4byte	.LFB8
 4739 063d 36000000 		.4byte	.LFE8-.LFB8
 4740 0641 01       		.uleb128 0x1
 4741 0642 9C       		.byte	0x9c
 4742 0643 9D060000 		.4byte	0x69d
 4743 0647 13       		.uleb128 0x13
 4744 0648 BD030000 		.4byte	.LASF39
 4745 064c 01       		.byte	0x1
 4746 064d 0703     		.2byte	0x307
 4747 064f 25000000 		.4byte	0x25
 4748 0653 02       		.uleb128 0x2
 4749 0654 91       		.byte	0x91
 4750 0655 6C       		.sleb128 -20
 4751 0656 13       		.uleb128 0x13
 4752 0657 59030000 		.4byte	.LASF13
 4753 065b 01       		.byte	0x1
 4754 065c 0703     		.2byte	0x307
 4755 065e 79000000 		.4byte	0x79
 4756 0662 02       		.uleb128 0x2
 4757 0663 91       		.byte	0x91
 4758 0664 68       		.sleb128 -24
 4759 0665 13       		.uleb128 0x13
 4760 0666 56040000 		.4byte	.LASF40
 4761 066a 01       		.byte	0x1
 4762 066b 0703     		.2byte	0x307
 4763 066d 25000000 		.4byte	0x25
 4764 0671 02       		.uleb128 0x2
 4765 0672 91       		.byte	0x91
 4766 0673 64       		.sleb128 -28
 4767 0674 11       		.uleb128 0x11
 4768 0675 12060000 		.4byte	.LASF42
 4769 0679 01       		.byte	0x1
 4770 067a 0803     		.2byte	0x308
 4771 067c 25000000 		.4byte	0x25
 4772 0680 02       		.uleb128 0x2
 4773 0681 91       		.byte	0x91
 4774 0682 70       		.sleb128 -16
 4775 0683 16       		.uleb128 0x16
 4776 0684 0C000000 		.4byte	.LBB5
 4777 0688 20000000 		.4byte	.LBE5-.LBB5
 4778 068c 11       		.uleb128 0x11
 4779 068d 3A050000 		.4byte	.LASF48
 4780 0691 01       		.byte	0x1
 4781 0692 0A03     		.2byte	0x30a
 4782 0694 25000000 		.4byte	0x25
 4783 0698 02       		.uleb128 0x2
 4784 0699 91       		.byte	0x91
 4785 069a 74       		.sleb128 -12
 4786 069b 00       		.byte	0
 4787 069c 00       		.byte	0
 4788 069d 17       		.uleb128 0x17
 4789 069e DD010000 		.4byte	.LASF87
 4790 06a2 01       		.byte	0x1
 4791 06a3 2E03     		.2byte	0x32e
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 122


 4792 06a5 00000000 		.4byte	.LFB9
 4793 06a9 1C010000 		.4byte	.LFE9-.LFB9
 4794 06ad 01       		.uleb128 0x1
 4795 06ae 9C       		.byte	0x9c
 4796 06af 1D070000 		.4byte	0x71d
 4797 06b3 13       		.uleb128 0x13
 4798 06b4 BD030000 		.4byte	.LASF39
 4799 06b8 01       		.byte	0x1
 4800 06b9 2E03     		.2byte	0x32e
 4801 06bb 25000000 		.4byte	0x25
 4802 06bf 02       		.uleb128 0x2
 4803 06c0 91       		.byte	0x91
 4804 06c1 64       		.sleb128 -28
 4805 06c2 13       		.uleb128 0x13
 4806 06c3 59030000 		.4byte	.LASF13
 4807 06c7 01       		.byte	0x1
 4808 06c8 2E03     		.2byte	0x32e
 4809 06ca 99000000 		.4byte	0x99
 4810 06ce 02       		.uleb128 0x2
 4811 06cf 91       		.byte	0x91
 4812 06d0 60       		.sleb128 -32
 4813 06d1 13       		.uleb128 0x13
 4814 06d2 F2050000 		.4byte	.LASF27
 4815 06d6 01       		.byte	0x1
 4816 06d7 2E03     		.2byte	0x32e
 4817 06d9 25000000 		.4byte	0x25
 4818 06dd 02       		.uleb128 0x2
 4819 06de 91       		.byte	0x91
 4820 06df 5C       		.sleb128 -36
 4821 06e0 11       		.uleb128 0x11
 4822 06e1 15030000 		.4byte	.LASF33
 4823 06e5 01       		.byte	0x1
 4824 06e6 2F03     		.2byte	0x32f
 4825 06e8 8E000000 		.4byte	0x8e
 4826 06ec 02       		.uleb128 0x2
 4827 06ed 91       		.byte	0x91
 4828 06ee 74       		.sleb128 -12
 4829 06ef 11       		.uleb128 0x11
 4830 06f0 34040000 		.4byte	.LASF26
 4831 06f4 01       		.byte	0x1
 4832 06f5 3003     		.2byte	0x330
 4833 06f7 EA020000 		.4byte	0x2ea
 4834 06fb 02       		.uleb128 0x2
 4835 06fc 91       		.byte	0x91
 4836 06fd 6C       		.sleb128 -20
 4837 06fe 11       		.uleb128 0x11
 4838 06ff DF040000 		.4byte	.LASF50
 4839 0703 01       		.byte	0x1
 4840 0704 3103     		.2byte	0x331
 4841 0706 25000000 		.4byte	0x25
 4842 070a 02       		.uleb128 0x2
 4843 070b 91       		.byte	0x91
 4844 070c 70       		.sleb128 -16
 4845 070d 11       		.uleb128 0x11
 4846 070e 39020000 		.4byte	.LASF30
 4847 0712 01       		.byte	0x1
 4848 0713 3203     		.2byte	0x332
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 123


 4849 0715 F0020000 		.4byte	0x2f0
 4850 0719 02       		.uleb128 0x2
 4851 071a 91       		.byte	0x91
 4852 071b 68       		.sleb128 -24
 4853 071c 00       		.byte	0
 4854 071d 15       		.uleb128 0x15
 4855 071e A1050000 		.4byte	.LASF51
 4856 0722 01       		.byte	0x1
 4857 0723 ED03     		.2byte	0x3ed
 4858 0725 25000000 		.4byte	0x25
 4859 0729 00000000 		.4byte	.LFB10
 4860 072d 9C000000 		.4byte	.LFE10-.LFB10
 4861 0731 01       		.uleb128 0x1
 4862 0732 9C       		.byte	0x9c
 4863 0733 A1070000 		.4byte	0x7a1
 4864 0737 13       		.uleb128 0x13
 4865 0738 BD030000 		.4byte	.LASF39
 4866 073c 01       		.byte	0x1
 4867 073d ED03     		.2byte	0x3ed
 4868 073f 25000000 		.4byte	0x25
 4869 0743 02       		.uleb128 0x2
 4870 0744 91       		.byte	0x91
 4871 0745 64       		.sleb128 -28
 4872 0746 13       		.uleb128 0x13
 4873 0747 59030000 		.4byte	.LASF13
 4874 074b 01       		.byte	0x1
 4875 074c ED03     		.2byte	0x3ed
 4876 074e 99000000 		.4byte	0x99
 4877 0752 02       		.uleb128 0x2
 4878 0753 91       		.byte	0x91
 4879 0754 60       		.sleb128 -32
 4880 0755 13       		.uleb128 0x13
 4881 0756 F2050000 		.4byte	.LASF27
 4882 075a 01       		.byte	0x1
 4883 075b ED03     		.2byte	0x3ed
 4884 075d 25000000 		.4byte	0x25
 4885 0761 02       		.uleb128 0x2
 4886 0762 91       		.byte	0x91
 4887 0763 5C       		.sleb128 -36
 4888 0764 11       		.uleb128 0x11
 4889 0765 C9060000 		.4byte	.LASF52
 4890 0769 01       		.byte	0x1
 4891 076a EE03     		.2byte	0x3ee
 4892 076c 25000000 		.4byte	0x25
 4893 0770 02       		.uleb128 0x2
 4894 0771 91       		.byte	0x91
 4895 0772 74       		.sleb128 -12
 4896 0773 11       		.uleb128 0x11
 4897 0774 DF040000 		.4byte	.LASF50
 4898 0778 01       		.byte	0x1
 4899 0779 EF03     		.2byte	0x3ef
 4900 077b 25000000 		.4byte	0x25
 4901 077f 02       		.uleb128 0x2
 4902 0780 91       		.byte	0x91
 4903 0781 68       		.sleb128 -24
 4904 0782 11       		.uleb128 0x11
 4905 0783 15030000 		.4byte	.LASF33
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 124


 4906 0787 01       		.byte	0x1
 4907 0788 F003     		.2byte	0x3f0
 4908 078a 8E000000 		.4byte	0x8e
 4909 078e 02       		.uleb128 0x2
 4910 078f 91       		.byte	0x91
 4911 0790 70       		.sleb128 -16
 4912 0791 11       		.uleb128 0x11
 4913 0792 34040000 		.4byte	.LASF26
 4914 0796 01       		.byte	0x1
 4915 0797 F103     		.2byte	0x3f1
 4916 0799 EA020000 		.4byte	0x2ea
 4917 079d 02       		.uleb128 0x2
 4918 079e 91       		.byte	0x91
 4919 079f 6C       		.sleb128 -20
 4920 07a0 00       		.byte	0
 4921 07a1 15       		.uleb128 0x15
 4922 07a2 85050000 		.4byte	.LASF53
 4923 07a6 01       		.byte	0x1
 4924 07a7 3804     		.2byte	0x438
 4925 07a9 25000000 		.4byte	0x25
 4926 07ad 00000000 		.4byte	.LFB11
 4927 07b1 9C000000 		.4byte	.LFE11-.LFB11
 4928 07b5 01       		.uleb128 0x1
 4929 07b6 9C       		.byte	0x9c
 4930 07b7 25080000 		.4byte	0x825
 4931 07bb 13       		.uleb128 0x13
 4932 07bc BD030000 		.4byte	.LASF39
 4933 07c0 01       		.byte	0x1
 4934 07c1 3804     		.2byte	0x438
 4935 07c3 25000000 		.4byte	0x25
 4936 07c7 02       		.uleb128 0x2
 4937 07c8 91       		.byte	0x91
 4938 07c9 64       		.sleb128 -28
 4939 07ca 13       		.uleb128 0x13
 4940 07cb 59030000 		.4byte	.LASF13
 4941 07cf 01       		.byte	0x1
 4942 07d0 3804     		.2byte	0x438
 4943 07d2 99000000 		.4byte	0x99
 4944 07d6 02       		.uleb128 0x2
 4945 07d7 91       		.byte	0x91
 4946 07d8 60       		.sleb128 -32
 4947 07d9 13       		.uleb128 0x13
 4948 07da F2050000 		.4byte	.LASF27
 4949 07de 01       		.byte	0x1
 4950 07df 3804     		.2byte	0x438
 4951 07e1 25000000 		.4byte	0x25
 4952 07e5 02       		.uleb128 0x2
 4953 07e6 91       		.byte	0x91
 4954 07e7 5C       		.sleb128 -36
 4955 07e8 11       		.uleb128 0x11
 4956 07e9 C9060000 		.4byte	.LASF52
 4957 07ed 01       		.byte	0x1
 4958 07ee 3904     		.2byte	0x439
 4959 07f0 25000000 		.4byte	0x25
 4960 07f4 02       		.uleb128 0x2
 4961 07f5 91       		.byte	0x91
 4962 07f6 74       		.sleb128 -12
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 125


 4963 07f7 11       		.uleb128 0x11
 4964 07f8 DF040000 		.4byte	.LASF50
 4965 07fc 01       		.byte	0x1
 4966 07fd 3A04     		.2byte	0x43a
 4967 07ff 25000000 		.4byte	0x25
 4968 0803 02       		.uleb128 0x2
 4969 0804 91       		.byte	0x91
 4970 0805 68       		.sleb128 -24
 4971 0806 11       		.uleb128 0x11
 4972 0807 15030000 		.4byte	.LASF33
 4973 080b 01       		.byte	0x1
 4974 080c 3B04     		.2byte	0x43b
 4975 080e 8E000000 		.4byte	0x8e
 4976 0812 02       		.uleb128 0x2
 4977 0813 91       		.byte	0x91
 4978 0814 70       		.sleb128 -16
 4979 0815 11       		.uleb128 0x11
 4980 0816 34040000 		.4byte	.LASF26
 4981 081a 01       		.byte	0x1
 4982 081b 3C04     		.2byte	0x43c
 4983 081d EA020000 		.4byte	0x2ea
 4984 0821 02       		.uleb128 0x2
 4985 0822 91       		.byte	0x91
 4986 0823 6C       		.sleb128 -20
 4987 0824 00       		.byte	0
 4988 0825 15       		.uleb128 0x15
 4989 0826 8B030000 		.4byte	.LASF54
 4990 082a 01       		.byte	0x1
 4991 082b 8404     		.2byte	0x484
 4992 082d 25000000 		.4byte	0x25
 4993 0831 00000000 		.4byte	.LFB12
 4994 0835 4C000000 		.4byte	.LFE12-.LFB12
 4995 0839 01       		.uleb128 0x1
 4996 083a 9C       		.byte	0x9c
 4997 083b B2080000 		.4byte	0x8b2
 4998 083f 13       		.uleb128 0x13
 4999 0840 BD030000 		.4byte	.LASF39
 5000 0844 01       		.byte	0x1
 5001 0845 8404     		.2byte	0x484
 5002 0847 25000000 		.4byte	0x25
 5003 084b 02       		.uleb128 0x2
 5004 084c 91       		.byte	0x91
 5005 084d 64       		.sleb128 -28
 5006 084e 13       		.uleb128 0x13
 5007 084f 59030000 		.4byte	.LASF13
 5008 0853 01       		.byte	0x1
 5009 0854 8404     		.2byte	0x484
 5010 0856 99000000 		.4byte	0x99
 5011 085a 02       		.uleb128 0x2
 5012 085b 91       		.byte	0x91
 5013 085c 60       		.sleb128 -32
 5014 085d 13       		.uleb128 0x13
 5015 085e F2050000 		.4byte	.LASF27
 5016 0862 01       		.byte	0x1
 5017 0863 8404     		.2byte	0x484
 5018 0865 25000000 		.4byte	0x25
 5019 0869 02       		.uleb128 0x2
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 126


 5020 086a 91       		.byte	0x91
 5021 086b 5C       		.sleb128 -36
 5022 086c 11       		.uleb128 0x11
 5023 086d C9060000 		.4byte	.LASF52
 5024 0871 01       		.byte	0x1
 5025 0872 8504     		.2byte	0x485
 5026 0874 25000000 		.4byte	0x25
 5027 0878 02       		.uleb128 0x2
 5028 0879 91       		.byte	0x91
 5029 087a 6C       		.sleb128 -20
 5030 087b 18       		.uleb128 0x18
 5031 087c 0C000000 		.4byte	.LBB6
 5032 0880 12000000 		.4byte	.LBE6-.LBB6
 5033 0884 98080000 		.4byte	0x898
 5034 0888 11       		.uleb128 0x11
 5035 0889 9A060000 		.4byte	.LASF44
 5036 088d 01       		.byte	0x1
 5037 088e 8704     		.2byte	0x487
 5038 0890 37020000 		.4byte	0x237
 5039 0894 02       		.uleb128 0x2
 5040 0895 91       		.byte	0x91
 5041 0896 74       		.sleb128 -12
 5042 0897 00       		.byte	0
 5043 0898 16       		.uleb128 0x16
 5044 0899 1E000000 		.4byte	.LBB7
 5045 089d 20000000 		.4byte	.LBE7-.LBB7
 5046 08a1 11       		.uleb128 0x11
 5047 08a2 3A050000 		.4byte	.LASF48
 5048 08a6 01       		.byte	0x1
 5049 08a7 8804     		.2byte	0x488
 5050 08a9 25000000 		.4byte	0x25
 5051 08ad 02       		.uleb128 0x2
 5052 08ae 91       		.byte	0x91
 5053 08af 70       		.sleb128 -16
 5054 08b0 00       		.byte	0
 5055 08b1 00       		.byte	0
 5056 08b2 15       		.uleb128 0x15
 5057 08b3 61040000 		.4byte	.LASF55
 5058 08b7 01       		.byte	0x1
 5059 08b8 A104     		.2byte	0x4a1
 5060 08ba 25000000 		.4byte	0x25
 5061 08be 00000000 		.4byte	.LFB13
 5062 08c2 4C000000 		.4byte	.LFE13-.LFB13
 5063 08c6 01       		.uleb128 0x1
 5064 08c7 9C       		.byte	0x9c
 5065 08c8 3F090000 		.4byte	0x93f
 5066 08cc 13       		.uleb128 0x13
 5067 08cd BD030000 		.4byte	.LASF39
 5068 08d1 01       		.byte	0x1
 5069 08d2 A104     		.2byte	0x4a1
 5070 08d4 25000000 		.4byte	0x25
 5071 08d8 02       		.uleb128 0x2
 5072 08d9 91       		.byte	0x91
 5073 08da 64       		.sleb128 -28
 5074 08db 13       		.uleb128 0x13
 5075 08dc 59030000 		.4byte	.LASF13
 5076 08e0 01       		.byte	0x1
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 127


 5077 08e1 A104     		.2byte	0x4a1
 5078 08e3 99000000 		.4byte	0x99
 5079 08e7 02       		.uleb128 0x2
 5080 08e8 91       		.byte	0x91
 5081 08e9 60       		.sleb128 -32
 5082 08ea 13       		.uleb128 0x13
 5083 08eb F2050000 		.4byte	.LASF27
 5084 08ef 01       		.byte	0x1
 5085 08f0 A104     		.2byte	0x4a1
 5086 08f2 25000000 		.4byte	0x25
 5087 08f6 02       		.uleb128 0x2
 5088 08f7 91       		.byte	0x91
 5089 08f8 5C       		.sleb128 -36
 5090 08f9 11       		.uleb128 0x11
 5091 08fa C9060000 		.4byte	.LASF52
 5092 08fe 01       		.byte	0x1
 5093 08ff A204     		.2byte	0x4a2
 5094 0901 25000000 		.4byte	0x25
 5095 0905 02       		.uleb128 0x2
 5096 0906 91       		.byte	0x91
 5097 0907 6C       		.sleb128 -20
 5098 0908 18       		.uleb128 0x18
 5099 0909 0C000000 		.4byte	.LBB8
 5100 090d 12000000 		.4byte	.LBE8-.LBB8
 5101 0911 25090000 		.4byte	0x925
 5102 0915 11       		.uleb128 0x11
 5103 0916 9A060000 		.4byte	.LASF44
 5104 091a 01       		.byte	0x1
 5105 091b A404     		.2byte	0x4a4
 5106 091d 37020000 		.4byte	0x237
 5107 0921 02       		.uleb128 0x2
 5108 0922 91       		.byte	0x91
 5109 0923 74       		.sleb128 -12
 5110 0924 00       		.byte	0
 5111 0925 16       		.uleb128 0x16
 5112 0926 1E000000 		.4byte	.LBB9
 5113 092a 20000000 		.4byte	.LBE9-.LBB9
 5114 092e 11       		.uleb128 0x11
 5115 092f 3A050000 		.4byte	.LASF48
 5116 0933 01       		.byte	0x1
 5117 0934 A504     		.2byte	0x4a5
 5118 0936 25000000 		.4byte	0x25
 5119 093a 02       		.uleb128 0x2
 5120 093b 91       		.byte	0x91
 5121 093c 70       		.sleb128 -16
 5122 093d 00       		.byte	0
 5123 093e 00       		.byte	0
 5124 093f 15       		.uleb128 0x15
 5125 0940 11050000 		.4byte	.LASF56
 5126 0944 01       		.byte	0x1
 5127 0945 BF04     		.2byte	0x4bf
 5128 0947 25000000 		.4byte	0x25
 5129 094b 00000000 		.4byte	.LFB14
 5130 094f 26000000 		.4byte	.LFE14-.LFB14
 5131 0953 01       		.uleb128 0x1
 5132 0954 9C       		.byte	0x9c
 5133 0955 85090000 		.4byte	0x985
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 128


 5134 0959 13       		.uleb128 0x13
 5135 095a BD030000 		.4byte	.LASF39
 5136 095e 01       		.byte	0x1
 5137 095f BF04     		.2byte	0x4bf
 5138 0961 25000000 		.4byte	0x25
 5139 0965 02       		.uleb128 0x2
 5140 0966 91       		.byte	0x91
 5141 0967 6C       		.sleb128 -20
 5142 0968 19       		.uleb128 0x19
 5143 0969 7300     		.ascii	"s\000"
 5144 096b 01       		.byte	0x1
 5145 096c BF04     		.2byte	0x4bf
 5146 096e 8E000000 		.4byte	0x8e
 5147 0972 02       		.uleb128 0x2
 5148 0973 91       		.byte	0x91
 5149 0974 68       		.sleb128 -24
 5150 0975 10       		.uleb128 0x10
 5151 0976 4C656E00 		.ascii	"Len\000"
 5152 097a 01       		.byte	0x1
 5153 097b C004     		.2byte	0x4c0
 5154 097d 25000000 		.4byte	0x25
 5155 0981 02       		.uleb128 0x2
 5156 0982 91       		.byte	0x91
 5157 0983 74       		.sleb128 -12
 5158 0984 00       		.byte	0
 5159 0985 1A       		.uleb128 0x1a
 5160 0986 1F060000 		.4byte	.LASF57
 5161 098a 01       		.byte	0x1
 5162 098b DD04     		.2byte	0x4dd
 5163 098d 25000000 		.4byte	0x25
 5164 0991 00000000 		.4byte	.LFB15
 5165 0995 70000000 		.4byte	.LFE15-.LFB15
 5166 0999 01       		.uleb128 0x1
 5167 099a 9C       		.byte	0x9c
 5168 099b F8090000 		.4byte	0x9f8
 5169 099f 13       		.uleb128 0x13
 5170 09a0 BD030000 		.4byte	.LASF39
 5171 09a4 01       		.byte	0x1
 5172 09a5 DD04     		.2byte	0x4dd
 5173 09a7 25000000 		.4byte	0x25
 5174 09ab 02       		.uleb128 0x2
 5175 09ac 91       		.byte	0x91
 5176 09ad 64       		.sleb128 -28
 5177 09ae 19       		.uleb128 0x19
 5178 09af 6300     		.ascii	"c\000"
 5179 09b1 01       		.byte	0x1
 5180 09b2 DD04     		.2byte	0x4dd
 5181 09b4 81000000 		.4byte	0x81
 5182 09b8 02       		.uleb128 0x2
 5183 09b9 91       		.byte	0x91
 5184 09ba 63       		.sleb128 -29
 5185 09bb 11       		.uleb128 0x11
 5186 09bc 34040000 		.4byte	.LASF26
 5187 09c0 01       		.byte	0x1
 5188 09c1 DE04     		.2byte	0x4de
 5189 09c3 EA020000 		.4byte	0x2ea
 5190 09c7 02       		.uleb128 0x2
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 129


 5191 09c8 91       		.byte	0x91
 5192 09c9 6C       		.sleb128 -20
 5193 09ca 11       		.uleb128 0x11
 5194 09cb A5060000 		.4byte	.LASF15
 5195 09cf 01       		.byte	0x1
 5196 09d0 DF04     		.2byte	0x4df
 5197 09d2 25000000 		.4byte	0x25
 5198 09d6 02       		.uleb128 0x2
 5199 09d7 91       		.byte	0x91
 5200 09d8 74       		.sleb128 -12
 5201 09d9 11       		.uleb128 0x11
 5202 09da C9060000 		.4byte	.LASF52
 5203 09de 01       		.byte	0x1
 5204 09df E004     		.2byte	0x4e0
 5205 09e1 25000000 		.4byte	0x25
 5206 09e5 02       		.uleb128 0x2
 5207 09e6 91       		.byte	0x91
 5208 09e7 70       		.sleb128 -16
 5209 09e8 11       		.uleb128 0x11
 5210 09e9 39020000 		.4byte	.LASF30
 5211 09ed 01       		.byte	0x1
 5212 09ee E104     		.2byte	0x4e1
 5213 09f0 F0020000 		.4byte	0x2f0
 5214 09f4 02       		.uleb128 0x2
 5215 09f5 91       		.byte	0x91
 5216 09f6 68       		.sleb128 -24
 5217 09f7 00       		.byte	0
 5218 09f8 15       		.uleb128 0x15
 5219 09f9 01020000 		.4byte	.LASF58
 5220 09fd 01       		.byte	0x1
 5221 09fe 0F05     		.2byte	0x50f
 5222 0a00 25000000 		.4byte	0x25
 5223 0a04 00000000 		.4byte	.LFB16
 5224 0a08 94000000 		.4byte	.LFE16-.LFB16
 5225 0a0c 01       		.uleb128 0x1
 5226 0a0d 9C       		.byte	0x9c
 5227 0a0e A10A0000 		.4byte	0xaa1
 5228 0a12 13       		.uleb128 0x13
 5229 0a13 BD030000 		.4byte	.LASF39
 5230 0a17 01       		.byte	0x1
 5231 0a18 0F05     		.2byte	0x50f
 5232 0a1a 25000000 		.4byte	0x25
 5233 0a1e 02       		.uleb128 0x2
 5234 0a1f 91       		.byte	0x91
 5235 0a20 5C       		.sleb128 -36
 5236 0a21 19       		.uleb128 0x19
 5237 0a22 6300     		.ascii	"c\000"
 5238 0a24 01       		.byte	0x1
 5239 0a25 0F05     		.2byte	0x50f
 5240 0a27 81000000 		.4byte	0x81
 5241 0a2b 02       		.uleb128 0x2
 5242 0a2c 91       		.byte	0x91
 5243 0a2d 5B       		.sleb128 -37
 5244 0a2e 11       		.uleb128 0x11
 5245 0a2f 34040000 		.4byte	.LASF26
 5246 0a33 01       		.byte	0x1
 5247 0a34 1005     		.2byte	0x510
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 130


 5248 0a36 EA020000 		.4byte	0x2ea
 5249 0a3a 02       		.uleb128 0x2
 5250 0a3b 91       		.byte	0x91
 5251 0a3c 64       		.sleb128 -28
 5252 0a3d 11       		.uleb128 0x11
 5253 0a3e A5060000 		.4byte	.LASF15
 5254 0a42 01       		.byte	0x1
 5255 0a43 1105     		.2byte	0x511
 5256 0a45 25000000 		.4byte	0x25
 5257 0a49 02       		.uleb128 0x2
 5258 0a4a 91       		.byte	0x91
 5259 0a4b 74       		.sleb128 -12
 5260 0a4c 11       		.uleb128 0x11
 5261 0a4d C9060000 		.4byte	.LASF52
 5262 0a51 01       		.byte	0x1
 5263 0a52 1205     		.2byte	0x512
 5264 0a54 25000000 		.4byte	0x25
 5265 0a58 02       		.uleb128 0x2
 5266 0a59 91       		.byte	0x91
 5267 0a5a 70       		.sleb128 -16
 5268 0a5b 11       		.uleb128 0x11
 5269 0a5c 39020000 		.4byte	.LASF30
 5270 0a60 01       		.byte	0x1
 5271 0a61 1305     		.2byte	0x513
 5272 0a63 F0020000 		.4byte	0x2f0
 5273 0a67 02       		.uleb128 0x2
 5274 0a68 91       		.byte	0x91
 5275 0a69 60       		.sleb128 -32
 5276 0a6a 18       		.uleb128 0x18
 5277 0a6b 0C000000 		.4byte	.LBB10
 5278 0a6f 12000000 		.4byte	.LBE10-.LBB10
 5279 0a73 870A0000 		.4byte	0xa87
 5280 0a77 11       		.uleb128 0x11
 5281 0a78 9A060000 		.4byte	.LASF44
 5282 0a7c 01       		.byte	0x1
 5283 0a7d 1705     		.2byte	0x517
 5284 0a7f 37020000 		.4byte	0x237
 5285 0a83 02       		.uleb128 0x2
 5286 0a84 91       		.byte	0x91
 5287 0a85 6C       		.sleb128 -20
 5288 0a86 00       		.byte	0
 5289 0a87 16       		.uleb128 0x16
 5290 0a88 1E000000 		.4byte	.LBB11
 5291 0a8c 68000000 		.4byte	.LBE11-.LBB11
 5292 0a90 11       		.uleb128 0x11
 5293 0a91 3A050000 		.4byte	.LASF48
 5294 0a95 01       		.byte	0x1
 5295 0a96 1805     		.2byte	0x518
 5296 0a98 25000000 		.4byte	0x25
 5297 0a9c 02       		.uleb128 0x2
 5298 0a9d 91       		.byte	0x91
 5299 0a9e 68       		.sleb128 -24
 5300 0a9f 00       		.byte	0
 5301 0aa0 00       		.byte	0
 5302 0aa1 15       		.uleb128 0x15
 5303 0aa2 1C010000 		.4byte	.LASF59
 5304 0aa6 01       		.byte	0x1
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 131


 5305 0aa7 4A05     		.2byte	0x54a
 5306 0aa9 25000000 		.4byte	0x25
 5307 0aad 00000000 		.4byte	.LFB17
 5308 0ab1 A8000000 		.4byte	.LFE17-.LFB17
 5309 0ab5 01       		.uleb128 0x1
 5310 0ab6 9C       		.byte	0x9c
 5311 0ab7 4A0B0000 		.4byte	0xb4a
 5312 0abb 13       		.uleb128 0x13
 5313 0abc BD030000 		.4byte	.LASF39
 5314 0ac0 01       		.byte	0x1
 5315 0ac1 4A05     		.2byte	0x54a
 5316 0ac3 25000000 		.4byte	0x25
 5317 0ac7 02       		.uleb128 0x2
 5318 0ac8 91       		.byte	0x91
 5319 0ac9 5C       		.sleb128 -36
 5320 0aca 19       		.uleb128 0x19
 5321 0acb 6300     		.ascii	"c\000"
 5322 0acd 01       		.byte	0x1
 5323 0ace 4A05     		.2byte	0x54a
 5324 0ad0 81000000 		.4byte	0x81
 5325 0ad4 02       		.uleb128 0x2
 5326 0ad5 91       		.byte	0x91
 5327 0ad6 5B       		.sleb128 -37
 5328 0ad7 11       		.uleb128 0x11
 5329 0ad8 34040000 		.4byte	.LASF26
 5330 0adc 01       		.byte	0x1
 5331 0add 4B05     		.2byte	0x54b
 5332 0adf EA020000 		.4byte	0x2ea
 5333 0ae3 02       		.uleb128 0x2
 5334 0ae4 91       		.byte	0x91
 5335 0ae5 64       		.sleb128 -28
 5336 0ae6 11       		.uleb128 0x11
 5337 0ae7 A5060000 		.4byte	.LASF15
 5338 0aeb 01       		.byte	0x1
 5339 0aec 4C05     		.2byte	0x54c
 5340 0aee 25000000 		.4byte	0x25
 5341 0af2 02       		.uleb128 0x2
 5342 0af3 91       		.byte	0x91
 5343 0af4 74       		.sleb128 -12
 5344 0af5 11       		.uleb128 0x11
 5345 0af6 C9060000 		.4byte	.LASF52
 5346 0afa 01       		.byte	0x1
 5347 0afb 4D05     		.2byte	0x54d
 5348 0afd 25000000 		.4byte	0x25
 5349 0b01 02       		.uleb128 0x2
 5350 0b02 91       		.byte	0x91
 5351 0b03 70       		.sleb128 -16
 5352 0b04 11       		.uleb128 0x11
 5353 0b05 39020000 		.4byte	.LASF30
 5354 0b09 01       		.byte	0x1
 5355 0b0a 4E05     		.2byte	0x54e
 5356 0b0c F0020000 		.4byte	0x2f0
 5357 0b10 02       		.uleb128 0x2
 5358 0b11 91       		.byte	0x91
 5359 0b12 60       		.sleb128 -32
 5360 0b13 18       		.uleb128 0x18
 5361 0b14 0C000000 		.4byte	.LBB12
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 132


 5362 0b18 12000000 		.4byte	.LBE12-.LBB12
 5363 0b1c 300B0000 		.4byte	0xb30
 5364 0b20 11       		.uleb128 0x11
 5365 0b21 9A060000 		.4byte	.LASF44
 5366 0b25 01       		.byte	0x1
 5367 0b26 5205     		.2byte	0x552
 5368 0b28 37020000 		.4byte	0x237
 5369 0b2c 02       		.uleb128 0x2
 5370 0b2d 91       		.byte	0x91
 5371 0b2e 6C       		.sleb128 -20
 5372 0b2f 00       		.byte	0
 5373 0b30 16       		.uleb128 0x16
 5374 0b31 1E000000 		.4byte	.LBB13
 5375 0b35 7C000000 		.4byte	.LBE13-.LBB13
 5376 0b39 11       		.uleb128 0x11
 5377 0b3a 3A050000 		.4byte	.LASF48
 5378 0b3e 01       		.byte	0x1
 5379 0b3f 5305     		.2byte	0x553
 5380 0b41 25000000 		.4byte	0x25
 5381 0b45 02       		.uleb128 0x2
 5382 0b46 91       		.byte	0x91
 5383 0b47 68       		.sleb128 -24
 5384 0b48 00       		.byte	0
 5385 0b49 00       		.byte	0
 5386 0b4a 15       		.uleb128 0x15
 5387 0b4b 03030000 		.4byte	.LASF60
 5388 0b4f 01       		.byte	0x1
 5389 0b50 8905     		.2byte	0x589
 5390 0b52 2C000000 		.4byte	0x2c
 5391 0b56 00000000 		.4byte	.LFB18
 5392 0b5a 32000000 		.4byte	.LFE18-.LFB18
 5393 0b5e 01       		.uleb128 0x1
 5394 0b5f 9C       		.byte	0x9c
 5395 0b60 7F0B0000 		.4byte	0xb7f
 5396 0b64 10       		.uleb128 0x10
 5397 0b65 6300     		.ascii	"c\000"
 5398 0b67 01       		.byte	0x1
 5399 0b68 8A05     		.2byte	0x58a
 5400 0b6a 81000000 		.4byte	0x81
 5401 0b6e 02       		.uleb128 0x2
 5402 0b6f 91       		.byte	0x91
 5403 0b70 73       		.sleb128 -13
 5404 0b71 10       		.uleb128 0x10
 5405 0b72 7200     		.ascii	"r\000"
 5406 0b74 01       		.byte	0x1
 5407 0b75 8B05     		.2byte	0x58b
 5408 0b77 2C000000 		.4byte	0x2c
 5409 0b7b 02       		.uleb128 0x2
 5410 0b7c 91       		.byte	0x91
 5411 0b7d 74       		.sleb128 -12
 5412 0b7e 00       		.byte	0
 5413 0b7f 15       		.uleb128 0x15
 5414 0b80 AB060000 		.4byte	.LASF61
 5415 0b84 01       		.byte	0x1
 5416 0b85 A505     		.2byte	0x5a5
 5417 0b87 2C000000 		.4byte	0x2c
 5418 0b8b 00000000 		.4byte	.LFB19
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 133


 5419 0b8f 1C000000 		.4byte	.LFE19-.LFB19
 5420 0b93 01       		.uleb128 0x1
 5421 0b94 9C       		.byte	0x9c
 5422 0b95 A70B0000 		.4byte	0xba7
 5423 0b99 10       		.uleb128 0x10
 5424 0b9a 7200     		.ascii	"r\000"
 5425 0b9c 01       		.byte	0x1
 5426 0b9d A605     		.2byte	0x5a6
 5427 0b9f 2C000000 		.4byte	0x2c
 5428 0ba3 02       		.uleb128 0x2
 5429 0ba4 91       		.byte	0x91
 5430 0ba5 74       		.sleb128 -12
 5431 0ba6 00       		.byte	0
 5432 0ba7 15       		.uleb128 0x15
 5433 0ba8 D0060000 		.4byte	.LASF62
 5434 0bac 01       		.byte	0x1
 5435 0bad BC05     		.2byte	0x5bc
 5436 0baf 2C000000 		.4byte	0x2c
 5437 0bb3 00000000 		.4byte	.LFB20
 5438 0bb7 48000000 		.4byte	.LFE20-.LFB20
 5439 0bbb 01       		.uleb128 0x1
 5440 0bbc 9C       		.byte	0x9c
 5441 0bbd 060C0000 		.4byte	0xc06
 5442 0bc1 11       		.uleb128 0x11
 5443 0bc2 34040000 		.4byte	.LASF26
 5444 0bc6 01       		.byte	0x1
 5445 0bc7 BD05     		.2byte	0x5bd
 5446 0bc9 B7050000 		.4byte	0x5b7
 5447 0bcd 02       		.uleb128 0x2
 5448 0bce 91       		.byte	0x91
 5449 0bcf 6C       		.sleb128 -20
 5450 0bd0 11       		.uleb128 0x11
 5451 0bd1 1B030000 		.4byte	.LASF16
 5452 0bd5 01       		.byte	0x1
 5453 0bd6 BE05     		.2byte	0x5be
 5454 0bd8 25000000 		.4byte	0x25
 5455 0bdc 02       		.uleb128 0x2
 5456 0bdd 91       		.byte	0x91
 5457 0bde 68       		.sleb128 -24
 5458 0bdf 10       		.uleb128 0x10
 5459 0be0 7200     		.ascii	"r\000"
 5460 0be2 01       		.byte	0x1
 5461 0be3 BF05     		.2byte	0x5bf
 5462 0be5 2C000000 		.4byte	0x2c
 5463 0be9 02       		.uleb128 0x2
 5464 0bea 91       		.byte	0x91
 5465 0beb 74       		.sleb128 -12
 5466 0bec 16       		.uleb128 0x16
 5467 0bed 06000000 		.4byte	.LBB14
 5468 0bf1 12000000 		.4byte	.LBE14-.LBB14
 5469 0bf5 11       		.uleb128 0x11
 5470 0bf6 9A060000 		.4byte	.LASF44
 5471 0bfa 01       		.byte	0x1
 5472 0bfb C105     		.2byte	0x5c1
 5473 0bfd 37020000 		.4byte	0x237
 5474 0c01 02       		.uleb128 0x2
 5475 0c02 91       		.byte	0x91
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 134


 5476 0c03 70       		.sleb128 -16
 5477 0c04 00       		.byte	0
 5478 0c05 00       		.byte	0
 5479 0c06 1A       		.uleb128 0x1a
 5480 0c07 C9030000 		.4byte	.LASF63
 5481 0c0b 01       		.byte	0x1
 5482 0c0c D805     		.2byte	0x5d8
 5483 0c0e 25000000 		.4byte	0x25
 5484 0c12 00000000 		.4byte	.LFB21
 5485 0c16 38000000 		.4byte	.LFE21-.LFB21
 5486 0c1a 01       		.uleb128 0x1
 5487 0c1b 9C       		.byte	0x9c
 5488 0c1c 4C0C0000 		.4byte	0xc4c
 5489 0c20 13       		.uleb128 0x13
 5490 0c21 BD030000 		.4byte	.LASF39
 5491 0c25 01       		.byte	0x1
 5492 0c26 D805     		.2byte	0x5d8
 5493 0c28 25000000 		.4byte	0x25
 5494 0c2c 02       		.uleb128 0x2
 5495 0c2d 91       		.byte	0x91
 5496 0c2e 6C       		.sleb128 -20
 5497 0c2f 11       		.uleb128 0x11
 5498 0c30 34040000 		.4byte	.LASF26
 5499 0c34 01       		.byte	0x1
 5500 0c35 D905     		.2byte	0x5d9
 5501 0c37 B7050000 		.4byte	0x5b7
 5502 0c3b 02       		.uleb128 0x2
 5503 0c3c 91       		.byte	0x91
 5504 0c3d 74       		.sleb128 -12
 5505 0c3e 10       		.uleb128 0x10
 5506 0c3f 7600     		.ascii	"v\000"
 5507 0c41 01       		.byte	0x1
 5508 0c42 DA05     		.2byte	0x5da
 5509 0c44 25000000 		.4byte	0x25
 5510 0c48 02       		.uleb128 0x2
 5511 0c49 91       		.byte	0x91
 5512 0c4a 70       		.sleb128 -16
 5513 0c4b 00       		.byte	0
 5514 0c4c 1A       		.uleb128 0x1a
 5515 0c4d 00000000 		.4byte	.LASF64
 5516 0c51 01       		.byte	0x1
 5517 0c52 ED05     		.2byte	0x5ed
 5518 0c54 25000000 		.4byte	0x25
 5519 0c58 00000000 		.4byte	.LFB22
 5520 0c5c 38000000 		.4byte	.LFE22-.LFB22
 5521 0c60 01       		.uleb128 0x1
 5522 0c61 9C       		.byte	0x9c
 5523 0c62 920C0000 		.4byte	0xc92
 5524 0c66 13       		.uleb128 0x13
 5525 0c67 BD030000 		.4byte	.LASF39
 5526 0c6b 01       		.byte	0x1
 5527 0c6c ED05     		.2byte	0x5ed
 5528 0c6e 25000000 		.4byte	0x25
 5529 0c72 02       		.uleb128 0x2
 5530 0c73 91       		.byte	0x91
 5531 0c74 6C       		.sleb128 -20
 5532 0c75 11       		.uleb128 0x11
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 135


 5533 0c76 34040000 		.4byte	.LASF26
 5534 0c7a 01       		.byte	0x1
 5535 0c7b EE05     		.2byte	0x5ee
 5536 0c7d EA020000 		.4byte	0x2ea
 5537 0c81 02       		.uleb128 0x2
 5538 0c82 91       		.byte	0x91
 5539 0c83 74       		.sleb128 -12
 5540 0c84 10       		.uleb128 0x10
 5541 0c85 7600     		.ascii	"v\000"
 5542 0c87 01       		.byte	0x1
 5543 0c88 EF05     		.2byte	0x5ef
 5544 0c8a 25000000 		.4byte	0x25
 5545 0c8e 02       		.uleb128 0x2
 5546 0c8f 91       		.byte	0x91
 5547 0c90 70       		.sleb128 -16
 5548 0c91 00       		.byte	0
 5549 0c92 15       		.uleb128 0x15
 5550 0c93 9A040000 		.4byte	.LASF65
 5551 0c97 01       		.byte	0x1
 5552 0c98 0906     		.2byte	0x609
 5553 0c9a 2C000000 		.4byte	0x2c
 5554 0c9e 00000000 		.4byte	.LFB23
 5555 0ca2 00010000 		.4byte	.LFE23-.LFB23
 5556 0ca6 01       		.uleb128 0x1
 5557 0ca7 9C       		.byte	0x9c
 5558 0ca8 3D0D0000 		.4byte	0xd3d
 5559 0cac 13       		.uleb128 0x13
 5560 0cad DC030000 		.4byte	.LASF12
 5561 0cb1 01       		.byte	0x1
 5562 0cb2 0906     		.2byte	0x609
 5563 0cb4 8E000000 		.4byte	0x8e
 5564 0cb8 02       		.uleb128 0x2
 5565 0cb9 91       		.byte	0x91
 5566 0cba 64       		.sleb128 -28
 5567 0cbb 13       		.uleb128 0x13
 5568 0cbc 59030000 		.4byte	.LASF13
 5569 0cc0 01       		.byte	0x1
 5570 0cc1 0906     		.2byte	0x609
 5571 0cc3 79000000 		.4byte	0x79
 5572 0cc7 02       		.uleb128 0x2
 5573 0cc8 91       		.byte	0x91
 5574 0cc9 60       		.sleb128 -32
 5575 0cca 13       		.uleb128 0x13
 5576 0ccb 56040000 		.4byte	.LASF40
 5577 0ccf 01       		.byte	0x1
 5578 0cd0 0906     		.2byte	0x609
 5579 0cd2 25000000 		.4byte	0x25
 5580 0cd6 02       		.uleb128 0x2
 5581 0cd7 91       		.byte	0x91
 5582 0cd8 5C       		.sleb128 -36
 5583 0cd9 13       		.uleb128 0x13
 5584 0cda EC050000 		.4byte	.LASF17
 5585 0cde 01       		.byte	0x1
 5586 0cdf 0906     		.2byte	0x609
 5587 0ce1 25000000 		.4byte	0x25
 5588 0ce5 02       		.uleb128 0x2
 5589 0ce6 91       		.byte	0x91
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 136


 5590 0ce7 58       		.sleb128 -40
 5591 0ce8 11       		.uleb128 0x11
 5592 0ce9 BD030000 		.4byte	.LASF39
 5593 0ced 01       		.byte	0x1
 5594 0cee 0A06     		.2byte	0x60a
 5595 0cf0 2C000000 		.4byte	0x2c
 5596 0cf4 02       		.uleb128 0x2
 5597 0cf5 91       		.byte	0x91
 5598 0cf6 74       		.sleb128 -12
 5599 0cf7 11       		.uleb128 0x11
 5600 0cf8 61030000 		.4byte	.LASF66
 5601 0cfc 01       		.byte	0x1
 5602 0cfd 0B06     		.2byte	0x60b
 5603 0cff 37020000 		.4byte	0x237
 5604 0d03 02       		.uleb128 0x2
 5605 0d04 91       		.byte	0x91
 5606 0d05 68       		.sleb128 -24
 5607 0d06 18       		.uleb128 0x18
 5608 0d07 0E000000 		.4byte	.LBB15
 5609 0d0b 12000000 		.4byte	.LBE15-.LBB15
 5610 0d0f 230D0000 		.4byte	0xd23
 5611 0d13 11       		.uleb128 0x11
 5612 0d14 9A060000 		.4byte	.LASF44
 5613 0d18 01       		.byte	0x1
 5614 0d19 0D06     		.2byte	0x60d
 5615 0d1b 37020000 		.4byte	0x237
 5616 0d1f 02       		.uleb128 0x2
 5617 0d20 91       		.byte	0x91
 5618 0d21 70       		.sleb128 -16
 5619 0d22 00       		.byte	0
 5620 0d23 16       		.uleb128 0x16
 5621 0d24 20000000 		.4byte	.LBB16
 5622 0d28 D0000000 		.4byte	.LBE16-.LBB16
 5623 0d2c 11       		.uleb128 0x11
 5624 0d2d 3A050000 		.4byte	.LASF48
 5625 0d31 01       		.byte	0x1
 5626 0d32 0E06     		.2byte	0x60e
 5627 0d34 25000000 		.4byte	0x25
 5628 0d38 02       		.uleb128 0x2
 5629 0d39 91       		.byte	0x91
 5630 0d3a 6C       		.sleb128 -20
 5631 0d3b 00       		.byte	0
 5632 0d3c 00       		.byte	0
 5633 0d3d 15       		.uleb128 0x15
 5634 0d3e EA040000 		.4byte	.LASF67
 5635 0d42 01       		.byte	0x1
 5636 0d43 3906     		.2byte	0x639
 5637 0d45 2C000000 		.4byte	0x2c
 5638 0d49 00000000 		.4byte	.LFB24
 5639 0d4d 04010000 		.4byte	.LFE24-.LFB24
 5640 0d51 01       		.uleb128 0x1
 5641 0d52 9C       		.byte	0x9c
 5642 0d53 E80D0000 		.4byte	0xde8
 5643 0d57 13       		.uleb128 0x13
 5644 0d58 DC030000 		.4byte	.LASF12
 5645 0d5c 01       		.byte	0x1
 5646 0d5d 3906     		.2byte	0x639
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 137


 5647 0d5f 8E000000 		.4byte	0x8e
 5648 0d63 02       		.uleb128 0x2
 5649 0d64 91       		.byte	0x91
 5650 0d65 64       		.sleb128 -28
 5651 0d66 13       		.uleb128 0x13
 5652 0d67 59030000 		.4byte	.LASF13
 5653 0d6b 01       		.byte	0x1
 5654 0d6c 3906     		.2byte	0x639
 5655 0d6e 79000000 		.4byte	0x79
 5656 0d72 02       		.uleb128 0x2
 5657 0d73 91       		.byte	0x91
 5658 0d74 60       		.sleb128 -32
 5659 0d75 13       		.uleb128 0x13
 5660 0d76 56040000 		.4byte	.LASF40
 5661 0d7a 01       		.byte	0x1
 5662 0d7b 3906     		.2byte	0x639
 5663 0d7d 25000000 		.4byte	0x25
 5664 0d81 02       		.uleb128 0x2
 5665 0d82 91       		.byte	0x91
 5666 0d83 5C       		.sleb128 -36
 5667 0d84 13       		.uleb128 0x13
 5668 0d85 EC050000 		.4byte	.LASF17
 5669 0d89 01       		.byte	0x1
 5670 0d8a 3906     		.2byte	0x639
 5671 0d8c 25000000 		.4byte	0x25
 5672 0d90 02       		.uleb128 0x2
 5673 0d91 91       		.byte	0x91
 5674 0d92 58       		.sleb128 -40
 5675 0d93 11       		.uleb128 0x11
 5676 0d94 BD030000 		.4byte	.LASF39
 5677 0d98 01       		.byte	0x1
 5678 0d99 3A06     		.2byte	0x63a
 5679 0d9b 2C000000 		.4byte	0x2c
 5680 0d9f 02       		.uleb128 0x2
 5681 0da0 91       		.byte	0x91
 5682 0da1 74       		.sleb128 -12
 5683 0da2 11       		.uleb128 0x11
 5684 0da3 61030000 		.4byte	.LASF66
 5685 0da7 01       		.byte	0x1
 5686 0da8 3B06     		.2byte	0x63b
 5687 0daa 37020000 		.4byte	0x237
 5688 0dae 02       		.uleb128 0x2
 5689 0daf 91       		.byte	0x91
 5690 0db0 68       		.sleb128 -24
 5691 0db1 18       		.uleb128 0x18
 5692 0db2 0E000000 		.4byte	.LBB17
 5693 0db6 12000000 		.4byte	.LBE17-.LBB17
 5694 0dba CE0D0000 		.4byte	0xdce
 5695 0dbe 11       		.uleb128 0x11
 5696 0dbf 9A060000 		.4byte	.LASF44
 5697 0dc3 01       		.byte	0x1
 5698 0dc4 3D06     		.2byte	0x63d
 5699 0dc6 37020000 		.4byte	0x237
 5700 0dca 02       		.uleb128 0x2
 5701 0dcb 91       		.byte	0x91
 5702 0dcc 70       		.sleb128 -16
 5703 0dcd 00       		.byte	0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 138


 5704 0dce 16       		.uleb128 0x16
 5705 0dcf 20000000 		.4byte	.LBB18
 5706 0dd3 D4000000 		.4byte	.LBE18-.LBB18
 5707 0dd7 11       		.uleb128 0x11
 5708 0dd8 3A050000 		.4byte	.LASF48
 5709 0ddc 01       		.byte	0x1
 5710 0ddd 3E06     		.2byte	0x63e
 5711 0ddf 25000000 		.4byte	0x25
 5712 0de3 02       		.uleb128 0x2
 5713 0de4 91       		.byte	0x91
 5714 0de5 6C       		.sleb128 -20
 5715 0de6 00       		.byte	0
 5716 0de7 00       		.byte	0
 5717 0de8 15       		.uleb128 0x15
 5718 0de9 80040000 		.4byte	.LASF68
 5719 0ded 01       		.byte	0x1
 5720 0dee 6F06     		.2byte	0x66f
 5721 0df0 2C000000 		.4byte	0x2c
 5722 0df4 00000000 		.4byte	.LFB25
 5723 0df8 94000000 		.4byte	.LFE25-.LFB25
 5724 0dfc 01       		.uleb128 0x1
 5725 0dfd 9C       		.byte	0x9c
 5726 0dfe AF0E0000 		.4byte	0xeaf
 5727 0e02 13       		.uleb128 0x13
 5728 0e03 BD030000 		.4byte	.LASF39
 5729 0e07 01       		.byte	0x1
 5730 0e08 6F06     		.2byte	0x66f
 5731 0e0a 25000000 		.4byte	0x25
 5732 0e0e 02       		.uleb128 0x2
 5733 0e0f 91       		.byte	0x91
 5734 0e10 5C       		.sleb128 -36
 5735 0e11 13       		.uleb128 0x13
 5736 0e12 DC030000 		.4byte	.LASF12
 5737 0e16 01       		.byte	0x1
 5738 0e17 6F06     		.2byte	0x66f
 5739 0e19 8E000000 		.4byte	0x8e
 5740 0e1d 02       		.uleb128 0x2
 5741 0e1e 91       		.byte	0x91
 5742 0e1f 58       		.sleb128 -40
 5743 0e20 13       		.uleb128 0x13
 5744 0e21 59030000 		.4byte	.LASF13
 5745 0e25 01       		.byte	0x1
 5746 0e26 6F06     		.2byte	0x66f
 5747 0e28 79000000 		.4byte	0x79
 5748 0e2c 02       		.uleb128 0x2
 5749 0e2d 91       		.byte	0x91
 5750 0e2e 54       		.sleb128 -44
 5751 0e2f 13       		.uleb128 0x13
 5752 0e30 56040000 		.4byte	.LASF40
 5753 0e34 01       		.byte	0x1
 5754 0e35 6F06     		.2byte	0x66f
 5755 0e37 25000000 		.4byte	0x25
 5756 0e3b 02       		.uleb128 0x2
 5757 0e3c 91       		.byte	0x91
 5758 0e3d 50       		.sleb128 -48
 5759 0e3e 13       		.uleb128 0x13
 5760 0e3f EC050000 		.4byte	.LASF17
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 139


 5761 0e43 01       		.byte	0x1
 5762 0e44 6F06     		.2byte	0x66f
 5763 0e46 25000000 		.4byte	0x25
 5764 0e4a 02       		.uleb128 0x2
 5765 0e4b 91       		.byte	0x91
 5766 0e4c 00       		.sleb128 0
 5767 0e4d 10       		.uleb128 0x10
 5768 0e4e 7200     		.ascii	"r\000"
 5769 0e50 01       		.byte	0x1
 5770 0e51 7006     		.2byte	0x670
 5771 0e53 2C000000 		.4byte	0x2c
 5772 0e57 02       		.uleb128 0x2
 5773 0e58 91       		.byte	0x91
 5774 0e59 74       		.sleb128 -12
 5775 0e5a 11       		.uleb128 0x11
 5776 0e5b 61030000 		.4byte	.LASF66
 5777 0e5f 01       		.byte	0x1
 5778 0e60 7106     		.2byte	0x671
 5779 0e62 37020000 		.4byte	0x237
 5780 0e66 02       		.uleb128 0x2
 5781 0e67 91       		.byte	0x91
 5782 0e68 6C       		.sleb128 -20
 5783 0e69 10       		.uleb128 0x10
 5784 0e6a 70557000 		.ascii	"pUp\000"
 5785 0e6e 01       		.byte	0x1
 5786 0e6f 7206     		.2byte	0x672
 5787 0e71 AF0E0000 		.4byte	0xeaf
 5788 0e75 02       		.uleb128 0x2
 5789 0e76 91       		.byte	0x91
 5790 0e77 64       		.sleb128 -28
 5791 0e78 18       		.uleb128 0x18
 5792 0e79 0E000000 		.4byte	.LBB19
 5793 0e7d 12000000 		.4byte	.LBE19-.LBB19
 5794 0e81 950E0000 		.4byte	0xe95
 5795 0e85 11       		.uleb128 0x11
 5796 0e86 9A060000 		.4byte	.LASF44
 5797 0e8a 01       		.byte	0x1
 5798 0e8b 7406     		.2byte	0x674
 5799 0e8d 37020000 		.4byte	0x237
 5800 0e91 02       		.uleb128 0x2
 5801 0e92 91       		.byte	0x91
 5802 0e93 70       		.sleb128 -16
 5803 0e94 00       		.byte	0
 5804 0e95 16       		.uleb128 0x16
 5805 0e96 2A000000 		.4byte	.LBB20
 5806 0e9a 50000000 		.4byte	.LBE20-.LBB20
 5807 0e9e 11       		.uleb128 0x11
 5808 0e9f 3A050000 		.4byte	.LASF48
 5809 0ea3 01       		.byte	0x1
 5810 0ea4 7706     		.2byte	0x677
 5811 0ea6 25000000 		.4byte	0x25
 5812 0eaa 02       		.uleb128 0x2
 5813 0eab 91       		.byte	0x91
 5814 0eac 68       		.sleb128 -24
 5815 0ead 00       		.byte	0
 5816 0eae 00       		.byte	0
 5817 0eaf 05       		.uleb128 0x5
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 140


 5818 0eb0 04       		.byte	0x4
 5819 0eb1 B50E0000 		.4byte	0xeb5
 5820 0eb5 0A       		.uleb128 0xa
 5821 0eb6 FD000000 		.4byte	0xfd
 5822 0eba 15       		.uleb128 0x15
 5823 0ebb 27000000 		.4byte	.LASF69
 5824 0ebf 01       		.byte	0x1
 5825 0ec0 A206     		.2byte	0x6a2
 5826 0ec2 2C000000 		.4byte	0x2c
 5827 0ec6 00000000 		.4byte	.LFB26
 5828 0eca 94000000 		.4byte	.LFE26-.LFB26
 5829 0ece 01       		.uleb128 0x1
 5830 0ecf 9C       		.byte	0x9c
 5831 0ed0 810F0000 		.4byte	0xf81
 5832 0ed4 13       		.uleb128 0x13
 5833 0ed5 BD030000 		.4byte	.LASF39
 5834 0ed9 01       		.byte	0x1
 5835 0eda A206     		.2byte	0x6a2
 5836 0edc 25000000 		.4byte	0x25
 5837 0ee0 02       		.uleb128 0x2
 5838 0ee1 91       		.byte	0x91
 5839 0ee2 5C       		.sleb128 -36
 5840 0ee3 13       		.uleb128 0x13
 5841 0ee4 DC030000 		.4byte	.LASF12
 5842 0ee8 01       		.byte	0x1
 5843 0ee9 A206     		.2byte	0x6a2
 5844 0eeb 8E000000 		.4byte	0x8e
 5845 0eef 02       		.uleb128 0x2
 5846 0ef0 91       		.byte	0x91
 5847 0ef1 58       		.sleb128 -40
 5848 0ef2 13       		.uleb128 0x13
 5849 0ef3 59030000 		.4byte	.LASF13
 5850 0ef7 01       		.byte	0x1
 5851 0ef8 A206     		.2byte	0x6a2
 5852 0efa 79000000 		.4byte	0x79
 5853 0efe 02       		.uleb128 0x2
 5854 0eff 91       		.byte	0x91
 5855 0f00 54       		.sleb128 -44
 5856 0f01 13       		.uleb128 0x13
 5857 0f02 56040000 		.4byte	.LASF40
 5858 0f06 01       		.byte	0x1
 5859 0f07 A206     		.2byte	0x6a2
 5860 0f09 25000000 		.4byte	0x25
 5861 0f0d 02       		.uleb128 0x2
 5862 0f0e 91       		.byte	0x91
 5863 0f0f 50       		.sleb128 -48
 5864 0f10 13       		.uleb128 0x13
 5865 0f11 EC050000 		.4byte	.LASF17
 5866 0f15 01       		.byte	0x1
 5867 0f16 A206     		.2byte	0x6a2
 5868 0f18 25000000 		.4byte	0x25
 5869 0f1c 02       		.uleb128 0x2
 5870 0f1d 91       		.byte	0x91
 5871 0f1e 00       		.sleb128 0
 5872 0f1f 10       		.uleb128 0x10
 5873 0f20 7200     		.ascii	"r\000"
 5874 0f22 01       		.byte	0x1
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 141


 5875 0f23 A306     		.2byte	0x6a3
 5876 0f25 2C000000 		.4byte	0x2c
 5877 0f29 02       		.uleb128 0x2
 5878 0f2a 91       		.byte	0x91
 5879 0f2b 74       		.sleb128 -12
 5880 0f2c 11       		.uleb128 0x11
 5881 0f2d 61030000 		.4byte	.LASF66
 5882 0f31 01       		.byte	0x1
 5883 0f32 A406     		.2byte	0x6a4
 5884 0f34 37020000 		.4byte	0x237
 5885 0f38 02       		.uleb128 0x2
 5886 0f39 91       		.byte	0x91
 5887 0f3a 6C       		.sleb128 -20
 5888 0f3b 11       		.uleb128 0x11
 5889 0f3c AB010000 		.4byte	.LASF70
 5890 0f40 01       		.byte	0x1
 5891 0f41 A506     		.2byte	0x6a5
 5892 0f43 810F0000 		.4byte	0xf81
 5893 0f47 02       		.uleb128 0x2
 5894 0f48 91       		.byte	0x91
 5895 0f49 64       		.sleb128 -28
 5896 0f4a 18       		.uleb128 0x18
 5897 0f4b 0E000000 		.4byte	.LBB21
 5898 0f4f 12000000 		.4byte	.LBE21-.LBB21
 5899 0f53 670F0000 		.4byte	0xf67
 5900 0f57 11       		.uleb128 0x11
 5901 0f58 9A060000 		.4byte	.LASF44
 5902 0f5c 01       		.byte	0x1
 5903 0f5d A706     		.2byte	0x6a7
 5904 0f5f 37020000 		.4byte	0x237
 5905 0f63 02       		.uleb128 0x2
 5906 0f64 91       		.byte	0x91
 5907 0f65 70       		.sleb128 -16
 5908 0f66 00       		.byte	0
 5909 0f67 16       		.uleb128 0x16
 5910 0f68 2A000000 		.4byte	.LBB22
 5911 0f6c 50000000 		.4byte	.LBE22-.LBB22
 5912 0f70 11       		.uleb128 0x11
 5913 0f71 3A050000 		.4byte	.LASF48
 5914 0f75 01       		.byte	0x1
 5915 0f76 AA06     		.2byte	0x6aa
 5916 0f78 25000000 		.4byte	0x25
 5917 0f7c 02       		.uleb128 0x2
 5918 0f7d 91       		.byte	0x91
 5919 0f7e 68       		.sleb128 -24
 5920 0f7f 00       		.byte	0
 5921 0f80 00       		.byte	0
 5922 0f81 05       		.uleb128 0x5
 5923 0f82 04       		.byte	0x4
 5924 0f83 870F0000 		.4byte	0xf87
 5925 0f87 0A       		.uleb128 0xa
 5926 0f88 61010000 		.4byte	0x161
 5927 0f8c 15       		.uleb128 0x15
 5928 0f8d D1050000 		.4byte	.LASF71
 5929 0f91 01       		.byte	0x1
 5930 0f92 CD06     		.2byte	0x6cd
 5931 0f94 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 142


 5932 0f98 00000000 		.4byte	.LFB27
 5933 0f9c 6C000000 		.4byte	.LFE27-.LFB27
 5934 0fa0 01       		.uleb128 0x1
 5935 0fa1 9C       		.byte	0x9c
 5936 0fa2 26100000 		.4byte	0x1026
 5937 0fa6 13       		.uleb128 0x13
 5938 0fa7 BD030000 		.4byte	.LASF39
 5939 0fab 01       		.byte	0x1
 5940 0fac CD06     		.2byte	0x6cd
 5941 0fae 25000000 		.4byte	0x25
 5942 0fb2 02       		.uleb128 0x2
 5943 0fb3 91       		.byte	0x91
 5944 0fb4 5C       		.sleb128 -36
 5945 0fb5 13       		.uleb128 0x13
 5946 0fb6 DC030000 		.4byte	.LASF12
 5947 0fba 01       		.byte	0x1
 5948 0fbb CD06     		.2byte	0x6cd
 5949 0fbd 8E000000 		.4byte	0x8e
 5950 0fc1 02       		.uleb128 0x2
 5951 0fc2 91       		.byte	0x91
 5952 0fc3 58       		.sleb128 -40
 5953 0fc4 10       		.uleb128 0x10
 5954 0fc5 7200     		.ascii	"r\000"
 5955 0fc7 01       		.byte	0x1
 5956 0fc8 CE06     		.2byte	0x6ce
 5957 0fca 2C000000 		.4byte	0x2c
 5958 0fce 02       		.uleb128 0x2
 5959 0fcf 91       		.byte	0x91
 5960 0fd0 74       		.sleb128 -12
 5961 0fd1 11       		.uleb128 0x11
 5962 0fd2 61030000 		.4byte	.LASF66
 5963 0fd6 01       		.byte	0x1
 5964 0fd7 CF06     		.2byte	0x6cf
 5965 0fd9 37020000 		.4byte	0x237
 5966 0fdd 02       		.uleb128 0x2
 5967 0fde 91       		.byte	0x91
 5968 0fdf 6C       		.sleb128 -20
 5969 0fe0 10       		.uleb128 0x10
 5970 0fe1 70557000 		.ascii	"pUp\000"
 5971 0fe5 01       		.byte	0x1
 5972 0fe6 D006     		.2byte	0x6d0
 5973 0fe8 AF0E0000 		.4byte	0xeaf
 5974 0fec 02       		.uleb128 0x2
 5975 0fed 91       		.byte	0x91
 5976 0fee 64       		.sleb128 -28
 5977 0fef 18       		.uleb128 0x18
 5978 0ff0 0A000000 		.4byte	.LBB23
 5979 0ff4 12000000 		.4byte	.LBE23-.LBB23
 5980 0ff8 0C100000 		.4byte	0x100c
 5981 0ffc 11       		.uleb128 0x11
 5982 0ffd 9A060000 		.4byte	.LASF44
 5983 1001 01       		.byte	0x1
 5984 1002 D206     		.2byte	0x6d2
 5985 1004 37020000 		.4byte	0x237
 5986 1008 02       		.uleb128 0x2
 5987 1009 91       		.byte	0x91
 5988 100a 70       		.sleb128 -16
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 143


 5989 100b 00       		.byte	0
 5990 100c 16       		.uleb128 0x16
 5991 100d 26000000 		.4byte	.LBB24
 5992 1011 2C000000 		.4byte	.LBE24-.LBB24
 5993 1015 11       		.uleb128 0x11
 5994 1016 3A050000 		.4byte	.LASF48
 5995 101a 01       		.byte	0x1
 5996 101b D506     		.2byte	0x6d5
 5997 101d 25000000 		.4byte	0x25
 5998 1021 02       		.uleb128 0x2
 5999 1022 91       		.byte	0x91
 6000 1023 68       		.sleb128 -24
 6001 1024 00       		.byte	0
 6002 1025 00       		.byte	0
 6003 1026 15       		.uleb128 0x15
 6004 1027 C2040000 		.4byte	.LASF72
 6005 102b 01       		.byte	0x1
 6006 102c F006     		.2byte	0x6f0
 6007 102e 2C000000 		.4byte	0x2c
 6008 1032 00000000 		.4byte	.LFB28
 6009 1036 6C000000 		.4byte	.LFE28-.LFB28
 6010 103a 01       		.uleb128 0x1
 6011 103b 9C       		.byte	0x9c
 6012 103c C0100000 		.4byte	0x10c0
 6013 1040 13       		.uleb128 0x13
 6014 1041 BD030000 		.4byte	.LASF39
 6015 1045 01       		.byte	0x1
 6016 1046 F006     		.2byte	0x6f0
 6017 1048 25000000 		.4byte	0x25
 6018 104c 02       		.uleb128 0x2
 6019 104d 91       		.byte	0x91
 6020 104e 5C       		.sleb128 -36
 6021 104f 13       		.uleb128 0x13
 6022 1050 DC030000 		.4byte	.LASF12
 6023 1054 01       		.byte	0x1
 6024 1055 F006     		.2byte	0x6f0
 6025 1057 8E000000 		.4byte	0x8e
 6026 105b 02       		.uleb128 0x2
 6027 105c 91       		.byte	0x91
 6028 105d 58       		.sleb128 -40
 6029 105e 10       		.uleb128 0x10
 6030 105f 7200     		.ascii	"r\000"
 6031 1061 01       		.byte	0x1
 6032 1062 F106     		.2byte	0x6f1
 6033 1064 2C000000 		.4byte	0x2c
 6034 1068 02       		.uleb128 0x2
 6035 1069 91       		.byte	0x91
 6036 106a 74       		.sleb128 -12
 6037 106b 11       		.uleb128 0x11
 6038 106c 61030000 		.4byte	.LASF66
 6039 1070 01       		.byte	0x1
 6040 1071 F206     		.2byte	0x6f2
 6041 1073 37020000 		.4byte	0x237
 6042 1077 02       		.uleb128 0x2
 6043 1078 91       		.byte	0x91
 6044 1079 6C       		.sleb128 -20
 6045 107a 11       		.uleb128 0x11
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 144


 6046 107b AB010000 		.4byte	.LASF70
 6047 107f 01       		.byte	0x1
 6048 1080 F306     		.2byte	0x6f3
 6049 1082 810F0000 		.4byte	0xf81
 6050 1086 02       		.uleb128 0x2
 6051 1087 91       		.byte	0x91
 6052 1088 64       		.sleb128 -28
 6053 1089 18       		.uleb128 0x18
 6054 108a 0A000000 		.4byte	.LBB25
 6055 108e 12000000 		.4byte	.LBE25-.LBB25
 6056 1092 A6100000 		.4byte	0x10a6
 6057 1096 11       		.uleb128 0x11
 6058 1097 9A060000 		.4byte	.LASF44
 6059 109b 01       		.byte	0x1
 6060 109c F506     		.2byte	0x6f5
 6061 109e 37020000 		.4byte	0x237
 6062 10a2 02       		.uleb128 0x2
 6063 10a3 91       		.byte	0x91
 6064 10a4 70       		.sleb128 -16
 6065 10a5 00       		.byte	0
 6066 10a6 16       		.uleb128 0x16
 6067 10a7 26000000 		.4byte	.LBB26
 6068 10ab 2C000000 		.4byte	.LBE26-.LBB26
 6069 10af 11       		.uleb128 0x11
 6070 10b0 3A050000 		.4byte	.LASF48
 6071 10b4 01       		.byte	0x1
 6072 10b5 F806     		.2byte	0x6f8
 6073 10b7 25000000 		.4byte	0x25
 6074 10bb 02       		.uleb128 0x2
 6075 10bc 91       		.byte	0x91
 6076 10bd 68       		.sleb128 -24
 6077 10be 00       		.byte	0
 6078 10bf 00       		.byte	0
 6079 10c0 15       		.uleb128 0x15
 6080 10c1 F2030000 		.4byte	.LASF73
 6081 10c5 01       		.byte	0x1
 6082 10c6 1307     		.2byte	0x713
 6083 10c8 2C000000 		.4byte	0x2c
 6084 10cc 00000000 		.4byte	.LFB29
 6085 10d0 6C000000 		.4byte	.LFE29-.LFB29
 6086 10d4 01       		.uleb128 0x1
 6087 10d5 9C       		.byte	0x9c
 6088 10d6 5A110000 		.4byte	0x115a
 6089 10da 13       		.uleb128 0x13
 6090 10db BD030000 		.4byte	.LASF39
 6091 10df 01       		.byte	0x1
 6092 10e0 1307     		.2byte	0x713
 6093 10e2 25000000 		.4byte	0x25
 6094 10e6 02       		.uleb128 0x2
 6095 10e7 91       		.byte	0x91
 6096 10e8 5C       		.sleb128 -36
 6097 10e9 13       		.uleb128 0x13
 6098 10ea EC050000 		.4byte	.LASF17
 6099 10ee 01       		.byte	0x1
 6100 10ef 1307     		.2byte	0x713
 6101 10f1 25000000 		.4byte	0x25
 6102 10f5 02       		.uleb128 0x2
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 145


 6103 10f6 91       		.byte	0x91
 6104 10f7 58       		.sleb128 -40
 6105 10f8 10       		.uleb128 0x10
 6106 10f9 7200     		.ascii	"r\000"
 6107 10fb 01       		.byte	0x1
 6108 10fc 1407     		.2byte	0x714
 6109 10fe 2C000000 		.4byte	0x2c
 6110 1102 02       		.uleb128 0x2
 6111 1103 91       		.byte	0x91
 6112 1104 74       		.sleb128 -12
 6113 1105 11       		.uleb128 0x11
 6114 1106 61030000 		.4byte	.LASF66
 6115 110a 01       		.byte	0x1
 6116 110b 1507     		.2byte	0x715
 6117 110d 37020000 		.4byte	0x237
 6118 1111 02       		.uleb128 0x2
 6119 1112 91       		.byte	0x91
 6120 1113 6C       		.sleb128 -20
 6121 1114 10       		.uleb128 0x10
 6122 1115 70557000 		.ascii	"pUp\000"
 6123 1119 01       		.byte	0x1
 6124 111a 1607     		.2byte	0x716
 6125 111c AF0E0000 		.4byte	0xeaf
 6126 1120 02       		.uleb128 0x2
 6127 1121 91       		.byte	0x91
 6128 1122 64       		.sleb128 -28
 6129 1123 18       		.uleb128 0x18
 6130 1124 0A000000 		.4byte	.LBB27
 6131 1128 12000000 		.4byte	.LBE27-.LBB27
 6132 112c 40110000 		.4byte	0x1140
 6133 1130 11       		.uleb128 0x11
 6134 1131 9A060000 		.4byte	.LASF44
 6135 1135 01       		.byte	0x1
 6136 1136 1807     		.2byte	0x718
 6137 1138 37020000 		.4byte	0x237
 6138 113c 02       		.uleb128 0x2
 6139 113d 91       		.byte	0x91
 6140 113e 70       		.sleb128 -16
 6141 113f 00       		.byte	0
 6142 1140 16       		.uleb128 0x16
 6143 1141 26000000 		.4byte	.LBB28
 6144 1145 2C000000 		.4byte	.LBE28-.LBB28
 6145 1149 11       		.uleb128 0x11
 6146 114a 3A050000 		.4byte	.LASF48
 6147 114e 01       		.byte	0x1
 6148 114f 1B07     		.2byte	0x71b
 6149 1151 25000000 		.4byte	0x25
 6150 1155 02       		.uleb128 0x2
 6151 1156 91       		.byte	0x91
 6152 1157 68       		.sleb128 -24
 6153 1158 00       		.byte	0
 6154 1159 00       		.byte	0
 6155 115a 15       		.uleb128 0x15
 6156 115b 51050000 		.4byte	.LASF74
 6157 115f 01       		.byte	0x1
 6158 1160 3607     		.2byte	0x736
 6159 1162 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 146


 6160 1166 00000000 		.4byte	.LFB30
 6161 116a 6C000000 		.4byte	.LFE30-.LFB30
 6162 116e 01       		.uleb128 0x1
 6163 116f 9C       		.byte	0x9c
 6164 1170 F4110000 		.4byte	0x11f4
 6165 1174 13       		.uleb128 0x13
 6166 1175 BD030000 		.4byte	.LASF39
 6167 1179 01       		.byte	0x1
 6168 117a 3607     		.2byte	0x736
 6169 117c 25000000 		.4byte	0x25
 6170 1180 02       		.uleb128 0x2
 6171 1181 91       		.byte	0x91
 6172 1182 5C       		.sleb128 -36
 6173 1183 13       		.uleb128 0x13
 6174 1184 EC050000 		.4byte	.LASF17
 6175 1188 01       		.byte	0x1
 6176 1189 3607     		.2byte	0x736
 6177 118b 25000000 		.4byte	0x25
 6178 118f 02       		.uleb128 0x2
 6179 1190 91       		.byte	0x91
 6180 1191 58       		.sleb128 -40
 6181 1192 10       		.uleb128 0x10
 6182 1193 7200     		.ascii	"r\000"
 6183 1195 01       		.byte	0x1
 6184 1196 3707     		.2byte	0x737
 6185 1198 2C000000 		.4byte	0x2c
 6186 119c 02       		.uleb128 0x2
 6187 119d 91       		.byte	0x91
 6188 119e 74       		.sleb128 -12
 6189 119f 11       		.uleb128 0x11
 6190 11a0 61030000 		.4byte	.LASF66
 6191 11a4 01       		.byte	0x1
 6192 11a5 3807     		.2byte	0x738
 6193 11a7 37020000 		.4byte	0x237
 6194 11ab 02       		.uleb128 0x2
 6195 11ac 91       		.byte	0x91
 6196 11ad 6C       		.sleb128 -20
 6197 11ae 11       		.uleb128 0x11
 6198 11af AB010000 		.4byte	.LASF70
 6199 11b3 01       		.byte	0x1
 6200 11b4 3907     		.2byte	0x739
 6201 11b6 810F0000 		.4byte	0xf81
 6202 11ba 02       		.uleb128 0x2
 6203 11bb 91       		.byte	0x91
 6204 11bc 64       		.sleb128 -28
 6205 11bd 18       		.uleb128 0x18
 6206 11be 0A000000 		.4byte	.LBB29
 6207 11c2 12000000 		.4byte	.LBE29-.LBB29
 6208 11c6 DA110000 		.4byte	0x11da
 6209 11ca 11       		.uleb128 0x11
 6210 11cb 9A060000 		.4byte	.LASF44
 6211 11cf 01       		.byte	0x1
 6212 11d0 3B07     		.2byte	0x73b
 6213 11d2 37020000 		.4byte	0x237
 6214 11d6 02       		.uleb128 0x2
 6215 11d7 91       		.byte	0x91
 6216 11d8 70       		.sleb128 -16
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 147


 6217 11d9 00       		.byte	0
 6218 11da 16       		.uleb128 0x16
 6219 11db 26000000 		.4byte	.LBB30
 6220 11df 2C000000 		.4byte	.LBE30-.LBB30
 6221 11e3 11       		.uleb128 0x11
 6222 11e4 3A050000 		.4byte	.LASF48
 6223 11e8 01       		.byte	0x1
 6224 11e9 3E07     		.2byte	0x73e
 6225 11eb 25000000 		.4byte	0x25
 6226 11ef 02       		.uleb128 0x2
 6227 11f0 91       		.byte	0x91
 6228 11f1 68       		.sleb128 -24
 6229 11f2 00       		.byte	0
 6230 11f3 00       		.byte	0
 6231 11f4 1B       		.uleb128 0x1b
 6232 11f5 CD010000 		.4byte	.LASF88
 6233 11f9 01       		.byte	0x1
 6234 11fa 5207     		.2byte	0x752
 6235 11fc 00000000 		.4byte	.LFB31
 6236 1200 0C000000 		.4byte	.LFE31-.LFB31
 6237 1204 01       		.uleb128 0x1
 6238 1205 9C       		.byte	0x9c
 6239 1206 15       		.uleb128 0x15
 6240 1207 A6030000 		.4byte	.LASF75
 6241 120b 01       		.byte	0x1
 6242 120c 6707     		.2byte	0x767
 6243 120e 2C000000 		.4byte	0x2c
 6244 1212 00000000 		.4byte	.LFB32
 6245 1216 B8000000 		.4byte	.LFE32-.LFB32
 6246 121a 01       		.uleb128 0x1
 6247 121b 9C       		.byte	0x9c
 6248 121c 9F120000 		.4byte	0x129f
 6249 1220 13       		.uleb128 0x13
 6250 1221 BE060000 		.4byte	.LASF36
 6251 1225 01       		.byte	0x1
 6252 1226 6707     		.2byte	0x767
 6253 1228 48000000 		.4byte	0x48
 6254 122c 02       		.uleb128 0x2
 6255 122d 91       		.byte	0x91
 6256 122e 5F       		.sleb128 -33
 6257 122f 10       		.uleb128 0x10
 6258 1230 616300   		.ascii	"ac\000"
 6259 1233 01       		.byte	0x1
 6260 1234 6807     		.2byte	0x768
 6261 1236 BE030000 		.4byte	0x3be
 6262 123a 02       		.uleb128 0x2
 6263 123b 91       		.byte	0x91
 6264 123c 60       		.sleb128 -32
 6265 123d 11       		.uleb128 0x11
 6266 123e 34040000 		.4byte	.LASF26
 6267 1242 01       		.byte	0x1
 6268 1243 6907     		.2byte	0x769
 6269 1245 EA020000 		.4byte	0x2ea
 6270 1249 02       		.uleb128 0x2
 6271 124a 91       		.byte	0x91
 6272 124b 6C       		.sleb128 -20
 6273 124c 11       		.uleb128 0x11
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 148


 6274 124d DF040000 		.4byte	.LASF50
 6275 1251 01       		.byte	0x1
 6276 1252 6A07     		.2byte	0x76a
 6277 1254 25000000 		.4byte	0x25
 6278 1258 02       		.uleb128 0x2
 6279 1259 91       		.byte	0x91
 6280 125a 64       		.sleb128 -28
 6281 125b 10       		.uleb128 0x10
 6282 125c 7200     		.ascii	"r\000"
 6283 125e 01       		.byte	0x1
 6284 125f 6B07     		.2byte	0x76b
 6285 1261 2C000000 		.4byte	0x2c
 6286 1265 02       		.uleb128 0x2
 6287 1266 91       		.byte	0x91
 6288 1267 74       		.sleb128 -12
 6289 1268 18       		.uleb128 0x18
 6290 1269 0A000000 		.4byte	.LBB31
 6291 126d 12000000 		.4byte	.LBE31-.LBB31
 6292 1271 85120000 		.4byte	0x1285
 6293 1275 11       		.uleb128 0x11
 6294 1276 9A060000 		.4byte	.LASF44
 6295 127a 01       		.byte	0x1
 6296 127b 6D07     		.2byte	0x76d
 6297 127d 37020000 		.4byte	0x237
 6298 1281 02       		.uleb128 0x2
 6299 1282 91       		.byte	0x91
 6300 1283 70       		.sleb128 -16
 6301 1284 00       		.byte	0
 6302 1285 16       		.uleb128 0x16
 6303 1286 36000000 		.4byte	.LBB32
 6304 128a 60000000 		.4byte	.LBE32-.LBB32
 6305 128e 11       		.uleb128 0x11
 6306 128f 3A050000 		.4byte	.LASF48
 6307 1293 01       		.byte	0x1
 6308 1294 7307     		.2byte	0x773
 6309 1296 25000000 		.4byte	0x25
 6310 129a 02       		.uleb128 0x2
 6311 129b 91       		.byte	0x91
 6312 129c 68       		.sleb128 -24
 6313 129d 00       		.byte	0
 6314 129e 00       		.byte	0
 6315 129f 15       		.uleb128 0x15
 6316 12a0 46060000 		.4byte	.LASF76
 6317 12a4 01       		.byte	0x1
 6318 12a5 9807     		.2byte	0x798
 6319 12a7 2C000000 		.4byte	0x2c
 6320 12ab 00000000 		.4byte	.LFB33
 6321 12af 24010000 		.4byte	.LFE33-.LFB33
 6322 12b3 01       		.uleb128 0x1
 6323 12b4 9C       		.byte	0x9c
 6324 12b5 48130000 		.4byte	0x1348
 6325 12b9 13       		.uleb128 0x13
 6326 12ba BE060000 		.4byte	.LASF36
 6327 12be 01       		.byte	0x1
 6328 12bf 9807     		.2byte	0x798
 6329 12c1 48000000 		.4byte	0x48
 6330 12c5 02       		.uleb128 0x2
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 149


 6331 12c6 91       		.byte	0x91
 6332 12c7 5F       		.sleb128 -33
 6333 12c8 19       		.uleb128 0x19
 6334 12c9 7300     		.ascii	"s\000"
 6335 12cb 01       		.byte	0x1
 6336 12cc 9807     		.2byte	0x798
 6337 12ce 8E000000 		.4byte	0x8e
 6338 12d2 02       		.uleb128 0x2
 6339 12d3 91       		.byte	0x91
 6340 12d4 58       		.sleb128 -40
 6341 12d5 11       		.uleb128 0x11
 6342 12d6 C9060000 		.4byte	.LASF52
 6343 12da 01       		.byte	0x1
 6344 12db 9907     		.2byte	0x799
 6345 12dd 2C000000 		.4byte	0x2c
 6346 12e1 02       		.uleb128 0x2
 6347 12e2 91       		.byte	0x91
 6348 12e3 74       		.sleb128 -12
 6349 12e4 11       		.uleb128 0x11
 6350 12e5 32050000 		.4byte	.LASF77
 6351 12e9 01       		.byte	0x1
 6352 12ea 9A07     		.2byte	0x79a
 6353 12ec 25000000 		.4byte	0x25
 6354 12f0 02       		.uleb128 0x2
 6355 12f1 91       		.byte	0x91
 6356 12f2 68       		.sleb128 -24
 6357 12f3 11       		.uleb128 0x11
 6358 12f4 DF040000 		.4byte	.LASF50
 6359 12f8 01       		.byte	0x1
 6360 12f9 9B07     		.2byte	0x79b
 6361 12fb 25000000 		.4byte	0x25
 6362 12ff 02       		.uleb128 0x2
 6363 1300 91       		.byte	0x91
 6364 1301 60       		.sleb128 -32
 6365 1302 11       		.uleb128 0x11
 6366 1303 34040000 		.4byte	.LASF26
 6367 1307 01       		.byte	0x1
 6368 1308 9C07     		.2byte	0x79c
 6369 130a EA020000 		.4byte	0x2ea
 6370 130e 02       		.uleb128 0x2
 6371 130f 91       		.byte	0x91
 6372 1310 6C       		.sleb128 -20
 6373 1311 18       		.uleb128 0x18
 6374 1312 0C000000 		.4byte	.LBB33
 6375 1316 12000000 		.4byte	.LBE33-.LBB33
 6376 131a 2E130000 		.4byte	0x132e
 6377 131e 11       		.uleb128 0x11
 6378 131f 9A060000 		.4byte	.LASF44
 6379 1323 01       		.byte	0x1
 6380 1324 9E07     		.2byte	0x79e
 6381 1326 37020000 		.4byte	0x237
 6382 132a 02       		.uleb128 0x2
 6383 132b 91       		.byte	0x91
 6384 132c 70       		.sleb128 -16
 6385 132d 00       		.byte	0
 6386 132e 16       		.uleb128 0x16
 6387 132f 30000000 		.4byte	.LBB34
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 150


 6388 1333 D6000000 		.4byte	.LBE34-.LBB34
 6389 1337 11       		.uleb128 0x11
 6390 1338 3A050000 		.4byte	.LASF48
 6391 133c 01       		.byte	0x1
 6392 133d AF07     		.2byte	0x7af
 6393 133f 25000000 		.4byte	0x25
 6394 1343 02       		.uleb128 0x2
 6395 1344 91       		.byte	0x91
 6396 1345 64       		.sleb128 -28
 6397 1346 00       		.byte	0
 6398 1347 00       		.byte	0
 6399 1348 15       		.uleb128 0x15
 6400 1349 4D010000 		.4byte	.LASF78
 6401 134d 01       		.byte	0x1
 6402 134e F007     		.2byte	0x7f0
 6403 1350 25000000 		.4byte	0x25
 6404 1354 00000000 		.4byte	.LFB34
 6405 1358 30000000 		.4byte	.LFE34-.LFB34
 6406 135c 01       		.uleb128 0x1
 6407 135d 9C       		.byte	0x9c
 6408 135e 81130000 		.4byte	0x1381
 6409 1362 13       		.uleb128 0x13
 6410 1363 BD030000 		.4byte	.LASF39
 6411 1367 01       		.byte	0x1
 6412 1368 F007     		.2byte	0x7f0
 6413 136a 25000000 		.4byte	0x25
 6414 136e 02       		.uleb128 0x2
 6415 136f 91       		.byte	0x91
 6416 1370 6C       		.sleb128 -20
 6417 1371 11       		.uleb128 0x11
 6418 1372 34040000 		.4byte	.LASF26
 6419 1376 01       		.byte	0x1
 6420 1377 F107     		.2byte	0x7f1
 6421 1379 EA020000 		.4byte	0x2ea
 6422 137d 02       		.uleb128 0x2
 6423 137e 91       		.byte	0x91
 6424 137f 74       		.sleb128 -12
 6425 1380 00       		.byte	0
 6426 1381 1A       		.uleb128 0x1a
 6427 1382 B1010000 		.4byte	.LASF79
 6428 1386 01       		.byte	0x1
 6429 1387 0508     		.2byte	0x805
 6430 1389 25000000 		.4byte	0x25
 6431 138d 00000000 		.4byte	.LFB35
 6432 1391 74000000 		.4byte	.LFE35-.LFB35
 6433 1395 01       		.uleb128 0x1
 6434 1396 9C       		.byte	0x9c
 6435 1397 E5130000 		.4byte	0x13e5
 6436 139b 13       		.uleb128 0x13
 6437 139c BD030000 		.4byte	.LASF39
 6438 13a0 01       		.byte	0x1
 6439 13a1 0508     		.2byte	0x805
 6440 13a3 25000000 		.4byte	0x25
 6441 13a7 02       		.uleb128 0x2
 6442 13a8 91       		.byte	0x91
 6443 13a9 64       		.sleb128 -28
 6444 13aa 11       		.uleb128 0x11
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 151


 6445 13ab 1B030000 		.4byte	.LASF16
 6446 13af 01       		.byte	0x1
 6447 13b0 0608     		.2byte	0x806
 6448 13b2 25000000 		.4byte	0x25
 6449 13b6 02       		.uleb128 0x2
 6450 13b7 91       		.byte	0x91
 6451 13b8 6C       		.sleb128 -20
 6452 13b9 11       		.uleb128 0x11
 6453 13ba A5060000 		.4byte	.LASF15
 6454 13be 01       		.byte	0x1
 6455 13bf 0708     		.2byte	0x807
 6456 13c1 25000000 		.4byte	0x25
 6457 13c5 02       		.uleb128 0x2
 6458 13c6 91       		.byte	0x91
 6459 13c7 68       		.sleb128 -24
 6460 13c8 10       		.uleb128 0x10
 6461 13c9 7200     		.ascii	"r\000"
 6462 13cb 01       		.byte	0x1
 6463 13cc 0808     		.2byte	0x808
 6464 13ce 25000000 		.4byte	0x25
 6465 13d2 02       		.uleb128 0x2
 6466 13d3 91       		.byte	0x91
 6467 13d4 74       		.sleb128 -12
 6468 13d5 11       		.uleb128 0x11
 6469 13d6 61030000 		.4byte	.LASF66
 6470 13da 01       		.byte	0x1
 6471 13db 0908     		.2byte	0x809
 6472 13dd 37020000 		.4byte	0x237
 6473 13e1 02       		.uleb128 0x2
 6474 13e2 91       		.byte	0x91
 6475 13e3 70       		.sleb128 -16
 6476 13e4 00       		.byte	0
 6477 13e5 0D       		.uleb128 0xd
 6478 13e6 48000000 		.4byte	0x48
 6479 13ea F5130000 		.4byte	0x13f5
 6480 13ee 0E       		.uleb128 0xe
 6481 13ef 72000000 		.4byte	0x72
 6482 13f3 0F       		.byte	0xf
 6483 13f4 00       		.byte	0
 6484 13f5 1C       		.uleb128 0x1c
 6485 13f6 8D060000 		.4byte	.LASF80
 6486 13fa 01       		.byte	0x1
 6487 13fb ED       		.byte	0xed
 6488 13fc E5130000 		.4byte	0x13e5
 6489 1400 05       		.uleb128 0x5
 6490 1401 03       		.byte	0x3
 6491 1402 00000000 		.4byte	_aTerminalId
 6492 1406 0D       		.uleb128 0xd
 6493 1407 81000000 		.4byte	0x81
 6494 140b 17140000 		.4byte	0x1417
 6495 140f 1D       		.uleb128 0x1d
 6496 1410 72000000 		.4byte	0x72
 6497 1414 FF03     		.2byte	0x3ff
 6498 1416 00       		.byte	0
 6499 1417 11       		.uleb128 0x11
 6500 1418 18020000 		.4byte	.LASF81
 6501 141c 01       		.byte	0x1
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 152


 6502 141d 0701     		.2byte	0x107
 6503 141f 06140000 		.4byte	0x1406
 6504 1423 05       		.uleb128 0x5
 6505 1424 03       		.byte	0x3
 6506 1425 00000000 		.4byte	_acUpBuffer
 6507 1429 11       		.uleb128 0x11
 6508 142a 72040000 		.4byte	.LASF82
 6509 142e 01       		.byte	0x1
 6510 142f 0801     		.2byte	0x108
 6511 1431 B8010000 		.4byte	0x1b8
 6512 1435 05       		.uleb128 0x5
 6513 1436 03       		.byte	0x3
 6514 1437 00040000 		.4byte	_acDownBuffer
 6515 143b 11       		.uleb128 0x11
 6516 143c 69060000 		.4byte	.LASF83
 6517 1440 01       		.byte	0x1
 6518 1441 0B01     		.2byte	0x10b
 6519 1443 48000000 		.4byte	0x48
 6520 1447 05       		.uleb128 0x5
 6521 1448 03       		.byte	0x3
 6522 1449 10040000 		.4byte	_ActiveTerminal
 6523 144d 1E       		.uleb128 0x1e
 6524 144e 2D020000 		.4byte	.LASF89
 6525 1452 01       		.byte	0x1
 6526 1453 0601     		.2byte	0x106
 6527 1455 E8010000 		.4byte	0x1e8
 6528 1459 05       		.uleb128 0x5
 6529 145a 03       		.byte	0x3
 6530 145b 00000000 		.4byte	_SEGGER_RTT
 6531 145f 00       		.byte	0
 6532              		.section	.debug_abbrev,"",%progbits
 6533              	.Ldebug_abbrev0:
 6534 0000 01       		.uleb128 0x1
 6535 0001 11       		.uleb128 0x11
 6536 0002 01       		.byte	0x1
 6537 0003 25       		.uleb128 0x25
 6538 0004 0E       		.uleb128 0xe
 6539 0005 13       		.uleb128 0x13
 6540 0006 0B       		.uleb128 0xb
 6541 0007 03       		.uleb128 0x3
 6542 0008 0E       		.uleb128 0xe
 6543 0009 1B       		.uleb128 0x1b
 6544 000a 0E       		.uleb128 0xe
 6545 000b 55       		.uleb128 0x55
 6546 000c 17       		.uleb128 0x17
 6547 000d 11       		.uleb128 0x11
 6548 000e 01       		.uleb128 0x1
 6549 000f 10       		.uleb128 0x10
 6550 0010 17       		.uleb128 0x17
 6551 0011 00       		.byte	0
 6552 0012 00       		.byte	0
 6553 0013 02       		.uleb128 0x2
 6554 0014 24       		.uleb128 0x24
 6555 0015 00       		.byte	0
 6556 0016 0B       		.uleb128 0xb
 6557 0017 0B       		.uleb128 0xb
 6558 0018 3E       		.uleb128 0x3e
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 153


 6559 0019 0B       		.uleb128 0xb
 6560 001a 03       		.uleb128 0x3
 6561 001b 0E       		.uleb128 0xe
 6562 001c 00       		.byte	0
 6563 001d 00       		.byte	0
 6564 001e 03       		.uleb128 0x3
 6565 001f 24       		.uleb128 0x24
 6566 0020 00       		.byte	0
 6567 0021 0B       		.uleb128 0xb
 6568 0022 0B       		.uleb128 0xb
 6569 0023 3E       		.uleb128 0x3e
 6570 0024 0B       		.uleb128 0xb
 6571 0025 03       		.uleb128 0x3
 6572 0026 08       		.uleb128 0x8
 6573 0027 00       		.byte	0
 6574 0028 00       		.byte	0
 6575 0029 04       		.uleb128 0x4
 6576 002a 0F       		.uleb128 0xf
 6577 002b 00       		.byte	0
 6578 002c 0B       		.uleb128 0xb
 6579 002d 0B       		.uleb128 0xb
 6580 002e 00       		.byte	0
 6581 002f 00       		.byte	0
 6582 0030 05       		.uleb128 0x5
 6583 0031 0F       		.uleb128 0xf
 6584 0032 00       		.byte	0
 6585 0033 0B       		.uleb128 0xb
 6586 0034 0B       		.uleb128 0xb
 6587 0035 49       		.uleb128 0x49
 6588 0036 13       		.uleb128 0x13
 6589 0037 00       		.byte	0
 6590 0038 00       		.byte	0
 6591 0039 06       		.uleb128 0x6
 6592 003a 26       		.uleb128 0x26
 6593 003b 00       		.byte	0
 6594 003c 49       		.uleb128 0x49
 6595 003d 13       		.uleb128 0x13
 6596 003e 00       		.byte	0
 6597 003f 00       		.byte	0
 6598 0040 07       		.uleb128 0x7
 6599 0041 26       		.uleb128 0x26
 6600 0042 00       		.byte	0
 6601 0043 00       		.byte	0
 6602 0044 00       		.byte	0
 6603 0045 08       		.uleb128 0x8
 6604 0046 13       		.uleb128 0x13
 6605 0047 01       		.byte	0x1
 6606 0048 0B       		.uleb128 0xb
 6607 0049 0B       		.uleb128 0xb
 6608 004a 3A       		.uleb128 0x3a
 6609 004b 0B       		.uleb128 0xb
 6610 004c 3B       		.uleb128 0x3b
 6611 004d 05       		.uleb128 0x5
 6612 004e 01       		.uleb128 0x1
 6613 004f 13       		.uleb128 0x13
 6614 0050 00       		.byte	0
 6615 0051 00       		.byte	0
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 154


 6616 0052 09       		.uleb128 0x9
 6617 0053 0D       		.uleb128 0xd
 6618 0054 00       		.byte	0
 6619 0055 03       		.uleb128 0x3
 6620 0056 0E       		.uleb128 0xe
 6621 0057 3A       		.uleb128 0x3a
 6622 0058 0B       		.uleb128 0xb
 6623 0059 3B       		.uleb128 0x3b
 6624 005a 05       		.uleb128 0x5
 6625 005b 49       		.uleb128 0x49
 6626 005c 13       		.uleb128 0x13
 6627 005d 38       		.uleb128 0x38
 6628 005e 0B       		.uleb128 0xb
 6629 005f 00       		.byte	0
 6630 0060 00       		.byte	0
 6631 0061 0A       		.uleb128 0xa
 6632 0062 35       		.uleb128 0x35
 6633 0063 00       		.byte	0
 6634 0064 49       		.uleb128 0x49
 6635 0065 13       		.uleb128 0x13
 6636 0066 00       		.byte	0
 6637 0067 00       		.byte	0
 6638 0068 0B       		.uleb128 0xb
 6639 0069 16       		.uleb128 0x16
 6640 006a 00       		.byte	0
 6641 006b 03       		.uleb128 0x3
 6642 006c 0E       		.uleb128 0xe
 6643 006d 3A       		.uleb128 0x3a
 6644 006e 0B       		.uleb128 0xb
 6645 006f 3B       		.uleb128 0x3b
 6646 0070 05       		.uleb128 0x5
 6647 0071 49       		.uleb128 0x49
 6648 0072 13       		.uleb128 0x13
 6649 0073 00       		.byte	0
 6650 0074 00       		.byte	0
 6651 0075 0C       		.uleb128 0xc
 6652 0076 0D       		.uleb128 0xd
 6653 0077 00       		.byte	0
 6654 0078 03       		.uleb128 0x3
 6655 0079 08       		.uleb128 0x8
 6656 007a 3A       		.uleb128 0x3a
 6657 007b 0B       		.uleb128 0xb
 6658 007c 3B       		.uleb128 0x3b
 6659 007d 05       		.uleb128 0x5
 6660 007e 49       		.uleb128 0x49
 6661 007f 13       		.uleb128 0x13
 6662 0080 38       		.uleb128 0x38
 6663 0081 0B       		.uleb128 0xb
 6664 0082 00       		.byte	0
 6665 0083 00       		.byte	0
 6666 0084 0D       		.uleb128 0xd
 6667 0085 01       		.uleb128 0x1
 6668 0086 01       		.byte	0x1
 6669 0087 49       		.uleb128 0x49
 6670 0088 13       		.uleb128 0x13
 6671 0089 01       		.uleb128 0x1
 6672 008a 13       		.uleb128 0x13
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 155


 6673 008b 00       		.byte	0
 6674 008c 00       		.byte	0
 6675 008d 0E       		.uleb128 0xe
 6676 008e 21       		.uleb128 0x21
 6677 008f 00       		.byte	0
 6678 0090 49       		.uleb128 0x49
 6679 0091 13       		.uleb128 0x13
 6680 0092 2F       		.uleb128 0x2f
 6681 0093 0B       		.uleb128 0xb
 6682 0094 00       		.byte	0
 6683 0095 00       		.byte	0
 6684 0096 0F       		.uleb128 0xf
 6685 0097 2E       		.uleb128 0x2e
 6686 0098 01       		.byte	0x1
 6687 0099 03       		.uleb128 0x3
 6688 009a 0E       		.uleb128 0xe
 6689 009b 3A       		.uleb128 0x3a
 6690 009c 0B       		.uleb128 0xb
 6691 009d 3B       		.uleb128 0x3b
 6692 009e 05       		.uleb128 0x5
 6693 009f 27       		.uleb128 0x27
 6694 00a0 19       		.uleb128 0x19
 6695 00a1 11       		.uleb128 0x11
 6696 00a2 01       		.uleb128 0x1
 6697 00a3 12       		.uleb128 0x12
 6698 00a4 06       		.uleb128 0x6
 6699 00a5 40       		.uleb128 0x40
 6700 00a6 18       		.uleb128 0x18
 6701 00a7 9642     		.uleb128 0x2116
 6702 00a9 19       		.uleb128 0x19
 6703 00aa 01       		.uleb128 0x1
 6704 00ab 13       		.uleb128 0x13
 6705 00ac 00       		.byte	0
 6706 00ad 00       		.byte	0
 6707 00ae 10       		.uleb128 0x10
 6708 00af 34       		.uleb128 0x34
 6709 00b0 00       		.byte	0
 6710 00b1 03       		.uleb128 0x3
 6711 00b2 08       		.uleb128 0x8
 6712 00b3 3A       		.uleb128 0x3a
 6713 00b4 0B       		.uleb128 0xb
 6714 00b5 3B       		.uleb128 0x3b
 6715 00b6 05       		.uleb128 0x5
 6716 00b7 49       		.uleb128 0x49
 6717 00b8 13       		.uleb128 0x13
 6718 00b9 02       		.uleb128 0x2
 6719 00ba 18       		.uleb128 0x18
 6720 00bb 00       		.byte	0
 6721 00bc 00       		.byte	0
 6722 00bd 11       		.uleb128 0x11
 6723 00be 34       		.uleb128 0x34
 6724 00bf 00       		.byte	0
 6725 00c0 03       		.uleb128 0x3
 6726 00c1 0E       		.uleb128 0xe
 6727 00c2 3A       		.uleb128 0x3a
 6728 00c3 0B       		.uleb128 0xb
 6729 00c4 3B       		.uleb128 0x3b
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 156


 6730 00c5 05       		.uleb128 0x5
 6731 00c6 49       		.uleb128 0x49
 6732 00c7 13       		.uleb128 0x13
 6733 00c8 02       		.uleb128 0x2
 6734 00c9 18       		.uleb128 0x18
 6735 00ca 00       		.byte	0
 6736 00cb 00       		.byte	0
 6737 00cc 12       		.uleb128 0x12
 6738 00cd 2E       		.uleb128 0x2e
 6739 00ce 01       		.byte	0x1
 6740 00cf 03       		.uleb128 0x3
 6741 00d0 0E       		.uleb128 0xe
 6742 00d1 3A       		.uleb128 0x3a
 6743 00d2 0B       		.uleb128 0xb
 6744 00d3 3B       		.uleb128 0x3b
 6745 00d4 05       		.uleb128 0x5
 6746 00d5 27       		.uleb128 0x27
 6747 00d6 19       		.uleb128 0x19
 6748 00d7 49       		.uleb128 0x49
 6749 00d8 13       		.uleb128 0x13
 6750 00d9 11       		.uleb128 0x11
 6751 00da 01       		.uleb128 0x1
 6752 00db 12       		.uleb128 0x12
 6753 00dc 06       		.uleb128 0x6
 6754 00dd 40       		.uleb128 0x40
 6755 00de 18       		.uleb128 0x18
 6756 00df 9642     		.uleb128 0x2116
 6757 00e1 19       		.uleb128 0x19
 6758 00e2 01       		.uleb128 0x1
 6759 00e3 13       		.uleb128 0x13
 6760 00e4 00       		.byte	0
 6761 00e5 00       		.byte	0
 6762 00e6 13       		.uleb128 0x13
 6763 00e7 05       		.uleb128 0x5
 6764 00e8 00       		.byte	0
 6765 00e9 03       		.uleb128 0x3
 6766 00ea 0E       		.uleb128 0xe
 6767 00eb 3A       		.uleb128 0x3a
 6768 00ec 0B       		.uleb128 0xb
 6769 00ed 3B       		.uleb128 0x3b
 6770 00ee 05       		.uleb128 0x5
 6771 00ef 49       		.uleb128 0x49
 6772 00f0 13       		.uleb128 0x13
 6773 00f1 02       		.uleb128 0x2
 6774 00f2 18       		.uleb128 0x18
 6775 00f3 00       		.byte	0
 6776 00f4 00       		.byte	0
 6777 00f5 14       		.uleb128 0x14
 6778 00f6 2E       		.uleb128 0x2e
 6779 00f7 01       		.byte	0x1
 6780 00f8 03       		.uleb128 0x3
 6781 00f9 0E       		.uleb128 0xe
 6782 00fa 3A       		.uleb128 0x3a
 6783 00fb 0B       		.uleb128 0xb
 6784 00fc 3B       		.uleb128 0x3b
 6785 00fd 05       		.uleb128 0x5
 6786 00fe 27       		.uleb128 0x27
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 157


 6787 00ff 19       		.uleb128 0x19
 6788 0100 49       		.uleb128 0x49
 6789 0101 13       		.uleb128 0x13
 6790 0102 11       		.uleb128 0x11
 6791 0103 01       		.uleb128 0x1
 6792 0104 12       		.uleb128 0x12
 6793 0105 06       		.uleb128 0x6
 6794 0106 40       		.uleb128 0x40
 6795 0107 18       		.uleb128 0x18
 6796 0108 9742     		.uleb128 0x2117
 6797 010a 19       		.uleb128 0x19
 6798 010b 01       		.uleb128 0x1
 6799 010c 13       		.uleb128 0x13
 6800 010d 00       		.byte	0
 6801 010e 00       		.byte	0
 6802 010f 15       		.uleb128 0x15
 6803 0110 2E       		.uleb128 0x2e
 6804 0111 01       		.byte	0x1
 6805 0112 3F       		.uleb128 0x3f
 6806 0113 19       		.uleb128 0x19
 6807 0114 03       		.uleb128 0x3
 6808 0115 0E       		.uleb128 0xe
 6809 0116 3A       		.uleb128 0x3a
 6810 0117 0B       		.uleb128 0xb
 6811 0118 3B       		.uleb128 0x3b
 6812 0119 05       		.uleb128 0x5
 6813 011a 27       		.uleb128 0x27
 6814 011b 19       		.uleb128 0x19
 6815 011c 49       		.uleb128 0x49
 6816 011d 13       		.uleb128 0x13
 6817 011e 11       		.uleb128 0x11
 6818 011f 01       		.uleb128 0x1
 6819 0120 12       		.uleb128 0x12
 6820 0121 06       		.uleb128 0x6
 6821 0122 40       		.uleb128 0x40
 6822 0123 18       		.uleb128 0x18
 6823 0124 9642     		.uleb128 0x2116
 6824 0126 19       		.uleb128 0x19
 6825 0127 01       		.uleb128 0x1
 6826 0128 13       		.uleb128 0x13
 6827 0129 00       		.byte	0
 6828 012a 00       		.byte	0
 6829 012b 16       		.uleb128 0x16
 6830 012c 0B       		.uleb128 0xb
 6831 012d 01       		.byte	0x1
 6832 012e 11       		.uleb128 0x11
 6833 012f 01       		.uleb128 0x1
 6834 0130 12       		.uleb128 0x12
 6835 0131 06       		.uleb128 0x6
 6836 0132 00       		.byte	0
 6837 0133 00       		.byte	0
 6838 0134 17       		.uleb128 0x17
 6839 0135 2E       		.uleb128 0x2e
 6840 0136 01       		.byte	0x1
 6841 0137 3F       		.uleb128 0x3f
 6842 0138 19       		.uleb128 0x19
 6843 0139 03       		.uleb128 0x3
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 158


 6844 013a 0E       		.uleb128 0xe
 6845 013b 3A       		.uleb128 0x3a
 6846 013c 0B       		.uleb128 0xb
 6847 013d 3B       		.uleb128 0x3b
 6848 013e 05       		.uleb128 0x5
 6849 013f 27       		.uleb128 0x27
 6850 0140 19       		.uleb128 0x19
 6851 0141 11       		.uleb128 0x11
 6852 0142 01       		.uleb128 0x1
 6853 0143 12       		.uleb128 0x12
 6854 0144 06       		.uleb128 0x6
 6855 0145 40       		.uleb128 0x40
 6856 0146 18       		.uleb128 0x18
 6857 0147 9642     		.uleb128 0x2116
 6858 0149 19       		.uleb128 0x19
 6859 014a 01       		.uleb128 0x1
 6860 014b 13       		.uleb128 0x13
 6861 014c 00       		.byte	0
 6862 014d 00       		.byte	0
 6863 014e 18       		.uleb128 0x18
 6864 014f 0B       		.uleb128 0xb
 6865 0150 01       		.byte	0x1
 6866 0151 11       		.uleb128 0x11
 6867 0152 01       		.uleb128 0x1
 6868 0153 12       		.uleb128 0x12
 6869 0154 06       		.uleb128 0x6
 6870 0155 01       		.uleb128 0x1
 6871 0156 13       		.uleb128 0x13
 6872 0157 00       		.byte	0
 6873 0158 00       		.byte	0
 6874 0159 19       		.uleb128 0x19
 6875 015a 05       		.uleb128 0x5
 6876 015b 00       		.byte	0
 6877 015c 03       		.uleb128 0x3
 6878 015d 08       		.uleb128 0x8
 6879 015e 3A       		.uleb128 0x3a
 6880 015f 0B       		.uleb128 0xb
 6881 0160 3B       		.uleb128 0x3b
 6882 0161 05       		.uleb128 0x5
 6883 0162 49       		.uleb128 0x49
 6884 0163 13       		.uleb128 0x13
 6885 0164 02       		.uleb128 0x2
 6886 0165 18       		.uleb128 0x18
 6887 0166 00       		.byte	0
 6888 0167 00       		.byte	0
 6889 0168 1A       		.uleb128 0x1a
 6890 0169 2E       		.uleb128 0x2e
 6891 016a 01       		.byte	0x1
 6892 016b 3F       		.uleb128 0x3f
 6893 016c 19       		.uleb128 0x19
 6894 016d 03       		.uleb128 0x3
 6895 016e 0E       		.uleb128 0xe
 6896 016f 3A       		.uleb128 0x3a
 6897 0170 0B       		.uleb128 0xb
 6898 0171 3B       		.uleb128 0x3b
 6899 0172 05       		.uleb128 0x5
 6900 0173 27       		.uleb128 0x27
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 159


 6901 0174 19       		.uleb128 0x19
 6902 0175 49       		.uleb128 0x49
 6903 0176 13       		.uleb128 0x13
 6904 0177 11       		.uleb128 0x11
 6905 0178 01       		.uleb128 0x1
 6906 0179 12       		.uleb128 0x12
 6907 017a 06       		.uleb128 0x6
 6908 017b 40       		.uleb128 0x40
 6909 017c 18       		.uleb128 0x18
 6910 017d 9742     		.uleb128 0x2117
 6911 017f 19       		.uleb128 0x19
 6912 0180 01       		.uleb128 0x1
 6913 0181 13       		.uleb128 0x13
 6914 0182 00       		.byte	0
 6915 0183 00       		.byte	0
 6916 0184 1B       		.uleb128 0x1b
 6917 0185 2E       		.uleb128 0x2e
 6918 0186 00       		.byte	0
 6919 0187 3F       		.uleb128 0x3f
 6920 0188 19       		.uleb128 0x19
 6921 0189 03       		.uleb128 0x3
 6922 018a 0E       		.uleb128 0xe
 6923 018b 3A       		.uleb128 0x3a
 6924 018c 0B       		.uleb128 0xb
 6925 018d 3B       		.uleb128 0x3b
 6926 018e 05       		.uleb128 0x5
 6927 018f 27       		.uleb128 0x27
 6928 0190 19       		.uleb128 0x19
 6929 0191 11       		.uleb128 0x11
 6930 0192 01       		.uleb128 0x1
 6931 0193 12       		.uleb128 0x12
 6932 0194 06       		.uleb128 0x6
 6933 0195 40       		.uleb128 0x40
 6934 0196 18       		.uleb128 0x18
 6935 0197 9642     		.uleb128 0x2116
 6936 0199 19       		.uleb128 0x19
 6937 019a 00       		.byte	0
 6938 019b 00       		.byte	0
 6939 019c 1C       		.uleb128 0x1c
 6940 019d 34       		.uleb128 0x34
 6941 019e 00       		.byte	0
 6942 019f 03       		.uleb128 0x3
 6943 01a0 0E       		.uleb128 0xe
 6944 01a1 3A       		.uleb128 0x3a
 6945 01a2 0B       		.uleb128 0xb
 6946 01a3 3B       		.uleb128 0x3b
 6947 01a4 0B       		.uleb128 0xb
 6948 01a5 49       		.uleb128 0x49
 6949 01a6 13       		.uleb128 0x13
 6950 01a7 02       		.uleb128 0x2
 6951 01a8 18       		.uleb128 0x18
 6952 01a9 00       		.byte	0
 6953 01aa 00       		.byte	0
 6954 01ab 1D       		.uleb128 0x1d
 6955 01ac 21       		.uleb128 0x21
 6956 01ad 00       		.byte	0
 6957 01ae 49       		.uleb128 0x49
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 160


 6958 01af 13       		.uleb128 0x13
 6959 01b0 2F       		.uleb128 0x2f
 6960 01b1 05       		.uleb128 0x5
 6961 01b2 00       		.byte	0
 6962 01b3 00       		.byte	0
 6963 01b4 1E       		.uleb128 0x1e
 6964 01b5 34       		.uleb128 0x34
 6965 01b6 00       		.byte	0
 6966 01b7 03       		.uleb128 0x3
 6967 01b8 0E       		.uleb128 0xe
 6968 01b9 3A       		.uleb128 0x3a
 6969 01ba 0B       		.uleb128 0xb
 6970 01bb 3B       		.uleb128 0x3b
 6971 01bc 05       		.uleb128 0x5
 6972 01bd 49       		.uleb128 0x49
 6973 01be 13       		.uleb128 0x13
 6974 01bf 3F       		.uleb128 0x3f
 6975 01c0 19       		.uleb128 0x19
 6976 01c1 02       		.uleb128 0x2
 6977 01c2 18       		.uleb128 0x18
 6978 01c3 00       		.byte	0
 6979 01c4 00       		.byte	0
 6980 01c5 00       		.byte	0
 6981              		.section	.debug_aranges,"",%progbits
 6982 0000 34010000 		.4byte	0x134
 6983 0004 0200     		.2byte	0x2
 6984 0006 00000000 		.4byte	.Ldebug_info0
 6985 000a 04       		.byte	0x4
 6986 000b 00       		.byte	0
 6987 000c 0000     		.2byte	0
 6988 000e 0000     		.2byte	0
 6989 0010 00000000 		.4byte	.LFB0
 6990 0014 AC000000 		.4byte	.LFE0-.LFB0
 6991 0018 00000000 		.4byte	.LFB1
 6992 001c B6000000 		.4byte	.LFE1-.LFB1
 6993 0020 00000000 		.4byte	.LFB2
 6994 0024 88000000 		.4byte	.LFE2-.LFB2
 6995 0028 00000000 		.4byte	.LFB3
 6996 002c 34000000 		.4byte	.LFE3-.LFB3
 6997 0030 00000000 		.4byte	.LFB4
 6998 0034 44000000 		.4byte	.LFE4-.LFB4
 6999 0038 00000000 		.4byte	.LFB5
 7000 003c 0C010000 		.4byte	.LFE5-.LFB5
 7001 0040 00000000 		.4byte	.LFB6
 7002 0044 0C010000 		.4byte	.LFE6-.LFB6
 7003 0048 00000000 		.4byte	.LFB7
 7004 004c 36000000 		.4byte	.LFE7-.LFB7
 7005 0050 00000000 		.4byte	.LFB8
 7006 0054 36000000 		.4byte	.LFE8-.LFB8
 7007 0058 00000000 		.4byte	.LFB9
 7008 005c 1C010000 		.4byte	.LFE9-.LFB9
 7009 0060 00000000 		.4byte	.LFB10
 7010 0064 9C000000 		.4byte	.LFE10-.LFB10
 7011 0068 00000000 		.4byte	.LFB11
 7012 006c 9C000000 		.4byte	.LFE11-.LFB11
 7013 0070 00000000 		.4byte	.LFB12
 7014 0074 4C000000 		.4byte	.LFE12-.LFB12
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 161


 7015 0078 00000000 		.4byte	.LFB13
 7016 007c 4C000000 		.4byte	.LFE13-.LFB13
 7017 0080 00000000 		.4byte	.LFB14
 7018 0084 26000000 		.4byte	.LFE14-.LFB14
 7019 0088 00000000 		.4byte	.LFB15
 7020 008c 70000000 		.4byte	.LFE15-.LFB15
 7021 0090 00000000 		.4byte	.LFB16
 7022 0094 94000000 		.4byte	.LFE16-.LFB16
 7023 0098 00000000 		.4byte	.LFB17
 7024 009c A8000000 		.4byte	.LFE17-.LFB17
 7025 00a0 00000000 		.4byte	.LFB18
 7026 00a4 32000000 		.4byte	.LFE18-.LFB18
 7027 00a8 00000000 		.4byte	.LFB19
 7028 00ac 1C000000 		.4byte	.LFE19-.LFB19
 7029 00b0 00000000 		.4byte	.LFB20
 7030 00b4 48000000 		.4byte	.LFE20-.LFB20
 7031 00b8 00000000 		.4byte	.LFB21
 7032 00bc 38000000 		.4byte	.LFE21-.LFB21
 7033 00c0 00000000 		.4byte	.LFB22
 7034 00c4 38000000 		.4byte	.LFE22-.LFB22
 7035 00c8 00000000 		.4byte	.LFB23
 7036 00cc 00010000 		.4byte	.LFE23-.LFB23
 7037 00d0 00000000 		.4byte	.LFB24
 7038 00d4 04010000 		.4byte	.LFE24-.LFB24
 7039 00d8 00000000 		.4byte	.LFB25
 7040 00dc 94000000 		.4byte	.LFE25-.LFB25
 7041 00e0 00000000 		.4byte	.LFB26
 7042 00e4 94000000 		.4byte	.LFE26-.LFB26
 7043 00e8 00000000 		.4byte	.LFB27
 7044 00ec 6C000000 		.4byte	.LFE27-.LFB27
 7045 00f0 00000000 		.4byte	.LFB28
 7046 00f4 6C000000 		.4byte	.LFE28-.LFB28
 7047 00f8 00000000 		.4byte	.LFB29
 7048 00fc 6C000000 		.4byte	.LFE29-.LFB29
 7049 0100 00000000 		.4byte	.LFB30
 7050 0104 6C000000 		.4byte	.LFE30-.LFB30
 7051 0108 00000000 		.4byte	.LFB31
 7052 010c 0C000000 		.4byte	.LFE31-.LFB31
 7053 0110 00000000 		.4byte	.LFB32
 7054 0114 B8000000 		.4byte	.LFE32-.LFB32
 7055 0118 00000000 		.4byte	.LFB33
 7056 011c 24010000 		.4byte	.LFE33-.LFB33
 7057 0120 00000000 		.4byte	.LFB34
 7058 0124 30000000 		.4byte	.LFE34-.LFB34
 7059 0128 00000000 		.4byte	.LFB35
 7060 012c 74000000 		.4byte	.LFE35-.LFB35
 7061 0130 00000000 		.4byte	0
 7062 0134 00000000 		.4byte	0
 7063              		.section	.debug_ranges,"",%progbits
 7064              	.Ldebug_ranges0:
 7065 0000 00000000 		.4byte	.LFB0
 7066 0004 AC000000 		.4byte	.LFE0
 7067 0008 00000000 		.4byte	.LFB1
 7068 000c B6000000 		.4byte	.LFE1
 7069 0010 00000000 		.4byte	.LFB2
 7070 0014 88000000 		.4byte	.LFE2
 7071 0018 00000000 		.4byte	.LFB3
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 162


 7072 001c 34000000 		.4byte	.LFE3
 7073 0020 00000000 		.4byte	.LFB4
 7074 0024 44000000 		.4byte	.LFE4
 7075 0028 00000000 		.4byte	.LFB5
 7076 002c 0C010000 		.4byte	.LFE5
 7077 0030 00000000 		.4byte	.LFB6
 7078 0034 0C010000 		.4byte	.LFE6
 7079 0038 00000000 		.4byte	.LFB7
 7080 003c 36000000 		.4byte	.LFE7
 7081 0040 00000000 		.4byte	.LFB8
 7082 0044 36000000 		.4byte	.LFE8
 7083 0048 00000000 		.4byte	.LFB9
 7084 004c 1C010000 		.4byte	.LFE9
 7085 0050 00000000 		.4byte	.LFB10
 7086 0054 9C000000 		.4byte	.LFE10
 7087 0058 00000000 		.4byte	.LFB11
 7088 005c 9C000000 		.4byte	.LFE11
 7089 0060 00000000 		.4byte	.LFB12
 7090 0064 4C000000 		.4byte	.LFE12
 7091 0068 00000000 		.4byte	.LFB13
 7092 006c 4C000000 		.4byte	.LFE13
 7093 0070 00000000 		.4byte	.LFB14
 7094 0074 26000000 		.4byte	.LFE14
 7095 0078 00000000 		.4byte	.LFB15
 7096 007c 70000000 		.4byte	.LFE15
 7097 0080 00000000 		.4byte	.LFB16
 7098 0084 94000000 		.4byte	.LFE16
 7099 0088 00000000 		.4byte	.LFB17
 7100 008c A8000000 		.4byte	.LFE17
 7101 0090 00000000 		.4byte	.LFB18
 7102 0094 32000000 		.4byte	.LFE18
 7103 0098 00000000 		.4byte	.LFB19
 7104 009c 1C000000 		.4byte	.LFE19
 7105 00a0 00000000 		.4byte	.LFB20
 7106 00a4 48000000 		.4byte	.LFE20
 7107 00a8 00000000 		.4byte	.LFB21
 7108 00ac 38000000 		.4byte	.LFE21
 7109 00b0 00000000 		.4byte	.LFB22
 7110 00b4 38000000 		.4byte	.LFE22
 7111 00b8 00000000 		.4byte	.LFB23
 7112 00bc 00010000 		.4byte	.LFE23
 7113 00c0 00000000 		.4byte	.LFB24
 7114 00c4 04010000 		.4byte	.LFE24
 7115 00c8 00000000 		.4byte	.LFB25
 7116 00cc 94000000 		.4byte	.LFE25
 7117 00d0 00000000 		.4byte	.LFB26
 7118 00d4 94000000 		.4byte	.LFE26
 7119 00d8 00000000 		.4byte	.LFB27
 7120 00dc 6C000000 		.4byte	.LFE27
 7121 00e0 00000000 		.4byte	.LFB28
 7122 00e4 6C000000 		.4byte	.LFE28
 7123 00e8 00000000 		.4byte	.LFB29
 7124 00ec 6C000000 		.4byte	.LFE29
 7125 00f0 00000000 		.4byte	.LFB30
 7126 00f4 6C000000 		.4byte	.LFE30
 7127 00f8 00000000 		.4byte	.LFB31
 7128 00fc 0C000000 		.4byte	.LFE31
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 163


 7129 0100 00000000 		.4byte	.LFB32
 7130 0104 B8000000 		.4byte	.LFE32
 7131 0108 00000000 		.4byte	.LFB33
 7132 010c 24010000 		.4byte	.LFE33
 7133 0110 00000000 		.4byte	.LFB34
 7134 0114 30000000 		.4byte	.LFE34
 7135 0118 00000000 		.4byte	.LFB35
 7136 011c 74000000 		.4byte	.LFE35
 7137 0120 00000000 		.4byte	0
 7138 0124 00000000 		.4byte	0
 7139              		.section	.debug_line,"",%progbits
 7140              	.Ldebug_line0:
 7141 0000 08050000 		.section	.debug_str,"MS",%progbits,1
 7141      02003D00 
 7141      00000201 
 7141      FB0E0D00 
 7141      01010101 
 7142              	.LASF64:
 7143 0000 53454747 		.ascii	"SEGGER_RTT_HasDataUp\000"
 7143      45525F52 
 7143      54545F48 
 7143      61734461 
 7143      74615570 
 7144              	.LASF22:
 7145 0015 4D61784E 		.ascii	"MaxNumDownBuffers\000"
 7145      756D446F 
 7145      776E4275 
 7145      66666572 
 7145      7300
 7146              	.LASF69:
 7147 0027 53454747 		.ascii	"SEGGER_RTT_ConfigDownBuffer\000"
 7147      45525F52 
 7147      54545F43 
 7147      6F6E6669 
 7147      67446F77 
 7148              	.LASF18:
 7149 0043 53454747 		.ascii	"SEGGER_RTT_BUFFER_UP\000"
 7149      45525F52 
 7149      54545F42 
 7149      55464645 
 7149      525F5550 
 7150              	.LASF31:
 7151 0058 5F446F49 		.ascii	"_DoInit\000"
 7151      6E697400 
 7152              	.LASF84:
 7153 0060 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 7153      43313120 
 7153      352E342E 
 7153      31203230 
 7153      31363036 
 7154 0093 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 7154      20726576 
 7154      6973696F 
 7154      6E203233 
 7154      37373135 
 7155 00c6 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 7155      66756E63 
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 164


 7155      74696F6E 
 7155      2D736563 
 7155      74696F6E 
 7156              	.LASF19:
 7157 00ee 53454747 		.ascii	"SEGGER_RTT_BUFFER_DOWN\000"
 7157      45525F52 
 7157      54545F42 
 7157      55464645 
 7157      525F444F 
 7158              	.LASF9:
 7159 0105 6C6F6E67 		.ascii	"long long unsigned int\000"
 7159      206C6F6E 
 7159      6720756E 
 7159      7369676E 
 7159      65642069 
 7160              	.LASF59:
 7161 011c 53454747 		.ascii	"SEGGER_RTT_PutChar\000"
 7161      45525F52 
 7161      54545F50 
 7161      75744368 
 7161      617200
 7162              	.LASF45:
 7163 012f 53454747 		.ascii	"SEGGER_RTT_ReadUpBufferNoLock\000"
 7163      45525F52 
 7163      54545F52 
 7163      65616455 
 7163      70427566 
 7164              	.LASF78:
 7165 014d 53454747 		.ascii	"SEGGER_RTT_GetAvailWriteSpace\000"
 7165      45525F52 
 7165      54545F47 
 7165      65744176 
 7165      61696C57 
 7166              	.LASF47:
 7167 016b 53454747 		.ascii	"SEGGER_RTT_ReadUpBuffer\000"
 7167      45525F52 
 7167      54545F52 
 7167      65616455 
 7167      70427566 
 7168              	.LASF1:
 7169 0183 6C6F6E67 		.ascii	"long long int\000"
 7169      206C6F6E 
 7169      6720696E 
 7169      7400
 7170              	.LASF3:
 7171 0191 7369676E 		.ascii	"signed char\000"
 7171      65642063 
 7171      68617200 
 7172              	.LASF32:
 7173 019d 5F577269 		.ascii	"_WriteNoCheck\000"
 7173      74654E6F 
 7173      43686563 
 7173      6B00
 7174              	.LASF70:
 7175 01ab 70446F77 		.ascii	"pDown\000"
 7175      6E00
 7176              	.LASF79:
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 165


 7177 01b1 53454747 		.ascii	"SEGGER_RTT_GetBytesInBuffer\000"
 7177      45525F52 
 7177      54545F47 
 7177      65744279 
 7177      74657349 
 7178              	.LASF88:
 7179 01cd 53454747 		.ascii	"SEGGER_RTT_Init\000"
 7179      45525F52 
 7179      54545F49 
 7179      6E697400 
 7180              	.LASF87:
 7181 01dd 53454747 		.ascii	"SEGGER_RTT_WriteWithOverwriteNoLock\000"
 7181      45525F52 
 7181      54545F57 
 7181      72697465 
 7181      57697468 
 7182              	.LASF58:
 7183 0201 53454747 		.ascii	"SEGGER_RTT_PutCharSkip\000"
 7183      45525F52 
 7183      54545F50 
 7183      75744368 
 7183      6172536B 
 7184              	.LASF81:
 7185 0218 5F616355 		.ascii	"_acUpBuffer\000"
 7185      70427566 
 7185      66657200 
 7186              	.LASF7:
 7187 0224 6C6F6E67 		.ascii	"long int\000"
 7187      20696E74 
 7187      00
 7188              	.LASF89:
 7189 022d 5F534547 		.ascii	"_SEGGER_RTT\000"
 7189      4745525F 
 7189      52545400 
 7190              	.LASF30:
 7191 0239 70447374 		.ascii	"pDst\000"
 7191      00
 7192              	.LASF46:
 7193 023e 53454747 		.ascii	"SEGGER_RTT_ReadNoLock\000"
 7193      45525F52 
 7193      54545F52 
 7193      6561644E 
 7193      6F4C6F63 
 7194              	.LASF86:
 7195 0254 453A5C69 		.ascii	"E:\\iroteam\\prg\\tulue\\code\\cypress\\no-exp -V1-"
 7195      726F7465 
 7195      616D5C70 
 7195      72675C74 
 7195      756C7565 
 7196 0281 6F6C6420 		.ascii	"old board\\new-cy-notask\\cy-notask\\Start\\BoardSu"
 7196      626F6172 
 7196      645C6E65 
 7196      772D6379 
 7196      2D6E6F74 
 7197 02b0 70706F72 		.ascii	"pport\\Cypress\\CY8C5868_CY8CKIT_050_PSoC5_DK\\Star"
 7197      745C4379 
 7197      70726573 
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 166


 7197      735C4359 
 7197      38433538 
 7198 02e0 745F4359 		.ascii	"t_CY8C5868_AccessV1.0_OldBrd.cydsn\000"
 7198      38433538 
 7198      36385F41 
 7198      63636573 
 7198      7356312E 
 7199              	.LASF60:
 7200 0303 53454747 		.ascii	"SEGGER_RTT_GetKey\000"
 7200      45525F52 
 7200      54545F47 
 7200      65744B65 
 7200      7900
 7201              	.LASF33:
 7202 0315 70446174 		.ascii	"pData\000"
 7202      6100
 7203              	.LASF16:
 7204 031b 52644F66 		.ascii	"RdOff\000"
 7204      6600
 7205              	.LASF38:
 7206 0321 5F476574 		.ascii	"_GetAvailWriteSpace\000"
 7206      41766169 
 7206      6C577269 
 7206      74655370 
 7206      61636500 
 7207              	.LASF0:
 7208 0335 756E7369 		.ascii	"unsigned int\000"
 7208      676E6564 
 7208      20696E74 
 7208      00
 7209              	.LASF43:
 7210 0342 70537263 		.ascii	"pSrc\000"
 7210      00
 7211              	.LASF8:
 7212 0347 6C6F6E67 		.ascii	"long unsigned int\000"
 7212      20756E73 
 7212      69676E65 
 7212      6420696E 
 7212      7400
 7213              	.LASF13:
 7214 0359 70427566 		.ascii	"pBuffer\000"
 7214      66657200 
 7215              	.LASF66:
 7216 0361 70525454 		.ascii	"pRTTCB\000"
 7216      434200
 7217              	.LASF21:
 7218 0368 4D61784E 		.ascii	"MaxNumUpBuffers\000"
 7218      756D5570 
 7218      42756666 
 7218      65727300 
 7219              	.LASF6:
 7220 0378 73686F72 		.ascii	"short unsigned int\000"
 7220      7420756E 
 7220      7369676E 
 7220      65642069 
 7220      6E7400
 7221              	.LASF54:
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 167


 7222 038b 53454747 		.ascii	"SEGGER_RTT_WriteDownBuffer\000"
 7222      45525F52 
 7222      54545F57 
 7222      72697465 
 7222      446F776E 
 7223              	.LASF75:
 7224 03a6 53454747 		.ascii	"SEGGER_RTT_SetTerminal\000"
 7224      45525F52 
 7224      54545F53 
 7224      65745465 
 7224      726D696E 
 7225              	.LASF39:
 7226 03bd 42756666 		.ascii	"BufferIndex\000"
 7226      6572496E 
 7226      64657800 
 7227              	.LASF63:
 7228 03c9 53454747 		.ascii	"SEGGER_RTT_HasData\000"
 7228      45525F52 
 7228      54545F48 
 7228      61734461 
 7228      746100
 7229              	.LASF12:
 7230 03dc 734E616D 		.ascii	"sName\000"
 7230      6500
 7231              	.LASF29:
 7232 03e2 4E756D42 		.ascii	"NumBytesWritten\000"
 7232      79746573 
 7232      57726974 
 7232      74656E00 
 7233              	.LASF73:
 7234 03f2 53454747 		.ascii	"SEGGER_RTT_SetFlagsUpBuffer\000"
 7234      45525F52 
 7234      54545F53 
 7234      6574466C 
 7234      61677355 
 7235              	.LASF34:
 7236 040e 4E756D42 		.ascii	"NumBytesAtOnce\000"
 7236      79746573 
 7236      41744F6E 
 7236      636500
 7237              	.LASF24:
 7238 041d 53454747 		.ascii	"SEGGER_RTT_CB\000"
 7238      45525F52 
 7238      54545F43 
 7238      4200
 7239              	.LASF10:
 7240 042b 73697A65 		.ascii	"sizetype\000"
 7240      74797065 
 7240      00
 7241              	.LASF26:
 7242 0434 7052696E 		.ascii	"pRing\000"
 7242      6700
 7243              	.LASF2:
 7244 043a 6C6F6E67 		.ascii	"long double\000"
 7244      20646F75 
 7244      626C6500 
 7245              	.LASF28:
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 168


 7246 0446 4E756D42 		.ascii	"NumBytesToWrite\000"
 7246      79746573 
 7246      546F5772 
 7246      69746500 
 7247              	.LASF40:
 7248 0456 42756666 		.ascii	"BufferSize\000"
 7248      65725369 
 7248      7A6500
 7249              	.LASF55:
 7250 0461 53454747 		.ascii	"SEGGER_RTT_Write\000"
 7250      45525F52 
 7250      54545F57 
 7250      72697465 
 7250      00
 7251              	.LASF82:
 7252 0472 5F616344 		.ascii	"_acDownBuffer\000"
 7252      6F776E42 
 7252      75666665 
 7252      7200
 7253              	.LASF68:
 7254 0480 53454747 		.ascii	"SEGGER_RTT_ConfigUpBuffer\000"
 7254      45525F52 
 7254      54545F43 
 7254      6F6E6669 
 7254      67557042 
 7255              	.LASF65:
 7256 049a 53454747 		.ascii	"SEGGER_RTT_AllocDownBuffer\000"
 7256      45525F52 
 7256      54545F41 
 7256      6C6C6F63 
 7256      446F776E 
 7257              	.LASF14:
 7258 04b5 53697A65 		.ascii	"SizeOfBuffer\000"
 7258      4F664275 
 7258      66666572 
 7258      00
 7259              	.LASF72:
 7260 04c2 53454747 		.ascii	"SEGGER_RTT_SetNameDownBuffer\000"
 7260      45525F52 
 7260      54545F53 
 7260      65744E61 
 7260      6D65446F 
 7261              	.LASF50:
 7262 04df 41766169 		.ascii	"Avail\000"
 7262      6C00
 7263              	.LASF20:
 7264 04e5 61634944 		.ascii	"acID\000"
 7264      00
 7265              	.LASF67:
 7266 04ea 53454747 		.ascii	"SEGGER_RTT_AllocUpBuffer\000"
 7266      45525F52 
 7266      54545F41 
 7266      6C6C6F63 
 7266      55704275 
 7267              	.LASF4:
 7268 0503 756E7369 		.ascii	"unsigned char\000"
 7268      676E6564 
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 169


 7268      20636861 
 7268      7200
 7269              	.LASF56:
 7270 0511 53454747 		.ascii	"SEGGER_RTT_WriteString\000"
 7270      45525F52 
 7270      54545F57 
 7270      72697465 
 7270      53747269 
 7271              	.LASF5:
 7272 0528 73686F72 		.ascii	"short int\000"
 7272      7420696E 
 7272      7400
 7273              	.LASF77:
 7274 0532 46726167 		.ascii	"FragLen\000"
 7274      4C656E00 
 7275              	.LASF48:
 7276 053a 5F534547 		.ascii	"_SEGGER_RTT__LockState\000"
 7276      4745525F 
 7276      5254545F 
 7276      5F4C6F63 
 7276      6B537461 
 7277              	.LASF74:
 7278 0551 53454747 		.ascii	"SEGGER_RTT_SetFlagsDownBuffer\000"
 7278      45525F52 
 7278      54545F53 
 7278      6574466C 
 7278      61677344 
 7279              	.LASF49:
 7280 056f 53454747 		.ascii	"SEGGER_RTT_Read\000"
 7280      45525F52 
 7280      54545F52 
 7280      65616400 
 7281              	.LASF23:
 7282 057f 61446F77 		.ascii	"aDown\000"
 7282      6E00
 7283              	.LASF53:
 7284 0585 53454747 		.ascii	"SEGGER_RTT_WriteNoLock\000"
 7284      45525F52 
 7284      54545F57 
 7284      72697465 
 7284      4E6F4C6F 
 7285              	.LASF11:
 7286 059c 63686172 		.ascii	"char\000"
 7286      00
 7287              	.LASF51:
 7288 05a1 53454747 		.ascii	"SEGGER_RTT_WriteDownBufferNoLock\000"
 7288      45525F52 
 7288      54545F57 
 7288      72697465 
 7288      446F776E 
 7289              	.LASF37:
 7290 05c2 5F577269 		.ascii	"_WriteBlocking\000"
 7290      7465426C 
 7290      6F636B69 
 7290      6E6700
 7291              	.LASF71:
 7292 05d1 53454747 		.ascii	"SEGGER_RTT_SetNameUpBuffer\000"
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 170


 7292      45525F52 
 7292      54545F53 
 7292      65744E61 
 7292      6D655570 
 7293              	.LASF17:
 7294 05ec 466C6167 		.ascii	"Flags\000"
 7294      7300
 7295              	.LASF27:
 7296 05f2 4E756D42 		.ascii	"NumBytes\000"
 7296      79746573 
 7296      00
 7297              	.LASF85:
 7298 05fb 2E2E5C53 		.ascii	"..\\SEGGER\\SEGGER_RTT.c\000"
 7298      45474745 
 7298      525C5345 
 7298      47474552 
 7298      5F525454 
 7299              	.LASF42:
 7300 0612 4E756D42 		.ascii	"NumBytesRead\000"
 7300      79746573 
 7300      52656164 
 7300      00
 7301              	.LASF57:
 7302 061f 53454747 		.ascii	"SEGGER_RTT_PutCharSkipNoLock\000"
 7302      45525F52 
 7302      54545F50 
 7302      75744368 
 7302      6172536B 
 7303              	.LASF25:
 7304 063c 5F61496E 		.ascii	"_aInitStr\000"
 7304      69745374 
 7304      7200
 7305              	.LASF76:
 7306 0646 53454747 		.ascii	"SEGGER_RTT_TerminalOut\000"
 7306      45525F52 
 7306      54545F54 
 7306      65726D69 
 7306      6E616C4F 
 7307              	.LASF41:
 7308 065d 4E756D42 		.ascii	"NumBytesRem\000"
 7308      79746573 
 7308      52656D00 
 7309              	.LASF83:
 7310 0669 5F416374 		.ascii	"_ActiveTerminal\000"
 7310      69766554 
 7310      65726D69 
 7310      6E616C00 
 7311              	.LASF35:
 7312 0679 5F506F73 		.ascii	"_PostTerminalSwitch\000"
 7312      74546572 
 7312      6D696E61 
 7312      6C537769 
 7312      74636800 
 7313              	.LASF80:
 7314 068d 5F615465 		.ascii	"_aTerminalId\000"
 7314      726D696E 
 7314      616C4964 
ARM GAS  C:\Users\ali\AppData\Local\Temp\cc8NxQFs.s 			page 171


 7314      00
 7315              	.LASF44:
 7316 069a 70525454 		.ascii	"pRTTCBInit\000"
 7316      4342496E 
 7316      697400
 7317              	.LASF15:
 7318 06a5 57724F66 		.ascii	"WrOff\000"
 7318      6600
 7319              	.LASF61:
 7320 06ab 53454747 		.ascii	"SEGGER_RTT_WaitKey\000"
 7320      45525F52 
 7320      54545F57 
 7320      6169744B 
 7320      657900
 7321              	.LASF36:
 7322 06be 5465726D 		.ascii	"TerminalId\000"
 7322      696E616C 
 7322      496400
 7323              	.LASF52:
 7324 06c9 53746174 		.ascii	"Status\000"
 7324      757300
 7325              	.LASF62:
 7326 06d0 53454747 		.ascii	"SEGGER_RTT_HasKey\000"
 7326      45525F52 
 7326      54545F48 
 7326      61734B65 
 7326      7900
 7327              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
