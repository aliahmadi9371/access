
iot-accesscontrol-stcore-8MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08008800  08008800  00000800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a720  080089e4  080089e4  000009e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f30  08013104  08013104  0000b104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014034  08014034  0000d08c  2**0
                  CONTENTS
  4 .ARM          00000008  08014034  08014034  0000c034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801403c  0801403c  0000d08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801403c  0801403c  0000c03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014040  08014040  0000c040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08014044  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032e0  20000090  080140d0  0000d090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003370  080140d0  0000d370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b175  00000000  00000000  0000d0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004445  00000000  00000000  0002822a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  0002c670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001015  00000000  00000000  0002db48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f9b4  00000000  00000000  0002eb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e419  00000000  00000000  0004e511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a98f1  00000000  00000000  0006c92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009a  00000000  00000000  0011621b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006140  00000000  00000000  001162b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0011c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080089e4 <__do_global_dtors_aux>:
 80089e4:	b510      	push	{r4, lr}
 80089e6:	4c05      	ldr	r4, [pc, #20]	@ (80089fc <__do_global_dtors_aux+0x18>)
 80089e8:	7823      	ldrb	r3, [r4, #0]
 80089ea:	b933      	cbnz	r3, 80089fa <__do_global_dtors_aux+0x16>
 80089ec:	4b04      	ldr	r3, [pc, #16]	@ (8008a00 <__do_global_dtors_aux+0x1c>)
 80089ee:	b113      	cbz	r3, 80089f6 <__do_global_dtors_aux+0x12>
 80089f0:	4804      	ldr	r0, [pc, #16]	@ (8008a04 <__do_global_dtors_aux+0x20>)
 80089f2:	f3af 8000 	nop.w
 80089f6:	2301      	movs	r3, #1
 80089f8:	7023      	strb	r3, [r4, #0]
 80089fa:	bd10      	pop	{r4, pc}
 80089fc:	20000090 	.word	0x20000090
 8008a00:	00000000 	.word	0x00000000
 8008a04:	080130ec 	.word	0x080130ec

08008a08 <frame_dummy>:
 8008a08:	b508      	push	{r3, lr}
 8008a0a:	4b03      	ldr	r3, [pc, #12]	@ (8008a18 <frame_dummy+0x10>)
 8008a0c:	b11b      	cbz	r3, 8008a16 <frame_dummy+0xe>
 8008a0e:	4903      	ldr	r1, [pc, #12]	@ (8008a1c <frame_dummy+0x14>)
 8008a10:	4803      	ldr	r0, [pc, #12]	@ (8008a20 <frame_dummy+0x18>)
 8008a12:	f3af 8000 	nop.w
 8008a16:	bd08      	pop	{r3, pc}
 8008a18:	00000000 	.word	0x00000000
 8008a1c:	20000094 	.word	0x20000094
 8008a20:	080130ec 	.word	0x080130ec

08008a24 <PendSV_Handler>:
 8008a24:	4841      	ldr	r0, [pc, #260]	@ (8008b2c <OS_SwitchFromInt+0x12>)
 8008a26:	6881      	ldr	r1, [r0, #8]
 8008a28:	2900      	cmp	r1, #0
 8008a2a:	bf04      	itt	eq
 8008a2c:	b008      	addeq	sp, #32
 8008a2e:	e007      	beq.n	8008a40 <SaveCompleted>
 8008a30:	f3ef 8209 	mrs	r2, PSP
 8008a34:	f1a2 0228 	sub.w	r2, r2, #40	@ 0x28
 8008a38:	604a      	str	r2, [r1, #4]
 8008a3a:	6803      	ldr	r3, [r0, #0]
 8008a3c:	e882 4ff8 	stmia.w	r2, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

08008a40 <SaveCompleted>:
 8008a40:	493b      	ldr	r1, [pc, #236]	@ (8008b30 <OS_SwitchFromInt+0x16>)
 8008a42:	4788      	blx	r1
 8008a44:	6881      	ldr	r1, [r0, #8]
 8008a46:	b199      	cbz	r1, 8008a70 <StartIdle>
 8008a48:	684a      	ldr	r2, [r1, #4]
 8008a4a:	e892 4ff8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4e:	6003      	str	r3, [r0, #0]
 8008a50:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8008a54:	f382 8809 	msr	PSP, r2
 8008a58:	6990      	ldr	r0, [r2, #24]
 8008a5a:	4936      	ldr	r1, [pc, #216]	@ (8008b34 <OS_SwitchFromInt+0x1a>)
 8008a5c:	4288      	cmp	r0, r1
 8008a5e:	db02      	blt.n	8008a66 <RestorePreemptive>
 8008a60:	4a35      	ldr	r2, [pc, #212]	@ (8008b38 <OS_SwitchFromInt+0x1e>)
 8008a62:	4290      	cmp	r0, r2
 8008a64:	db03      	blt.n	8008a6e <RestoreCooperative>

08008a66 <RestorePreemptive>:
 8008a66:	f04f 0100 	mov.w	r1, #0
 8008a6a:	f381 8811 	msr	BASEPRI, r1

08008a6e <RestoreCooperative>:
 8008a6e:	4770      	bx	lr

08008a70 <StartIdle>:
 8008a70:	4832      	ldr	r0, [pc, #200]	@ (8008b3c <OS_SwitchFromInt+0x22>)
 8008a72:	4933      	ldr	r1, [pc, #204]	@ (8008b40 <OS_SwitchFromInt+0x26>)
 8008a74:	6809      	ldr	r1, [r1, #0]
 8008a76:	1a40      	subs	r0, r0, r1
 8008a78:	f380 8808 	msr	MSP, r0
 8008a7c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8008a80:	61c1      	str	r1, [r0, #28]
 8008a82:	4930      	ldr	r1, [pc, #192]	@ (8008b44 <OS_SwitchFromInt+0x2a>)
 8008a84:	6181      	str	r1, [r0, #24]
 8008a86:	f07f 0e06 	mvns.w	lr, #6
 8008a8a:	4770      	bx	lr

08008a8c <OS_StartTask>:
 8008a8c:	bc01      	pop	{r0}
 8008a8e:	482e      	ldr	r0, [pc, #184]	@ (8008b48 <OS_SwitchFromInt+0x2e>)
 8008a90:	4780      	blx	r0
 8008a92:	4620      	mov	r0, r4
 8008a94:	bc02      	pop	{r1}
 8008a96:	4788      	blx	r1
 8008a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a9c:	492b      	ldr	r1, [pc, #172]	@ (8008b4c <OS_SwitchFromInt+0x32>)
 8008a9e:	4708      	bx	r1

08008aa0 <OS_StartASM>:
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d007      	beq.n	8008ab4 <SkipSaveMainContext>
 8008aa4:	f3ef 8114 	mrs	r1, CONTROL
 8008aa8:	466a      	mov	r2, sp
 8008aaa:	4673      	mov	r3, lr
 8008aac:	e880 0ffe 	stmia.w	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008ab0:	4827      	ldr	r0, [pc, #156]	@ (8008b50 <OS_SwitchFromInt+0x36>)
 8008ab2:	4780      	blx	r0

08008ab4 <SkipSaveMainContext>:
 8008ab4:	4827      	ldr	r0, [pc, #156]	@ (8008b54 <OS_SwitchFromInt+0x3a>)
 8008ab6:	4922      	ldr	r1, [pc, #136]	@ (8008b40 <OS_SwitchFromInt+0x26>)
 8008ab8:	6809      	ldr	r1, [r1, #0]
 8008aba:	1a40      	subs	r0, r0, r1
 8008abc:	f020 0007 	bic.w	r0, r0, #7
 8008ac0:	f380 8808 	msr	MSP, r0
 8008ac4:	f04f 0100 	mov.w	r1, #0
 8008ac8:	4818      	ldr	r0, [pc, #96]	@ (8008b2c <OS_SwitchFromInt+0x12>)
 8008aca:	7041      	strb	r1, [r0, #1]
 8008acc:	f381 8811 	msr	BASEPRI, r1
 8008ad0:	b662      	cpsie	i
 8008ad2:	4921      	ldr	r1, [pc, #132]	@ (8008b58 <OS_SwitchFromInt+0x3e>)
 8008ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ad8:	600a      	str	r2, [r1, #0]
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	f3bf 8f6f 	isb	sy

08008ae2 <Loop>:
 8008ae2:	e7fe      	b.n	8008ae2 <Loop>

08008ae4 <OS_StopASM>:
 8008ae4:	e890 0ffe 	ldmia.w	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008ae8:	f381 8814 	msr	CONTROL, r1
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	4695      	mov	sp, r2
 8008af2:	469e      	mov	lr, r3
 8008af4:	4770      	bx	lr

08008af6 <OS_Switch>:
 8008af6:	6803      	ldr	r3, [r0, #0]
 8008af8:	b40c      	push	{r2, r3}
 8008afa:	f04f 0100 	mov.w	r1, #0
 8008afe:	7041      	strb	r1, [r0, #1]
 8008b00:	f381 8811 	msr	BASEPRI, r1
 8008b04:	4914      	ldr	r1, [pc, #80]	@ (8008b58 <OS_SwitchFromInt+0x3e>)
 8008b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b0a:	600a      	str	r2, [r1, #0]
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	f3bf 8f6f 	isb	sy

08008b14 <OS_SwitchAfterISR_CortexM>:
 8008b14:	bc0c      	pop	{r2, r3}
 8008b16:	6003      	str	r3, [r0, #0]

08008b18 <OS_Switch_End>:
 8008b18:	4770      	bx	lr

08008b1a <OS_SwitchFromInt>:
 8008b1a:	490f      	ldr	r1, [pc, #60]	@ (8008b58 <OS_SwitchFromInt+0x3e>)
 8008b1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b20:	600a      	str	r2, [r1, #0]
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	4770      	bx	lr
 8008b2c:	20003088 	.word	0x20003088
 8008b30:	08010e99 	.word	0x08010e99
 8008b34:	08008af7 	.word	0x08008af7
 8008b38:	08008b18 	.word	0x08008b18
 8008b3c:	20003950 	.word	0x20003950
 8008b40:	08013df4 	.word	0x08013df4
 8008b44:	0800fe9d 	.word	0x0800fe9d
 8008b48:	08010e69 	.word	0x08010e69
 8008b4c:	08010e85 	.word	0x08010e85
 8008b50:	08010e31 	.word	0x08010e31
 8008b54:	20003970 	.word	0x20003970
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <strlen>:
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b62:	2a00      	cmp	r2, #0
 8008b64:	d1fb      	bne.n	8008b5e <strlen+0x2>
 8008b66:	1a18      	subs	r0, r3, r0
 8008b68:	3801      	subs	r0, #1
 8008b6a:	4770      	bx	lr

08008b6c <__aeabi_drsub>:
 8008b6c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8008b70:	e002      	b.n	8008b78 <__adddf3>
 8008b72:	bf00      	nop

08008b74 <__aeabi_dsub>:
 8008b74:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08008b78 <__adddf3>:
 8008b78:	b530      	push	{r4, r5, lr}
 8008b7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008b7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008b82:	ea94 0f05 	teq	r4, r5
 8008b86:	bf08      	it	eq
 8008b88:	ea90 0f02 	teqeq	r0, r2
 8008b8c:	bf1f      	itttt	ne
 8008b8e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008b92:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008b96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008b9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008b9e:	f000 80e2 	beq.w	8008d66 <__adddf3+0x1ee>
 8008ba2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008ba6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008baa:	bfb8      	it	lt
 8008bac:	426d      	neglt	r5, r5
 8008bae:	dd0c      	ble.n	8008bca <__adddf3+0x52>
 8008bb0:	442c      	add	r4, r5
 8008bb2:	ea80 0202 	eor.w	r2, r0, r2
 8008bb6:	ea81 0303 	eor.w	r3, r1, r3
 8008bba:	ea82 0000 	eor.w	r0, r2, r0
 8008bbe:	ea83 0101 	eor.w	r1, r3, r1
 8008bc2:	ea80 0202 	eor.w	r2, r0, r2
 8008bc6:	ea81 0303 	eor.w	r3, r1, r3
 8008bca:	2d36      	cmp	r5, #54	@ 0x36
 8008bcc:	bf88      	it	hi
 8008bce:	bd30      	pophi	{r4, r5, pc}
 8008bd0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008bd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008bd8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008bdc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008be0:	d002      	beq.n	8008be8 <__adddf3+0x70>
 8008be2:	4240      	negs	r0, r0
 8008be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008be8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008bec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008bf0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008bf4:	d002      	beq.n	8008bfc <__adddf3+0x84>
 8008bf6:	4252      	negs	r2, r2
 8008bf8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008bfc:	ea94 0f05 	teq	r4, r5
 8008c00:	f000 80a7 	beq.w	8008d52 <__adddf3+0x1da>
 8008c04:	f1a4 0401 	sub.w	r4, r4, #1
 8008c08:	f1d5 0e20 	rsbs	lr, r5, #32
 8008c0c:	db0d      	blt.n	8008c2a <__adddf3+0xb2>
 8008c0e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008c12:	fa22 f205 	lsr.w	r2, r2, r5
 8008c16:	1880      	adds	r0, r0, r2
 8008c18:	f141 0100 	adc.w	r1, r1, #0
 8008c1c:	fa03 f20e 	lsl.w	r2, r3, lr
 8008c20:	1880      	adds	r0, r0, r2
 8008c22:	fa43 f305 	asr.w	r3, r3, r5
 8008c26:	4159      	adcs	r1, r3
 8008c28:	e00e      	b.n	8008c48 <__adddf3+0xd0>
 8008c2a:	f1a5 0520 	sub.w	r5, r5, #32
 8008c2e:	f10e 0e20 	add.w	lr, lr, #32
 8008c32:	2a01      	cmp	r2, #1
 8008c34:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008c38:	bf28      	it	cs
 8008c3a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008c3e:	fa43 f305 	asr.w	r3, r3, r5
 8008c42:	18c0      	adds	r0, r0, r3
 8008c44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008c48:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008c4c:	d507      	bpl.n	8008c5e <__adddf3+0xe6>
 8008c4e:	f04f 0e00 	mov.w	lr, #0
 8008c52:	f1dc 0c00 	rsbs	ip, ip, #0
 8008c56:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008c5a:	eb6e 0101 	sbc.w	r1, lr, r1
 8008c5e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008c62:	d31b      	bcc.n	8008c9c <__adddf3+0x124>
 8008c64:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8008c68:	d30c      	bcc.n	8008c84 <__adddf3+0x10c>
 8008c6a:	0849      	lsrs	r1, r1, #1
 8008c6c:	ea5f 0030 	movs.w	r0, r0, rrx
 8008c70:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008c74:	f104 0401 	add.w	r4, r4, #1
 8008c78:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008c7c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8008c80:	f080 809a 	bcs.w	8008db8 <__adddf3+0x240>
 8008c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8008c88:	bf08      	it	eq
 8008c8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008c8e:	f150 0000 	adcs.w	r0, r0, #0
 8008c92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008c96:	ea41 0105 	orr.w	r1, r1, r5
 8008c9a:	bd30      	pop	{r4, r5, pc}
 8008c9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008ca0:	4140      	adcs	r0, r0
 8008ca2:	eb41 0101 	adc.w	r1, r1, r1
 8008ca6:	3c01      	subs	r4, #1
 8008ca8:	bf28      	it	cs
 8008caa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008cae:	d2e9      	bcs.n	8008c84 <__adddf3+0x10c>
 8008cb0:	f091 0f00 	teq	r1, #0
 8008cb4:	bf04      	itt	eq
 8008cb6:	4601      	moveq	r1, r0
 8008cb8:	2000      	moveq	r0, #0
 8008cba:	fab1 f381 	clz	r3, r1
 8008cbe:	bf08      	it	eq
 8008cc0:	3320      	addeq	r3, #32
 8008cc2:	f1a3 030b 	sub.w	r3, r3, #11
 8008cc6:	f1b3 0220 	subs.w	r2, r3, #32
 8008cca:	da0c      	bge.n	8008ce6 <__adddf3+0x16e>
 8008ccc:	320c      	adds	r2, #12
 8008cce:	dd08      	ble.n	8008ce2 <__adddf3+0x16a>
 8008cd0:	f102 0c14 	add.w	ip, r2, #20
 8008cd4:	f1c2 020c 	rsb	r2, r2, #12
 8008cd8:	fa01 f00c 	lsl.w	r0, r1, ip
 8008cdc:	fa21 f102 	lsr.w	r1, r1, r2
 8008ce0:	e00c      	b.n	8008cfc <__adddf3+0x184>
 8008ce2:	f102 0214 	add.w	r2, r2, #20
 8008ce6:	bfd8      	it	le
 8008ce8:	f1c2 0c20 	rsble	ip, r2, #32
 8008cec:	fa01 f102 	lsl.w	r1, r1, r2
 8008cf0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008cf4:	bfdc      	itt	le
 8008cf6:	ea41 010c 	orrle.w	r1, r1, ip
 8008cfa:	4090      	lslle	r0, r2
 8008cfc:	1ae4      	subs	r4, r4, r3
 8008cfe:	bfa2      	ittt	ge
 8008d00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008d04:	4329      	orrge	r1, r5
 8008d06:	bd30      	popge	{r4, r5, pc}
 8008d08:	ea6f 0404 	mvn.w	r4, r4
 8008d0c:	3c1f      	subs	r4, #31
 8008d0e:	da1c      	bge.n	8008d4a <__adddf3+0x1d2>
 8008d10:	340c      	adds	r4, #12
 8008d12:	dc0e      	bgt.n	8008d32 <__adddf3+0x1ba>
 8008d14:	f104 0414 	add.w	r4, r4, #20
 8008d18:	f1c4 0220 	rsb	r2, r4, #32
 8008d1c:	fa20 f004 	lsr.w	r0, r0, r4
 8008d20:	fa01 f302 	lsl.w	r3, r1, r2
 8008d24:	ea40 0003 	orr.w	r0, r0, r3
 8008d28:	fa21 f304 	lsr.w	r3, r1, r4
 8008d2c:	ea45 0103 	orr.w	r1, r5, r3
 8008d30:	bd30      	pop	{r4, r5, pc}
 8008d32:	f1c4 040c 	rsb	r4, r4, #12
 8008d36:	f1c4 0220 	rsb	r2, r4, #32
 8008d3a:	fa20 f002 	lsr.w	r0, r0, r2
 8008d3e:	fa01 f304 	lsl.w	r3, r1, r4
 8008d42:	ea40 0003 	orr.w	r0, r0, r3
 8008d46:	4629      	mov	r1, r5
 8008d48:	bd30      	pop	{r4, r5, pc}
 8008d4a:	fa21 f004 	lsr.w	r0, r1, r4
 8008d4e:	4629      	mov	r1, r5
 8008d50:	bd30      	pop	{r4, r5, pc}
 8008d52:	f094 0f00 	teq	r4, #0
 8008d56:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8008d5a:	bf06      	itte	eq
 8008d5c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8008d60:	3401      	addeq	r4, #1
 8008d62:	3d01      	subne	r5, #1
 8008d64:	e74e      	b.n	8008c04 <__adddf3+0x8c>
 8008d66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008d6a:	bf18      	it	ne
 8008d6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008d70:	d029      	beq.n	8008dc6 <__adddf3+0x24e>
 8008d72:	ea94 0f05 	teq	r4, r5
 8008d76:	bf08      	it	eq
 8008d78:	ea90 0f02 	teqeq	r0, r2
 8008d7c:	d005      	beq.n	8008d8a <__adddf3+0x212>
 8008d7e:	ea54 0c00 	orrs.w	ip, r4, r0
 8008d82:	bf04      	itt	eq
 8008d84:	4619      	moveq	r1, r3
 8008d86:	4610      	moveq	r0, r2
 8008d88:	bd30      	pop	{r4, r5, pc}
 8008d8a:	ea91 0f03 	teq	r1, r3
 8008d8e:	bf1e      	ittt	ne
 8008d90:	2100      	movne	r1, #0
 8008d92:	2000      	movne	r0, #0
 8008d94:	bd30      	popne	{r4, r5, pc}
 8008d96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008d9a:	d105      	bne.n	8008da8 <__adddf3+0x230>
 8008d9c:	0040      	lsls	r0, r0, #1
 8008d9e:	4149      	adcs	r1, r1
 8008da0:	bf28      	it	cs
 8008da2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8008da6:	bd30      	pop	{r4, r5, pc}
 8008da8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008dac:	bf3c      	itt	cc
 8008dae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008db2:	bd30      	popcc	{r4, r5, pc}
 8008db4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008db8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008dbc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008dc0:	f04f 0000 	mov.w	r0, #0
 8008dc4:	bd30      	pop	{r4, r5, pc}
 8008dc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008dca:	bf1a      	itte	ne
 8008dcc:	4619      	movne	r1, r3
 8008dce:	4610      	movne	r0, r2
 8008dd0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008dd4:	bf1c      	itt	ne
 8008dd6:	460b      	movne	r3, r1
 8008dd8:	4602      	movne	r2, r0
 8008dda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008dde:	bf06      	itte	eq
 8008de0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008de4:	ea91 0f03 	teqeq	r1, r3
 8008de8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008dec:	bd30      	pop	{r4, r5, pc}
 8008dee:	bf00      	nop

08008df0 <__aeabi_ui2d>:
 8008df0:	f090 0f00 	teq	r0, #0
 8008df4:	bf04      	itt	eq
 8008df6:	2100      	moveq	r1, #0
 8008df8:	4770      	bxeq	lr
 8008dfa:	b530      	push	{r4, r5, lr}
 8008dfc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008e00:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008e04:	f04f 0500 	mov.w	r5, #0
 8008e08:	f04f 0100 	mov.w	r1, #0
 8008e0c:	e750      	b.n	8008cb0 <__adddf3+0x138>
 8008e0e:	bf00      	nop

08008e10 <__aeabi_i2d>:
 8008e10:	f090 0f00 	teq	r0, #0
 8008e14:	bf04      	itt	eq
 8008e16:	2100      	moveq	r1, #0
 8008e18:	4770      	bxeq	lr
 8008e1a:	b530      	push	{r4, r5, lr}
 8008e1c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008e20:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008e24:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8008e28:	bf48      	it	mi
 8008e2a:	4240      	negmi	r0, r0
 8008e2c:	f04f 0100 	mov.w	r1, #0
 8008e30:	e73e      	b.n	8008cb0 <__adddf3+0x138>
 8008e32:	bf00      	nop

08008e34 <__aeabi_f2d>:
 8008e34:	0042      	lsls	r2, r0, #1
 8008e36:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8008e3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008e42:	bf1f      	itttt	ne
 8008e44:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8008e48:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8008e4c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8008e50:	4770      	bxne	lr
 8008e52:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8008e56:	bf08      	it	eq
 8008e58:	4770      	bxeq	lr
 8008e5a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8008e5e:	bf04      	itt	eq
 8008e60:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8008e64:	4770      	bxeq	lr
 8008e66:	b530      	push	{r4, r5, lr}
 8008e68:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8008e6c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008e70:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008e74:	e71c      	b.n	8008cb0 <__adddf3+0x138>
 8008e76:	bf00      	nop

08008e78 <__aeabi_ul2d>:
 8008e78:	ea50 0201 	orrs.w	r2, r0, r1
 8008e7c:	bf08      	it	eq
 8008e7e:	4770      	bxeq	lr
 8008e80:	b530      	push	{r4, r5, lr}
 8008e82:	f04f 0500 	mov.w	r5, #0
 8008e86:	e00a      	b.n	8008e9e <__aeabi_l2d+0x16>

08008e88 <__aeabi_l2d>:
 8008e88:	ea50 0201 	orrs.w	r2, r0, r1
 8008e8c:	bf08      	it	eq
 8008e8e:	4770      	bxeq	lr
 8008e90:	b530      	push	{r4, r5, lr}
 8008e92:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8008e96:	d502      	bpl.n	8008e9e <__aeabi_l2d+0x16>
 8008e98:	4240      	negs	r0, r0
 8008e9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008e9e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008ea2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008ea6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008eaa:	f43f aed8 	beq.w	8008c5e <__adddf3+0xe6>
 8008eae:	f04f 0203 	mov.w	r2, #3
 8008eb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008eb6:	bf18      	it	ne
 8008eb8:	3203      	addne	r2, #3
 8008eba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008ebe:	bf18      	it	ne
 8008ec0:	3203      	addne	r2, #3
 8008ec2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008ec6:	f1c2 0320 	rsb	r3, r2, #32
 8008eca:	fa00 fc03 	lsl.w	ip, r0, r3
 8008ece:	fa20 f002 	lsr.w	r0, r0, r2
 8008ed2:	fa01 fe03 	lsl.w	lr, r1, r3
 8008ed6:	ea40 000e 	orr.w	r0, r0, lr
 8008eda:	fa21 f102 	lsr.w	r1, r1, r2
 8008ede:	4414      	add	r4, r2
 8008ee0:	e6bd      	b.n	8008c5e <__adddf3+0xe6>
 8008ee2:	bf00      	nop

08008ee4 <__aeabi_dmul>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8008eea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008eee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008ef2:	bf1d      	ittte	ne
 8008ef4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008ef8:	ea94 0f0c 	teqne	r4, ip
 8008efc:	ea95 0f0c 	teqne	r5, ip
 8008f00:	f000 f8de 	bleq	80090c0 <__aeabi_dmul+0x1dc>
 8008f04:	442c      	add	r4, r5
 8008f06:	ea81 0603 	eor.w	r6, r1, r3
 8008f0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008f0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008f12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008f16:	bf18      	it	ne
 8008f18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008f1c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008f20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f24:	d038      	beq.n	8008f98 <__aeabi_dmul+0xb4>
 8008f26:	fba0 ce02 	umull	ip, lr, r0, r2
 8008f2a:	f04f 0500 	mov.w	r5, #0
 8008f2e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008f32:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8008f36:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008f3a:	f04f 0600 	mov.w	r6, #0
 8008f3e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008f42:	f09c 0f00 	teq	ip, #0
 8008f46:	bf18      	it	ne
 8008f48:	f04e 0e01 	orrne.w	lr, lr, #1
 8008f4c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8008f50:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8008f54:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8008f58:	d204      	bcs.n	8008f64 <__aeabi_dmul+0x80>
 8008f5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008f5e:	416d      	adcs	r5, r5
 8008f60:	eb46 0606 	adc.w	r6, r6, r6
 8008f64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008f68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008f6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008f70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008f74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008f78:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8008f7c:	bf88      	it	hi
 8008f7e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008f82:	d81e      	bhi.n	8008fc2 <__aeabi_dmul+0xde>
 8008f84:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8008f88:	bf08      	it	eq
 8008f8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008f8e:	f150 0000 	adcs.w	r0, r0, #0
 8008f92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008f9c:	ea46 0101 	orr.w	r1, r6, r1
 8008fa0:	ea40 0002 	orr.w	r0, r0, r2
 8008fa4:	ea81 0103 	eor.w	r1, r1, r3
 8008fa8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008fac:	bfc2      	ittt	gt
 8008fae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008fb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008fb6:	bd70      	popgt	{r4, r5, r6, pc}
 8008fb8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008fbc:	f04f 0e00 	mov.w	lr, #0
 8008fc0:	3c01      	subs	r4, #1
 8008fc2:	f300 80ab 	bgt.w	800911c <__aeabi_dmul+0x238>
 8008fc6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8008fca:	bfde      	ittt	le
 8008fcc:	2000      	movle	r0, #0
 8008fce:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008fd2:	bd70      	pople	{r4, r5, r6, pc}
 8008fd4:	f1c4 0400 	rsb	r4, r4, #0
 8008fd8:	3c20      	subs	r4, #32
 8008fda:	da35      	bge.n	8009048 <__aeabi_dmul+0x164>
 8008fdc:	340c      	adds	r4, #12
 8008fde:	dc1b      	bgt.n	8009018 <__aeabi_dmul+0x134>
 8008fe0:	f104 0414 	add.w	r4, r4, #20
 8008fe4:	f1c4 0520 	rsb	r5, r4, #32
 8008fe8:	fa00 f305 	lsl.w	r3, r0, r5
 8008fec:	fa20 f004 	lsr.w	r0, r0, r4
 8008ff0:	fa01 f205 	lsl.w	r2, r1, r5
 8008ff4:	ea40 0002 	orr.w	r0, r0, r2
 8008ff8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008ffc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8009000:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009004:	fa21 f604 	lsr.w	r6, r1, r4
 8009008:	eb42 0106 	adc.w	r1, r2, r6
 800900c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009010:	bf08      	it	eq
 8009012:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	f1c4 040c 	rsb	r4, r4, #12
 800901c:	f1c4 0520 	rsb	r5, r4, #32
 8009020:	fa00 f304 	lsl.w	r3, r0, r4
 8009024:	fa20 f005 	lsr.w	r0, r0, r5
 8009028:	fa01 f204 	lsl.w	r2, r1, r4
 800902c:	ea40 0002 	orr.w	r0, r0, r2
 8009030:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8009034:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009038:	f141 0100 	adc.w	r1, r1, #0
 800903c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009040:	bf08      	it	eq
 8009042:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009046:	bd70      	pop	{r4, r5, r6, pc}
 8009048:	f1c4 0520 	rsb	r5, r4, #32
 800904c:	fa00 f205 	lsl.w	r2, r0, r5
 8009050:	ea4e 0e02 	orr.w	lr, lr, r2
 8009054:	fa20 f304 	lsr.w	r3, r0, r4
 8009058:	fa01 f205 	lsl.w	r2, r1, r5
 800905c:	ea43 0302 	orr.w	r3, r3, r2
 8009060:	fa21 f004 	lsr.w	r0, r1, r4
 8009064:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8009068:	fa21 f204 	lsr.w	r2, r1, r4
 800906c:	ea20 0002 	bic.w	r0, r0, r2
 8009070:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8009074:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009078:	bf08      	it	eq
 800907a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800907e:	bd70      	pop	{r4, r5, r6, pc}
 8009080:	f094 0f00 	teq	r4, #0
 8009084:	d10f      	bne.n	80090a6 <__aeabi_dmul+0x1c2>
 8009086:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800908a:	0040      	lsls	r0, r0, #1
 800908c:	eb41 0101 	adc.w	r1, r1, r1
 8009090:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8009094:	bf08      	it	eq
 8009096:	3c01      	subeq	r4, #1
 8009098:	d0f7      	beq.n	800908a <__aeabi_dmul+0x1a6>
 800909a:	ea41 0106 	orr.w	r1, r1, r6
 800909e:	f095 0f00 	teq	r5, #0
 80090a2:	bf18      	it	ne
 80090a4:	4770      	bxne	lr
 80090a6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80090aa:	0052      	lsls	r2, r2, #1
 80090ac:	eb43 0303 	adc.w	r3, r3, r3
 80090b0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80090b4:	bf08      	it	eq
 80090b6:	3d01      	subeq	r5, #1
 80090b8:	d0f7      	beq.n	80090aa <__aeabi_dmul+0x1c6>
 80090ba:	ea43 0306 	orr.w	r3, r3, r6
 80090be:	4770      	bx	lr
 80090c0:	ea94 0f0c 	teq	r4, ip
 80090c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80090c8:	bf18      	it	ne
 80090ca:	ea95 0f0c 	teqne	r5, ip
 80090ce:	d00c      	beq.n	80090ea <__aeabi_dmul+0x206>
 80090d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80090d4:	bf18      	it	ne
 80090d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80090da:	d1d1      	bne.n	8009080 <__aeabi_dmul+0x19c>
 80090dc:	ea81 0103 	eor.w	r1, r1, r3
 80090e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	bd70      	pop	{r4, r5, r6, pc}
 80090ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80090ee:	bf06      	itte	eq
 80090f0:	4610      	moveq	r0, r2
 80090f2:	4619      	moveq	r1, r3
 80090f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80090f8:	d019      	beq.n	800912e <__aeabi_dmul+0x24a>
 80090fa:	ea94 0f0c 	teq	r4, ip
 80090fe:	d102      	bne.n	8009106 <__aeabi_dmul+0x222>
 8009100:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8009104:	d113      	bne.n	800912e <__aeabi_dmul+0x24a>
 8009106:	ea95 0f0c 	teq	r5, ip
 800910a:	d105      	bne.n	8009118 <__aeabi_dmul+0x234>
 800910c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8009110:	bf1c      	itt	ne
 8009112:	4610      	movne	r0, r2
 8009114:	4619      	movne	r1, r3
 8009116:	d10a      	bne.n	800912e <__aeabi_dmul+0x24a>
 8009118:	ea81 0103 	eor.w	r1, r1, r3
 800911c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8009120:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8009124:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009128:	f04f 0000 	mov.w	r0, #0
 800912c:	bd70      	pop	{r4, r5, r6, pc}
 800912e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8009132:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8009136:	bd70      	pop	{r4, r5, r6, pc}

08009138 <__aeabi_ddiv>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800913e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8009142:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8009146:	bf1d      	ittte	ne
 8009148:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800914c:	ea94 0f0c 	teqne	r4, ip
 8009150:	ea95 0f0c 	teqne	r5, ip
 8009154:	f000 f8a7 	bleq	80092a6 <__aeabi_ddiv+0x16e>
 8009158:	eba4 0405 	sub.w	r4, r4, r5
 800915c:	ea81 0e03 	eor.w	lr, r1, r3
 8009160:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8009164:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8009168:	f000 8088 	beq.w	800927c <__aeabi_ddiv+0x144>
 800916c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009170:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8009174:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8009178:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800917c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8009180:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8009184:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8009188:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800918c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8009190:	429d      	cmp	r5, r3
 8009192:	bf08      	it	eq
 8009194:	4296      	cmpeq	r6, r2
 8009196:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800919a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800919e:	d202      	bcs.n	80091a6 <__aeabi_ddiv+0x6e>
 80091a0:	085b      	lsrs	r3, r3, #1
 80091a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80091a6:	1ab6      	subs	r6, r6, r2
 80091a8:	eb65 0503 	sbc.w	r5, r5, r3
 80091ac:	085b      	lsrs	r3, r3, #1
 80091ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80091b2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80091b6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80091ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80091be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80091c2:	bf22      	ittt	cs
 80091c4:	1ab6      	subcs	r6, r6, r2
 80091c6:	4675      	movcs	r5, lr
 80091c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80091cc:	085b      	lsrs	r3, r3, #1
 80091ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80091d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80091d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80091da:	bf22      	ittt	cs
 80091dc:	1ab6      	subcs	r6, r6, r2
 80091de:	4675      	movcs	r5, lr
 80091e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80091e4:	085b      	lsrs	r3, r3, #1
 80091e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80091ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80091ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80091f2:	bf22      	ittt	cs
 80091f4:	1ab6      	subcs	r6, r6, r2
 80091f6:	4675      	movcs	r5, lr
 80091f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80091fc:	085b      	lsrs	r3, r3, #1
 80091fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8009202:	ebb6 0e02 	subs.w	lr, r6, r2
 8009206:	eb75 0e03 	sbcs.w	lr, r5, r3
 800920a:	bf22      	ittt	cs
 800920c:	1ab6      	subcs	r6, r6, r2
 800920e:	4675      	movcs	r5, lr
 8009210:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8009214:	ea55 0e06 	orrs.w	lr, r5, r6
 8009218:	d018      	beq.n	800924c <__aeabi_ddiv+0x114>
 800921a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800921e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8009222:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8009226:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800922a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800922e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8009232:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8009236:	d1c0      	bne.n	80091ba <__aeabi_ddiv+0x82>
 8009238:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800923c:	d10b      	bne.n	8009256 <__aeabi_ddiv+0x11e>
 800923e:	ea41 0100 	orr.w	r1, r1, r0
 8009242:	f04f 0000 	mov.w	r0, #0
 8009246:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800924a:	e7b6      	b.n	80091ba <__aeabi_ddiv+0x82>
 800924c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8009250:	bf04      	itt	eq
 8009252:	4301      	orreq	r1, r0
 8009254:	2000      	moveq	r0, #0
 8009256:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800925a:	bf88      	it	hi
 800925c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8009260:	f63f aeaf 	bhi.w	8008fc2 <__aeabi_dmul+0xde>
 8009264:	ebb5 0c03 	subs.w	ip, r5, r3
 8009268:	bf04      	itt	eq
 800926a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800926e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009272:	f150 0000 	adcs.w	r0, r0, #0
 8009276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8009280:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8009284:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8009288:	bfc2      	ittt	gt
 800928a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800928e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009292:	bd70      	popgt	{r4, r5, r6, pc}
 8009294:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8009298:	f04f 0e00 	mov.w	lr, #0
 800929c:	3c01      	subs	r4, #1
 800929e:	e690      	b.n	8008fc2 <__aeabi_dmul+0xde>
 80092a0:	ea45 0e06 	orr.w	lr, r5, r6
 80092a4:	e68d      	b.n	8008fc2 <__aeabi_dmul+0xde>
 80092a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80092aa:	ea94 0f0c 	teq	r4, ip
 80092ae:	bf08      	it	eq
 80092b0:	ea95 0f0c 	teqeq	r5, ip
 80092b4:	f43f af3b 	beq.w	800912e <__aeabi_dmul+0x24a>
 80092b8:	ea94 0f0c 	teq	r4, ip
 80092bc:	d10a      	bne.n	80092d4 <__aeabi_ddiv+0x19c>
 80092be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80092c2:	f47f af34 	bne.w	800912e <__aeabi_dmul+0x24a>
 80092c6:	ea95 0f0c 	teq	r5, ip
 80092ca:	f47f af25 	bne.w	8009118 <__aeabi_dmul+0x234>
 80092ce:	4610      	mov	r0, r2
 80092d0:	4619      	mov	r1, r3
 80092d2:	e72c      	b.n	800912e <__aeabi_dmul+0x24a>
 80092d4:	ea95 0f0c 	teq	r5, ip
 80092d8:	d106      	bne.n	80092e8 <__aeabi_ddiv+0x1b0>
 80092da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80092de:	f43f aefd 	beq.w	80090dc <__aeabi_dmul+0x1f8>
 80092e2:	4610      	mov	r0, r2
 80092e4:	4619      	mov	r1, r3
 80092e6:	e722      	b.n	800912e <__aeabi_dmul+0x24a>
 80092e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80092ec:	bf18      	it	ne
 80092ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80092f2:	f47f aec5 	bne.w	8009080 <__aeabi_dmul+0x19c>
 80092f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80092fa:	f47f af0d 	bne.w	8009118 <__aeabi_dmul+0x234>
 80092fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8009302:	f47f aeeb 	bne.w	80090dc <__aeabi_dmul+0x1f8>
 8009306:	e712      	b.n	800912e <__aeabi_dmul+0x24a>

08009308 <__aeabi_d2uiz>:
 8009308:	004a      	lsls	r2, r1, #1
 800930a:	d211      	bcs.n	8009330 <__aeabi_d2uiz+0x28>
 800930c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8009310:	d211      	bcs.n	8009336 <__aeabi_d2uiz+0x2e>
 8009312:	d50d      	bpl.n	8009330 <__aeabi_d2uiz+0x28>
 8009314:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8009318:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800931c:	d40e      	bmi.n	800933c <__aeabi_d2uiz+0x34>
 800931e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009322:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009326:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800932a:	fa23 f002 	lsr.w	r0, r3, r2
 800932e:	4770      	bx	lr
 8009330:	f04f 0000 	mov.w	r0, #0
 8009334:	4770      	bx	lr
 8009336:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800933a:	d102      	bne.n	8009342 <__aeabi_d2uiz+0x3a>
 800933c:	f04f 30ff 	mov.w	r0, #4294967295
 8009340:	4770      	bx	lr
 8009342:	f04f 0000 	mov.w	r0, #0
 8009346:	4770      	bx	lr

08009348 <RGB>:
// #########################################################################################################################

// ###################################################### Functions ########################################################
//LED_RGB 3 pins
void RGB(uint8_t color)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	71fb      	strb	r3, [r7, #7]
    switch (color){
 8009352:	79fb      	ldrb	r3, [r7, #7]
 8009354:	2b06      	cmp	r3, #6
 8009356:	d857      	bhi.n	8009408 <RGB+0xc0>
 8009358:	a201      	add	r2, pc, #4	@ (adr r2, 8009360 <RGB+0x18>)
 800935a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935e:	bf00      	nop
 8009360:	0800937d 	.word	0x0800937d
 8009364:	08009391 	.word	0x08009391
 8009368:	080093a5 	.word	0x080093a5
 800936c:	080093b9 	.word	0x080093b9
 8009370:	080093cd 	.word	0x080093cd
 8009374:	080093e1 	.word	0x080093e1
 8009378:	080093f5 	.word	0x080093f5
        case 0:{
            //Error MSG
        	//White
        	RGB_RED(1);
 800937c:	2001      	movs	r0, #1
 800937e:	f000 f8cb 	bl	8009518 <RGB_RED>
        	RGB_GREEN(1);
 8009382:	2001      	movs	r0, #1
 8009384:	f000 f8e4 	bl	8009550 <RGB_GREEN>
        	RGB_BLUE(1);
 8009388:	2001      	movs	r0, #1
 800938a:	f000 f8fb 	bl	8009584 <RGB_BLUE>
            break;
 800938e:	e045      	b.n	800941c <RGB+0xd4>
        }
        case 1:{
            //Cy Up
        	//Red
        	RGB_RED(1);
 8009390:	2001      	movs	r0, #1
 8009392:	f000 f8c1 	bl	8009518 <RGB_RED>
			RGB_GREEN(0);
 8009396:	2000      	movs	r0, #0
 8009398:	f000 f8da 	bl	8009550 <RGB_GREEN>
			RGB_BLUE(0);
 800939c:	2000      	movs	r0, #0
 800939e:	f000 f8f1 	bl	8009584 <RGB_BLUE>
            break;
 80093a2:	e03b      	b.n	800941c <RGB+0xd4>
        }
        case 2:{
            //Linux Up
        	//Green
        	RGB_RED(0);
 80093a4:	2000      	movs	r0, #0
 80093a6:	f000 f8b7 	bl	8009518 <RGB_RED>
			RGB_GREEN(1);
 80093aa:	2001      	movs	r0, #1
 80093ac:	f000 f8d0 	bl	8009550 <RGB_GREEN>
			RGB_BLUE(0);
 80093b0:	2000      	movs	r0, #0
 80093b2:	f000 f8e7 	bl	8009584 <RGB_BLUE>
            break;
 80093b6:	e031      	b.n	800941c <RGB+0xd4>
        }
        case 3:{
            //Server Connected
        	//Blue
        	RGB_RED(0);
 80093b8:	2000      	movs	r0, #0
 80093ba:	f000 f8ad 	bl	8009518 <RGB_RED>
			RGB_GREEN(0);
 80093be:	2000      	movs	r0, #0
 80093c0:	f000 f8c6 	bl	8009550 <RGB_GREEN>
			RGB_BLUE(1);
 80093c4:	2001      	movs	r0, #1
 80093c6:	f000 f8dd 	bl	8009584 <RGB_BLUE>
            break;
 80093ca:	e027      	b.n	800941c <RGB+0xd4>
        }
        case 4:{
        	//Cyan
        	RGB_RED(0);
 80093cc:	2000      	movs	r0, #0
 80093ce:	f000 f8a3 	bl	8009518 <RGB_RED>
			RGB_GREEN(1);
 80093d2:	2001      	movs	r0, #1
 80093d4:	f000 f8bc 	bl	8009550 <RGB_GREEN>
			RGB_BLUE(1);
 80093d8:	2001      	movs	r0, #1
 80093da:	f000 f8d3 	bl	8009584 <RGB_BLUE>
            break;
 80093de:	e01d      	b.n	800941c <RGB+0xd4>
        }
        case 5:{
        	//Violet
        	RGB_RED(1);
 80093e0:	2001      	movs	r0, #1
 80093e2:	f000 f899 	bl	8009518 <RGB_RED>
			RGB_GREEN(0);
 80093e6:	2000      	movs	r0, #0
 80093e8:	f000 f8b2 	bl	8009550 <RGB_GREEN>
			RGB_BLUE(1);
 80093ec:	2001      	movs	r0, #1
 80093ee:	f000 f8c9 	bl	8009584 <RGB_BLUE>
            break;
 80093f2:	e013      	b.n	800941c <RGB+0xd4>
        }
        case 6:{
        	//Yellow
        	RGB_RED(1);
 80093f4:	2001      	movs	r0, #1
 80093f6:	f000 f88f 	bl	8009518 <RGB_RED>
			RGB_GREEN(1);
 80093fa:	2001      	movs	r0, #1
 80093fc:	f000 f8a8 	bl	8009550 <RGB_GREEN>
			RGB_BLUE(0);
 8009400:	2000      	movs	r0, #0
 8009402:	f000 f8bf 	bl	8009584 <RGB_BLUE>
            break;
 8009406:	e009      	b.n	800941c <RGB+0xd4>
        }
        default:{
        	//Off
        	RGB_RED(0);
 8009408:	2000      	movs	r0, #0
 800940a:	f000 f885 	bl	8009518 <RGB_RED>
			RGB_GREEN(0);
 800940e:	2000      	movs	r0, #0
 8009410:	f000 f89e 	bl	8009550 <RGB_GREEN>
			RGB_BLUE(0);
 8009414:	2000      	movs	r0, #0
 8009416:	f000 f8b5 	bl	8009584 <RGB_BLUE>
            break;
 800941a:	bf00      	nop
        }
    }

    return;
 800941c:	bf00      	nop
}
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <Relay_Port1>:

//Relays
extern void Relay_Port1(uint8_t on_off)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	4603      	mov	r3, r0
 800942c:	71fb      	strb	r3, [r7, #7]
    if(on_off)
 800942e:	79fb      	ldrb	r3, [r7, #7]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d005      	beq.n	8009440 <Relay_Port1+0x1c>
    	HAL_GPIO_WritePin(GPIOC, GPIO_Output_Relay_1_Pin, GPIO_PIN_SET);
 8009434:	2201      	movs	r2, #1
 8009436:	2108      	movs	r1, #8
 8009438:	4806      	ldr	r0, [pc, #24]	@ (8009454 <Relay_Port1+0x30>)
 800943a:	f004 f846 	bl	800d4ca <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(GPIOC, GPIO_Output_Relay_1_Pin, GPIO_PIN_RESET);
    return;
 800943e:	e005      	b.n	800944c <Relay_Port1+0x28>
    	HAL_GPIO_WritePin(GPIOC, GPIO_Output_Relay_1_Pin, GPIO_PIN_RESET);
 8009440:	2200      	movs	r2, #0
 8009442:	2108      	movs	r1, #8
 8009444:	4803      	ldr	r0, [pc, #12]	@ (8009454 <Relay_Port1+0x30>)
 8009446:	f004 f840 	bl	800d4ca <HAL_GPIO_WritePin>
    return;
 800944a:	bf00      	nop
}
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	40011000 	.word	0x40011000

08009458 <Relay_Port2>:

extern void Relay_Port2(uint8_t on_off)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	4603      	mov	r3, r0
 8009460:	71fb      	strb	r3, [r7, #7]
	if(on_off)
 8009462:	79fb      	ldrb	r3, [r7, #7]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d005      	beq.n	8009474 <Relay_Port2+0x1c>
		HAL_GPIO_WritePin(GPIOC, GPIO_Output_Relay_2_Pin, GPIO_PIN_SET);
 8009468:	2201      	movs	r2, #1
 800946a:	2120      	movs	r1, #32
 800946c:	4806      	ldr	r0, [pc, #24]	@ (8009488 <Relay_Port2+0x30>)
 800946e:	f004 f82c 	bl	800d4ca <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_Output_Relay_2_Pin, GPIO_PIN_RESET);
	return;
 8009472:	e005      	b.n	8009480 <Relay_Port2+0x28>
		HAL_GPIO_WritePin(GPIOC, GPIO_Output_Relay_2_Pin, GPIO_PIN_RESET);
 8009474:	2200      	movs	r2, #0
 8009476:	2120      	movs	r1, #32
 8009478:	4803      	ldr	r0, [pc, #12]	@ (8009488 <Relay_Port2+0x30>)
 800947a:	f004 f826 	bl	800d4ca <HAL_GPIO_WritePin>
	return;
 800947e:	bf00      	nop
}
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	40011000 	.word	0x40011000

0800948c <Pins_Inputs_Read>:



uint8_t Pins_Inputs_Read()
{
 800948c:	b590      	push	{r4, r7, lr}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
	uint8_t inps = 0b11000000;
 8009492:	23c0      	movs	r3, #192	@ 0xc0
 8009494:	71fb      	strb	r3, [r7, #7]
	inps |= (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_7_Pin) << 0)  |
 8009496:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800949a:	481c      	ldr	r0, [pc, #112]	@ (800950c <Pins_Inputs_Read+0x80>)
 800949c:	f003 fffe 	bl	800d49c <HAL_GPIO_ReadPin>
 80094a0:	4603      	mov	r3, r0
 80094a2:	461c      	mov	r4, r3
		    (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_8_Pin) << 1)  |
 80094a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80094a8:	4818      	ldr	r0, [pc, #96]	@ (800950c <Pins_Inputs_Read+0x80>)
 80094aa:	f003 fff7 	bl	800d49c <HAL_GPIO_ReadPin>
 80094ae:	4603      	mov	r3, r0
 80094b0:	005b      	lsls	r3, r3, #1
	inps |= (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_7_Pin) << 0)  |
 80094b2:	431c      	orrs	r4, r3
		    (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_9_Pin) << 2)  |
 80094b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80094b8:	4814      	ldr	r0, [pc, #80]	@ (800950c <Pins_Inputs_Read+0x80>)
 80094ba:	f003 ffef 	bl	800d49c <HAL_GPIO_ReadPin>
 80094be:	4603      	mov	r3, r0
 80094c0:	009b      	lsls	r3, r3, #2
		    (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_8_Pin) << 1)  |
 80094c2:	431c      	orrs	r4, r3
		    (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_10_Pin) << 3) |
 80094c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80094c8:	4810      	ldr	r0, [pc, #64]	@ (800950c <Pins_Inputs_Read+0x80>)
 80094ca:	f003 ffe7 	bl	800d49c <HAL_GPIO_ReadPin>
 80094ce:	4603      	mov	r3, r0
 80094d0:	00db      	lsls	r3, r3, #3
		    (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_9_Pin) << 2)  |
 80094d2:	431c      	orrs	r4, r3
		    (HAL_GPIO_ReadPin(GPIOC, GPIO_Input_11_Pin) << 4) |
 80094d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80094d8:	480d      	ldr	r0, [pc, #52]	@ (8009510 <Pins_Inputs_Read+0x84>)
 80094da:	f003 ffdf 	bl	800d49c <HAL_GPIO_ReadPin>
 80094de:	4603      	mov	r3, r0
 80094e0:	011b      	lsls	r3, r3, #4
		    (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_10_Pin) << 3) |
 80094e2:	431c      	orrs	r4, r3
		    (HAL_GPIO_ReadPin(GPIOA, GPIO_Input_12_Pin) << 5);
 80094e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80094e8:	480a      	ldr	r0, [pc, #40]	@ (8009514 <Pins_Inputs_Read+0x88>)
 80094ea:	f003 ffd7 	bl	800d49c <HAL_GPIO_ReadPin>
 80094ee:	4603      	mov	r3, r0
 80094f0:	015b      	lsls	r3, r3, #5
		    (HAL_GPIO_ReadPin(GPIOC, GPIO_Input_11_Pin) << 4) |
 80094f2:	4323      	orrs	r3, r4
	inps |= (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_7_Pin) << 0)  |
 80094f4:	b25a      	sxtb	r2, r3
 80094f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	b25b      	sxtb	r3, r3
 80094fe:	71fb      	strb	r3, [r7, #7]

	return inps;
 8009500:	79fb      	ldrb	r3, [r7, #7]
}
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	bd90      	pop	{r4, r7, pc}
 800950a:	bf00      	nop
 800950c:	40010c00 	.word	0x40010c00
 8009510:	40011000 	.word	0x40011000
 8009514:	40010800 	.word	0x40010800

08009518 <RGB_RED>:



void RGB_RED(uint8_t on_off)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	71fb      	strb	r3, [r7, #7]
	if(on_off)
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d006      	beq.n	8009536 <RGB_RED+0x1e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8009528:	2200      	movs	r2, #0
 800952a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800952e:	4807      	ldr	r0, [pc, #28]	@ (800954c <RGB_RED+0x34>)
 8009530:	f003 ffcb 	bl	800d4ca <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
	return;
 8009534:	e006      	b.n	8009544 <RGB_RED+0x2c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8009536:	2201      	movs	r2, #1
 8009538:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800953c:	4803      	ldr	r0, [pc, #12]	@ (800954c <RGB_RED+0x34>)
 800953e:	f003 ffc4 	bl	800d4ca <HAL_GPIO_WritePin>
	return;
 8009542:	bf00      	nop
}
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	40010c00 	.word	0x40010c00

08009550 <RGB_GREEN>:

void RGB_GREEN(uint8_t on_off)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	4603      	mov	r3, r0
 8009558:	71fb      	strb	r3, [r7, #7]
	if(on_off)
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <RGB_GREEN+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8009560:	2200      	movs	r2, #0
 8009562:	2120      	movs	r1, #32
 8009564:	4806      	ldr	r0, [pc, #24]	@ (8009580 <RGB_GREEN+0x30>)
 8009566:	f003 ffb0 	bl	800d4ca <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	return;
 800956a:	e005      	b.n	8009578 <RGB_GREEN+0x28>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800956c:	2201      	movs	r2, #1
 800956e:	2120      	movs	r1, #32
 8009570:	4803      	ldr	r0, [pc, #12]	@ (8009580 <RGB_GREEN+0x30>)
 8009572:	f003 ffaa 	bl	800d4ca <HAL_GPIO_WritePin>
	return;
 8009576:	bf00      	nop
}
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	40010c00 	.word	0x40010c00

08009584 <RGB_BLUE>:

void RGB_BLUE(uint8_t on_off)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	71fb      	strb	r3, [r7, #7]
	if(on_off)
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d006      	beq.n	80095a2 <RGB_BLUE+0x1e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8009594:	2200      	movs	r2, #0
 8009596:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800959a:	4807      	ldr	r0, [pc, #28]	@ (80095b8 <RGB_BLUE+0x34>)
 800959c:	f003 ff95 	bl	800d4ca <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	return;
 80095a0:	e006      	b.n	80095b0 <RGB_BLUE+0x2c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80095a2:	2201      	movs	r2, #1
 80095a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80095a8:	4803      	ldr	r0, [pc, #12]	@ (80095b8 <RGB_BLUE+0x34>)
 80095aa:	f003 ff8e 	bl	800d4ca <HAL_GPIO_WritePin>
	return;
 80095ae:	bf00      	nop
}
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	40010c00 	.word	0x40010c00

080095bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80095c0:	f3bf 8f4f 	dsb	sy
}
 80095c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80095c6:	4b06      	ldr	r3, [pc, #24]	@ (80095e0 <__NVIC_SystemReset+0x24>)
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80095ce:	4904      	ldr	r1, [pc, #16]	@ (80095e0 <__NVIC_SystemReset+0x24>)
 80095d0:	4b04      	ldr	r3, [pc, #16]	@ (80095e4 <__NVIC_SystemReset+0x28>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80095d6:	f3bf 8f4f 	dsb	sy
}
 80095da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80095dc:	bf00      	nop
 80095de:	e7fd      	b.n	80095dc <__NVIC_SystemReset+0x20>
 80095e0:	e000ed00 	.word	0xe000ed00
 80095e4:	05fa0004 	.word	0x05fa0004

080095e8 <proc_reset_chip>:
//    return;
//}


void proc_reset_chip(uint8_t reset_code)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	71fb      	strb	r3, [r7, #7]
    HAL_IWDG_Refresh(&hiwdg);
 80095f2:	4805      	ldr	r0, [pc, #20]	@ (8009608 <proc_reset_chip+0x20>)
 80095f4:	f004 fdb6 	bl	800e164 <HAL_IWDG_Refresh>
    ee2_write_byte(EE2_1_CHIP_ADDR, reset_code, EE2_Loc_Reset_Code_Address);
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	2227      	movs	r2, #39	@ 0x27
 80095fc:	4619      	mov	r1, r3
 80095fe:	20ac      	movs	r0, #172	@ 0xac
 8009600:	f000 fee2 	bl	800a3c8 <ee2_write_byte>
//    HAL_Delay(500);
//    cm_read_reset_code();
//    HAL_Delay(1000);
    NVIC_SystemReset();
 8009604:	f7ff ffda 	bl	80095bc <__NVIC_SystemReset>
 8009608:	20000988 	.word	0x20000988

0800960c <update_check_packet>:
}
// #########################################################################################################################
// #########################################################################################################################
// ------------------------------------------------------ UPDATE proc --------------------------------------------------------
            void update_check_packet(char* msg)
            {
 800960c:	b580      	push	{r7, lr}
 800960e:	b0a2      	sub	sp, #136	@ 0x88
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
                //from LINUX --> {SET_FOT}:{"id":"00","data":["-","???","--","--","--------"]}
                if((memcmp((char*)&msg[0], "{SET_FOT}:", 10) == 0)){
 8009614:	220a      	movs	r2, #10
 8009616:	491a      	ldr	r1, [pc, #104]	@ (8009680 <update_check_packet+0x74>)
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f008 fd58 	bl	80120ce <memcmp>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d11f      	bne.n	8009664 <update_check_packet+0x58>
//                    OS_TIMER_Restart(&Timer_Update);
                    char fota[128];
                    sprintf(fota, "{SET_FOT}:{\"id\":\"%02d\",\"data\":[", (unsigned int)MAIN_ID);
 8009624:	f107 0308 	add.w	r3, r7, #8
 8009628:	2200      	movs	r2, #0
 800962a:	4916      	ldr	r1, [pc, #88]	@ (8009684 <update_check_packet+0x78>)
 800962c:	4618      	mov	r0, r3
 800962e:	f008 fceb 	bl	8012008 <siprintf>
                    if((memcmp((char*)&msg[0], fota, 29) == 0)){
 8009632:	f107 0308 	add.w	r3, r7, #8
 8009636:	221d      	movs	r2, #29
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f008 fd47 	bl	80120ce <memcmp>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d118      	bne.n	8009678 <update_check_packet+0x6c>
                        if(!fota_flag_start){
 8009646:	4b10      	ldr	r3, [pc, #64]	@ (8009688 <update_check_packet+0x7c>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d106      	bne.n	800965c <update_check_packet+0x50>
                            update_start(1, &((char*)msg)[29]);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	331d      	adds	r3, #29
 8009652:	4619      	mov	r1, r3
 8009654:	2001      	movs	r0, #1
 8009656:	f000 f81f 	bl	8009698 <update_start>
                    UART_Debug_PutString("update_check_packet: wrong msg: ");
                    UART_Debug_PutString(msg);
                    UART_Debug_PutString("\r\n");
                }

                return;
 800965a:	e00d      	b.n	8009678 <update_check_packet+0x6c>
							UART_Debug_PutString("\r\n #### NOTE: FOTA procedure STOPPED ####\r\n");
 800965c:	480b      	ldr	r0, [pc, #44]	@ (800968c <update_check_packet+0x80>)
 800965e:	f001 f865 	bl	800a72c <UART_Debug_PutString>
                return;
 8009662:	e009      	b.n	8009678 <update_check_packet+0x6c>
                    UART_Debug_PutString("update_check_packet: wrong msg: ");
 8009664:	480a      	ldr	r0, [pc, #40]	@ (8009690 <update_check_packet+0x84>)
 8009666:	f001 f861 	bl	800a72c <UART_Debug_PutString>
                    UART_Debug_PutString(msg);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f001 f85e 	bl	800a72c <UART_Debug_PutString>
                    UART_Debug_PutString("\r\n");
 8009670:	4808      	ldr	r0, [pc, #32]	@ (8009694 <update_check_packet+0x88>)
 8009672:	f001 f85b 	bl	800a72c <UART_Debug_PutString>
                return;
 8009676:	bf00      	nop
 8009678:	bf00      	nop
            }
 800967a:	3788      	adds	r7, #136	@ 0x88
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	08013104 	.word	0x08013104
 8009684:	08013110 	.word	0x08013110
 8009688:	20000295 	.word	0x20000295
 800968c:	08013130 	.word	0x08013130
 8009690:	0801315c 	.word	0x0801315c
 8009694:	08013180 	.word	0x08013180

08009698 <update_start>:
        //--
//-
//--
            // FYI >> WORKING
            void update_start(uint8_t fota_flag, char* fota_data)
            {
 8009698:	b590      	push	{r4, r7, lr}
 800969a:	b0b9      	sub	sp, #228	@ 0xe4
 800969c:	af02      	add	r7, sp, #8
 800969e:	4603      	mov	r3, r0
 80096a0:	6039      	str	r1, [r7, #0]
 80096a2:	71fb      	strb	r3, [r7, #7]
            //    [fota_status],[folder_name],[number_of_file],[number_of_all_lines],[Application_CRC]
            //    ["-","------------","---","---","--------"]}
            	// get FOTA command from server and parse it
            	strremove(fota_data, "[");
 80096a4:	4971      	ldr	r1, [pc, #452]	@ (800986c <update_start+0x1d4>)
 80096a6:	6838      	ldr	r0, [r7, #0]
 80096a8:	f000 fdce 	bl	800a248 <strremove>
            	strremove(fota_data, "\"");
 80096ac:	4970      	ldr	r1, [pc, #448]	@ (8009870 <update_start+0x1d8>)
 80096ae:	6838      	ldr	r0, [r7, #0]
 80096b0:	f000 fdca 	bl	800a248 <strremove>
            	strremove(fota_data, "]");
 80096b4:	496f      	ldr	r1, [pc, #444]	@ (8009874 <update_start+0x1dc>)
 80096b6:	6838      	ldr	r0, [r7, #0]
 80096b8:	f000 fdc6 	bl	800a248 <strremove>
            	strremove(fota_data, "}");
 80096bc:	496e      	ldr	r1, [pc, #440]	@ (8009878 <update_start+0x1e0>)
 80096be:	6838      	ldr	r0, [r7, #0]
 80096c0:	f000 fdc2 	bl	800a248 <strremove>

            	char* ret = NULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

            	ret = strtok(fota_data, ",");
 80096ca:	496c      	ldr	r1, [pc, #432]	@ (800987c <update_start+0x1e4>)
 80096cc:	6838      	ldr	r0, [r7, #0]
 80096ce:	f008 fd3f 	bl	8012150 <strtok>
 80096d2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
            	fota_flag_start = strtol(ret, NULL, 16);
 80096d6:	2210      	movs	r2, #16
 80096d8:	2100      	movs	r1, #0
 80096da:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80096de:	f008 fb4f 	bl	8011d80 <strtol>
 80096e2:	4603      	mov	r3, r0
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	4b66      	ldr	r3, [pc, #408]	@ (8009880 <update_start+0x1e8>)
 80096e8:	701a      	strb	r2, [r3, #0]

                if(fota_flag_start == 1){
 80096ea:	4b65      	ldr	r3, [pc, #404]	@ (8009880 <update_start+0x1e8>)
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	f040 80b2 	bne.w	8009858 <update_start+0x1c0>

                    ret = strtok(NULL, ",");
 80096f4:	4961      	ldr	r1, [pc, #388]	@ (800987c <update_start+0x1e4>)
 80096f6:	2000      	movs	r0, #0
 80096f8:	f008 fd2a 	bl	8012150 <strtok>
 80096fc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
                    strcpy(server_fota_folder_name, ret);
 8009700:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8009704:	485f      	ldr	r0, [pc, #380]	@ (8009884 <update_start+0x1ec>)
 8009706:	f008 fe18 	bl	801233a <strcpy>

                    ret = strtok(NULL, ",");
 800970a:	495c      	ldr	r1, [pc, #368]	@ (800987c <update_start+0x1e4>)
 800970c:	2000      	movs	r0, #0
 800970e:	f008 fd1f 	bl	8012150 <strtok>
 8009712:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
                    server_fota_file_numbers = strtol(ret, NULL, 10);
 8009716:	220a      	movs	r2, #10
 8009718:	2100      	movs	r1, #0
 800971a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800971e:	f008 fb2f 	bl	8011d80 <strtol>
 8009722:	4603      	mov	r3, r0
 8009724:	b29a      	uxth	r2, r3
 8009726:	4b58      	ldr	r3, [pc, #352]	@ (8009888 <update_start+0x1f0>)
 8009728:	801a      	strh	r2, [r3, #0]

                    ret = strtok(NULL, ",");
 800972a:	4954      	ldr	r1, [pc, #336]	@ (800987c <update_start+0x1e4>)
 800972c:	2000      	movs	r0, #0
 800972e:	f008 fd0f 	bl	8012150 <strtok>
 8009732:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
                    server_fota_App_size = strtoul(ret, NULL, 10);
 8009736:	220a      	movs	r2, #10
 8009738:	2100      	movs	r1, #0
 800973a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800973e:	f008 fb97 	bl	8011e70 <strtoul>
 8009742:	4603      	mov	r3, r0
 8009744:	4a51      	ldr	r2, [pc, #324]	@ (800988c <update_start+0x1f4>)
 8009746:	6013      	str	r3, [r2, #0]

                    ret = strtok(NULL, ",");
 8009748:	494c      	ldr	r1, [pc, #304]	@ (800987c <update_start+0x1e4>)
 800974a:	2000      	movs	r0, #0
 800974c:	f008 fd00 	bl	8012150 <strtok>
 8009750:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

                    server_fota_App_CRC = strtoul(ret, NULL, 16);
 8009754:	2210      	movs	r2, #16
 8009756:	2100      	movs	r1, #0
 8009758:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800975c:	f008 fb88 	bl	8011e70 <strtoul>
 8009760:	4603      	mov	r3, r0
 8009762:	4a4b      	ldr	r2, [pc, #300]	@ (8009890 <update_start+0x1f8>)
 8009764:	6013      	str	r3, [r2, #0]

                    if(fota_flag_start && server_fota_file_numbers && server_fota_App_size && server_fota_App_CRC ){
 8009766:	4b46      	ldr	r3, [pc, #280]	@ (8009880 <update_start+0x1e8>)
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d070      	beq.n	8009850 <update_start+0x1b8>
 800976e:	4b46      	ldr	r3, [pc, #280]	@ (8009888 <update_start+0x1f0>)
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d06c      	beq.n	8009850 <update_start+0x1b8>
 8009776:	4b45      	ldr	r3, [pc, #276]	@ (800988c <update_start+0x1f4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d068      	beq.n	8009850 <update_start+0x1b8>
 800977e:	4b44      	ldr	r3, [pc, #272]	@ (8009890 <update_start+0x1f8>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d064      	beq.n	8009850 <update_start+0x1b8>
                    	if(internal_flash_erase() == 1){
 8009786:	f000 fde1 	bl	800a34c <internal_flash_erase>
 800978a:	4603      	mov	r3, r0
 800978c:	2b01      	cmp	r3, #1
 800978e:	d15b      	bne.n	8009848 <update_start+0x1b0>
                    		last_percent = 0;
 8009790:	4b40      	ldr	r3, [pc, #256]	@ (8009894 <update_start+0x1fc>)
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
                    		HAL_IWDG_Refresh(&hiwdg);
 8009796:	4840      	ldr	r0, [pc, #256]	@ (8009898 <update_start+0x200>)
 8009798:	f004 fce4 	bl	800e164 <HAL_IWDG_Refresh>
                    		char bf[200];
            				sprintf(bf, "fota_flag_start: %01X\r\nfota_folder_name: ", fota_flag_start);
 800979c:	4b38      	ldr	r3, [pc, #224]	@ (8009880 <update_start+0x1e8>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	f107 030c 	add.w	r3, r7, #12
 80097a6:	493d      	ldr	r1, [pc, #244]	@ (800989c <update_start+0x204>)
 80097a8:	4618      	mov	r0, r3
 80097aa:	f008 fc2d 	bl	8012008 <siprintf>
            				strcat(bf, server_fota_folder_name);
 80097ae:	f107 030c 	add.w	r3, r7, #12
 80097b2:	4934      	ldr	r1, [pc, #208]	@ (8009884 <update_start+0x1ec>)
 80097b4:	4618      	mov	r0, r3
 80097b6:	f008 fcbc 	bl	8012132 <strcat>
            				strcat(bf, "\r\n");
 80097ba:	f107 030c 	add.w	r3, r7, #12
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff f9cc 	bl	8008b5c <strlen>
 80097c4:	4603      	mov	r3, r0
 80097c6:	461a      	mov	r2, r3
 80097c8:	f107 030c 	add.w	r3, r7, #12
 80097cc:	4413      	add	r3, r2
 80097ce:	4a34      	ldr	r2, [pc, #208]	@ (80098a0 <update_start+0x208>)
 80097d0:	8811      	ldrh	r1, [r2, #0]
 80097d2:	7892      	ldrb	r2, [r2, #2]
 80097d4:	8019      	strh	r1, [r3, #0]
 80097d6:	709a      	strb	r2, [r3, #2]
            				UART_Debug_PutString(bf);
 80097d8:	f107 030c 	add.w	r3, r7, #12
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 ffa5 	bl	800a72c <UART_Debug_PutString>

            				sprintf(bf, "fota_file_numbers: %03d\r\nfota_App_lines: %03d\r\nfota_App_size: %ld\r\nfota_App_CRC: %8lX\r\n",
 80097e2:	4b29      	ldr	r3, [pc, #164]	@ (8009888 <update_start+0x1f0>)
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	4619      	mov	r1, r3
 80097e8:	4b27      	ldr	r3, [pc, #156]	@ (8009888 <update_start+0x1f0>)
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	461c      	mov	r4, r3
 80097ee:	4b27      	ldr	r3, [pc, #156]	@ (800988c <update_start+0x1f4>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a27      	ldr	r2, [pc, #156]	@ (8009890 <update_start+0x1f8>)
 80097f4:	6812      	ldr	r2, [r2, #0]
 80097f6:	f107 000c 	add.w	r0, r7, #12
 80097fa:	9201      	str	r2, [sp, #4]
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	4623      	mov	r3, r4
 8009800:	460a      	mov	r2, r1
 8009802:	4928      	ldr	r1, [pc, #160]	@ (80098a4 <update_start+0x20c>)
 8009804:	f008 fc00 	bl	8012008 <siprintf>
            						server_fota_file_numbers,
            						server_fota_file_numbers,
            						server_fota_App_size,
            						server_fota_App_CRC);
            				UART_Debug_PutString(bf);
 8009808:	f107 030c 	add.w	r3, r7, #12
 800980c:	4618      	mov	r0, r3
 800980e:	f000 ff8d 	bl	800a72c <UART_Debug_PutString>

                    		UART_Debug_PutString("\r\n #### Note: FOTA Procedure Started!!!\r\n");
 8009812:	4825      	ldr	r0, [pc, #148]	@ (80098a8 <update_start+0x210>)
 8009814:	f000 ff8a 	bl	800a72c <UART_Debug_PutString>
//                    		UART_Debug_PutString("{SET_FOT}:{\"status\":\"done\"}\r\n");
//                    		UART_Linux_PutString("{SET_FOT}:{\"status\":\"done\"}\r\n");

                    		HAL_IWDG_Refresh(&hiwdg);
 8009818:	481f      	ldr	r0, [pc, #124]	@ (8009898 <update_start+0x200>)
 800981a:	f004 fca3 	bl	800e164 <HAL_IWDG_Refresh>
                    		UART_Debug_PutString("{FOT_REQ}:{\"num\":\"001\"}\r\n");
 800981e:	4823      	ldr	r0, [pc, #140]	@ (80098ac <update_start+0x214>)
 8009820:	f000 ff84 	bl	800a72c <UART_Debug_PutString>
//                			RGB_Color = 5;
//                			RGB_Color_Old = 5;
//                			RGB(RGB_Color); //Cypress run
//                    		UART_Linux_PutString("{FOT_REQ}:{\"num\":\"001\"}\r\n");
                    		if(!q_put_message(&_Queue_Send, "{FOT_REQ}:{\"num\":\"001\"}\r\n", strlen("{FOT_REQ}:{\"num\":\"001\"}\r\n") + 1)){
 8009824:	221a      	movs	r2, #26
 8009826:	4921      	ldr	r1, [pc, #132]	@ (80098ac <update_start+0x214>)
 8009828:	4821      	ldr	r0, [pc, #132]	@ (80098b0 <update_start+0x218>)
 800982a:	f000 fbd1 	bl	8009fd0 <q_put_message>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d115      	bne.n	8009860 <update_start+0x1c8>
								UART_Debug_PutString("update_procedure >> failed to put to _Queue_Send >> ");
 8009834:	481f      	ldr	r0, [pc, #124]	@ (80098b4 <update_start+0x21c>)
 8009836:	f000 ff79 	bl	800a72c <UART_Debug_PutString>
								UART_Debug_PutString("{FOT_REQ}:{\"num\":\"001\"}\r\n");
 800983a:	481c      	ldr	r0, [pc, #112]	@ (80098ac <update_start+0x214>)
 800983c:	f000 ff76 	bl	800a72c <UART_Debug_PutString>
								UART_Debug_PutString("\r\n");
 8009840:	4817      	ldr	r0, [pc, #92]	@ (80098a0 <update_start+0x208>)
 8009842:	f000 ff73 	bl	800a72c <UART_Debug_PutString>
                    	if(internal_flash_erase() == 1){
 8009846:	e00b      	b.n	8009860 <update_start+0x1c8>
							}

                    	}
                    	else{
                        	UART_Debug_PutString("\r\n #### Note: FOTA Procedure FAILED!!!\r\n");
 8009848:	481b      	ldr	r0, [pc, #108]	@ (80098b8 <update_start+0x220>)
 800984a:	f000 ff6f 	bl	800a72c <UART_Debug_PutString>
                    	if(internal_flash_erase() == 1){
 800984e:	e007      	b.n	8009860 <update_start+0x1c8>
            //            	qctl_ftp_reset();
                    	}
                    }
                    else{
                    	UART_Debug_PutString("\r\n #### Note: FOTA Procedure FAILED!!!\r\n");
 8009850:	4819      	ldr	r0, [pc, #100]	@ (80098b8 <update_start+0x220>)
 8009852:	f000 ff6b 	bl	800a72c <UART_Debug_PutString>
                	UART_Debug_PutString("\r\n #### Note: FOTA Procedure STOPPED!!!\r\n");
            //    	qctl_ftp_reset();
                }


                return;
 8009856:	e005      	b.n	8009864 <update_start+0x1cc>
                	UART_Debug_PutString("\r\n #### Note: FOTA Procedure STOPPED!!!\r\n");
 8009858:	4818      	ldr	r0, [pc, #96]	@ (80098bc <update_start+0x224>)
 800985a:	f000 ff67 	bl	800a72c <UART_Debug_PutString>
                return;
 800985e:	e000      	b.n	8009862 <update_start+0x1ca>
                    	if(internal_flash_erase() == 1){
 8009860:	bf00      	nop
                return;
 8009862:	bf00      	nop
            }
 8009864:	37dc      	adds	r7, #220	@ 0xdc
 8009866:	46bd      	mov	sp, r7
 8009868:	bd90      	pop	{r4, r7, pc}
 800986a:	bf00      	nop
 800986c:	08013184 	.word	0x08013184
 8009870:	08013188 	.word	0x08013188
 8009874:	0801318c 	.word	0x0801318c
 8009878:	08013190 	.word	0x08013190
 800987c:	08013194 	.word	0x08013194
 8009880:	20000295 	.word	0x20000295
 8009884:	200002a4 	.word	0x200002a4
 8009888:	200002b4 	.word	0x200002b4
 800988c:	2000029c 	.word	0x2000029c
 8009890:	200002a0 	.word	0x200002a0
 8009894:	20000294 	.word	0x20000294
 8009898:	20000988 	.word	0x20000988
 800989c:	08013198 	.word	0x08013198
 80098a0:	08013180 	.word	0x08013180
 80098a4:	080131c4 	.word	0x080131c4
 80098a8:	0801321c 	.word	0x0801321c
 80098ac:	08013248 	.word	0x08013248
 80098b0:	200005f8 	.word	0x200005f8
 80098b4:	08013264 	.word	0x08013264
 80098b8:	0801329c 	.word	0x0801329c
 80098bc:	080132c8 	.word	0x080132c8

080098c0 <check_checksum>:
uint8_t check_checksum(char* data, uint16_t data_checksum)
{
 80098c0:	b590      	push	{r4, r7, lr}
 80098c2:	b09f      	sub	sp, #124	@ 0x7c
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	807b      	strh	r3, [r7, #2]
	uint8_t ret = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint16_t our_checksum = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

	if(strlen(data) % 2 == 0){
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff f93f 	bl	8008b5c <strlen>
 80098de:	4603      	mov	r3, r0
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d12c      	bne.n	8009942 <check_checksum+0x82>
		for(uint16_t i = 0; i < strlen(data); i = i+2){
 80098e8:	2300      	movs	r3, #0
 80098ea:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 80098ee:	e020      	b.n	8009932 <check_checksum+0x72>
			uint16_t byte = 0;
 80098f0:	2300      	movs	r3, #0
 80098f2:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
			byte = (uint16_t)data[i] << 8 | (uint16_t)data[i + 1];
 80098f6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	4413      	add	r3, r2
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	b21a      	sxth	r2, r3
 8009904:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8009908:	3301      	adds	r3, #1
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	440b      	add	r3, r1
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	b21b      	sxth	r3, r3
 8009912:	4313      	orrs	r3, r2
 8009914:	b21b      	sxth	r3, r3
 8009916:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

			our_checksum ^= byte;
 800991a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 800991e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8009922:	4053      	eors	r3, r2
 8009924:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
		for(uint16_t i = 0; i < strlen(data); i = i+2){
 8009928:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800992c:	3302      	adds	r3, #2
 800992e:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8009932:	f8b7 4072 	ldrh.w	r4, [r7, #114]	@ 0x72
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff f910 	bl	8008b5c <strlen>
 800993c:	4603      	mov	r3, r0
 800993e:	429c      	cmp	r4, r3
 8009940:	d3d6      	bcc.n	80098f0 <check_checksum+0x30>
		}
	}

	if(our_checksum == data_checksum){
 8009942:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8009946:	887b      	ldrh	r3, [r7, #2]
 8009948:	429a      	cmp	r2, r3
 800994a:	d103      	bne.n	8009954 <check_checksum+0x94>
		ret = 1;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009952:	e00c      	b.n	800996e <check_checksum+0xae>
	}
	else{
		char print[100];
		sprintf(print, "our_checksum = %04X, data_checksum = %04X\r\n", our_checksum, data_checksum);
 8009954:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8009958:	887b      	ldrh	r3, [r7, #2]
 800995a:	f107 000c 	add.w	r0, r7, #12
 800995e:	4907      	ldr	r1, [pc, #28]	@ (800997c <check_checksum+0xbc>)
 8009960:	f008 fb52 	bl	8012008 <siprintf>
		UART_Debug_PutString(print);
 8009964:	f107 030c 	add.w	r3, r7, #12
 8009968:	4618      	mov	r0, r3
 800996a:	f000 fedf 	bl	800a72c <UART_Debug_PutString>
	}

	return ret;
 800996e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8009972:	4618      	mov	r0, r3
 8009974:	377c      	adds	r7, #124	@ 0x7c
 8009976:	46bd      	mov	sp, r7
 8009978:	bd90      	pop	{r4, r7, pc}
 800997a:	bf00      	nop
 800997c:	080132f4 	.word	0x080132f4

08009980 <update_procedure>:

// ------------------------------------------------------ UPDATE proc -----------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------
// FYI >> WORKING
void update_procedure(char* buff)
{
 8009980:	b5b0      	push	{r4, r5, r7, lr}
 8009982:	b0bc      	sub	sp, #240	@ 0xf0
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
    // Gateway
//	char data[50];
//	sprintf(data, "proc_Gw_fota_procedure >> file length = %d\r\n", strlen(buff));

	char*	linux_fotu_packet = buff;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	char*	ret = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	char	req_line_buf[100] = {'\0'};
 8009994:	2300      	movs	r3, #0
 8009996:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009998:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800999c:	2260      	movs	r2, #96	@ 0x60
 800999e:	2100      	movs	r1, #0
 80099a0:	4618      	mov	r0, r3
 80099a2:	f008 fbbe 	bl	8012122 <memset>

	strremove(linux_fotu_packet, "[");
 80099a6:	49c6      	ldr	r1, [pc, #792]	@ (8009cc0 <update_procedure+0x340>)
 80099a8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80099ac:	f000 fc4c 	bl	800a248 <strremove>
	strremove(linux_fotu_packet, "\"");
 80099b0:	49c4      	ldr	r1, [pc, #784]	@ (8009cc4 <update_procedure+0x344>)
 80099b2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80099b6:	f000 fc47 	bl	800a248 <strremove>
	strremove(linux_fotu_packet, "]");
 80099ba:	49c3      	ldr	r1, [pc, #780]	@ (8009cc8 <update_procedure+0x348>)
 80099bc:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80099c0:	f000 fc42 	bl	800a248 <strremove>
	strremove(linux_fotu_packet, "}");
 80099c4:	49c1      	ldr	r1, [pc, #772]	@ (8009ccc <update_procedure+0x34c>)
 80099c6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80099ca:	f000 fc3d 	bl	800a248 <strremove>
	strremove(linux_fotu_packet, "{");
 80099ce:	49c0      	ldr	r1, [pc, #768]	@ (8009cd0 <update_procedure+0x350>)
 80099d0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80099d4:	f000 fc38 	bl	800a248 <strremove>

	ret = strtok(linux_fotu_packet, ",");
 80099d8:	49be      	ldr	r1, [pc, #760]	@ (8009cd4 <update_procedure+0x354>)
 80099da:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80099de:	f008 fbb7 	bl	8012150 <strtok>
 80099e2:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
	uint16_t linux_line_num = strtol(ret, NULL, 10);
 80099e6:	220a      	movs	r2, #10
 80099e8:	2100      	movs	r1, #0
 80099ea:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80099ee:	f008 f9c7 	bl	8011d80 <strtol>
 80099f2:	4603      	mov	r3, r0
 80099f4:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde

	ret = strtok(NULL, ",");
 80099f8:	49b6      	ldr	r1, [pc, #728]	@ (8009cd4 <update_procedure+0x354>)
 80099fa:	2000      	movs	r0, #0
 80099fc:	f008 fba8 	bl	8012150 <strtok>
 8009a00:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
	uint16_t linux_data_checksum = strtol(ret, NULL, 16);
 8009a04:	2210      	movs	r2, #16
 8009a06:	2100      	movs	r1, #0
 8009a08:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8009a0c:	f008 f9b8 	bl	8011d80 <strtol>
 8009a10:	4603      	mov	r3, r0
 8009a12:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc

	ret = strtok(NULL, ",");
 8009a16:	49af      	ldr	r1, [pc, #700]	@ (8009cd4 <update_procedure+0x354>)
 8009a18:	2000      	movs	r0, #0
 8009a1a:	f008 fb99 	bl	8012150 <strtok>
 8009a1e:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
	char* linux_update_data = ret;
 8009a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	uint8_t checksum_rez = check_checksum(linux_update_data, linux_data_checksum);
 8009a2a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8009a2e:	4619      	mov	r1, r3
 8009a30:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8009a34:	f7ff ff44 	bl	80098c0 <check_checksum>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7

	if(checksum_rez == 1){
 8009a3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d033      	beq.n	8009aae <update_procedure+0x12e>
		//char buf[100];
		//sprintf(buf, "LINUX_LINE_NUM: %03d >> CHECKSUM >> OK\r\n",linux_line_num);
		//UART_Debug_PutString(buf, 0);
	}else{
		char buf[100];
		sprintf(buf, "LINUX_LINE_NUM: %03d >> CHECKSUM >> FAILED\r\n",linux_line_num);
 8009a46:	f8b7 20de 	ldrh.w	r2, [r7, #222]	@ 0xde
 8009a4a:	f107 0308 	add.w	r3, r7, #8
 8009a4e:	49a2      	ldr	r1, [pc, #648]	@ (8009cd8 <update_procedure+0x358>)
 8009a50:	4618      	mov	r0, r3
 8009a52:	f008 fad9 	bl	8012008 <siprintf>
//		led_set_color(RED);
		sprintf(req_line_buf,"{FOT_REQ}:{\"num\":\"%05d\"}\r\n",fota_row_counter + 1);
 8009a56:	4ba1      	ldr	r3, [pc, #644]	@ (8009cdc <update_procedure+0x35c>)
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	1c5a      	adds	r2, r3, #1
 8009a5c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009a60:	499f      	ldr	r1, [pc, #636]	@ (8009ce0 <update_procedure+0x360>)
 8009a62:	4618      	mov	r0, r3
 8009a64:	f008 fad0 	bl	8012008 <siprintf>
		UART_Debug_PutString(req_line_buf);
 8009a68:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fe5d 	bl	800a72c <UART_Debug_PutString>
//		RGB_Color = 5;
//		RGB_Color_Old = 5;
//		RGB(RGB_Color); //Cypress run
//		UART_Linux_PutString(req_line_buf);
		if(!q_put_message(&_Queue_Send, req_line_buf, strlen(req_line_buf) + 1)){
 8009a72:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff f870 	bl	8008b5c <strlen>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	3301      	adds	r3, #1
 8009a80:	461a      	mov	r2, r3
 8009a82:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009a86:	4619      	mov	r1, r3
 8009a88:	4896      	ldr	r0, [pc, #600]	@ (8009ce4 <update_procedure+0x364>)
 8009a8a:	f000 faa1 	bl	8009fd0 <q_put_message>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f040 8277 	bne.w	8009f84 <update_procedure+0x604>
			UART_Debug_PutString("update_procedure >> failed to put to _Queue_Send >> ");
 8009a96:	4894      	ldr	r0, [pc, #592]	@ (8009ce8 <update_procedure+0x368>)
 8009a98:	f000 fe48 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString(req_line_buf);
 8009a9c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 fe43 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString("\r\n");
 8009aa6:	4891      	ldr	r0, [pc, #580]	@ (8009cec <update_procedure+0x36c>)
 8009aa8:	f000 fe40 	bl	800a72c <UART_Debug_PutString>
 8009aac:	e26a      	b.n	8009f84 <update_procedure+0x604>

		return;
	}


	if(linux_line_num != fota_file_numbers){
 8009aae:	4b90      	ldr	r3, [pc, #576]	@ (8009cf0 <update_procedure+0x370>)
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	f8b7 20de 	ldrh.w	r2, [r7, #222]	@ 0xde
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d02e      	beq.n	8009b18 <update_procedure+0x198>
		UART_Debug_PutString("REQUESTED_LINE_NUM >> FALSE\r\n"); // file number is wrong, request the same file from LINUX
 8009aba:	488e      	ldr	r0, [pc, #568]	@ (8009cf4 <update_procedure+0x374>)
 8009abc:	f000 fe36 	bl	800a72c <UART_Debug_PutString>
//		led_set_color(RED);
		sprintf(req_line_buf,"{FOT_REQ}:{\"num\":\"%05d\"}\r\n",fota_row_counter + 1);
 8009ac0:	4b86      	ldr	r3, [pc, #536]	@ (8009cdc <update_procedure+0x35c>)
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	1c5a      	adds	r2, r3, #1
 8009ac6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009aca:	4985      	ldr	r1, [pc, #532]	@ (8009ce0 <update_procedure+0x360>)
 8009acc:	4618      	mov	r0, r3
 8009ace:	f008 fa9b 	bl	8012008 <siprintf>
		UART_Debug_PutString(req_line_buf);
 8009ad2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 fe28 	bl	800a72c <UART_Debug_PutString>
//		RGB_Color = 5;
//		RGB_Color_Old = 5;
//		RGB(RGB_Color); //Cypress run
//		UART_Linux_PutString(req_line_buf);
		if(!q_put_message(&_Queue_Send, req_line_buf, strlen(req_line_buf) + 1)){
 8009adc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7ff f83b 	bl	8008b5c <strlen>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	3301      	adds	r3, #1
 8009aea:	461a      	mov	r2, r3
 8009aec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009af0:	4619      	mov	r1, r3
 8009af2:	487c      	ldr	r0, [pc, #496]	@ (8009ce4 <update_procedure+0x364>)
 8009af4:	f000 fa6c 	bl	8009fd0 <q_put_message>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f040 823b 	bne.w	8009f76 <update_procedure+0x5f6>
			UART_Debug_PutString("update_procedure >> failed to put to _Queue_Send >> ");
 8009b00:	4879      	ldr	r0, [pc, #484]	@ (8009ce8 <update_procedure+0x368>)
 8009b02:	f000 fe13 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString(req_line_buf);
 8009b06:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fe0e 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString("\r\n");
 8009b10:	4876      	ldr	r0, [pc, #472]	@ (8009cec <update_procedure+0x36c>)
 8009b12:	f000 fe0b 	bl	800a72c <UART_Debug_PutString>
		}


		return;
 8009b16:	e22e      	b.n	8009f76 <update_procedure+0x5f6>
	}

//	UART_Debug_PutString(linux_update_data);
//	UART_Debug_PutString("\r\n");
	// convert a couple of FOTA data characters to a single byte
	fota_data_index = 0;
 8009b18:	4b77      	ldr	r3, [pc, #476]	@ (8009cf8 <update_procedure+0x378>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	801a      	strh	r2, [r3, #0]

	if(strlen(linux_update_data) % 2 == 0){
 8009b1e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8009b22:	f7ff f81b 	bl	8008b5c <strlen>
 8009b26:	4603      	mov	r3, r0
 8009b28:	f003 0301 	and.w	r3, r3, #1
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d146      	bne.n	8009bbe <update_procedure+0x23e>
		for (uint32_t i = 0; i < strlen(linux_update_data); i++){
 8009b30:	2300      	movs	r3, #0
 8009b32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009b36:	e038      	b.n	8009baa <update_procedure+0x22a>
			HAL_IWDG_Refresh(&hiwdg);
 8009b38:	4870      	ldr	r0, [pc, #448]	@ (8009cfc <update_procedure+0x37c>)
 8009b3a:	f004 fb13 	bl	800e164 <HAL_IWDG_Refresh>

			int_byte = (int_byte << 4) | df_hexstring_hex(linux_update_data[i]);
 8009b3e:	4b70      	ldr	r3, [pc, #448]	@ (8009d00 <update_procedure+0x380>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	b25c      	sxtb	r4, r3
 8009b46:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8009b4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009b4e:	4413      	add	r3, r2
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 fa6e 	bl	800a034 <df_hexstring_hex>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	b25b      	sxtb	r3, r3
 8009b5c:	4323      	orrs	r3, r4
 8009b5e:	b25b      	sxtb	r3, r3
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	4b67      	ldr	r3, [pc, #412]	@ (8009d00 <update_procedure+0x380>)
 8009b64:	701a      	strb	r2, [r3, #0]
			int_byte_ctr++;
 8009b66:	4b67      	ldr	r3, [pc, #412]	@ (8009d04 <update_procedure+0x384>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	4b65      	ldr	r3, [pc, #404]	@ (8009d04 <update_procedure+0x384>)
 8009b70:	701a      	strb	r2, [r3, #0]
			if(int_byte_ctr == 2){
 8009b72:	4b64      	ldr	r3, [pc, #400]	@ (8009d04 <update_procedure+0x384>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d112      	bne.n	8009ba0 <update_procedure+0x220>
				fota_data_bytes[fota_data_index] = int_byte;
 8009b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8009cf8 <update_procedure+0x378>)
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	4b5f      	ldr	r3, [pc, #380]	@ (8009d00 <update_procedure+0x380>)
 8009b82:	7819      	ldrb	r1, [r3, #0]
 8009b84:	4b60      	ldr	r3, [pc, #384]	@ (8009d08 <update_procedure+0x388>)
 8009b86:	5499      	strb	r1, [r3, r2]
				fota_data_index++;
 8009b88:	4b5b      	ldr	r3, [pc, #364]	@ (8009cf8 <update_procedure+0x378>)
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	4b59      	ldr	r3, [pc, #356]	@ (8009cf8 <update_procedure+0x378>)
 8009b92:	801a      	strh	r2, [r3, #0]
				int_byte = 0;
 8009b94:	4b5a      	ldr	r3, [pc, #360]	@ (8009d00 <update_procedure+0x380>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	701a      	strb	r2, [r3, #0]
				int_byte_ctr = 0;
 8009b9a:	4b5a      	ldr	r3, [pc, #360]	@ (8009d04 <update_procedure+0x384>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < strlen(linux_update_data); i++){
 8009ba0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009baa:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8009bae:	f7fe ffd5 	bl	8008b5c <strlen>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d3bd      	bcc.n	8009b38 <update_procedure+0x1b8>
 8009bbc:	e02e      	b.n	8009c1c <update_procedure+0x29c>
			}
		}
	}
	else{
		UART_Debug_PutString("update_procedure >> wrong data >> odd \r\n");
 8009bbe:	4853      	ldr	r0, [pc, #332]	@ (8009d0c <update_procedure+0x38c>)
 8009bc0:	f000 fdb4 	bl	800a72c <UART_Debug_PutString>
		sprintf(req_line_buf,"{FOT_REQ}:{\"num\":\"%05d\"}\r\n",fota_row_counter + 1);
 8009bc4:	4b45      	ldr	r3, [pc, #276]	@ (8009cdc <update_procedure+0x35c>)
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	1c5a      	adds	r2, r3, #1
 8009bca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009bce:	4944      	ldr	r1, [pc, #272]	@ (8009ce0 <update_procedure+0x360>)
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f008 fa19 	bl	8012008 <siprintf>
		UART_Debug_PutString(req_line_buf);
 8009bd6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 fda6 	bl	800a72c <UART_Debug_PutString>
//		RGB_Color = 5;
//		RGB_Color_Old = 5;
//		RGB(RGB_Color); //Cypress run
//		UART_Linux_PutString(req_line_buf);
		if(!q_put_message(&_Queue_Send, req_line_buf, strlen(req_line_buf) + 1)){
 8009be0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fe ffb9 	bl	8008b5c <strlen>
 8009bea:	4603      	mov	r3, r0
 8009bec:	3301      	adds	r3, #1
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	483b      	ldr	r0, [pc, #236]	@ (8009ce4 <update_procedure+0x364>)
 8009bf8:	f000 f9ea 	bl	8009fd0 <q_put_message>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f040 81bb 	bne.w	8009f7a <update_procedure+0x5fa>
			UART_Debug_PutString("update_procedure >> failed to put to _Queue_Send >> ");
 8009c04:	4838      	ldr	r0, [pc, #224]	@ (8009ce8 <update_procedure+0x368>)
 8009c06:	f000 fd91 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString(req_line_buf);
 8009c0a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 fd8c 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString("\r\n");
 8009c14:	4835      	ldr	r0, [pc, #212]	@ (8009cec <update_procedure+0x36c>)
 8009c16:	f000 fd89 	bl	800a72c <UART_Debug_PutString>
		}
		return;
 8009c1a:	e1ae      	b.n	8009f7a <update_procedure+0x5fa>
	// ##################################################


//	char buf_buf[100];
	// program FOTA data into Internal Flash
	if(strlen(linux_update_data) % 2 == 0 && (strlen(linux_update_data) / 2) % 2 == 0){
 8009c1c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8009c20:	f7fe ff9c 	bl	8008b5c <strlen>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d174      	bne.n	8009d18 <update_procedure+0x398>
 8009c2e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8009c32:	f7fe ff93 	bl	8008b5c <strlen>
 8009c36:	4603      	mov	r3, r0
 8009c38:	085b      	lsrs	r3, r3, #1
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d16a      	bne.n	8009d18 <update_procedure+0x398>
		for(uint16_t k = 0; k < strlen(linux_update_data) / 2 ; k = k + 4){
 8009c42:	2300      	movs	r3, #0
 8009c44:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
 8009c48:	e02e      	b.n	8009ca8 <update_procedure+0x328>
			// must check size of FOTA Data and External E2 to change the Address if needed.
			HAL_IWDG_Refresh(&hiwdg);
 8009c4a:	482c      	ldr	r0, [pc, #176]	@ (8009cfc <update_procedure+0x37c>)
 8009c4c:	f004 fa8a 	bl	800e164 <HAL_IWDG_Refresh>

			uint32_t four_bytes = fota_data_bytes[k + 3] << 24 | fota_data_bytes[k + 2] << 16 | fota_data_bytes[k + 1] << 8 | fota_data_bytes[k];
 8009c50:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8009c54:	3303      	adds	r3, #3
 8009c56:	4a2c      	ldr	r2, [pc, #176]	@ (8009d08 <update_procedure+0x388>)
 8009c58:	5cd3      	ldrb	r3, [r2, r3]
 8009c5a:	061a      	lsls	r2, r3, #24
 8009c5c:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8009c60:	3302      	adds	r3, #2
 8009c62:	4929      	ldr	r1, [pc, #164]	@ (8009d08 <update_procedure+0x388>)
 8009c64:	5ccb      	ldrb	r3, [r1, r3]
 8009c66:	041b      	lsls	r3, r3, #16
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8009c6e:	3301      	adds	r3, #1
 8009c70:	4925      	ldr	r1, [pc, #148]	@ (8009d08 <update_procedure+0x388>)
 8009c72:	5ccb      	ldrb	r3, [r1, r3]
 8009c74:	021b      	lsls	r3, r3, #8
 8009c76:	4313      	orrs	r3, r2
 8009c78:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	@ 0xea
 8009c7c:	4922      	ldr	r1, [pc, #136]	@ (8009d08 <update_procedure+0x388>)
 8009c7e:	5c8a      	ldrb	r2, [r1, r2]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

			internal_flash_write_byte(IE2_FOTA_START_ADDRESS + data_index + k, four_bytes);
 8009c86:	4b22      	ldr	r3, [pc, #136]	@ (8009d10 <update_procedure+0x390>)
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	4b22      	ldr	r3, [pc, #136]	@ (8009d14 <update_procedure+0x394>)
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	@ 0xea
 8009c92:	4413      	add	r3, r2
 8009c94:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 fb1f 	bl	800a2dc <internal_flash_write_byte>
		for(uint16_t k = 0; k < strlen(linux_update_data) / 2 ; k = k + 4){
 8009c9e:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
 8009ca8:	f8b7 40ea 	ldrh.w	r4, [r7, #234]	@ 0xea
 8009cac:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8009cb0:	f7fe ff54 	bl	8008b5c <strlen>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	085b      	lsrs	r3, r3, #1
 8009cb8:	429c      	cmp	r4, r3
 8009cba:	d3c6      	bcc.n	8009c4a <update_procedure+0x2ca>
 8009cbc:	e05b      	b.n	8009d76 <update_procedure+0x3f6>
 8009cbe:	bf00      	nop
 8009cc0:	08013184 	.word	0x08013184
 8009cc4:	08013188 	.word	0x08013188
 8009cc8:	0801318c 	.word	0x0801318c
 8009ccc:	08013190 	.word	0x08013190
 8009cd0:	08013320 	.word	0x08013320
 8009cd4:	08013194 	.word	0x08013194
 8009cd8:	08013324 	.word	0x08013324
 8009cdc:	20000296 	.word	0x20000296
 8009ce0:	08013354 	.word	0x08013354
 8009ce4:	200005f8 	.word	0x200005f8
 8009ce8:	08013264 	.word	0x08013264
 8009cec:	08013180 	.word	0x08013180
 8009cf0:	20000000 	.word	0x20000000
 8009cf4:	08013370 	.word	0x08013370
 8009cf8:	2000028c 	.word	0x2000028c
 8009cfc:	20000988 	.word	0x20000988
 8009d00:	200002b6 	.word	0x200002b6
 8009d04:	200002b7 	.word	0x200002b7
 8009d08:	200000ac 	.word	0x200000ac
 8009d0c:	08013390 	.word	0x08013390
 8009d10:	20000290 	.word	0x20000290
 8009d14:	08040400 	.word	0x08040400

		}
	}
	else{
		UART_Debug_PutString("update_procedure >> wrong data >> odd 2\r\n");
 8009d18:	489c      	ldr	r0, [pc, #624]	@ (8009f8c <update_procedure+0x60c>)
 8009d1a:	f000 fd07 	bl	800a72c <UART_Debug_PutString>
		sprintf(req_line_buf,"{FOT_REQ}:{\"num\":\"%05d\"}\r\n",fota_row_counter + 1);
 8009d1e:	4b9c      	ldr	r3, [pc, #624]	@ (8009f90 <update_procedure+0x610>)
 8009d20:	881b      	ldrh	r3, [r3, #0]
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009d28:	499a      	ldr	r1, [pc, #616]	@ (8009f94 <update_procedure+0x614>)
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f008 f96c 	bl	8012008 <siprintf>
		UART_Debug_PutString(req_line_buf);
 8009d30:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 fcf9 	bl	800a72c <UART_Debug_PutString>
//		RGB_Color = 5;
//		RGB_Color_Old = 5;
//		RGB(RGB_Color); //Cypress run
//		UART_Linux_PutString(req_line_buf);
		if(!q_put_message(&_Queue_Send, req_line_buf, strlen(req_line_buf) + 1)){
 8009d3a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe ff0c 	bl	8008b5c <strlen>
 8009d44:	4603      	mov	r3, r0
 8009d46:	3301      	adds	r3, #1
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4891      	ldr	r0, [pc, #580]	@ (8009f98 <update_procedure+0x618>)
 8009d52:	f000 f93d 	bl	8009fd0 <q_put_message>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f040 8110 	bne.w	8009f7e <update_procedure+0x5fe>
			UART_Debug_PutString("update_procedure >> failed to put to _Queue_Send >> ");
 8009d5e:	488f      	ldr	r0, [pc, #572]	@ (8009f9c <update_procedure+0x61c>)
 8009d60:	f000 fce4 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString(req_line_buf);
 8009d64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 fcdf 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString("\r\n");
 8009d6e:	488c      	ldr	r0, [pc, #560]	@ (8009fa0 <update_procedure+0x620>)
 8009d70:	f000 fcdc 	bl	800a72c <UART_Debug_PutString>
		}
		return;
 8009d74:	e103      	b.n	8009f7e <update_procedure+0x5fe>
	}

	data_index += (strlen(linux_update_data) / 2);
 8009d76:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8009d7a:	f7fe feef 	bl	8008b5c <strlen>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	085b      	lsrs	r3, r3, #1
 8009d82:	4a88      	ldr	r2, [pc, #544]	@ (8009fa4 <update_procedure+0x624>)
 8009d84:	6812      	ldr	r2, [r2, #0]
 8009d86:	4413      	add	r3, r2
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4b86      	ldr	r3, [pc, #536]	@ (8009fa4 <update_procedure+0x624>)
 8009d8c:	601a      	str	r2, [r3, #0]


	fota_row_counter++;
 8009d8e:	4b80      	ldr	r3, [pc, #512]	@ (8009f90 <update_procedure+0x610>)
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	4b7e      	ldr	r3, [pc, #504]	@ (8009f90 <update_procedure+0x610>)
 8009d98:	801a      	strh	r2, [r3, #0]



	// ##################################################

	if(fota_row_counter == server_fota_file_numbers){
 8009d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8009f90 <update_procedure+0x610>)
 8009d9c:	881a      	ldrh	r2, [r3, #0]
 8009d9e:	4b82      	ldr	r3, [pc, #520]	@ (8009fa8 <update_procedure+0x628>)
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d154      	bne.n	8009e50 <update_procedure+0x4d0>

//		led_set_color(BLU);
//	    OS_TIMER_Stop(&Timer_Update);

		fota_row_sequence = 0;
 8009da6:	4b81      	ldr	r3, [pc, #516]	@ (8009fac <update_procedure+0x62c>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	801a      	strh	r2, [r3, #0]
		fota_row_counter = 0;
 8009dac:	4b78      	ldr	r3, [pc, #480]	@ (8009f90 <update_procedure+0x610>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	801a      	strh	r2, [r3, #0]

		// set FOTA FLAG to E2PROM for Bootloader and Reset Application and go to Bootloader Mode
		ee2_write_byte(EE2_1_CHIP_ADDR, FOTA_START, EE2_Loc_FOTA_STATUS);
 8009db2:	2214      	movs	r2, #20
 8009db4:	2101      	movs	r1, #1
 8009db6:	20ac      	movs	r0, #172	@ 0xac
 8009db8:	f000 fb06 	bl	800a3c8 <ee2_write_byte>
		ee2_write_byte(EE2_1_CHIP_ADDR, server_fota_App_CRC >> 0, EE2_Loc_FOTA_CRC_BYTE0);
 8009dbc:	4b7c      	ldr	r3, [pc, #496]	@ (8009fb0 <update_procedure+0x630>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2215      	movs	r2, #21
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	20ac      	movs	r0, #172	@ 0xac
 8009dc8:	f000 fafe 	bl	800a3c8 <ee2_write_byte>
		ee2_write_byte(EE2_1_CHIP_ADDR, server_fota_App_CRC >> 8, EE2_Loc_FOTA_CRC_BYTE1);
 8009dcc:	4b78      	ldr	r3, [pc, #480]	@ (8009fb0 <update_procedure+0x630>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	0a1b      	lsrs	r3, r3, #8
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2216      	movs	r2, #22
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	20ac      	movs	r0, #172	@ 0xac
 8009dda:	f000 faf5 	bl	800a3c8 <ee2_write_byte>
		ee2_write_byte(EE2_1_CHIP_ADDR, server_fota_App_CRC >> 16, EE2_Loc_FOTA_CRC_BYTE2);
 8009dde:	4b74      	ldr	r3, [pc, #464]	@ (8009fb0 <update_procedure+0x630>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	0c1b      	lsrs	r3, r3, #16
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	2217      	movs	r2, #23
 8009de8:	4619      	mov	r1, r3
 8009dea:	20ac      	movs	r0, #172	@ 0xac
 8009dec:	f000 faec 	bl	800a3c8 <ee2_write_byte>
		ee2_write_byte(EE2_1_CHIP_ADDR, server_fota_App_CRC >> 24, EE2_Loc_FOTA_CRC_BYTE3);
 8009df0:	4b6f      	ldr	r3, [pc, #444]	@ (8009fb0 <update_procedure+0x630>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	0e1b      	lsrs	r3, r3, #24
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2218      	movs	r2, #24
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	20ac      	movs	r0, #172	@ 0xac
 8009dfe:	f000 fae3 	bl	800a3c8 <ee2_write_byte>

		ee2_write_byte(EE2_1_CHIP_ADDR, server_fota_App_size >> 0, EE2_Loc_FOTA_App_SIZE_BYTE0);
 8009e02:	4b6c      	ldr	r3, [pc, #432]	@ (8009fb4 <update_procedure+0x634>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2219      	movs	r2, #25
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	20ac      	movs	r0, #172	@ 0xac
 8009e0e:	f000 fadb 	bl	800a3c8 <ee2_write_byte>
		ee2_write_byte(EE2_1_CHIP_ADDR, server_fota_App_size >> 8, EE2_Loc_FOTA_App_SIZE_BYTE1);
 8009e12:	4b68      	ldr	r3, [pc, #416]	@ (8009fb4 <update_procedure+0x634>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	0a1b      	lsrs	r3, r3, #8
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	221a      	movs	r2, #26
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	20ac      	movs	r0, #172	@ 0xac
 8009e20:	f000 fad2 	bl	800a3c8 <ee2_write_byte>
		ee2_write_byte(EE2_1_CHIP_ADDR, server_fota_App_size >> 16, EE2_Loc_FOTA_App_SIZE_BYTE2);
 8009e24:	4b63      	ldr	r3, [pc, #396]	@ (8009fb4 <update_procedure+0x634>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	0c1b      	lsrs	r3, r3, #16
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	221b      	movs	r2, #27
 8009e2e:	4619      	mov	r1, r3
 8009e30:	20ac      	movs	r0, #172	@ 0xac
 8009e32:	f000 fac9 	bl	800a3c8 <ee2_write_byte>
		ee2_write_byte(EE2_1_CHIP_ADDR, server_fota_App_size >> 24, EE2_Loc_FOTA_App_SIZE_BYTE3);
 8009e36:	4b5f      	ldr	r3, [pc, #380]	@ (8009fb4 <update_procedure+0x634>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	0e1b      	lsrs	r3, r3, #24
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	221c      	movs	r2, #28
 8009e40:	4619      	mov	r1, r3
 8009e42:	20ac      	movs	r0, #172	@ 0xac
 8009e44:	f000 fac0 	bl	800a3c8 <ee2_write_byte>

//		UART_Debug_PutString("{SET_FOT}:{\"status\":\"install\"}\r\n");
//		UART_Linux_PutString("{SET_FOT}:{\"status\":\"install\"}\r\n");

		proc_reset_chip(Reset_Code_FOTA_Done);
 8009e48:	2002      	movs	r0, #2
 8009e4a:	f7ff fbcd 	bl	80095e8 <proc_reset_chip>

		return;
 8009e4e:	e099      	b.n	8009f84 <update_procedure+0x604>
	}

	if(fota_file_numbers != server_fota_file_numbers){
 8009e50:	4b59      	ldr	r3, [pc, #356]	@ (8009fb8 <update_procedure+0x638>)
 8009e52:	881a      	ldrh	r2, [r3, #0]
 8009e54:	4b54      	ldr	r3, [pc, #336]	@ (8009fa8 <update_procedure+0x628>)
 8009e56:	881b      	ldrh	r3, [r3, #0]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	f000 8092 	beq.w	8009f82 <update_procedure+0x602>
		fota_file_numbers++;
 8009e5e:	4b56      	ldr	r3, [pc, #344]	@ (8009fb8 <update_procedure+0x638>)
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	3301      	adds	r3, #1
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	4b54      	ldr	r3, [pc, #336]	@ (8009fb8 <update_procedure+0x638>)
 8009e68:	801a      	strh	r2, [r3, #0]
//		led_set_color(GRE);

		sprintf(req_line_buf,"{FOT_REQ}:{\"num\":\"%05d\"}\r\n",fota_file_numbers);
 8009e6a:	4b53      	ldr	r3, [pc, #332]	@ (8009fb8 <update_procedure+0x638>)
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009e74:	4947      	ldr	r1, [pc, #284]	@ (8009f94 <update_procedure+0x614>)
 8009e76:	4618      	mov	r0, r3
 8009e78:	f008 f8c6 	bl	8012008 <siprintf>


		uint8_t percent = (((double)fota_file_numbers) / (double)server_fota_file_numbers) * 100;
 8009e7c:	4b4e      	ldr	r3, [pc, #312]	@ (8009fb8 <update_procedure+0x638>)
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe ffb5 	bl	8008df0 <__aeabi_ui2d>
 8009e86:	4604      	mov	r4, r0
 8009e88:	460d      	mov	r5, r1
 8009e8a:	4b47      	ldr	r3, [pc, #284]	@ (8009fa8 <update_procedure+0x628>)
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe ffae 	bl	8008df0 <__aeabi_ui2d>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4620      	mov	r0, r4
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	f7ff f94c 	bl	8009138 <__aeabi_ddiv>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	f04f 0200 	mov.w	r2, #0
 8009eac:	4b43      	ldr	r3, [pc, #268]	@ (8009fbc <update_procedure+0x63c>)
 8009eae:	f7ff f819 	bl	8008ee4 <__aeabi_dmul>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	4619      	mov	r1, r3
 8009eba:	f7ff fa25 	bl	8009308 <__aeabi_d2uiz>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
		if(last_percent != percent){
 8009ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8009fc0 <update_procedure+0x640>)
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	f897 20d6 	ldrb.w	r2, [r7, #214]	@ 0xd6
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d017      	beq.n	8009f00 <update_procedure+0x580>
			last_percent = percent;
 8009ed0:	4a3b      	ldr	r2, [pc, #236]	@ (8009fc0 <update_procedure+0x640>)
 8009ed2:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8009ed6:	7013      	strb	r3, [r2, #0]
			char data[100];
			sprintf(data, "update_procedure >> written lines : %d/%d\r\n", fota_row_counter, server_fota_file_numbers);
 8009ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8009f90 <update_procedure+0x610>)
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	461a      	mov	r2, r3
 8009ede:	4b32      	ldr	r3, [pc, #200]	@ (8009fa8 <update_procedure+0x628>)
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	f107 0008 	add.w	r0, r7, #8
 8009ee6:	4937      	ldr	r1, [pc, #220]	@ (8009fc4 <update_procedure+0x644>)
 8009ee8:	f008 f88e 	bl	8012008 <siprintf>
			UART_Debug_PutString(data);
 8009eec:	f107 0308 	add.w	r3, r7, #8
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 fc1b 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString(req_line_buf);
 8009ef6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 fc16 	bl	800a72c <UART_Debug_PutString>
		}

		if(percent % 2 == 0){
 8009f00:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8009f04:	f003 0301 	and.w	r3, r3, #1
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10b      	bne.n	8009f26 <update_procedure+0x5a6>
			RGB_Color = 5;
 8009f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8009fc8 <update_procedure+0x648>)
 8009f10:	2205      	movs	r2, #5
 8009f12:	701a      	strb	r2, [r3, #0]
			RGB_Color_Old = 5;
 8009f14:	4b2d      	ldr	r3, [pc, #180]	@ (8009fcc <update_procedure+0x64c>)
 8009f16:	2205      	movs	r2, #5
 8009f18:	701a      	strb	r2, [r3, #0]
			RGB(RGB_Color); //Cypress run
 8009f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8009fc8 <update_procedure+0x648>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff fa12 	bl	8009348 <RGB>
 8009f24:	e00a      	b.n	8009f3c <update_procedure+0x5bc>
		}
		else{
			RGB_Color = 6;
 8009f26:	4b28      	ldr	r3, [pc, #160]	@ (8009fc8 <update_procedure+0x648>)
 8009f28:	2206      	movs	r2, #6
 8009f2a:	701a      	strb	r2, [r3, #0]
			RGB_Color_Old = 6;
 8009f2c:	4b27      	ldr	r3, [pc, #156]	@ (8009fcc <update_procedure+0x64c>)
 8009f2e:	2206      	movs	r2, #6
 8009f30:	701a      	strb	r2, [r3, #0]
			RGB(RGB_Color); //Cypress run
 8009f32:	4b25      	ldr	r3, [pc, #148]	@ (8009fc8 <update_procedure+0x648>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7ff fa06 	bl	8009348 <RGB>
		}
//		UART_Linux_PutString(req_line_buf);
		if(!q_put_message(&_Queue_Send, req_line_buf, strlen(req_line_buf) + 1)){
 8009f3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fe fe0b 	bl	8008b5c <strlen>
 8009f46:	4603      	mov	r3, r0
 8009f48:	3301      	adds	r3, #1
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009f50:	4619      	mov	r1, r3
 8009f52:	4811      	ldr	r0, [pc, #68]	@ (8009f98 <update_procedure+0x618>)
 8009f54:	f000 f83c 	bl	8009fd0 <q_put_message>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d111      	bne.n	8009f82 <update_procedure+0x602>
			UART_Debug_PutString("update_procedure >> failed to put to _Queue_Send >> ");
 8009f5e:	480f      	ldr	r0, [pc, #60]	@ (8009f9c <update_procedure+0x61c>)
 8009f60:	f000 fbe4 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString(req_line_buf);
 8009f64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 fbdf 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString("\r\n");
 8009f6e:	480c      	ldr	r0, [pc, #48]	@ (8009fa0 <update_procedure+0x620>)
 8009f70:	f000 fbdc 	bl	800a72c <UART_Debug_PutString>
	}
	else {
//		qctl_ftp_state = FTP_STATE_IDLE; // CHANGE FTP_STATE to IDLE
	}

    return;
 8009f74:	e005      	b.n	8009f82 <update_procedure+0x602>
		return;
 8009f76:	bf00      	nop
 8009f78:	e004      	b.n	8009f84 <update_procedure+0x604>
		return;
 8009f7a:	bf00      	nop
 8009f7c:	e002      	b.n	8009f84 <update_procedure+0x604>
		return;
 8009f7e:	bf00      	nop
 8009f80:	e000      	b.n	8009f84 <update_procedure+0x604>
    return;
 8009f82:	bf00      	nop
}
 8009f84:	37f0      	adds	r7, #240	@ 0xf0
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bdb0      	pop	{r4, r5, r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	080133bc 	.word	0x080133bc
 8009f90:	20000296 	.word	0x20000296
 8009f94:	08013354 	.word	0x08013354
 8009f98:	200005f8 	.word	0x200005f8
 8009f9c:	08013264 	.word	0x08013264
 8009fa0:	08013180 	.word	0x08013180
 8009fa4:	20000290 	.word	0x20000290
 8009fa8:	200002b4 	.word	0x200002b4
 8009fac:	20000298 	.word	0x20000298
 8009fb0:	200002a0 	.word	0x200002a0
 8009fb4:	2000029c 	.word	0x2000029c
 8009fb8:	20000000 	.word	0x20000000
 8009fbc:	40590000 	.word	0x40590000
 8009fc0:	20000294 	.word	0x20000294
 8009fc4:	080133e8 	.word	0x080133e8
 8009fc8:	200002b8 	.word	0x200002b8
 8009fcc:	200002b9 	.word	0x200002b9

08009fd0 <q_put_message>:

OS_Q _Queue_Send;
char _QBuffer_Queue_Send[Queue_Size_Send];

uint8_t q_put_message(OS_QUEUE* queue, char* message, int lng)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8009fdc:	4809      	ldr	r0, [pc, #36]	@ (800a004 <q_put_message+0x34>)
 8009fde:	f004 f8c1 	bl	800e164 <HAL_IWDG_Refresh>

    int res = OS_QUEUE_Put(queue, (void*)message, lng);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f006 fd81 	bl	8010af0 <OS_QUEUE_Put>
 8009fee:	6178      	str	r0, [r7, #20]
    if(res == 0){
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <q_put_message+0x2a>
        return 1;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e000      	b.n	8009ffc <q_put_message+0x2c>
    }
    else{
//      char msg[] = "q_put_message >> failed to put message";
//      file_fill_log_buff(msg);

        return 0;
 8009ffa:	2300      	movs	r3, #0
    }
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3718      	adds	r7, #24
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	20000988 	.word	0x20000988

0800a008 <q_get_message>:

void* q_get_message(OS_QUEUE* queue)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
    void* q_output = NULL;// must be static to return pointer!!!
 800a010:	2300      	movs	r3, #0
 800a012:	60fb      	str	r3, [r7, #12]
    if(OS_QUEUE_GetPtr(queue, (void**)(&q_output))){
 800a014:	f107 030c 	add.w	r3, r7, #12
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f006 fcb4 	bl	8010988 <OS_QUEUE_GetPtr>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <q_get_message+0x22>
//        OS_QUEUE_Purge(queue);
    }
    else{
        q_output = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	60fb      	str	r3, [r7, #12]
    }

    return q_output;
 800a02a:	68fb      	ldr	r3, [r7, #12]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <df_hexstring_hex>:
// ###################################################### Functions ########################################################
uint8_t df_hexstring_hex(char character)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	71fb      	strb	r3, [r7, #7]
    uint8_t data = 255;
 800a03e:	23ff      	movs	r3, #255	@ 0xff
 800a040:	73fb      	strb	r3, [r7, #15]

    if(
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	2b30      	cmp	r3, #48	@ 0x30
 800a046:	d03f      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == '0') ||
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	2b31      	cmp	r3, #49	@ 0x31
 800a04c:	d03c      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == '1') ||
 800a04e:	79fb      	ldrb	r3, [r7, #7]
 800a050:	2b32      	cmp	r3, #50	@ 0x32
 800a052:	d039      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == '2') ||
 800a054:	79fb      	ldrb	r3, [r7, #7]
 800a056:	2b33      	cmp	r3, #51	@ 0x33
 800a058:	d036      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == '3') ||
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	2b34      	cmp	r3, #52	@ 0x34
 800a05e:	d033      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == '4') ||
 800a060:	79fb      	ldrb	r3, [r7, #7]
 800a062:	2b35      	cmp	r3, #53	@ 0x35
 800a064:	d030      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == '5') ||
 800a066:	79fb      	ldrb	r3, [r7, #7]
 800a068:	2b36      	cmp	r3, #54	@ 0x36
 800a06a:	d02d      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == '6') ||
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	2b37      	cmp	r3, #55	@ 0x37
 800a070:	d02a      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == '7') ||
 800a072:	79fb      	ldrb	r3, [r7, #7]
 800a074:	2b38      	cmp	r3, #56	@ 0x38
 800a076:	d027      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == '8') ||
 800a078:	79fb      	ldrb	r3, [r7, #7]
 800a07a:	2b39      	cmp	r3, #57	@ 0x39
 800a07c:	d024      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == '9') ||
 800a07e:	79fb      	ldrb	r3, [r7, #7]
 800a080:	2b61      	cmp	r3, #97	@ 0x61
 800a082:	d021      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == 'a') ||
 800a084:	79fb      	ldrb	r3, [r7, #7]
 800a086:	2b41      	cmp	r3, #65	@ 0x41
 800a088:	d01e      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == 'A') ||
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	2b62      	cmp	r3, #98	@ 0x62
 800a08e:	d01b      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == 'b') ||
 800a090:	79fb      	ldrb	r3, [r7, #7]
 800a092:	2b42      	cmp	r3, #66	@ 0x42
 800a094:	d018      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == 'B') ||
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	2b63      	cmp	r3, #99	@ 0x63
 800a09a:	d015      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == 'c') ||
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	2b43      	cmp	r3, #67	@ 0x43
 800a0a0:	d012      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == 'C') ||
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	2b64      	cmp	r3, #100	@ 0x64
 800a0a6:	d00f      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == 'd') ||
 800a0a8:	79fb      	ldrb	r3, [r7, #7]
 800a0aa:	2b44      	cmp	r3, #68	@ 0x44
 800a0ac:	d00c      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == 'D') ||
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	2b65      	cmp	r3, #101	@ 0x65
 800a0b2:	d009      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == 'e') ||
 800a0b4:	79fb      	ldrb	r3, [r7, #7]
 800a0b6:	2b45      	cmp	r3, #69	@ 0x45
 800a0b8:	d006      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == 'E') ||
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	2b66      	cmp	r3, #102	@ 0x66
 800a0be:	d003      	beq.n	800a0c8 <df_hexstring_hex+0x94>
        (character == 'f') ||
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	2b46      	cmp	r3, #70	@ 0x46
 800a0c4:	f040 80b9 	bne.w	800a23a <df_hexstring_hex+0x206>
        (character == 'F')
    ){
        switch(character){
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	3b30      	subs	r3, #48	@ 0x30
 800a0cc:	2b36      	cmp	r3, #54	@ 0x36
 800a0ce:	f200 80b3 	bhi.w	800a238 <df_hexstring_hex+0x204>
 800a0d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d8 <df_hexstring_hex+0xa4>)
 800a0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d8:	0800a1b5 	.word	0x0800a1b5
 800a0dc:	0800a1bb 	.word	0x0800a1bb
 800a0e0:	0800a1c1 	.word	0x0800a1c1
 800a0e4:	0800a1c7 	.word	0x0800a1c7
 800a0e8:	0800a1cd 	.word	0x0800a1cd
 800a0ec:	0800a1d3 	.word	0x0800a1d3
 800a0f0:	0800a1d9 	.word	0x0800a1d9
 800a0f4:	0800a1df 	.word	0x0800a1df
 800a0f8:	0800a1e5 	.word	0x0800a1e5
 800a0fc:	0800a1eb 	.word	0x0800a1eb
 800a100:	0800a239 	.word	0x0800a239
 800a104:	0800a239 	.word	0x0800a239
 800a108:	0800a239 	.word	0x0800a239
 800a10c:	0800a239 	.word	0x0800a239
 800a110:	0800a239 	.word	0x0800a239
 800a114:	0800a239 	.word	0x0800a239
 800a118:	0800a239 	.word	0x0800a239
 800a11c:	0800a1f7 	.word	0x0800a1f7
 800a120:	0800a203 	.word	0x0800a203
 800a124:	0800a20f 	.word	0x0800a20f
 800a128:	0800a21b 	.word	0x0800a21b
 800a12c:	0800a227 	.word	0x0800a227
 800a130:	0800a233 	.word	0x0800a233
 800a134:	0800a239 	.word	0x0800a239
 800a138:	0800a239 	.word	0x0800a239
 800a13c:	0800a239 	.word	0x0800a239
 800a140:	0800a239 	.word	0x0800a239
 800a144:	0800a239 	.word	0x0800a239
 800a148:	0800a239 	.word	0x0800a239
 800a14c:	0800a239 	.word	0x0800a239
 800a150:	0800a239 	.word	0x0800a239
 800a154:	0800a239 	.word	0x0800a239
 800a158:	0800a239 	.word	0x0800a239
 800a15c:	0800a239 	.word	0x0800a239
 800a160:	0800a239 	.word	0x0800a239
 800a164:	0800a239 	.word	0x0800a239
 800a168:	0800a239 	.word	0x0800a239
 800a16c:	0800a239 	.word	0x0800a239
 800a170:	0800a239 	.word	0x0800a239
 800a174:	0800a239 	.word	0x0800a239
 800a178:	0800a239 	.word	0x0800a239
 800a17c:	0800a239 	.word	0x0800a239
 800a180:	0800a239 	.word	0x0800a239
 800a184:	0800a239 	.word	0x0800a239
 800a188:	0800a239 	.word	0x0800a239
 800a18c:	0800a239 	.word	0x0800a239
 800a190:	0800a239 	.word	0x0800a239
 800a194:	0800a239 	.word	0x0800a239
 800a198:	0800a239 	.word	0x0800a239
 800a19c:	0800a1f1 	.word	0x0800a1f1
 800a1a0:	0800a1fd 	.word	0x0800a1fd
 800a1a4:	0800a209 	.word	0x0800a209
 800a1a8:	0800a215 	.word	0x0800a215
 800a1ac:	0800a221 	.word	0x0800a221
 800a1b0:	0800a22d 	.word	0x0800a22d
            case '0':
                data = 0;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73fb      	strb	r3, [r7, #15]
                break;
 800a1b8:	e03f      	b.n	800a23a <df_hexstring_hex+0x206>
            case '1':
                data = 1;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	73fb      	strb	r3, [r7, #15]
                break;
 800a1be:	e03c      	b.n	800a23a <df_hexstring_hex+0x206>
            case '2':
                data = 2;
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	73fb      	strb	r3, [r7, #15]
                break;
 800a1c4:	e039      	b.n	800a23a <df_hexstring_hex+0x206>
            case '3':
                data = 3;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	73fb      	strb	r3, [r7, #15]
                break;
 800a1ca:	e036      	b.n	800a23a <df_hexstring_hex+0x206>
            case '4':
                data = 4;
 800a1cc:	2304      	movs	r3, #4
 800a1ce:	73fb      	strb	r3, [r7, #15]
                break;
 800a1d0:	e033      	b.n	800a23a <df_hexstring_hex+0x206>
            case '5':
                data = 5;
 800a1d2:	2305      	movs	r3, #5
 800a1d4:	73fb      	strb	r3, [r7, #15]
                break;
 800a1d6:	e030      	b.n	800a23a <df_hexstring_hex+0x206>
            case '6':
                data = 6;
 800a1d8:	2306      	movs	r3, #6
 800a1da:	73fb      	strb	r3, [r7, #15]
                break;
 800a1dc:	e02d      	b.n	800a23a <df_hexstring_hex+0x206>
            case '7':
                data = 7;
 800a1de:	2307      	movs	r3, #7
 800a1e0:	73fb      	strb	r3, [r7, #15]
                break;
 800a1e2:	e02a      	b.n	800a23a <df_hexstring_hex+0x206>
            case '8':
                data = 8;
 800a1e4:	2308      	movs	r3, #8
 800a1e6:	73fb      	strb	r3, [r7, #15]
                break;
 800a1e8:	e027      	b.n	800a23a <df_hexstring_hex+0x206>
            case '9':
                data = 9;
 800a1ea:	2309      	movs	r3, #9
 800a1ec:	73fb      	strb	r3, [r7, #15]
                break;
 800a1ee:	e024      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'a':
                data = 10;
 800a1f0:	230a      	movs	r3, #10
 800a1f2:	73fb      	strb	r3, [r7, #15]
                break;
 800a1f4:	e021      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'A':
                data = 10;
 800a1f6:	230a      	movs	r3, #10
 800a1f8:	73fb      	strb	r3, [r7, #15]
                break;
 800a1fa:	e01e      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'b':
                data = 11;
 800a1fc:	230b      	movs	r3, #11
 800a1fe:	73fb      	strb	r3, [r7, #15]
                break;
 800a200:	e01b      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'B':
                data = 11;
 800a202:	230b      	movs	r3, #11
 800a204:	73fb      	strb	r3, [r7, #15]
                break;
 800a206:	e018      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'c':
                data = 12;
 800a208:	230c      	movs	r3, #12
 800a20a:	73fb      	strb	r3, [r7, #15]
                break;
 800a20c:	e015      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'C':
                data = 12;
 800a20e:	230c      	movs	r3, #12
 800a210:	73fb      	strb	r3, [r7, #15]
                break;
 800a212:	e012      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'd':
                data = 13;
 800a214:	230d      	movs	r3, #13
 800a216:	73fb      	strb	r3, [r7, #15]
                break;
 800a218:	e00f      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'D':
                data = 13;
 800a21a:	230d      	movs	r3, #13
 800a21c:	73fb      	strb	r3, [r7, #15]
                break;
 800a21e:	e00c      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'e':
                data = 14;
 800a220:	230e      	movs	r3, #14
 800a222:	73fb      	strb	r3, [r7, #15]
                break;
 800a224:	e009      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'E':
                data = 14;
 800a226:	230e      	movs	r3, #14
 800a228:	73fb      	strb	r3, [r7, #15]
                break;
 800a22a:	e006      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'f':
                data = 15;
 800a22c:	230f      	movs	r3, #15
 800a22e:	73fb      	strb	r3, [r7, #15]
                break;
 800a230:	e003      	b.n	800a23a <df_hexstring_hex+0x206>
            case 'F':
                data = 15;
 800a232:	230f      	movs	r3, #15
 800a234:	73fb      	strb	r3, [r7, #15]
                break;
 800a236:	e000      	b.n	800a23a <df_hexstring_hex+0x206>
            default:
                break;
 800a238:	bf00      	nop
        }
    }
    return data;
 800a23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	bc80      	pop	{r7}
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop

0800a248 <strremove>:

    return character;
}

char* strremove(char *str, const char *sub)
{
 800a248:	b590      	push	{r4, r7, lr}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
    size_t len = strlen(sub);
 800a252:	6838      	ldr	r0, [r7, #0]
 800a254:	f7fe fc82 	bl	8008b5c <strlen>
 800a258:	60b8      	str	r0, [r7, #8]
    if(len > 0){
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d01a      	beq.n	800a296 <strremove+0x4e>
        char *p = str;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	60fb      	str	r3, [r7, #12]
        while((p = strstr(p, sub)) != NULL){
 800a264:	e00f      	b.n	800a286 <strremove+0x3e>
            memmove(p, p + len, strlen(p + len) + 1);
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	18d4      	adds	r4, r2, r3
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	4413      	add	r3, r2
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe fc72 	bl	8008b5c <strlen>
 800a278:	4603      	mov	r3, r0
 800a27a:	3301      	adds	r3, #1
 800a27c:	461a      	mov	r2, r3
 800a27e:	4621      	mov	r1, r4
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f007 ff34 	bl	80120ee <memmove>
        while((p = strstr(p, sub)) != NULL){
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f007 ffbd 	bl	8012208 <strstr>
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1e7      	bne.n	800a266 <strremove+0x1e>
        }
    }

    return str;
 800a296:	687b      	ldr	r3, [r7, #4]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd90      	pop	{r4, r7, pc}

0800a2a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a2a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d8 <MX_DMA_Init+0x38>)
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	4a0b      	ldr	r2, [pc, #44]	@ (800a2d8 <MX_DMA_Init+0x38>)
 800a2ac:	f043 0301 	orr.w	r3, r3, #1
 800a2b0:	6153      	str	r3, [r2, #20]
 800a2b2:	4b09      	ldr	r3, [pc, #36]	@ (800a2d8 <MX_DMA_Init+0x38>)
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	607b      	str	r3, [r7, #4]
 800a2bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 13, 0);
 800a2be:	2200      	movs	r2, #0
 800a2c0:	210d      	movs	r1, #13
 800a2c2:	200f      	movs	r0, #15
 800a2c4:	f002 f9eb 	bl	800c69e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800a2c8:	200f      	movs	r0, #15
 800a2ca:	f002 fa04 	bl	800c6d6 <HAL_NVIC_EnableIRQ>

}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	40021000 	.word	0x40021000

0800a2dc <internal_flash_write_byte>:
// ###################################################### EEProm Functional Functions ######################################
// use INTERNAL FLASH as Internal EEPROM
HAL_StatusTypeDef internal_flash_ret = HAL_ERROR;

HAL_StatusTypeDef internal_flash_write_byte(uint32_t Flash_Address, uint32_t data)
{
 800a2dc:	b5b0      	push	{r4, r5, r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
	// clear all flags before you write it to flash
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800a2e6:	4b16      	ldr	r3, [pc, #88]	@ (800a340 <internal_flash_write_byte+0x64>)
 800a2e8:	2234      	movs	r2, #52	@ 0x34
 800a2ea:	60da      	str	r2, [r3, #12]

	HAL_StatusTypeDef ret_write = HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret_lock = HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	73bb      	strb	r3, [r7, #14]

	ret_lock = HAL_FLASH_Unlock();
 800a2f4:	f002 fdae 	bl	800ce54 <HAL_FLASH_Unlock>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73bb      	strb	r3, [r7, #14]
	if(ret_lock == HAL_OK){
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d116      	bne.n	800a330 <internal_flash_write_byte+0x54>
		ret_write = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, (uint64_t)data);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2200      	movs	r2, #0
 800a306:	461c      	mov	r4, r3
 800a308:	4615      	mov	r5, r2
 800a30a:	4622      	mov	r2, r4
 800a30c:	462b      	mov	r3, r5
 800a30e:	6879      	ldr	r1, [r7, #4]
 800a310:	2002      	movs	r0, #2
 800a312:	f002 fd2f 	bl	800cd74 <HAL_FLASH_Program>
 800a316:	4603      	mov	r3, r0
 800a318:	73fb      	strb	r3, [r7, #15]

		ret_lock = HAL_FLASH_Lock();
 800a31a:	f002 fdc1 	bl	800cea0 <HAL_FLASH_Lock>
 800a31e:	4603      	mov	r3, r0
 800a320:	73bb      	strb	r3, [r7, #14]

		if(ret_lock != HAL_OK){
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d006      	beq.n	800a336 <internal_flash_write_byte+0x5a>
			UART_Debug_PutString("internal_flash_write_byte: HAL_FLASH_Lock >> FAILED	*****	\r\n");
 800a328:	4806      	ldr	r0, [pc, #24]	@ (800a344 <internal_flash_write_byte+0x68>)
 800a32a:	f000 f9ff 	bl	800a72c <UART_Debug_PutString>
 800a32e:	e002      	b.n	800a336 <internal_flash_write_byte+0x5a>
		}
	}
	else{
		UART_Debug_PutString("internal_flash_write_byte: HAL_FLASH_Unlock >> FAILED\r\n");
 800a330:	4805      	ldr	r0, [pc, #20]	@ (800a348 <internal_flash_write_byte+0x6c>)
 800a332:	f000 f9fb 	bl	800a72c <UART_Debug_PutString>
	}

	return ret_write;
 800a336:	7bfb      	ldrb	r3, [r7, #15]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bdb0      	pop	{r4, r5, r7, pc}
 800a340:	40022000 	.word	0x40022000
 800a344:	08013414 	.word	0x08013414
 800a348:	08013454 	.word	0x08013454

0800a34c <internal_flash_erase>:
	__IO uint32_t read_data = *(__IO uint32_t *)Flash_Address;
	return (uint16_t)read_data;
}

uint8_t internal_flash_erase()
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
	UART_Debug_PutString("internal_flash_erase:Erasing FLASH Memory, Please wait...\r\n");
 800a352:	4819      	ldr	r0, [pc, #100]	@ (800a3b8 <internal_flash_erase+0x6c>)
 800a354:	f000 f9ea 	bl	800a72c <UART_Debug_PutString>

	uint8_t ret = 1;
 800a358:	2301      	movs	r3, #1
 800a35a:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	status = HAL_FLASH_Unlock();
 800a35c:	f002 fd7a 	bl	800ce54 <HAL_FLASH_Unlock>
 800a360:	4603      	mov	r3, r0
 800a362:	75bb      	strb	r3, [r7, #22]

	if(status == HAL_OK){
 800a364:	7dbb      	ldrb	r3, [r7, #22]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d117      	bne.n	800a39a <internal_flash_erase+0x4e>
		FLASH_EraseInitTypeDef EraseInitStruct;
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800a36a:	2300      	movs	r3, #0
 800a36c:	607b      	str	r3, [r7, #4]
		EraseInitStruct.PageAddress = IE2_FOTA_START_ADDRESS; // first address of the SECOND half of INTERNAL flash (for FOTA data)
 800a36e:	4b13      	ldr	r3, [pc, #76]	@ (800a3bc <internal_flash_erase+0x70>)
 800a370:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.NbPages = 100;							// 100 * 2K Page
 800a372:	2364      	movs	r3, #100	@ 0x64
 800a374:	613b      	str	r3, [r7, #16]

		uint32_t PageError;
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){		//Erase the Page Before a Write Operation
 800a376:	463a      	mov	r2, r7
 800a378:	1d3b      	adds	r3, r7, #4
 800a37a:	4611      	mov	r1, r2
 800a37c:	4618      	mov	r0, r3
 800a37e:	f002 fe51 	bl	800d024 <HAL_FLASHEx_Erase>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d005      	beq.n	800a394 <internal_flash_erase+0x48>
			UART_Debug_PutString("internal_flash_erase: ERASE FLASH >> FAILED\r\n");
 800a388:	480d      	ldr	r0, [pc, #52]	@ (800a3c0 <internal_flash_erase+0x74>)
 800a38a:	f000 f9cf 	bl	800a72c <UART_Debug_PutString>
			ret = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	75fb      	strb	r3, [r7, #23]
 800a392:	e002      	b.n	800a39a <internal_flash_erase+0x4e>
		}
		else{
			UART_Debug_PutString("internal_flash_erase: ERASE FLASH >> DONE\r\n");
 800a394:	480b      	ldr	r0, [pc, #44]	@ (800a3c4 <internal_flash_erase+0x78>)
 800a396:	f000 f9c9 	bl	800a72c <UART_Debug_PutString>
		}
	}

	status = HAL_FLASH_Lock();
 800a39a:	f002 fd81 	bl	800cea0 <HAL_FLASH_Lock>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	75bb      	strb	r3, [r7, #22]

	if(status != HAL_OK){
 800a3a2:	7dbb      	ldrb	r3, [r7, #22]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <internal_flash_erase+0x60>
		ret = 0;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	0801348c 	.word	0x0801348c
 800a3bc:	08040400 	.word	0x08040400
 800a3c0:	080134c8 	.word	0x080134c8
 800a3c4:	080134f8 	.word	0x080134f8

0800a3c8 <ee2_write_byte>:
	}

    return status;
}
HAL_StatusTypeDef ee2_write_byte(uint8_t chipAddr, uint8_t byte, uint16_t addr)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b088      	sub	sp, #32
 800a3cc:	af04      	add	r7, sp, #16
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	71fb      	strb	r3, [r7, #7]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	71bb      	strb	r3, [r7, #6]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	73fb      	strb	r3, [r7, #15]
	uint16_t i = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	81bb      	strh	r3, [r7, #12]

	while(status != HAL_OK && i < 200){
 800a3e2:	e02e      	b.n	800a442 <ee2_write_byte+0x7a>
		status = HAL_I2C_IsDeviceReady(&hi2c1, chipAddr, 0x00000001, 500);
 800a3e4:	79fb      	ldrb	r3, [r7, #7]
 800a3e6:	b299      	uxth	r1, r3
 800a3e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	481a      	ldr	r0, [pc, #104]	@ (800a458 <ee2_write_byte+0x90>)
 800a3f0:	f003 fada 	bl	800d9a8 <HAL_I2C_IsDeviceReady>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	73fb      	strb	r3, [r7, #15]

		if(status == HAL_OK){
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d118      	bne.n	800a430 <ee2_write_byte+0x68>
			status = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	73fb      	strb	r3, [r7, #15]
			status = HAL_I2C_Mem_Write(&hi2c1, chipAddr, addr, 2, &byte, 1, 500);  // write the data to the EEPROM
 800a402:	79fb      	ldrb	r3, [r7, #7]
 800a404:	b299      	uxth	r1, r3
 800a406:	88ba      	ldrh	r2, [r7, #4]
 800a408:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a40c:	9302      	str	r3, [sp, #8]
 800a40e:	2301      	movs	r3, #1
 800a410:	9301      	str	r3, [sp, #4]
 800a412:	1dbb      	adds	r3, r7, #6
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	2302      	movs	r3, #2
 800a418:	480f      	ldr	r0, [pc, #60]	@ (800a458 <ee2_write_byte+0x90>)
 800a41a:	f003 f9cb 	bl	800d7b4 <HAL_I2C_Mem_Write>
 800a41e:	4603      	mov	r3, r0
 800a420:	73fb      	strb	r3, [r7, #15]
			if(status != HAL_OK){
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d009      	beq.n	800a43c <ee2_write_byte+0x74>
				UART_Debug_PutString("ee2_write_byte:  HAL_I2C_Mem_Write: status != HAL_OK\r\n");
 800a428:	480c      	ldr	r0, [pc, #48]	@ (800a45c <ee2_write_byte+0x94>)
 800a42a:	f000 f97f 	bl	800a72c <UART_Debug_PutString>
 800a42e:	e005      	b.n	800a43c <ee2_write_byte+0x74>
			}
//			OS_TASK_Delay(5);   // delay for writing data
		}
		else if(i == 0){
 800a430:	89bb      	ldrh	r3, [r7, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d102      	bne.n	800a43c <ee2_write_byte+0x74>
				UART_Debug_PutString("ee2_write_byte:  HAL_I2C_IsDeviceReady: status != HAL_OK\r\n");
 800a436:	480a      	ldr	r0, [pc, #40]	@ (800a460 <ee2_write_byte+0x98>)
 800a438:	f000 f978 	bl	800a72c <UART_Debug_PutString>
//				OS_TASK_Delay(5);
		}

		i++;
 800a43c:	89bb      	ldrh	r3, [r7, #12]
 800a43e:	3301      	adds	r3, #1
 800a440:	81bb      	strh	r3, [r7, #12]
	while(status != HAL_OK && i < 200){
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <ee2_write_byte+0x86>
 800a448:	89bb      	ldrh	r3, [r7, #12]
 800a44a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a44c:	d9ca      	bls.n	800a3e4 <ee2_write_byte+0x1c>
		//HAL_IWDG_Refresh(&hiwdg);
	}

    return status;
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	20000934 	.word	0x20000934
 800a45c:	0801355c 	.word	0x0801355c
 800a460:	08013594 	.word	0x08013594

0800a464 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b088      	sub	sp, #32
 800a468:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a46a:	f107 0310 	add.w	r3, r7, #16
 800a46e:	2200      	movs	r2, #0
 800a470:	601a      	str	r2, [r3, #0]
 800a472:	605a      	str	r2, [r3, #4]
 800a474:	609a      	str	r2, [r3, #8]
 800a476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a478:	4b59      	ldr	r3, [pc, #356]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	4a58      	ldr	r2, [pc, #352]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a47e:	f043 0320 	orr.w	r3, r3, #32
 800a482:	6193      	str	r3, [r2, #24]
 800a484:	4b56      	ldr	r3, [pc, #344]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	f003 0320 	and.w	r3, r3, #32
 800a48c:	60fb      	str	r3, [r7, #12]
 800a48e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a490:	4b53      	ldr	r3, [pc, #332]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	4a52      	ldr	r2, [pc, #328]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a496:	f043 0310 	orr.w	r3, r3, #16
 800a49a:	6193      	str	r3, [r2, #24]
 800a49c:	4b50      	ldr	r3, [pc, #320]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	f003 0310 	and.w	r3, r3, #16
 800a4a4:	60bb      	str	r3, [r7, #8]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4a8:	4b4d      	ldr	r3, [pc, #308]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	4a4c      	ldr	r2, [pc, #304]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a4ae:	f043 0304 	orr.w	r3, r3, #4
 800a4b2:	6193      	str	r3, [r2, #24]
 800a4b4:	4b4a      	ldr	r3, [pc, #296]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	f003 0304 	and.w	r3, r3, #4
 800a4bc:	607b      	str	r3, [r7, #4]
 800a4be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4c0:	4b47      	ldr	r3, [pc, #284]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	4a46      	ldr	r2, [pc, #280]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a4c6:	f043 0308 	orr.w	r3, r3, #8
 800a4ca:	6193      	str	r3, [r2, #24]
 800a4cc:	4b44      	ldr	r3, [pc, #272]	@ (800a5e0 <MX_GPIO_Init+0x17c>)
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	f003 0308 	and.w	r3, r3, #8
 800a4d4:	603b      	str	r3, [r7, #0]
 800a4d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_Output_Relay_1_Pin|GPIO_Output_Relay_2_Pin, GPIO_PIN_RESET);
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2128      	movs	r1, #40	@ 0x28
 800a4dc:	4841      	ldr	r0, [pc, #260]	@ (800a5e4 <MX_GPIO_Init+0x180>)
 800a4de:	f002 fff4 	bl	800d4ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800a4e8:	483f      	ldr	r0, [pc, #252]	@ (800a5e8 <MX_GPIO_Init+0x184>)
 800a4ea:	f002 ffee 	bl	800d4ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_Input_1_Pin|GPIO_Input_2_Pin;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a4f2:	4b3e      	ldr	r3, [pc, #248]	@ (800a5ec <MX_GPIO_Init+0x188>)
 800a4f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4fa:	f107 0310 	add.w	r3, r7, #16
 800a4fe:	4619      	mov	r1, r3
 800a500:	4838      	ldr	r0, [pc, #224]	@ (800a5e4 <MX_GPIO_Init+0x180>)
 800a502:	f002 fe37 	bl	800d174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_inp_1_Pin|GPIO_Input_11_Pin;
 800a506:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800a50a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a50c:	2300      	movs	r3, #0
 800a50e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a510:	2301      	movs	r3, #1
 800a512:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a514:	f107 0310 	add.w	r3, r7, #16
 800a518:	4619      	mov	r1, r3
 800a51a:	4832      	ldr	r0, [pc, #200]	@ (800a5e4 <MX_GPIO_Init+0x180>)
 800a51c:	f002 fe2a 	bl	800d174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_Output_Relay_1_Pin|GPIO_Output_Relay_2_Pin;
 800a520:	2328      	movs	r3, #40	@ 0x28
 800a522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a524:	2301      	movs	r3, #1
 800a526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a528:	2302      	movs	r3, #2
 800a52a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a52c:	2302      	movs	r3, #2
 800a52e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a530:	f107 0310 	add.w	r3, r7, #16
 800a534:	4619      	mov	r1, r3
 800a536:	482b      	ldr	r0, [pc, #172]	@ (800a5e4 <MX_GPIO_Init+0x180>)
 800a538:	f002 fe1c 	bl	800d174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_Input_4_Pin|GPIO_Input_5_Pin;
 800a53c:	2360      	movs	r3, #96	@ 0x60
 800a53e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a540:	4b2a      	ldr	r3, [pc, #168]	@ (800a5ec <MX_GPIO_Init+0x188>)
 800a542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a544:	2300      	movs	r3, #0
 800a546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a548:	f107 0310 	add.w	r3, r7, #16
 800a54c:	4619      	mov	r1, r3
 800a54e:	4828      	ldr	r0, [pc, #160]	@ (800a5f0 <MX_GPIO_Init+0x18c>)
 800a550:	f002 fe10 	bl	800d174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_inp_2_Pin|GPIO_Input_12_Pin;
 800a554:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800a558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a55a:	2300      	movs	r3, #0
 800a55c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a55e:	2301      	movs	r3, #1
 800a560:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a562:	f107 0310 	add.w	r3, r7, #16
 800a566:	4619      	mov	r1, r3
 800a568:	4821      	ldr	r0, [pc, #132]	@ (800a5f0 <MX_GPIO_Init+0x18c>)
 800a56a:	f002 fe03 	bl	800d174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_Input_7_Pin|GPIO_Input_8_Pin|GPIO_Input_9_Pin|GPIO_Input_10_Pin;
 800a56e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800a572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a574:	2300      	movs	r3, #0
 800a576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a578:	2301      	movs	r3, #1
 800a57a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a57c:	f107 0310 	add.w	r3, r7, #16
 800a580:	4619      	mov	r1, r3
 800a582:	4819      	ldr	r0, [pc, #100]	@ (800a5e8 <MX_GPIO_Init+0x184>)
 800a584:	f002 fdf6 	bl	800d174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800a588:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800a58c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a58e:	2301      	movs	r3, #1
 800a590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a592:	2301      	movs	r3, #1
 800a594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a596:	2302      	movs	r3, #2
 800a598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a59a:	f107 0310 	add.w	r3, r7, #16
 800a59e:	4619      	mov	r1, r3
 800a5a0:	4811      	ldr	r0, [pc, #68]	@ (800a5e8 <MX_GPIO_Init+0x184>)
 800a5a2:	f002 fde7 	bl	800d174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 14, 0);
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	210e      	movs	r1, #14
 800a5aa:	2006      	movs	r0, #6
 800a5ac:	f002 f877 	bl	800c69e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a5b0:	2006      	movs	r0, #6
 800a5b2:	f002 f890 	bl	800c6d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 14, 0);
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	210e      	movs	r1, #14
 800a5ba:	2007      	movs	r0, #7
 800a5bc:	f002 f86f 	bl	800c69e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800a5c0:	2007      	movs	r0, #7
 800a5c2:	f002 f888 	bl	800c6d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	210e      	movs	r1, #14
 800a5ca:	2017      	movs	r0, #23
 800a5cc:	f002 f867 	bl	800c69e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a5d0:	2017      	movs	r0, #23
 800a5d2:	f002 f880 	bl	800c6d6 <HAL_NVIC_EnableIRQ>

}
 800a5d6:	bf00      	nop
 800a5d8:	3720      	adds	r7, #32
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	40021000 	.word	0x40021000
 800a5e4:	40011000 	.word	0x40011000
 800a5e8:	40010c00 	.word	0x40010c00
 800a5ec:	10210000 	.word	0x10210000
 800a5f0:	40010800 	.word	0x40010800

0800a5f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a5f8:	4b12      	ldr	r3, [pc, #72]	@ (800a644 <MX_I2C1_Init+0x50>)
 800a5fa:	4a13      	ldr	r2, [pc, #76]	@ (800a648 <MX_I2C1_Init+0x54>)
 800a5fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a5fe:	4b11      	ldr	r3, [pc, #68]	@ (800a644 <MX_I2C1_Init+0x50>)
 800a600:	4a12      	ldr	r2, [pc, #72]	@ (800a64c <MX_I2C1_Init+0x58>)
 800a602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a604:	4b0f      	ldr	r3, [pc, #60]	@ (800a644 <MX_I2C1_Init+0x50>)
 800a606:	2200      	movs	r2, #0
 800a608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a60a:	4b0e      	ldr	r3, [pc, #56]	@ (800a644 <MX_I2C1_Init+0x50>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a610:	4b0c      	ldr	r3, [pc, #48]	@ (800a644 <MX_I2C1_Init+0x50>)
 800a612:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a618:	4b0a      	ldr	r3, [pc, #40]	@ (800a644 <MX_I2C1_Init+0x50>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a61e:	4b09      	ldr	r3, [pc, #36]	@ (800a644 <MX_I2C1_Init+0x50>)
 800a620:	2200      	movs	r2, #0
 800a622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a624:	4b07      	ldr	r3, [pc, #28]	@ (800a644 <MX_I2C1_Init+0x50>)
 800a626:	2200      	movs	r2, #0
 800a628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a62a:	4b06      	ldr	r3, [pc, #24]	@ (800a644 <MX_I2C1_Init+0x50>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a630:	4804      	ldr	r0, [pc, #16]	@ (800a644 <MX_I2C1_Init+0x50>)
 800a632:	f002 ff7b 	bl	800d52c <HAL_I2C_Init>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a63c:	f001 fbdd 	bl	800bdfa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a640:	bf00      	nop
 800a642:	bd80      	pop	{r7, pc}
 800a644:	20000934 	.word	0x20000934
 800a648:	40005400 	.word	0x40005400
 800a64c:	000186a0 	.word	0x000186a0

0800a650 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a658:	f107 0310 	add.w	r3, r7, #16
 800a65c:	2200      	movs	r2, #0
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	605a      	str	r2, [r3, #4]
 800a662:	609a      	str	r2, [r3, #8]
 800a664:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a15      	ldr	r2, [pc, #84]	@ (800a6c0 <HAL_I2C_MspInit+0x70>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d123      	bne.n	800a6b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a670:	4b14      	ldr	r3, [pc, #80]	@ (800a6c4 <HAL_I2C_MspInit+0x74>)
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	4a13      	ldr	r2, [pc, #76]	@ (800a6c4 <HAL_I2C_MspInit+0x74>)
 800a676:	f043 0308 	orr.w	r3, r3, #8
 800a67a:	6193      	str	r3, [r2, #24]
 800a67c:	4b11      	ldr	r3, [pc, #68]	@ (800a6c4 <HAL_I2C_MspInit+0x74>)
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	f003 0308 	and.w	r3, r3, #8
 800a684:	60fb      	str	r3, [r7, #12]
 800a686:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a688:	23c0      	movs	r3, #192	@ 0xc0
 800a68a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a68c:	2312      	movs	r3, #18
 800a68e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a690:	2303      	movs	r3, #3
 800a692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a694:	f107 0310 	add.w	r3, r7, #16
 800a698:	4619      	mov	r1, r3
 800a69a:	480b      	ldr	r0, [pc, #44]	@ (800a6c8 <HAL_I2C_MspInit+0x78>)
 800a69c:	f002 fd6a 	bl	800d174 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a6a0:	4b08      	ldr	r3, [pc, #32]	@ (800a6c4 <HAL_I2C_MspInit+0x74>)
 800a6a2:	69db      	ldr	r3, [r3, #28]
 800a6a4:	4a07      	ldr	r2, [pc, #28]	@ (800a6c4 <HAL_I2C_MspInit+0x74>)
 800a6a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a6aa:	61d3      	str	r3, [r2, #28]
 800a6ac:	4b05      	ldr	r3, [pc, #20]	@ (800a6c4 <HAL_I2C_MspInit+0x74>)
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6b4:	60bb      	str	r3, [r7, #8]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800a6b8:	bf00      	nop
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	40005400 	.word	0x40005400
 800a6c4:	40021000 	.word	0x40021000
 800a6c8:	40010c00 	.word	0x40010c00

0800a6cc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800a6d0:	4b09      	ldr	r3, [pc, #36]	@ (800a6f8 <MX_IWDG_Init+0x2c>)
 800a6d2:	4a0a      	ldr	r2, [pc, #40]	@ (800a6fc <MX_IWDG_Init+0x30>)
 800a6d4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800a6d6:	4b08      	ldr	r3, [pc, #32]	@ (800a6f8 <MX_IWDG_Init+0x2c>)
 800a6d8:	2204      	movs	r2, #4
 800a6da:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1875;
 800a6dc:	4b06      	ldr	r3, [pc, #24]	@ (800a6f8 <MX_IWDG_Init+0x2c>)
 800a6de:	f240 7253 	movw	r2, #1875	@ 0x753
 800a6e2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800a6e4:	4804      	ldr	r0, [pc, #16]	@ (800a6f8 <MX_IWDG_Init+0x2c>)
 800a6e6:	f003 fcfb 	bl	800e0e0 <HAL_IWDG_Init>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800a6f0:	f001 fb83 	bl	800bdfa <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800a6f4:	bf00      	nop
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	20000988 	.word	0x20000988
 800a6fc:	40003000 	.word	0x40003000

0800a700 <__NVIC_SystemReset>:
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a704:	f3bf 8f4f 	dsb	sy
}
 800a708:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a70a:	4b06      	ldr	r3, [pc, #24]	@ (800a724 <__NVIC_SystemReset+0x24>)
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a712:	4904      	ldr	r1, [pc, #16]	@ (800a724 <__NVIC_SystemReset+0x24>)
 800a714:	4b04      	ldr	r3, [pc, #16]	@ (800a728 <__NVIC_SystemReset+0x28>)
 800a716:	4313      	orrs	r3, r2
 800a718:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a71a:	f3bf 8f4f 	dsb	sy
}
 800a71e:	bf00      	nop
    __NOP();
 800a720:	bf00      	nop
 800a722:	e7fd      	b.n	800a720 <__NVIC_SystemReset+0x20>
 800a724:	e000ed00 	.word	0xe000ed00
 800a728:	05fa0004 	.word	0x05fa0004

0800a72c <UART_Debug_PutString>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void UART_Debug_PutString(const char* msg)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (const uint8_t*)msg, strlen(msg), 500);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7fe fa11 	bl	8008b5c <strlen>
 800a73a:	4603      	mov	r3, r0
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	4803      	ldr	r0, [pc, #12]	@ (800a754 <UART_Debug_PutString+0x28>)
 800a746:	f004 fc1d 	bl	800ef84 <HAL_UART_Transmit>
	return;
 800a74a:	bf00      	nop
}
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	20002f94 	.word	0x20002f94

0800a758 <UART_Linux_PutString>:

void UART_Linux_PutString(const char* msg)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
//	for(uint16_t i = 0; i < strlen(msg) + 1; i++){
//		HAL_UART_Transmit(&huart1, (const uint8_t*)&msg[i], 1, 1);
//	}
	HAL_UART_Transmit(&huart1, (const uint8_t*)msg, strlen(msg) + 1, 500);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7fe f9fb 	bl	8008b5c <strlen>
 800a766:	4603      	mov	r3, r0
 800a768:	b29b      	uxth	r3, r3
 800a76a:	3301      	adds	r3, #1
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a772:	6879      	ldr	r1, [r7, #4]
 800a774:	4803      	ldr	r0, [pc, #12]	@ (800a784 <UART_Linux_PutString+0x2c>)
 800a776:	f004 fc05 	bl	800ef84 <HAL_UART_Transmit>
	return;
 800a77a:	bf00      	nop
}
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20002f4c 	.word	0x20002f4c

0800a788 <Ports_Job>:
	HAL_UART_Transmit(&huart1, ((const uint8_t*)&c), 1, 500);
	return;
}

void Ports_Job(uint8_t intr)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	4603      	mov	r3, r0
 800a790:	71fb      	strb	r3, [r7, #7]
//	char data[100];
//	sprintf(data, "intr = 0x%02X\r\n", intr);
//	UART_Debug_PutString(data);

//	uint8_t Port1 = 0;
	uint8_t Port1_W0 = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	73fb      	strb	r3, [r7, #15]
	uint8_t Port1_W1 = 0;
 800a796:	2300      	movs	r3, #0
 800a798:	73bb      	strb	r3, [r7, #14]
	//uint8_t Port1_In = 0;

//	uint8_t Port2 = 0;
	uint8_t Port2_W0 = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	737b      	strb	r3, [r7, #13]
	uint8_t Port2_W1 = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	733b      	strb	r3, [r7, #12]
	//uint8_t Port2_In = 0;

//	Port1 = intr & 0b00000111;
//	Port2 = (intr & 0b11100000) >>  5;

	check_port_1(intr & 0b00000111, &Port1_W0, &Port1_W1);
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	f003 0307 	and.w	r3, r3, #7
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	f107 020e 	add.w	r2, r7, #14
 800a7ae:	f107 010f 	add.w	r1, r7, #15
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 f81a 	bl	800a7ec <check_port_1>
//    HAL_IWDG_Refresh(&hiwdg);;
//
    check_port_2((intr & 0b11100000) >>  5, &Port2_W0, &Port2_W1);
 800a7b8:	79fb      	ldrb	r3, [r7, #7]
 800a7ba:	095b      	lsrs	r3, r3, #5
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	f107 020c 	add.w	r2, r7, #12
 800a7c2:	f107 010d 	add.w	r1, r7, #13
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 f82a 	bl	800a820 <check_port_2>
//    HAL_IWDG_Refresh(&hiwdg);

    //check_port_input_2(Port2_In);
//    HAL_IWDG_Refresh(&hiwdg);

    check_port_wiegand_1(Port1_W0, Port1_W1);
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
 800a7ce:	7bba      	ldrb	r2, [r7, #14]
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 f886 	bl	800a8e4 <check_port_wiegand_1>
//    HAL_IWDG_Refresh(&hiwdg);

    check_port_wiegand_2(Port2_W0, Port2_W1);
 800a7d8:	7b7b      	ldrb	r3, [r7, #13]
 800a7da:	7b3a      	ldrb	r2, [r7, #12]
 800a7dc:	4611      	mov	r1, r2
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 f928 	bl	800aa34 <check_port_wiegand_2>

    //char s2[100];
    //sprintf(s2, "OS_TIMER_GetStatus(&Timer_AfterRead_Port2) = %d\r\n", OS_TIMER_GetStatus(&Timer_AfterRead_Port2));
    //UART_Debug_PutString(s2);

    return;
 800a7e4:	bf00      	nop
}
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <check_port_1>:

void check_port_1(uint8_t check, uint8_t* p1_0, uint8_t* p1_1)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
 800a7f8:	73fb      	strb	r3, [r7, #15]
    switch(check){
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d002      	beq.n	800a806 <check_port_1+0x1a>
 800a800:	2b02      	cmp	r3, #2
 800a802:	d004      	beq.n	800a80e <check_port_1+0x22>
//        case 7:{
//            //W1_0, W1_1, In1
//             break;
//        }
        default:{
            break;
 800a804:	e007      	b.n	800a816 <check_port_1+0x2a>
            *p1_0 = 1;
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2201      	movs	r2, #1
 800a80a:	701a      	strb	r2, [r3, #0]
            break;
 800a80c:	e003      	b.n	800a816 <check_port_1+0x2a>
            *p1_1 = 1;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	701a      	strb	r2, [r3, #0]
            break;
 800a814:	bf00      	nop
        }
    }
    return;
 800a816:	bf00      	nop
}
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bc80      	pop	{r7}
 800a81e:	4770      	bx	lr

0800a820 <check_port_2>:

void check_port_2(uint8_t check, uint8_t* p2_0, uint8_t* p2_1)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	73fb      	strb	r3, [r7, #15]
    switch(check){
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d002      	beq.n	800a83a <check_port_2+0x1a>
 800a834:	2b02      	cmp	r3, #2
 800a836:	d004      	beq.n	800a842 <check_port_2+0x22>
//        case 7:{
//            //W2_0, W2_1, In2
//             break;
//        }
        default:{
            break;
 800a838:	e007      	b.n	800a84a <check_port_2+0x2a>
            *p2_0 = 1;
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	2201      	movs	r2, #1
 800a83e:	701a      	strb	r2, [r3, #0]
            break;
 800a840:	e003      	b.n	800a84a <check_port_2+0x2a>
            *p2_1 = 1;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	701a      	strb	r2, [r3, #0]
            break;
 800a848:	bf00      	nop
        }
    }

    return;
 800a84a:	bf00      	nop
}
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	bc80      	pop	{r7}
 800a852:	4770      	bx	lr

0800a854 <check_port_input_1>:

void check_port_input_1(uint8_t Port1_In)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	4603      	mov	r3, r0
 800a85c:	71fb      	strb	r3, [r7, #7]
    if(Port1_In && !OS_TIMER_GetStatus(&Timer_AfterRead_In1)){
 800a85e:	79fb      	ldrb	r3, [r7, #7]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d012      	beq.n	800a88a <check_port_input_1+0x36>
 800a864:	480b      	ldr	r0, [pc, #44]	@ (800a894 <check_port_input_1+0x40>)
 800a866:	f005 fef7 	bl	8010658 <OS_TIMER_GetStatus>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10c      	bne.n	800a88a <check_port_input_1+0x36>
        In1[0] = 'I';
 800a870:	4b09      	ldr	r3, [pc, #36]	@ (800a898 <check_port_input_1+0x44>)
 800a872:	2249      	movs	r2, #73	@ 0x49
 800a874:	701a      	strb	r2, [r3, #0]
        In1[1] = '1';
 800a876:	4b08      	ldr	r3, [pc, #32]	@ (800a898 <check_port_input_1+0x44>)
 800a878:	2231      	movs	r2, #49	@ 0x31
 800a87a:	705a      	strb	r2, [r3, #1]
        In1[2] = '\0';
 800a87c:	4b06      	ldr	r3, [pc, #24]	@ (800a898 <check_port_input_1+0x44>)
 800a87e:	2200      	movs	r2, #0
 800a880:	709a      	strb	r2, [r3, #2]
//		In1[1] = '\0';
//		In1[2] = '\0';
//				UART_Debug_PutString("----------------------------\r\n");
//				HAL_IWDG_Refresh(&hiwdg);

        OS_TIMER_Restart(&Timer_AfterRead_In1);
 800a882:	4804      	ldr	r0, [pc, #16]	@ (800a894 <check_port_input_1+0x40>)
 800a884:	f005 ff10 	bl	80106a8 <OS_TIMER_Restart>
//        OS_TIMER_Stop(&Timer_AfterRead_In1);
    }

    return;
 800a888:	bf00      	nop
 800a88a:	bf00      	nop
}
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	20002a38 	.word	0x20002a38
 800a898:	20002b64 	.word	0x20002b64

0800a89c <check_port_input_2>:

void check_port_input_2(uint8_t Port2_In)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	71fb      	strb	r3, [r7, #7]
    if(Port2_In && !OS_TIMER_GetStatus(&Timer_AfterRead_In2)){
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d012      	beq.n	800a8d2 <check_port_input_2+0x36>
 800a8ac:	480b      	ldr	r0, [pc, #44]	@ (800a8dc <check_port_input_2+0x40>)
 800a8ae:	f005 fed3 	bl	8010658 <OS_TIMER_GetStatus>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10c      	bne.n	800a8d2 <check_port_input_2+0x36>
        In2[0] = 'I';
 800a8b8:	4b09      	ldr	r3, [pc, #36]	@ (800a8e0 <check_port_input_2+0x44>)
 800a8ba:	2249      	movs	r2, #73	@ 0x49
 800a8bc:	701a      	strb	r2, [r3, #0]
        In2[1] = '2';
 800a8be:	4b08      	ldr	r3, [pc, #32]	@ (800a8e0 <check_port_input_2+0x44>)
 800a8c0:	2232      	movs	r2, #50	@ 0x32
 800a8c2:	705a      	strb	r2, [r3, #1]
        In2[2] = '\0';
 800a8c4:	4b06      	ldr	r3, [pc, #24]	@ (800a8e0 <check_port_input_2+0x44>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	709a      	strb	r2, [r3, #2]
//		UART_Debug_PutString("----------------------------\r\n");
//		HAL_IWDG_Refresh(&hiwdg);



      OS_TIMER_Restart(&Timer_AfterRead_In2);
 800a8ca:	4804      	ldr	r0, [pc, #16]	@ (800a8dc <check_port_input_2+0x40>)
 800a8cc:	f005 feec 	bl	80106a8 <OS_TIMER_Restart>
//      OS_TIMER_Stop(&Timer_AfterRead_In2);
    }

    return;
 800a8d0:	bf00      	nop
 800a8d2:	bf00      	nop
}
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20002a60 	.word	0x20002a60
 800a8e0:	20002bf4 	.word	0x20002bf4

0800a8e4 <check_port_wiegand_1>:

void check_port_wiegand_1(uint8_t Port1_W0, uint8_t Port1_W1)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	460a      	mov	r2, r1
 800a8ee:	71fb      	strb	r3, [r7, #7]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	71bb      	strb	r3, [r7, #6]
    if(!Port1_w_have){
 800a8f4:	4b47      	ldr	r3, [pc, #284]	@ (800aa14 <check_port_wiegand_1+0x130>)
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f040 8086 	bne.w	800aa0a <check_port_wiegand_1+0x126>
        if((Port1_W0 || Port1_W1) && !Port1_Locked && !OS_TIMER_GetStatus(&Timer_AfterRead_Port1)){
 800a8fe:	79fb      	ldrb	r3, [r7, #7]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d102      	bne.n	800a90a <check_port_wiegand_1+0x26>
 800a904:	79bb      	ldrb	r3, [r7, #6]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d07f      	beq.n	800aa0a <check_port_wiegand_1+0x126>
 800a90a:	4b43      	ldr	r3, [pc, #268]	@ (800aa18 <check_port_wiegand_1+0x134>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d17b      	bne.n	800aa0a <check_port_wiegand_1+0x126>
 800a912:	4842      	ldr	r0, [pc, #264]	@ (800aa1c <check_port_wiegand_1+0x138>)
 800a914:	f005 fea0 	bl	8010658 <OS_TIMER_GetStatus>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d175      	bne.n	800aa0a <check_port_wiegand_1+0x126>
            if(Port1_w_Start){
 800a91e:	4b40      	ldr	r3, [pc, #256]	@ (800aa20 <check_port_wiegand_1+0x13c>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d03d      	beq.n	800a9a2 <check_port_wiegand_1+0xbe>
                OS_TIMER_Restart(&Timer_Read_W_Port1);
 800a926:	483f      	ldr	r0, [pc, #252]	@ (800aa24 <check_port_wiegand_1+0x140>)
 800a928:	f005 febe 	bl	80106a8 <OS_TIMER_Restart>
                if(Port1_W0){
 800a92c:	79fb      	ldrb	r3, [r7, #7]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00b      	beq.n	800a94a <check_port_wiegand_1+0x66>
                    Port1_W[Port1_W_Counter] = '0';
 800a932:	4b3d      	ldr	r3, [pc, #244]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	4b3c      	ldr	r3, [pc, #240]	@ (800aa2c <check_port_wiegand_1+0x148>)
 800a93a:	2130      	movs	r1, #48	@ 0x30
 800a93c:	5499      	strb	r1, [r3, r2]
                    Port1_W_Counter = Port1_W_Counter + 1;
 800a93e:	4b3a      	ldr	r3, [pc, #232]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	3301      	adds	r3, #1
 800a944:	b2da      	uxtb	r2, r3
 800a946:	4b38      	ldr	r3, [pc, #224]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a948:	701a      	strb	r2, [r3, #0]
                }

                if(Port1_W1){
 800a94a:	79bb      	ldrb	r3, [r7, #6]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00b      	beq.n	800a968 <check_port_wiegand_1+0x84>
                    Port1_W[Port1_W_Counter] = '1';
 800a950:	4b35      	ldr	r3, [pc, #212]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	461a      	mov	r2, r3
 800a956:	4b35      	ldr	r3, [pc, #212]	@ (800aa2c <check_port_wiegand_1+0x148>)
 800a958:	2131      	movs	r1, #49	@ 0x31
 800a95a:	5499      	strb	r1, [r3, r2]
                    Port1_W_Counter = Port1_W_Counter + 1;
 800a95c:	4b32      	ldr	r3, [pc, #200]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	3301      	adds	r3, #1
 800a962:	b2da      	uxtb	r2, r3
 800a964:	4b30      	ldr	r3, [pc, #192]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a966:	701a      	strb	r2, [r3, #0]
                }

                if(Port1_W_Counter >= (Port1_W_bits + 3)){
 800a968:	4b31      	ldr	r3, [pc, #196]	@ (800aa30 <check_port_wiegand_1+0x14c>)
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	3302      	adds	r3, #2
 800a96e:	4a2e      	ldr	r2, [pc, #184]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a970:	7812      	ldrb	r2, [r2, #0]
 800a972:	4293      	cmp	r3, r2
 800a974:	da49      	bge.n	800aa0a <check_port_wiegand_1+0x126>
                    Port1_W[Port1_W_Counter] = '\0';
 800a976:	4b2c      	ldr	r3, [pc, #176]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	4b2b      	ldr	r3, [pc, #172]	@ (800aa2c <check_port_wiegand_1+0x148>)
 800a97e:	2100      	movs	r1, #0
 800a980:	5499      	strb	r1, [r3, r2]
                    Port1_W_Counter = Port1_W_Counter + 1;
 800a982:	4b29      	ldr	r3, [pc, #164]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	3301      	adds	r3, #1
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	4b27      	ldr	r3, [pc, #156]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a98c:	701a      	strb	r2, [r3, #0]

//                    Port1_W_Counter = 0;
//					Port1_w_Start = 0;
					Port1_w_have = 1;
 800a98e:	4b21      	ldr	r3, [pc, #132]	@ (800aa14 <check_port_wiegand_1+0x130>)
 800a990:	2201      	movs	r2, #1
 800a992:	701a      	strb	r2, [r3, #0]

                    OS_TIMER_Stop(&Timer_Read_W_Port1);
 800a994:	4823      	ldr	r0, [pc, #140]	@ (800aa24 <check_port_wiegand_1+0x140>)
 800a996:	f005 fed3 	bl	8010740 <OS_TIMER_Stop>
//					Port1_w_have = 0;
	//				UART_Debug_PutString("----------------------------\r\n");
	//				HAL_IWDG_Refresh(&hiwdg);

	//				OS_TIMER_Stop(&Timer_AfterRead_Port1);
					OS_TIMER_Restart(&Timer_AfterRead_Port1);
 800a99a:	4820      	ldr	r0, [pc, #128]	@ (800aa1c <check_port_wiegand_1+0x138>)
 800a99c:	f005 fe84 	bl	80106a8 <OS_TIMER_Restart>
                }
            }
        }
    }

    return;
 800a9a0:	e033      	b.n	800aa0a <check_port_wiegand_1+0x126>
                Port1_w_Start = 1;
 800a9a2:	4b1f      	ldr	r3, [pc, #124]	@ (800aa20 <check_port_wiegand_1+0x13c>)
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	701a      	strb	r2, [r3, #0]
                OS_TIMER_Restart(&Timer_Read_W_Port1);
 800a9a8:	481e      	ldr	r0, [pc, #120]	@ (800aa24 <check_port_wiegand_1+0x140>)
 800a9aa:	f005 fe7d 	bl	80106a8 <OS_TIMER_Restart>
                Port1_W_Counter = 0;
 800a9ae:	4b1e      	ldr	r3, [pc, #120]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	701a      	strb	r2, [r3, #0]
                Port1_W[0] = 'P';
 800a9b4:	4b1d      	ldr	r3, [pc, #116]	@ (800aa2c <check_port_wiegand_1+0x148>)
 800a9b6:	2250      	movs	r2, #80	@ 0x50
 800a9b8:	701a      	strb	r2, [r3, #0]
                Port1_W[1] = '1';
 800a9ba:	4b1c      	ldr	r3, [pc, #112]	@ (800aa2c <check_port_wiegand_1+0x148>)
 800a9bc:	2231      	movs	r2, #49	@ 0x31
 800a9be:	705a      	strb	r2, [r3, #1]
                Port1_W[2] = 'W';
 800a9c0:	4b1a      	ldr	r3, [pc, #104]	@ (800aa2c <check_port_wiegand_1+0x148>)
 800a9c2:	2257      	movs	r2, #87	@ 0x57
 800a9c4:	709a      	strb	r2, [r3, #2]
                Port1_W_Counter = 3;
 800a9c6:	4b18      	ldr	r3, [pc, #96]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a9c8:	2203      	movs	r2, #3
 800a9ca:	701a      	strb	r2, [r3, #0]
                if(Port1_W0){
 800a9cc:	79fb      	ldrb	r3, [r7, #7]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00b      	beq.n	800a9ea <check_port_wiegand_1+0x106>
                    Port1_W[Port1_W_Counter] = '0';
 800a9d2:	4b15      	ldr	r3, [pc, #84]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	4b14      	ldr	r3, [pc, #80]	@ (800aa2c <check_port_wiegand_1+0x148>)
 800a9da:	2130      	movs	r1, #48	@ 0x30
 800a9dc:	5499      	strb	r1, [r3, r2]
                    Port1_W_Counter = Port1_W_Counter + 1;
 800a9de:	4b12      	ldr	r3, [pc, #72]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	4b10      	ldr	r3, [pc, #64]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a9e8:	701a      	strb	r2, [r3, #0]
                if(Port1_W1){
 800a9ea:	79bb      	ldrb	r3, [r7, #6]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00c      	beq.n	800aa0a <check_port_wiegand_1+0x126>
                    Port1_W[Port1_W_Counter] = '1';
 800a9f0:	4b0d      	ldr	r3, [pc, #52]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa2c <check_port_wiegand_1+0x148>)
 800a9f8:	2131      	movs	r1, #49	@ 0x31
 800a9fa:	5499      	strb	r1, [r3, r2]
                    Port1_W_Counter = Port1_W_Counter + 1;
 800a9fc:	4b0a      	ldr	r3, [pc, #40]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	3301      	adds	r3, #1
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	4b08      	ldr	r3, [pc, #32]	@ (800aa28 <check_port_wiegand_1+0x144>)
 800aa06:	701a      	strb	r2, [r3, #0]
    return;
 800aa08:	bf00      	nop
 800aa0a:	bf00      	nop
}
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	20002add 	.word	0x20002add
 800aa18:	20002ada 	.word	0x20002ada
 800aa1c:	20002a4c 	.word	0x20002a4c
 800aa20:	20002adc 	.word	0x20002adc
 800aa24:	20002a10 	.word	0x20002a10
 800aa28:	20002b67 	.word	0x20002b67
 800aa2c:	20002ae0 	.word	0x20002ae0
 800aa30:	20000002 	.word	0x20000002

0800aa34 <check_port_wiegand_2>:

void check_port_wiegand_2(uint8_t Port2_W0, uint8_t Port2_W1)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	460a      	mov	r2, r1
 800aa3e:	71fb      	strb	r3, [r7, #7]
 800aa40:	4613      	mov	r3, r2
 800aa42:	71bb      	strb	r3, [r7, #6]
    if(!Port2_w_have){
 800aa44:	4b47      	ldr	r3, [pc, #284]	@ (800ab64 <check_port_wiegand_2+0x130>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f040 8086 	bne.w	800ab5a <check_port_wiegand_2+0x126>
        if((Port2_W0 || Port2_W1) && !Port2_Locked && !OS_TIMER_GetStatus(&Timer_AfterRead_Port2)){
 800aa4e:	79fb      	ldrb	r3, [r7, #7]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d102      	bne.n	800aa5a <check_port_wiegand_2+0x26>
 800aa54:	79bb      	ldrb	r3, [r7, #6]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d07f      	beq.n	800ab5a <check_port_wiegand_2+0x126>
 800aa5a:	4b43      	ldr	r3, [pc, #268]	@ (800ab68 <check_port_wiegand_2+0x134>)
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d17b      	bne.n	800ab5a <check_port_wiegand_2+0x126>
 800aa62:	4842      	ldr	r0, [pc, #264]	@ (800ab6c <check_port_wiegand_2+0x138>)
 800aa64:	f005 fdf8 	bl	8010658 <OS_TIMER_GetStatus>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d175      	bne.n	800ab5a <check_port_wiegand_2+0x126>
            if(Port2_w_Start){
 800aa6e:	4b40      	ldr	r3, [pc, #256]	@ (800ab70 <check_port_wiegand_2+0x13c>)
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d03d      	beq.n	800aaf2 <check_port_wiegand_2+0xbe>
                OS_TIMER_Restart(&Timer_Read_W_Port2);
 800aa76:	483f      	ldr	r0, [pc, #252]	@ (800ab74 <check_port_wiegand_2+0x140>)
 800aa78:	f005 fe16 	bl	80106a8 <OS_TIMER_Restart>
                if(Port2_W0){
 800aa7c:	79fb      	ldrb	r3, [r7, #7]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00b      	beq.n	800aa9a <check_port_wiegand_2+0x66>
                    Port2_W[Port2_W_Counter] = '0';
 800aa82:	4b3d      	ldr	r3, [pc, #244]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	4b3c      	ldr	r3, [pc, #240]	@ (800ab7c <check_port_wiegand_2+0x148>)
 800aa8a:	2130      	movs	r1, #48	@ 0x30
 800aa8c:	5499      	strb	r1, [r3, r2]
                    Port2_W_Counter = Port2_W_Counter + 1;
 800aa8e:	4b3a      	ldr	r3, [pc, #232]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	3301      	adds	r3, #1
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	4b38      	ldr	r3, [pc, #224]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800aa98:	701a      	strb	r2, [r3, #0]
                }

                if(Port2_W1){
 800aa9a:	79bb      	ldrb	r3, [r7, #6]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00b      	beq.n	800aab8 <check_port_wiegand_2+0x84>
                    Port2_W[Port2_W_Counter] = '1';
 800aaa0:	4b35      	ldr	r3, [pc, #212]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	4b35      	ldr	r3, [pc, #212]	@ (800ab7c <check_port_wiegand_2+0x148>)
 800aaa8:	2131      	movs	r1, #49	@ 0x31
 800aaaa:	5499      	strb	r1, [r3, r2]
                    Port2_W_Counter = Port2_W_Counter + 1;
 800aaac:	4b32      	ldr	r3, [pc, #200]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	3301      	adds	r3, #1
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	4b30      	ldr	r3, [pc, #192]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800aab6:	701a      	strb	r2, [r3, #0]
                }

                if(Port2_W_Counter >= (Port2_W_bits + 3)){
 800aab8:	4b31      	ldr	r3, [pc, #196]	@ (800ab80 <check_port_wiegand_2+0x14c>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	3302      	adds	r3, #2
 800aabe:	4a2e      	ldr	r2, [pc, #184]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800aac0:	7812      	ldrb	r2, [r2, #0]
 800aac2:	4293      	cmp	r3, r2
 800aac4:	da49      	bge.n	800ab5a <check_port_wiegand_2+0x126>
                    Port2_W[Port2_W_Counter] = '\0';
 800aac6:	4b2c      	ldr	r3, [pc, #176]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	4b2b      	ldr	r3, [pc, #172]	@ (800ab7c <check_port_wiegand_2+0x148>)
 800aace:	2100      	movs	r1, #0
 800aad0:	5499      	strb	r1, [r3, r2]
                    Port2_W_Counter = Port2_W_Counter + 1;
 800aad2:	4b29      	ldr	r3, [pc, #164]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	3301      	adds	r3, #1
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	4b27      	ldr	r3, [pc, #156]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800aadc:	701a      	strb	r2, [r3, #0]

//                    Port2_W_Counter = 0;
//                    Port2_w_Start = 0;
                    Port2_w_have = 1;
 800aade:	4b21      	ldr	r3, [pc, #132]	@ (800ab64 <check_port_wiegand_2+0x130>)
 800aae0:	2201      	movs	r2, #1
 800aae2:	701a      	strb	r2, [r3, #0]

                    OS_TIMER_Stop(&Timer_Read_W_Port2);
 800aae4:	4823      	ldr	r0, [pc, #140]	@ (800ab74 <check_port_wiegand_2+0x140>)
 800aae6:	f005 fe2b 	bl	8010740 <OS_TIMER_Stop>
//				Port2_w_have = 0;
//				UART_Debug_PutString("----------------------------\r\n");
//				HAL_IWDG_Refresh(&hiwdg);

//				OS_TIMER_Stop(&Timer_AfterRead_Port2);
                    OS_TIMER_Restart(&Timer_AfterRead_Port2);
 800aaea:	4820      	ldr	r0, [pc, #128]	@ (800ab6c <check_port_wiegand_2+0x138>)
 800aaec:	f005 fddc 	bl	80106a8 <OS_TIMER_Restart>
                }
            }
        }
    }

    return;
 800aaf0:	e033      	b.n	800ab5a <check_port_wiegand_2+0x126>
                Port2_w_Start = 1;
 800aaf2:	4b1f      	ldr	r3, [pc, #124]	@ (800ab70 <check_port_wiegand_2+0x13c>)
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	701a      	strb	r2, [r3, #0]
                OS_TIMER_Restart(&Timer_Read_W_Port2);
 800aaf8:	481e      	ldr	r0, [pc, #120]	@ (800ab74 <check_port_wiegand_2+0x140>)
 800aafa:	f005 fdd5 	bl	80106a8 <OS_TIMER_Restart>
                Port2_W_Counter = 0;
 800aafe:	4b1e      	ldr	r3, [pc, #120]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	701a      	strb	r2, [r3, #0]
                Port2_W[0] = 'P';
 800ab04:	4b1d      	ldr	r3, [pc, #116]	@ (800ab7c <check_port_wiegand_2+0x148>)
 800ab06:	2250      	movs	r2, #80	@ 0x50
 800ab08:	701a      	strb	r2, [r3, #0]
                Port2_W[1] = '2';
 800ab0a:	4b1c      	ldr	r3, [pc, #112]	@ (800ab7c <check_port_wiegand_2+0x148>)
 800ab0c:	2232      	movs	r2, #50	@ 0x32
 800ab0e:	705a      	strb	r2, [r3, #1]
                Port2_W[2] = 'W';
 800ab10:	4b1a      	ldr	r3, [pc, #104]	@ (800ab7c <check_port_wiegand_2+0x148>)
 800ab12:	2257      	movs	r2, #87	@ 0x57
 800ab14:	709a      	strb	r2, [r3, #2]
                Port2_W_Counter = 3;
 800ab16:	4b18      	ldr	r3, [pc, #96]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800ab18:	2203      	movs	r2, #3
 800ab1a:	701a      	strb	r2, [r3, #0]
                if(Port2_W0){
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00b      	beq.n	800ab3a <check_port_wiegand_2+0x106>
                    Port2_W[Port2_W_Counter] = '0';
 800ab22:	4b15      	ldr	r3, [pc, #84]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	4b14      	ldr	r3, [pc, #80]	@ (800ab7c <check_port_wiegand_2+0x148>)
 800ab2a:	2130      	movs	r1, #48	@ 0x30
 800ab2c:	5499      	strb	r1, [r3, r2]
                    Port2_W_Counter = Port2_W_Counter + 1;
 800ab2e:	4b12      	ldr	r3, [pc, #72]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	3301      	adds	r3, #1
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	4b10      	ldr	r3, [pc, #64]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800ab38:	701a      	strb	r2, [r3, #0]
                if(Port2_W1){
 800ab3a:	79bb      	ldrb	r3, [r7, #6]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00c      	beq.n	800ab5a <check_port_wiegand_2+0x126>
                    Port2_W[Port2_W_Counter] = '1';
 800ab40:	4b0d      	ldr	r3, [pc, #52]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	461a      	mov	r2, r3
 800ab46:	4b0d      	ldr	r3, [pc, #52]	@ (800ab7c <check_port_wiegand_2+0x148>)
 800ab48:	2131      	movs	r1, #49	@ 0x31
 800ab4a:	5499      	strb	r1, [r3, r2]
                    Port2_W_Counter = Port2_W_Counter + 1;
 800ab4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	3301      	adds	r3, #1
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	4b08      	ldr	r3, [pc, #32]	@ (800ab78 <check_port_wiegand_2+0x144>)
 800ab56:	701a      	strb	r2, [r3, #0]
    return;
 800ab58:	bf00      	nop
 800ab5a:	bf00      	nop
}
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	20002b6d 	.word	0x20002b6d
 800ab68:	20002b6a 	.word	0x20002b6a
 800ab6c:	20002a74 	.word	0x20002a74
 800ab70:	20002b6c 	.word	0x20002b6c
 800ab74:	20002a24 	.word	0x20002a24
 800ab78:	20002bf7 	.word	0x20002bf7
 800ab7c:	20002b70 	.word	0x20002b70
 800ab80:	20000004 	.word	0x20000004

0800ab84 <Inputs_Job>:

void Inputs_Job()
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
    uint8_t inps = Pins_Inputs_Read();
 800ab8a:	f7fe fc7f 	bl	800948c <Pins_Inputs_Read>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	71fb      	strb	r3, [r7, #7]
    HAL_IWDG_Refresh(&hiwdg);
 800ab92:	4815      	ldr	r0, [pc, #84]	@ (800abe8 <Inputs_Job+0x64>)
 800ab94:	f003 fae6 	bl	800e164 <HAL_IWDG_Refresh>

    if(inps_old != inps){
 800ab98:	4b14      	ldr	r3, [pc, #80]	@ (800abec <Inputs_Job+0x68>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	79fa      	ldrb	r2, [r7, #7]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d01d      	beq.n	800abde <Inputs_Job+0x5a>
    	inps_old = inps;
 800aba2:	4a12      	ldr	r2, [pc, #72]	@ (800abec <Inputs_Job+0x68>)
 800aba4:	79fb      	ldrb	r3, [r7, #7]
 800aba6:	7013      	strb	r3, [r2, #0]
    	sprintf(Inputs, "{\"inps\":\"%02X\"}", inps);
 800aba8:	79fb      	ldrb	r3, [r7, #7]
 800abaa:	461a      	mov	r2, r3
 800abac:	4910      	ldr	r1, [pc, #64]	@ (800abf0 <Inputs_Job+0x6c>)
 800abae:	4811      	ldr	r0, [pc, #68]	@ (800abf4 <Inputs_Job+0x70>)
 800abb0:	f007 fa2a 	bl	8012008 <siprintf>
		if(!q_put_message(&_Queue_Send, Inputs, 14)){
 800abb4:	220e      	movs	r2, #14
 800abb6:	490f      	ldr	r1, [pc, #60]	@ (800abf4 <Inputs_Job+0x70>)
 800abb8:	480f      	ldr	r0, [pc, #60]	@ (800abf8 <Inputs_Job+0x74>)
 800abba:	f7ff fa09 	bl	8009fd0 <q_put_message>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d108      	bne.n	800abd6 <Inputs_Job+0x52>
			UART_Debug_PutString("Inputs_Job >> failed to put to _Queue_Send >> ");
 800abc4:	480d      	ldr	r0, [pc, #52]	@ (800abfc <Inputs_Job+0x78>)
 800abc6:	f7ff fdb1 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString(Inputs);
 800abca:	480a      	ldr	r0, [pc, #40]	@ (800abf4 <Inputs_Job+0x70>)
 800abcc:	f7ff fdae 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString("\r\n");
 800abd0:	480b      	ldr	r0, [pc, #44]	@ (800ac00 <Inputs_Job+0x7c>)
 800abd2:	f7ff fdab 	bl	800a72c <UART_Debug_PutString>
		}
//    	UART_Linux_PutString(Inputs);
    	HAL_IWDG_Refresh(&hiwdg);
 800abd6:	4804      	ldr	r0, [pc, #16]	@ (800abe8 <Inputs_Job+0x64>)
 800abd8:	f003 fac4 	bl	800e164 <HAL_IWDG_Refresh>
//    UART_Debug_PutString(Inputs);
//    HAL_IWDG_Refresh(&hiwdg);
//    UART_Debug_PutString("\r\n----------------------------\r\n");
//    HAL_IWDG_Refresh(&hiwdg);
//
    return;
 800abdc:	bf00      	nop
 800abde:	bf00      	nop
}
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20000988 	.word	0x20000988
 800abec:	20000016 	.word	0x20000016
 800abf0:	08013704 	.word	0x08013704
 800abf4:	20000008 	.word	0x20000008
 800abf8:	200005f8 	.word	0x200005f8
 800abfc:	08013714 	.word	0x08013714
 800ac00:	08013744 	.word	0x08013744

0800ac04 <Inps>:

void Inps()
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
    uint8_t inp_1 = HAL_GPIO_ReadPin(GPIOC, GPIO_inp_1_Pin);
 800ac0a:	2104      	movs	r1, #4
 800ac0c:	4815      	ldr	r0, [pc, #84]	@ (800ac64 <Inps+0x60>)
 800ac0e:	f002 fc45 	bl	800d49c <HAL_GPIO_ReadPin>
 800ac12:	4603      	mov	r3, r0
 800ac14:	71fb      	strb	r3, [r7, #7]
    uint8_t inp_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_inp_2_Pin);
 800ac16:	2180      	movs	r1, #128	@ 0x80
 800ac18:	4813      	ldr	r0, [pc, #76]	@ (800ac68 <Inps+0x64>)
 800ac1a:	f002 fc3f 	bl	800d49c <HAL_GPIO_ReadPin>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	71bb      	strb	r3, [r7, #6]

    if(inp_1_old != inp_1){
 800ac22:	4b12      	ldr	r3, [pc, #72]	@ (800ac6c <Inps+0x68>)
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	79fa      	ldrb	r2, [r7, #7]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d008      	beq.n	800ac3e <Inps+0x3a>
        inp_1_old = inp_1;
 800ac2c:	4a0f      	ldr	r2, [pc, #60]	@ (800ac6c <Inps+0x68>)
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	7013      	strb	r3, [r2, #0]
        if(!inp_1)
 800ac32:	79fb      	ldrb	r3, [r7, #7]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d102      	bne.n	800ac3e <Inps+0x3a>
            check_port_input_1(1);
 800ac38:	2001      	movs	r0, #1
 800ac3a:	f7ff fe0b 	bl	800a854 <check_port_input_1>
    }

    if(inp_2_old != inp_2){
 800ac3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ac70 <Inps+0x6c>)
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	79ba      	ldrb	r2, [r7, #6]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d009      	beq.n	800ac5c <Inps+0x58>
        inp_2_old = inp_2;
 800ac48:	4a09      	ldr	r2, [pc, #36]	@ (800ac70 <Inps+0x6c>)
 800ac4a:	79bb      	ldrb	r3, [r7, #6]
 800ac4c:	7013      	strb	r3, [r2, #0]
        if(!inp_2)
 800ac4e:	79bb      	ldrb	r3, [r7, #6]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d103      	bne.n	800ac5c <Inps+0x58>
            check_port_input_2(1);
 800ac54:	2001      	movs	r0, #1
 800ac56:	f7ff fe21 	bl	800a89c <check_port_input_2>
    }

    return;
 800ac5a:	bf00      	nop
 800ac5c:	bf00      	nop
}
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	40011000 	.word	0x40011000
 800ac68:	40010800 	.word	0x40010800
 800ac6c:	20000017 	.word	0x20000017
 800ac70:	20000018 	.word	0x20000018

0800ac74 <CmdTask>:

//Main Job
void CmdTask(char* msg)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b0a0      	sub	sp, #128	@ 0x80
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
//	UART_Debug_PutString(msg);
//	UART_Debug_PutString("\r\n");
//	return;
	if(fota_flag_start == 1){
 800ac7c:	4ba5      	ldr	r3, [pc, #660]	@ (800af14 <CmdTask+0x2a0>)
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d111      	bne.n	800aca8 <CmdTask+0x34>
		if((memcmp((char*)&msg[0], "{FOT_FOT}:", 10) == 0)){
 800ac84:	220a      	movs	r2, #10
 800ac86:	49a4      	ldr	r1, [pc, #656]	@ (800af18 <CmdTask+0x2a4>)
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f007 fa20 	bl	80120ce <memcmp>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d105      	bne.n	800aca0 <CmdTask+0x2c>
//			OS_TIMER_Restart(&Timer_Update);
			update_procedure(&((char*)msg)[10]);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	330a      	adds	r3, #10
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fe fe71 	bl	8009980 <update_procedure>
//				}
	//    	}
		}
	}

    return;
 800ac9e:	e246      	b.n	800b12e <CmdTask+0x4ba>
			UART_Debug_PutString("UPDATE IN PROGRESS >> NOT AN UPDATE PACKET!!!\r\n");
 800aca0:	489e      	ldr	r0, [pc, #632]	@ (800af1c <CmdTask+0x2a8>)
 800aca2:	f7ff fd43 	bl	800a72c <UART_Debug_PutString>
    return;
 800aca6:	e242      	b.n	800b12e <CmdTask+0x4ba>
		/*else*/ if(memcmp(msg, "Port 1 Open", 11) == 0){
 800aca8:	220b      	movs	r2, #11
 800acaa:	499d      	ldr	r1, [pc, #628]	@ (800af20 <CmdTask+0x2ac>)
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f007 fa0e 	bl	80120ce <memcmp>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d119      	bne.n	800acec <CmdTask+0x78>
			Port1_Relay = 1;
 800acb8:	4b9a      	ldr	r3, [pc, #616]	@ (800af24 <CmdTask+0x2b0>)
 800acba:	2201      	movs	r2, #1
 800acbc:	701a      	strb	r2, [r3, #0]
			if(Port1_Relay != Port1_Relay_Old){
 800acbe:	4b99      	ldr	r3, [pc, #612]	@ (800af24 <CmdTask+0x2b0>)
 800acc0:	781a      	ldrb	r2, [r3, #0]
 800acc2:	4b99      	ldr	r3, [pc, #612]	@ (800af28 <CmdTask+0x2b4>)
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	f000 8231 	beq.w	800b12e <CmdTask+0x4ba>
				Port1_Relay_Old = Port1_Relay;
 800accc:	4b95      	ldr	r3, [pc, #596]	@ (800af24 <CmdTask+0x2b0>)
 800acce:	781a      	ldrb	r2, [r3, #0]
 800acd0:	4b95      	ldr	r3, [pc, #596]	@ (800af28 <CmdTask+0x2b4>)
 800acd2:	701a      	strb	r2, [r3, #0]
				UART_Debug_PutString("Port 1 Open\r\n");
 800acd4:	4895      	ldr	r0, [pc, #596]	@ (800af2c <CmdTask+0x2b8>)
 800acd6:	f7ff fd29 	bl	800a72c <UART_Debug_PutString>
				Relay_Port1(Port1_Relay);
 800acda:	4b92      	ldr	r3, [pc, #584]	@ (800af24 <CmdTask+0x2b0>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fe fba0 	bl	8009424 <Relay_Port1>
				HAL_IWDG_Refresh(&hiwdg);
 800ace4:	4892      	ldr	r0, [pc, #584]	@ (800af30 <CmdTask+0x2bc>)
 800ace6:	f003 fa3d 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800acea:	e220      	b.n	800b12e <CmdTask+0x4ba>
		else if(memcmp(msg, "Port 1 Close", 12) == 0){
 800acec:	220c      	movs	r2, #12
 800acee:	4991      	ldr	r1, [pc, #580]	@ (800af34 <CmdTask+0x2c0>)
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f007 f9ec 	bl	80120ce <memcmp>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d119      	bne.n	800ad30 <CmdTask+0xbc>
			Port1_Relay = 0;
 800acfc:	4b89      	ldr	r3, [pc, #548]	@ (800af24 <CmdTask+0x2b0>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	701a      	strb	r2, [r3, #0]
			if(Port1_Relay != Port1_Relay_Old){
 800ad02:	4b88      	ldr	r3, [pc, #544]	@ (800af24 <CmdTask+0x2b0>)
 800ad04:	781a      	ldrb	r2, [r3, #0]
 800ad06:	4b88      	ldr	r3, [pc, #544]	@ (800af28 <CmdTask+0x2b4>)
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	f000 820f 	beq.w	800b12e <CmdTask+0x4ba>
				Port1_Relay_Old = Port1_Relay;
 800ad10:	4b84      	ldr	r3, [pc, #528]	@ (800af24 <CmdTask+0x2b0>)
 800ad12:	781a      	ldrb	r2, [r3, #0]
 800ad14:	4b84      	ldr	r3, [pc, #528]	@ (800af28 <CmdTask+0x2b4>)
 800ad16:	701a      	strb	r2, [r3, #0]
				UART_Debug_PutString("Port 1 Close\r\n");
 800ad18:	4887      	ldr	r0, [pc, #540]	@ (800af38 <CmdTask+0x2c4>)
 800ad1a:	f7ff fd07 	bl	800a72c <UART_Debug_PutString>
				Relay_Port1(Port1_Relay);
 800ad1e:	4b81      	ldr	r3, [pc, #516]	@ (800af24 <CmdTask+0x2b0>)
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fe fb7e 	bl	8009424 <Relay_Port1>
				HAL_IWDG_Refresh(&hiwdg);
 800ad28:	4881      	ldr	r0, [pc, #516]	@ (800af30 <CmdTask+0x2bc>)
 800ad2a:	f003 fa1b 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800ad2e:	e1fe      	b.n	800b12e <CmdTask+0x4ba>
		else if(memcmp(msg, "Port 2 Open", 11) == 0){
 800ad30:	220b      	movs	r2, #11
 800ad32:	4982      	ldr	r1, [pc, #520]	@ (800af3c <CmdTask+0x2c8>)
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f007 f9ca 	bl	80120ce <memcmp>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d119      	bne.n	800ad74 <CmdTask+0x100>
			Port2_Relay = 1;
 800ad40:	4b7f      	ldr	r3, [pc, #508]	@ (800af40 <CmdTask+0x2cc>)
 800ad42:	2201      	movs	r2, #1
 800ad44:	701a      	strb	r2, [r3, #0]
			if(Port2_Relay != Port2_Relay_Old){
 800ad46:	4b7e      	ldr	r3, [pc, #504]	@ (800af40 <CmdTask+0x2cc>)
 800ad48:	781a      	ldrb	r2, [r3, #0]
 800ad4a:	4b7e      	ldr	r3, [pc, #504]	@ (800af44 <CmdTask+0x2d0>)
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	f000 81ed 	beq.w	800b12e <CmdTask+0x4ba>
				Port2_Relay_Old = Port2_Relay;
 800ad54:	4b7a      	ldr	r3, [pc, #488]	@ (800af40 <CmdTask+0x2cc>)
 800ad56:	781a      	ldrb	r2, [r3, #0]
 800ad58:	4b7a      	ldr	r3, [pc, #488]	@ (800af44 <CmdTask+0x2d0>)
 800ad5a:	701a      	strb	r2, [r3, #0]
				UART_Debug_PutString("Port 2 Open\r\n");
 800ad5c:	487a      	ldr	r0, [pc, #488]	@ (800af48 <CmdTask+0x2d4>)
 800ad5e:	f7ff fce5 	bl	800a72c <UART_Debug_PutString>
				Relay_Port2(Port2_Relay);
 800ad62:	4b77      	ldr	r3, [pc, #476]	@ (800af40 <CmdTask+0x2cc>)
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fb76 	bl	8009458 <Relay_Port2>
				HAL_IWDG_Refresh(&hiwdg);
 800ad6c:	4870      	ldr	r0, [pc, #448]	@ (800af30 <CmdTask+0x2bc>)
 800ad6e:	f003 f9f9 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800ad72:	e1dc      	b.n	800b12e <CmdTask+0x4ba>
		else if(memcmp(msg, "Port 2 Close", 12) == 0){
 800ad74:	220c      	movs	r2, #12
 800ad76:	4975      	ldr	r1, [pc, #468]	@ (800af4c <CmdTask+0x2d8>)
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f007 f9a8 	bl	80120ce <memcmp>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d119      	bne.n	800adb8 <CmdTask+0x144>
			Port2_Relay = 0;
 800ad84:	4b6e      	ldr	r3, [pc, #440]	@ (800af40 <CmdTask+0x2cc>)
 800ad86:	2200      	movs	r2, #0
 800ad88:	701a      	strb	r2, [r3, #0]
			if(Port2_Relay != Port2_Relay_Old){
 800ad8a:	4b6d      	ldr	r3, [pc, #436]	@ (800af40 <CmdTask+0x2cc>)
 800ad8c:	781a      	ldrb	r2, [r3, #0]
 800ad8e:	4b6d      	ldr	r3, [pc, #436]	@ (800af44 <CmdTask+0x2d0>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	f000 81cb 	beq.w	800b12e <CmdTask+0x4ba>
				Port2_Relay_Old = Port2_Relay;
 800ad98:	4b69      	ldr	r3, [pc, #420]	@ (800af40 <CmdTask+0x2cc>)
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	4b69      	ldr	r3, [pc, #420]	@ (800af44 <CmdTask+0x2d0>)
 800ad9e:	701a      	strb	r2, [r3, #0]
				UART_Debug_PutString("Port 2 Close\r\n");
 800ada0:	486b      	ldr	r0, [pc, #428]	@ (800af50 <CmdTask+0x2dc>)
 800ada2:	f7ff fcc3 	bl	800a72c <UART_Debug_PutString>
				Relay_Port2(Port2_Relay);
 800ada6:	4b66      	ldr	r3, [pc, #408]	@ (800af40 <CmdTask+0x2cc>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fe fb54 	bl	8009458 <Relay_Port2>
				HAL_IWDG_Refresh(&hiwdg);
 800adb0:	485f      	ldr	r0, [pc, #380]	@ (800af30 <CmdTask+0x2bc>)
 800adb2:	f003 f9d7 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800adb6:	e1ba      	b.n	800b12e <CmdTask+0x4ba>
		else if(memcmp(msg, "Port 1 Lock", 11) == 0){
 800adb8:	220b      	movs	r2, #11
 800adba:	4966      	ldr	r1, [pc, #408]	@ (800af54 <CmdTask+0x2e0>)
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f007 f986 	bl	80120ce <memcmp>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d114      	bne.n	800adf2 <CmdTask+0x17e>
			Port1_Locked = 1;
 800adc8:	4b63      	ldr	r3, [pc, #396]	@ (800af58 <CmdTask+0x2e4>)
 800adca:	2201      	movs	r2, #1
 800adcc:	701a      	strb	r2, [r3, #0]
			if(Port1_Locked != Port1_Locked_Old){
 800adce:	4b62      	ldr	r3, [pc, #392]	@ (800af58 <CmdTask+0x2e4>)
 800add0:	781a      	ldrb	r2, [r3, #0]
 800add2:	4b62      	ldr	r3, [pc, #392]	@ (800af5c <CmdTask+0x2e8>)
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	429a      	cmp	r2, r3
 800add8:	f000 81a9 	beq.w	800b12e <CmdTask+0x4ba>
				Port1_Locked_Old = Port1_Locked;
 800addc:	4b5e      	ldr	r3, [pc, #376]	@ (800af58 <CmdTask+0x2e4>)
 800adde:	781a      	ldrb	r2, [r3, #0]
 800ade0:	4b5e      	ldr	r3, [pc, #376]	@ (800af5c <CmdTask+0x2e8>)
 800ade2:	701a      	strb	r2, [r3, #0]
				UART_Debug_PutString("Port 1 Lock\r\n");
 800ade4:	485e      	ldr	r0, [pc, #376]	@ (800af60 <CmdTask+0x2ec>)
 800ade6:	f7ff fca1 	bl	800a72c <UART_Debug_PutString>
				HAL_IWDG_Refresh(&hiwdg);
 800adea:	4851      	ldr	r0, [pc, #324]	@ (800af30 <CmdTask+0x2bc>)
 800adec:	f003 f9ba 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800adf0:	e19d      	b.n	800b12e <CmdTask+0x4ba>
		else if(memcmp(msg, "Port 1 UnLock", 13) == 0){
 800adf2:	220d      	movs	r2, #13
 800adf4:	495b      	ldr	r1, [pc, #364]	@ (800af64 <CmdTask+0x2f0>)
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f007 f969 	bl	80120ce <memcmp>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d114      	bne.n	800ae2c <CmdTask+0x1b8>
			Port1_Locked = 0;
 800ae02:	4b55      	ldr	r3, [pc, #340]	@ (800af58 <CmdTask+0x2e4>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	701a      	strb	r2, [r3, #0]
			if(Port1_Locked != Port1_Locked_Old){
 800ae08:	4b53      	ldr	r3, [pc, #332]	@ (800af58 <CmdTask+0x2e4>)
 800ae0a:	781a      	ldrb	r2, [r3, #0]
 800ae0c:	4b53      	ldr	r3, [pc, #332]	@ (800af5c <CmdTask+0x2e8>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	f000 818c 	beq.w	800b12e <CmdTask+0x4ba>
				Port1_Locked_Old = Port1_Locked;
 800ae16:	4b50      	ldr	r3, [pc, #320]	@ (800af58 <CmdTask+0x2e4>)
 800ae18:	781a      	ldrb	r2, [r3, #0]
 800ae1a:	4b50      	ldr	r3, [pc, #320]	@ (800af5c <CmdTask+0x2e8>)
 800ae1c:	701a      	strb	r2, [r3, #0]
				UART_Debug_PutString("Port 1 UnLock\r\n");
 800ae1e:	4852      	ldr	r0, [pc, #328]	@ (800af68 <CmdTask+0x2f4>)
 800ae20:	f7ff fc84 	bl	800a72c <UART_Debug_PutString>
				HAL_IWDG_Refresh(&hiwdg);
 800ae24:	4842      	ldr	r0, [pc, #264]	@ (800af30 <CmdTask+0x2bc>)
 800ae26:	f003 f99d 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800ae2a:	e180      	b.n	800b12e <CmdTask+0x4ba>
		else if(memcmp(msg, "Port 2 Lock", 11) == 0){
 800ae2c:	220b      	movs	r2, #11
 800ae2e:	494f      	ldr	r1, [pc, #316]	@ (800af6c <CmdTask+0x2f8>)
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f007 f94c 	bl	80120ce <memcmp>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d114      	bne.n	800ae66 <CmdTask+0x1f2>
			Port2_Locked = 1;
 800ae3c:	4b4c      	ldr	r3, [pc, #304]	@ (800af70 <CmdTask+0x2fc>)
 800ae3e:	2201      	movs	r2, #1
 800ae40:	701a      	strb	r2, [r3, #0]
			if(Port2_Locked != Port2_Locked_Old){
 800ae42:	4b4b      	ldr	r3, [pc, #300]	@ (800af70 <CmdTask+0x2fc>)
 800ae44:	781a      	ldrb	r2, [r3, #0]
 800ae46:	4b4b      	ldr	r3, [pc, #300]	@ (800af74 <CmdTask+0x300>)
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	f000 816f 	beq.w	800b12e <CmdTask+0x4ba>
				Port2_Locked_Old = Port2_Locked;
 800ae50:	4b47      	ldr	r3, [pc, #284]	@ (800af70 <CmdTask+0x2fc>)
 800ae52:	781a      	ldrb	r2, [r3, #0]
 800ae54:	4b47      	ldr	r3, [pc, #284]	@ (800af74 <CmdTask+0x300>)
 800ae56:	701a      	strb	r2, [r3, #0]
				UART_Debug_PutString("Port 2 Lock\r\n");
 800ae58:	4847      	ldr	r0, [pc, #284]	@ (800af78 <CmdTask+0x304>)
 800ae5a:	f7ff fc67 	bl	800a72c <UART_Debug_PutString>
				HAL_IWDG_Refresh(&hiwdg);
 800ae5e:	4834      	ldr	r0, [pc, #208]	@ (800af30 <CmdTask+0x2bc>)
 800ae60:	f003 f980 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800ae64:	e163      	b.n	800b12e <CmdTask+0x4ba>
		else if(memcmp(msg, "Port 2 UnLock", 13) == 0){
 800ae66:	220d      	movs	r2, #13
 800ae68:	4944      	ldr	r1, [pc, #272]	@ (800af7c <CmdTask+0x308>)
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f007 f92f 	bl	80120ce <memcmp>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d114      	bne.n	800aea0 <CmdTask+0x22c>
			Port2_Locked = 0;
 800ae76:	4b3e      	ldr	r3, [pc, #248]	@ (800af70 <CmdTask+0x2fc>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	701a      	strb	r2, [r3, #0]
			if(Port2_Locked != Port2_Locked_Old){
 800ae7c:	4b3c      	ldr	r3, [pc, #240]	@ (800af70 <CmdTask+0x2fc>)
 800ae7e:	781a      	ldrb	r2, [r3, #0]
 800ae80:	4b3c      	ldr	r3, [pc, #240]	@ (800af74 <CmdTask+0x300>)
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	f000 8152 	beq.w	800b12e <CmdTask+0x4ba>
				Port2_Locked_Old = Port2_Locked;
 800ae8a:	4b39      	ldr	r3, [pc, #228]	@ (800af70 <CmdTask+0x2fc>)
 800ae8c:	781a      	ldrb	r2, [r3, #0]
 800ae8e:	4b39      	ldr	r3, [pc, #228]	@ (800af74 <CmdTask+0x300>)
 800ae90:	701a      	strb	r2, [r3, #0]
				UART_Debug_PutString("Port 2 UnLock\r\n");
 800ae92:	483b      	ldr	r0, [pc, #236]	@ (800af80 <CmdTask+0x30c>)
 800ae94:	f7ff fc4a 	bl	800a72c <UART_Debug_PutString>
				HAL_IWDG_Refresh(&hiwdg);
 800ae98:	4825      	ldr	r0, [pc, #148]	@ (800af30 <CmdTask+0x2bc>)
 800ae9a:	f003 f963 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800ae9e:	e146      	b.n	800b12e <CmdTask+0x4ba>
		else if(memcmp(msg, "Port 1 Wbits:", 13) == 0){
 800aea0:	220d      	movs	r2, #13
 800aea2:	4938      	ldr	r1, [pc, #224]	@ (800af84 <CmdTask+0x310>)
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f007 f912 	bl	80120ce <memcmp>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d171      	bne.n	800af94 <CmdTask+0x320>
			char* ret = NULL;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	673b      	str	r3, [r7, #112]	@ 0x70
			ret = strremove((char*)msg, "Port 1 Wbits:");
 800aeb4:	4933      	ldr	r1, [pc, #204]	@ (800af84 <CmdTask+0x310>)
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff f9c6 	bl	800a248 <strremove>
 800aebc:	6738      	str	r0, [r7, #112]	@ 0x70
			HAL_IWDG_Refresh(&hiwdg);
 800aebe:	481c      	ldr	r0, [pc, #112]	@ (800af30 <CmdTask+0x2bc>)
 800aec0:	f003 f950 	bl	800e164 <HAL_IWDG_Refresh>
			Port1_W_bits = atoi(ret);
 800aec4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800aec6:	f006 fe05 	bl	8011ad4 <atoi>
 800aeca:	4603      	mov	r3, r0
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	4b2e      	ldr	r3, [pc, #184]	@ (800af88 <CmdTask+0x314>)
 800aed0:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh(&hiwdg);
 800aed2:	4817      	ldr	r0, [pc, #92]	@ (800af30 <CmdTask+0x2bc>)
 800aed4:	f003 f946 	bl	800e164 <HAL_IWDG_Refresh>
			if(Port1_W_bits != Port1_W_bits_Old){
 800aed8:	4b2b      	ldr	r3, [pc, #172]	@ (800af88 <CmdTask+0x314>)
 800aeda:	781a      	ldrb	r2, [r3, #0]
 800aedc:	4b2b      	ldr	r3, [pc, #172]	@ (800af8c <CmdTask+0x318>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	f000 8124 	beq.w	800b12e <CmdTask+0x4ba>
				Port1_W_bits_Old = Port1_W_bits;
 800aee6:	4b28      	ldr	r3, [pc, #160]	@ (800af88 <CmdTask+0x314>)
 800aee8:	781a      	ldrb	r2, [r3, #0]
 800aeea:	4b28      	ldr	r3, [pc, #160]	@ (800af8c <CmdTask+0x318>)
 800aeec:	701a      	strb	r2, [r3, #0]
				sprintf(ss, "Port 1 Wbits = %d\r\n", Port1_W_bits);
 800aeee:	4b26      	ldr	r3, [pc, #152]	@ (800af88 <CmdTask+0x314>)
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	461a      	mov	r2, r3
 800aef4:	f107 030c 	add.w	r3, r7, #12
 800aef8:	4925      	ldr	r1, [pc, #148]	@ (800af90 <CmdTask+0x31c>)
 800aefa:	4618      	mov	r0, r3
 800aefc:	f007 f884 	bl	8012008 <siprintf>
				UART_Debug_PutString(ss);
 800af00:	f107 030c 	add.w	r3, r7, #12
 800af04:	4618      	mov	r0, r3
 800af06:	f7ff fc11 	bl	800a72c <UART_Debug_PutString>
				HAL_IWDG_Refresh(&hiwdg);
 800af0a:	4809      	ldr	r0, [pc, #36]	@ (800af30 <CmdTask+0x2bc>)
 800af0c:	f003 f92a 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800af10:	e10d      	b.n	800b12e <CmdTask+0x4ba>
 800af12:	bf00      	nop
 800af14:	20000295 	.word	0x20000295
 800af18:	08013748 	.word	0x08013748
 800af1c:	08013754 	.word	0x08013754
 800af20:	08013784 	.word	0x08013784
 800af24:	20002ad8 	.word	0x20002ad8
 800af28:	20002ad9 	.word	0x20002ad9
 800af2c:	08013790 	.word	0x08013790
 800af30:	20000988 	.word	0x20000988
 800af34:	080137a0 	.word	0x080137a0
 800af38:	080137b0 	.word	0x080137b0
 800af3c:	080137c0 	.word	0x080137c0
 800af40:	20002b68 	.word	0x20002b68
 800af44:	20002b69 	.word	0x20002b69
 800af48:	080137cc 	.word	0x080137cc
 800af4c:	080137dc 	.word	0x080137dc
 800af50:	080137ec 	.word	0x080137ec
 800af54:	080137fc 	.word	0x080137fc
 800af58:	20002ada 	.word	0x20002ada
 800af5c:	20002adb 	.word	0x20002adb
 800af60:	08013808 	.word	0x08013808
 800af64:	08013818 	.word	0x08013818
 800af68:	08013828 	.word	0x08013828
 800af6c:	08013838 	.word	0x08013838
 800af70:	20002b6a 	.word	0x20002b6a
 800af74:	20002b6b 	.word	0x20002b6b
 800af78:	08013844 	.word	0x08013844
 800af7c:	08013854 	.word	0x08013854
 800af80:	08013864 	.word	0x08013864
 800af84:	08013874 	.word	0x08013874
 800af88:	20000002 	.word	0x20000002
 800af8c:	20000003 	.word	0x20000003
 800af90:	08013884 	.word	0x08013884
		else if(memcmp(msg, "Port 2 Wbits:", 13) == 0){
 800af94:	220d      	movs	r2, #13
 800af96:	4968      	ldr	r1, [pc, #416]	@ (800b138 <CmdTask+0x4c4>)
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f007 f898 	bl	80120ce <memcmp>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d130      	bne.n	800b006 <CmdTask+0x392>
			char* ret = NULL;
 800afa4:	2300      	movs	r3, #0
 800afa6:	677b      	str	r3, [r7, #116]	@ 0x74
			ret = strremove((char*)msg, "Port 2 Wbits:");
 800afa8:	4963      	ldr	r1, [pc, #396]	@ (800b138 <CmdTask+0x4c4>)
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7ff f94c 	bl	800a248 <strremove>
 800afb0:	6778      	str	r0, [r7, #116]	@ 0x74
			HAL_IWDG_Refresh(&hiwdg);
 800afb2:	4862      	ldr	r0, [pc, #392]	@ (800b13c <CmdTask+0x4c8>)
 800afb4:	f003 f8d6 	bl	800e164 <HAL_IWDG_Refresh>
			Port2_W_bits = atoi(ret);
 800afb8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800afba:	f006 fd8b 	bl	8011ad4 <atoi>
 800afbe:	4603      	mov	r3, r0
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	4b5f      	ldr	r3, [pc, #380]	@ (800b140 <CmdTask+0x4cc>)
 800afc4:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh(&hiwdg);
 800afc6:	485d      	ldr	r0, [pc, #372]	@ (800b13c <CmdTask+0x4c8>)
 800afc8:	f003 f8cc 	bl	800e164 <HAL_IWDG_Refresh>
			if(Port2_W_bits != Port2_W_bits_Old){
 800afcc:	4b5c      	ldr	r3, [pc, #368]	@ (800b140 <CmdTask+0x4cc>)
 800afce:	781a      	ldrb	r2, [r3, #0]
 800afd0:	4b5c      	ldr	r3, [pc, #368]	@ (800b144 <CmdTask+0x4d0>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	f000 80aa 	beq.w	800b12e <CmdTask+0x4ba>
				Port2_W_bits_Old = Port2_W_bits;
 800afda:	4b59      	ldr	r3, [pc, #356]	@ (800b140 <CmdTask+0x4cc>)
 800afdc:	781a      	ldrb	r2, [r3, #0]
 800afde:	4b59      	ldr	r3, [pc, #356]	@ (800b144 <CmdTask+0x4d0>)
 800afe0:	701a      	strb	r2, [r3, #0]
				sprintf(ss, "Port 2 Wbits = %d\r\n", Port2_W_bits);
 800afe2:	4b57      	ldr	r3, [pc, #348]	@ (800b140 <CmdTask+0x4cc>)
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f107 030c 	add.w	r3, r7, #12
 800afec:	4956      	ldr	r1, [pc, #344]	@ (800b148 <CmdTask+0x4d4>)
 800afee:	4618      	mov	r0, r3
 800aff0:	f007 f80a 	bl	8012008 <siprintf>
				UART_Debug_PutString(ss);
 800aff4:	f107 030c 	add.w	r3, r7, #12
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff fb97 	bl	800a72c <UART_Debug_PutString>
				HAL_IWDG_Refresh(&hiwdg);
 800affe:	484f      	ldr	r0, [pc, #316]	@ (800b13c <CmdTask+0x4c8>)
 800b000:	f003 f8b0 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800b004:	e093      	b.n	800b12e <CmdTask+0x4ba>
		else if(memcmp(msg, "Cy RGB:", 7) == 0){
 800b006:	2207      	movs	r2, #7
 800b008:	4950      	ldr	r1, [pc, #320]	@ (800b14c <CmdTask+0x4d8>)
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f007 f85f 	bl	80120ce <memcmp>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d145      	bne.n	800b0a2 <CmdTask+0x42e>
			OS_TIMER_Restart(&Timer_RGB_LED);
 800b016:	484e      	ldr	r0, [pc, #312]	@ (800b150 <CmdTask+0x4dc>)
 800b018:	f005 fb46 	bl	80106a8 <OS_TIMER_Restart>
			char* ret = NULL;
 800b01c:	2300      	movs	r3, #0
 800b01e:	67fb      	str	r3, [r7, #124]	@ 0x7c
			ret = strremove((char*)msg, "Cy RGB:");
 800b020:	494a      	ldr	r1, [pc, #296]	@ (800b14c <CmdTask+0x4d8>)
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7ff f910 	bl	800a248 <strremove>
 800b028:	67f8      	str	r0, [r7, #124]	@ 0x7c
			HAL_IWDG_Refresh(&hiwdg);
 800b02a:	4844      	ldr	r0, [pc, #272]	@ (800b13c <CmdTask+0x4c8>)
 800b02c:	f003 f89a 	bl	800e164 <HAL_IWDG_Refresh>
			uint32_t color = strtol(ret, NULL, 10);
 800b030:	220a      	movs	r2, #10
 800b032:	2100      	movs	r1, #0
 800b034:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800b036:	f006 fea3 	bl	8011d80 <strtol>
 800b03a:	4603      	mov	r3, r0
 800b03c:	67bb      	str	r3, [r7, #120]	@ 0x78
			HAL_IWDG_Refresh(&hiwdg);
 800b03e:	483f      	ldr	r0, [pc, #252]	@ (800b13c <CmdTask+0x4c8>)
 800b040:	f003 f890 	bl	800e164 <HAL_IWDG_Refresh>
			RGB_Color = (uint8_t)color;
 800b044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b046:	b2da      	uxtb	r2, r3
 800b048:	4b42      	ldr	r3, [pc, #264]	@ (800b154 <CmdTask+0x4e0>)
 800b04a:	701a      	strb	r2, [r3, #0]
			if(RGB_Color != RGB_Color_Old){
 800b04c:	4b41      	ldr	r3, [pc, #260]	@ (800b154 <CmdTask+0x4e0>)
 800b04e:	781a      	ldrb	r2, [r3, #0]
 800b050:	4b41      	ldr	r3, [pc, #260]	@ (800b158 <CmdTask+0x4e4>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	429a      	cmp	r2, r3
 800b056:	d06a      	beq.n	800b12e <CmdTask+0x4ba>
				RGB_Color_Old = RGB_Color;
 800b058:	4b3e      	ldr	r3, [pc, #248]	@ (800b154 <CmdTask+0x4e0>)
 800b05a:	781a      	ldrb	r2, [r3, #0]
 800b05c:	4b3e      	ldr	r3, [pc, #248]	@ (800b158 <CmdTask+0x4e4>)
 800b05e:	701a      	strb	r2, [r3, #0]
				if(RGB_Color > 6 || RGB_Color < 0){
 800b060:	4b3c      	ldr	r3, [pc, #240]	@ (800b154 <CmdTask+0x4e0>)
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	2b06      	cmp	r3, #6
 800b066:	d905      	bls.n	800b074 <CmdTask+0x400>
					RGB_Color = 1;
 800b068:	4b3a      	ldr	r3, [pc, #232]	@ (800b154 <CmdTask+0x4e0>)
 800b06a:	2201      	movs	r2, #1
 800b06c:	701a      	strb	r2, [r3, #0]
					RGB_Color_Old = 1;
 800b06e:	4b3a      	ldr	r3, [pc, #232]	@ (800b158 <CmdTask+0x4e4>)
 800b070:	2201      	movs	r2, #1
 800b072:	701a      	strb	r2, [r3, #0]
				sprintf(ss, "RGB_Color = %d\r\n", RGB_Color);
 800b074:	4b37      	ldr	r3, [pc, #220]	@ (800b154 <CmdTask+0x4e0>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	461a      	mov	r2, r3
 800b07a:	f107 030c 	add.w	r3, r7, #12
 800b07e:	4937      	ldr	r1, [pc, #220]	@ (800b15c <CmdTask+0x4e8>)
 800b080:	4618      	mov	r0, r3
 800b082:	f006 ffc1 	bl	8012008 <siprintf>
				UART_Debug_PutString(ss);
 800b086:	f107 030c 	add.w	r3, r7, #12
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7ff fb4e 	bl	800a72c <UART_Debug_PutString>
				RGB(RGB_Color);
 800b090:	4b30      	ldr	r3, [pc, #192]	@ (800b154 <CmdTask+0x4e0>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	4618      	mov	r0, r3
 800b096:	f7fe f957 	bl	8009348 <RGB>
				HAL_IWDG_Refresh(&hiwdg);
 800b09a:	4828      	ldr	r0, [pc, #160]	@ (800b13c <CmdTask+0x4c8>)
 800b09c:	f003 f862 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800b0a0:	e045      	b.n	800b12e <CmdTask+0x4ba>
		else if(memcmp(msg, "Cy Reset", 8) == 0){
 800b0a2:	2208      	movs	r2, #8
 800b0a4:	492e      	ldr	r1, [pc, #184]	@ (800b160 <CmdTask+0x4ec>)
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f007 f811 	bl	80120ce <memcmp>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d104      	bne.n	800b0bc <CmdTask+0x448>
			HAL_IWDG_Refresh(&hiwdg);
 800b0b2:	4822      	ldr	r0, [pc, #136]	@ (800b13c <CmdTask+0x4c8>)
 800b0b4:	f003 f856 	bl	800e164 <HAL_IWDG_Refresh>
			NVIC_SystemReset();
 800b0b8:	f7ff fb22 	bl	800a700 <__NVIC_SystemReset>
		else if(memcmp(msg, "Cy Connect", 10) == 0){
 800b0bc:	220a      	movs	r2, #10
 800b0be:	4929      	ldr	r1, [pc, #164]	@ (800b164 <CmdTask+0x4f0>)
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f007 f804 	bl	80120ce <memcmp>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d106      	bne.n	800b0da <CmdTask+0x466>
			UART_Linux_PutString("Cy Connected");
 800b0cc:	4826      	ldr	r0, [pc, #152]	@ (800b168 <CmdTask+0x4f4>)
 800b0ce:	f7ff fb43 	bl	800a758 <UART_Linux_PutString>
			HAL_IWDG_Refresh(&hiwdg);
 800b0d2:	481a      	ldr	r0, [pc, #104]	@ (800b13c <CmdTask+0x4c8>)
 800b0d4:	f003 f846 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800b0d8:	e029      	b.n	800b12e <CmdTask+0x4ba>
		else if(memcmp(msg, "{SET_FOT}:", 10) == 0){
 800b0da:	220a      	movs	r2, #10
 800b0dc:	4923      	ldr	r1, [pc, #140]	@ (800b16c <CmdTask+0x4f8>)
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f006 fff5 	bl	80120ce <memcmp>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d114      	bne.n	800b114 <CmdTask+0x4a0>
	    	UART_Debug_PutString("\r\nUPDATE COMMAND RECEIVED!!!\r\n");
 800b0ea:	4821      	ldr	r0, [pc, #132]	@ (800b170 <CmdTask+0x4fc>)
 800b0ec:	f7ff fb1e 	bl	800a72c <UART_Debug_PutString>
	    	RGB_Color = 5;
 800b0f0:	4b18      	ldr	r3, [pc, #96]	@ (800b154 <CmdTask+0x4e0>)
 800b0f2:	2205      	movs	r2, #5
 800b0f4:	701a      	strb	r2, [r3, #0]
	    	RGB_Color_Old = 5;
 800b0f6:	4b18      	ldr	r3, [pc, #96]	@ (800b158 <CmdTask+0x4e4>)
 800b0f8:	2205      	movs	r2, #5
 800b0fa:	701a      	strb	r2, [r3, #0]
	    	RGB(RGB_Color);
 800b0fc:	4b15      	ldr	r3, [pc, #84]	@ (800b154 <CmdTask+0x4e0>)
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	4618      	mov	r0, r3
 800b102:	f7fe f921 	bl	8009348 <RGB>
			update_check_packet(msg);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7fe fa80 	bl	800960c <update_check_packet>
			HAL_IWDG_Refresh(&hiwdg);
 800b10c:	480b      	ldr	r0, [pc, #44]	@ (800b13c <CmdTask+0x4c8>)
 800b10e:	f003 f829 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800b112:	e00c      	b.n	800b12e <CmdTask+0x4ba>
					UART_Debug_PutString("---------- Wrong Msg: ");
 800b114:	4817      	ldr	r0, [pc, #92]	@ (800b174 <CmdTask+0x500>)
 800b116:	f7ff fb09 	bl	800a72c <UART_Debug_PutString>
					UART_Debug_PutString(msg);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff fb06 	bl	800a72c <UART_Debug_PutString>
					UART_Debug_PutString("\r\n");
 800b120:	4815      	ldr	r0, [pc, #84]	@ (800b178 <CmdTask+0x504>)
 800b122:	f7ff fb03 	bl	800a72c <UART_Debug_PutString>
					HAL_IWDG_Refresh(&hiwdg);
 800b126:	4805      	ldr	r0, [pc, #20]	@ (800b13c <CmdTask+0x4c8>)
 800b128:	f003 f81c 	bl	800e164 <HAL_IWDG_Refresh>
    return;
 800b12c:	bf00      	nop
 800b12e:	bf00      	nop
}
 800b130:	3780      	adds	r7, #128	@ 0x80
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	08013898 	.word	0x08013898
 800b13c:	20000988 	.word	0x20000988
 800b140:	20000004 	.word	0x20000004
 800b144:	20000005 	.word	0x20000005
 800b148:	080138a8 	.word	0x080138a8
 800b14c:	080138bc 	.word	0x080138bc
 800b150:	200029fc 	.word	0x200029fc
 800b154:	200002b8 	.word	0x200002b8
 800b158:	200002b9 	.word	0x200002b9
 800b15c:	080138c4 	.word	0x080138c4
 800b160:	080138d8 	.word	0x080138d8
 800b164:	080138e4 	.word	0x080138e4
 800b168:	080138f0 	.word	0x080138f0
 800b16c:	08013900 	.word	0x08013900
 800b170:	0801390c 	.word	0x0801390c
 800b174:	0801392c 	.word	0x0801392c
 800b178:	08013744 	.word	0x08013744

0800b17c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b182:	f001 f9a5 	bl	800c4d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b186:	f000 f845 	bl	800b214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b18a:	f7ff f96b 	bl	800a464 <MX_GPIO_Init>
  MX_DMA_Init();
 800b18e:	f7ff f887 	bl	800a2a0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800b192:	f001 f899 	bl	800c2c8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800b196:	f001 f86d 	bl	800c274 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800b19a:	f7ff fa2b 	bl	800a5f4 <MX_I2C1_Init>
  MX_IWDG_Init();
 800b19e:	f7ff fa95 	bl	800a6cc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

//  OS_TASK_Create(&TCB_Task_Start, "Task_Quectel", 100, Task_Start, Stack_Task_Start, sizeof(Stack_Task_Start), 2);  // Create & start
  //Inits();

    OS_Init();
 800b1a2:	f005 ffe3 	bl	801116c <OS_Init_STD>
    OS_InitHW();
 800b1a6:	f004 fe0f 	bl	800fdc8 <OS_InitHW>

    /* Start embOS */
    OS_TASK_Create(&TCB_Task_Main, "Task_Main", 400, Task_Main, Stack_Task_Main, sizeof(Stack_Task_Main), 2);
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	9302      	str	r3, [sp, #8]
 800b1ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	4b13      	ldr	r3, [pc, #76]	@ (800b204 <main+0x88>)
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	4b13      	ldr	r3, [pc, #76]	@ (800b208 <main+0x8c>)
 800b1ba:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b1be:	4913      	ldr	r1, [pc, #76]	@ (800b20c <main+0x90>)
 800b1c0:	4813      	ldr	r0, [pc, #76]	@ (800b210 <main+0x94>)
 800b1c2:	f004 ffa9 	bl	8010118 <OS_TASK_Create_DP>
//    Inits();
    OS_Start();
 800b1c6:	f006 f907 	bl	80113d8 <OS_INFO_GetVersion>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f64c 2271 	movw	r2, #51825	@ 0xca71
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d002      	beq.n	800b1da <main+0x5e>
 800b1d4:	20fd      	movs	r0, #253	@ 0xfd
 800b1d6:	f004 fcf3 	bl	800fbc0 <OS_Error>
 800b1da:	f006 f847 	bl	801126c <OS__Start>
  /* USER CODE END 2 */

  /* Initialize the embOS kernel and configure the hardware parameters for embOS */
  OS_Init();
 800b1de:	f005 ffc5 	bl	801116c <OS_Init_STD>
  OS_InitHW();
 800b1e2:	f004 fdf1 	bl	800fdc8 <OS_InitHW>

  /* Start embOS */
  OS_Start();
 800b1e6:	f006 f8f7 	bl	80113d8 <OS_INFO_GetVersion>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	f64c 2271 	movw	r2, #51825	@ 0xca71
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d002      	beq.n	800b1fa <main+0x7e>
 800b1f4:	20fd      	movs	r0, #253	@ 0xfd
 800b1f6:	f004 fce3 	bl	800fbc0 <OS_Error>
 800b1fa:	f006 f837 	bl	801126c <OS__Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b1fe:	bf00      	nop
 800b200:	e7fd      	b.n	800b1fe <main+0x82>
 800b202:	bf00      	nop
 800b204:	200009e8 	.word	0x200009e8
 800b208:	0800b545 	.word	0x0800b545
 800b20c:	08013944 	.word	0x08013944
 800b210:	20000994 	.word	0x20000994

0800b214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b090      	sub	sp, #64	@ 0x40
 800b218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b21a:	f107 0318 	add.w	r3, r7, #24
 800b21e:	2228      	movs	r2, #40	@ 0x28
 800b220:	2100      	movs	r1, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f006 ff7d 	bl	8012122 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b228:	1d3b      	adds	r3, r7, #4
 800b22a:	2200      	movs	r2, #0
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	605a      	str	r2, [r3, #4]
 800b230:	609a      	str	r2, [r3, #8]
 800b232:	60da      	str	r2, [r3, #12]
 800b234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800b236:	2309      	movs	r3, #9
 800b238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b23a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b23e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800b240:	2300      	movs	r3, #0
 800b242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b244:	2301      	movs	r3, #1
 800b246:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b248:	2301      	movs	r3, #1
 800b24a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b24c:	2302      	movs	r3, #2
 800b24e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b250:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b254:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800b256:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800b25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b25c:	f107 0318 	add.w	r3, r7, #24
 800b260:	4618      	mov	r0, r3
 800b262:	f002 ff8f 	bl	800e184 <HAL_RCC_OscConfig>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800b26c:	f000 fdc5 	bl	800bdfa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b270:	230f      	movs	r3, #15
 800b272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b274:	2302      	movs	r3, #2
 800b276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b278:	2300      	movs	r3, #0
 800b27a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b27c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b286:	1d3b      	adds	r3, r7, #4
 800b288:	2102      	movs	r1, #2
 800b28a:	4618      	mov	r0, r3
 800b28c:	f003 f9fc 	bl	800e688 <HAL_RCC_ClockConfig>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <SystemClock_Config+0x86>
  {
    Error_Handler();
 800b296:	f000 fdb0 	bl	800bdfa <Error_Handler>
  }
}
 800b29a:	bf00      	nop
 800b29c:	3740      	adds	r7, #64	@ 0x40
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
	...

0800b2a4 <Inits>:

/* USER CODE BEGIN 4 */
void Inits()
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	af00      	add	r7, sp, #0
	UART_Debug_PutString("********************************* Inits(); *************************************************\r\n");
 800b2a8:	482f      	ldr	r0, [pc, #188]	@ (800b368 <Inits+0xc4>)
 800b2aa:	f7ff fa3f 	bl	800a72c <UART_Debug_PutString>

//	__HAL_AFIO_REMAP_SWJ_NOJTAG(); // FYI : fix inp_2 problem
	HAL_IWDG_Refresh(&hiwdg);
 800b2ae:	482f      	ldr	r0, [pc, #188]	@ (800b36c <Inits+0xc8>)
 800b2b0:	f002 ff58 	bl	800e164 <HAL_IWDG_Refresh>

	UART_Debug_PutString("********************************* this is 8800  ********************************************\r\n");
 800b2b4:	482e      	ldr	r0, [pc, #184]	@ (800b370 <Inits+0xcc>)
 800b2b6:	f7ff fa39 	bl	800a72c <UART_Debug_PutString>
	HAL_IWDG_Refresh(&hiwdg);
 800b2ba:	482c      	ldr	r0, [pc, #176]	@ (800b36c <Inits+0xc8>)
 800b2bc:	f002 ff52 	bl	800e164 <HAL_IWDG_Refresh>
	UART_Debug_PutString("********************************* Start STM32 Access Slave 57600 *********************************\r\n");
 800b2c0:	482c      	ldr	r0, [pc, #176]	@ (800b374 <Inits+0xd0>)
 800b2c2:	f7ff fa33 	bl	800a72c <UART_Debug_PutString>
	HAL_IWDG_Refresh(&hiwdg);
 800b2c6:	4829      	ldr	r0, [pc, #164]	@ (800b36c <Inits+0xc8>)
 800b2c8:	f002 ff4c 	bl	800e164 <HAL_IWDG_Refresh>
	UART_Debug_PutString("********************************* ");
 800b2cc:	482a      	ldr	r0, [pc, #168]	@ (800b378 <Inits+0xd4>)
 800b2ce:	f7ff fa2d 	bl	800a72c <UART_Debug_PutString>
	HAL_IWDG_Refresh(&hiwdg);
 800b2d2:	4826      	ldr	r0, [pc, #152]	@ (800b36c <Inits+0xc8>)
 800b2d4:	f002 ff46 	bl	800e164 <HAL_IWDG_Refresh>
	UART_Debug_PutString(APP_VERSION);
 800b2d8:	4828      	ldr	r0, [pc, #160]	@ (800b37c <Inits+0xd8>)
 800b2da:	f7ff fa27 	bl	800a72c <UART_Debug_PutString>
	HAL_IWDG_Refresh(&hiwdg);
 800b2de:	4823      	ldr	r0, [pc, #140]	@ (800b36c <Inits+0xc8>)
 800b2e0:	f002 ff40 	bl	800e164 <HAL_IWDG_Refresh>
	UART_Debug_PutString(" *****************************\r\n");
 800b2e4:	4826      	ldr	r0, [pc, #152]	@ (800b380 <Inits+0xdc>)
 800b2e6:	f7ff fa21 	bl	800a72c <UART_Debug_PutString>
	HAL_IWDG_Refresh(&hiwdg);
 800b2ea:	4820      	ldr	r0, [pc, #128]	@ (800b36c <Inits+0xc8>)
 800b2ec:	f002 ff3a 	bl	800e164 <HAL_IWDG_Refresh>
	//  HAL_Delay(100);
//	HAL_IWDG_Refresh(&hiwdg);


	OS_Q_Create(&_Queue_Main, &_QBuffer_Queue_Main, sizeof(_QBuffer_Queue_Main));
 800b2f0:	f44f 7246 	mov.w	r2, #792	@ 0x318
 800b2f4:	4923      	ldr	r1, [pc, #140]	@ (800b384 <Inits+0xe0>)
 800b2f6:	4824      	ldr	r0, [pc, #144]	@ (800b388 <Inits+0xe4>)
 800b2f8:	f005 fad8 	bl	80108ac <OS_QUEUE_Create>
	OS_Q_Create(&_Queue_Send, &_QBuffer_Queue_Send, sizeof(_QBuffer_Queue_Send));
 800b2fc:	f44f 7246 	mov.w	r2, #792	@ 0x318
 800b300:	4922      	ldr	r1, [pc, #136]	@ (800b38c <Inits+0xe8>)
 800b302:	4823      	ldr	r0, [pc, #140]	@ (800b390 <Inits+0xec>)
 800b304:	f005 fad2 	bl	80108ac <OS_QUEUE_Create>



//	HAL_UART_Receive_IT(&huart1, linux_rx, sizeof(linux_rx));
	HAL_UART_Receive_DMA(&huart1, linux_rx, sizeof(linux_rx));
 800b308:	2201      	movs	r2, #1
 800b30a:	4922      	ldr	r1, [pc, #136]	@ (800b394 <Inits+0xf0>)
 800b30c:	4822      	ldr	r0, [pc, #136]	@ (800b398 <Inits+0xf4>)
 800b30e:	f003 febc 	bl	800f08a <HAL_UART_Receive_DMA>
	HAL_IWDG_Refresh(&hiwdg);
 800b312:	4816      	ldr	r0, [pc, #88]	@ (800b36c <Inits+0xc8>)
 800b314:	f002 ff26 	bl	800e164 <HAL_IWDG_Refresh>

	RGB_Color = 1;
 800b318:	4b20      	ldr	r3, [pc, #128]	@ (800b39c <Inits+0xf8>)
 800b31a:	2201      	movs	r2, #1
 800b31c:	701a      	strb	r2, [r3, #0]
	RGB_Color_Old = 1;
 800b31e:	4b20      	ldr	r3, [pc, #128]	@ (800b3a0 <Inits+0xfc>)
 800b320:	2201      	movs	r2, #1
 800b322:	701a      	strb	r2, [r3, #0]
	RGB(RGB_Color); //Cypress run
 800b324:	4b1d      	ldr	r3, [pc, #116]	@ (800b39c <Inits+0xf8>)
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe f80d 	bl	8009348 <RGB>
	HAL_IWDG_Refresh(&hiwdg);
 800b32e:	480f      	ldr	r0, [pc, #60]	@ (800b36c <Inits+0xc8>)
 800b330:	f002 ff18 	bl	800e164 <HAL_IWDG_Refresh>

//	UART_Debug_PutString("********************************* Brd V3.0 App V2.0 (and-inps) *********************************\r\n");

	init_vars();
 800b334:	f000 f838 	bl	800b3a8 <init_vars>
	timers_create();
 800b338:	f000 f878 	bl	800b42c <timers_create>


	HAL_IWDG_Refresh(&hiwdg);
 800b33c:	480b      	ldr	r0, [pc, #44]	@ (800b36c <Inits+0xc8>)
 800b33e:	f002 ff11 	bl	800e164 <HAL_IWDG_Refresh>
	Timer_Inps_Callback();
 800b342:	f000 fb91 	bl	800ba68 <Timer_Inps_Callback>

	HAL_IWDG_Refresh(&hiwdg);
 800b346:	4809      	ldr	r0, [pc, #36]	@ (800b36c <Inits+0xc8>)
 800b348:	f002 ff0c 	bl	800e164 <HAL_IWDG_Refresh>
	Timer_WD_Callback();
 800b34c:	f000 fb7a 	bl	800ba44 <Timer_WD_Callback>

	HAL_IWDG_Refresh(&hiwdg);
 800b350:	4806      	ldr	r0, [pc, #24]	@ (800b36c <Inits+0xc8>)
 800b352:	f002 ff07 	bl	800e164 <HAL_IWDG_Refresh>
	Timer_RGB_LED_Callback();
 800b356:	f000 f9bf 	bl	800b6d8 <Timer_RGB_LED_Callback>

	UART_Debug_PutString("********************************* IEnds(); *************************************************\r\n");
 800b35a:	4812      	ldr	r0, [pc, #72]	@ (800b3a4 <Inits+0x100>)
 800b35c:	f7ff f9e6 	bl	800a72c <UART_Debug_PutString>
  __ASM volatile ("cpsie i" : : : "memory");
 800b360:	b662      	cpsie	i
}
 800b362:	bf00      	nop
	__enable_irq();
	return;
 800b364:	bf00      	nop
}
 800b366:	bd80      	pop	{r7, pc}
 800b368:	08013950 	.word	0x08013950
 800b36c:	20000988 	.word	0x20000988
 800b370:	080139b0 	.word	0x080139b0
 800b374:	08013a10 	.word	0x08013a10
 800b378:	08013a78 	.word	0x08013a78
 800b37c:	08013a9c 	.word	0x08013a9c
 800b380:	08013abc 	.word	0x08013abc
 800b384:	200002e0 	.word	0x200002e0
 800b388:	200002bc 	.word	0x200002bc
 800b38c:	2000061c 	.word	0x2000061c
 800b390:	200005f8 	.word	0x200005f8
 800b394:	20002ac4 	.word	0x20002ac4
 800b398:	20002f4c 	.word	0x20002f4c
 800b39c:	200002b8 	.word	0x200002b8
 800b3a0:	200002b9 	.word	0x200002b9
 800b3a4:	08013ae0 	.word	0x08013ae0

0800b3a8 <init_vars>:

void init_vars()
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
    Port1_W[0] = '\0';
 800b3ac:	4b17      	ldr	r3, [pc, #92]	@ (800b40c <init_vars+0x64>)
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	701a      	strb	r2, [r3, #0]
    In1[0] = '\0';
 800b3b2:	4b17      	ldr	r3, [pc, #92]	@ (800b410 <init_vars+0x68>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	701a      	strb	r2, [r3, #0]
    HAL_IWDG_Refresh(&hiwdg);
 800b3b8:	4816      	ldr	r0, [pc, #88]	@ (800b414 <init_vars+0x6c>)
 800b3ba:	f002 fed3 	bl	800e164 <HAL_IWDG_Refresh>

    Port2_W[0] = '\0';
 800b3be:	4b16      	ldr	r3, [pc, #88]	@ (800b418 <init_vars+0x70>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	701a      	strb	r2, [r3, #0]
    In2[0] = '\0';
 800b3c4:	4b15      	ldr	r3, [pc, #84]	@ (800b41c <init_vars+0x74>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	701a      	strb	r2, [r3, #0]
    HAL_IWDG_Refresh(&hiwdg);
 800b3ca:	4812      	ldr	r0, [pc, #72]	@ (800b414 <init_vars+0x6c>)
 800b3cc:	f002 feca 	bl	800e164 <HAL_IWDG_Refresh>

	memset(intr, '\0', sizeof(intr));
 800b3d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	4812      	ldr	r0, [pc, #72]	@ (800b420 <init_vars+0x78>)
 800b3d8:	f006 fea3 	bl	8012122 <memset>
	HAL_IWDG_Refresh(&hiwdg);
 800b3dc:	480d      	ldr	r0, [pc, #52]	@ (800b414 <init_vars+0x6c>)
 800b3de:	f002 fec1 	bl	800e164 <HAL_IWDG_Refresh>

    memset(_QBuffer_Queue_Main, '\0', Queue_Size_Main);
 800b3e2:	f44f 7246 	mov.w	r2, #792	@ 0x318
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	480e      	ldr	r0, [pc, #56]	@ (800b424 <init_vars+0x7c>)
 800b3ea:	f006 fe9a 	bl	8012122 <memset>
    HAL_IWDG_Refresh(&hiwdg);
 800b3ee:	4809      	ldr	r0, [pc, #36]	@ (800b414 <init_vars+0x6c>)
 800b3f0:	f002 feb8 	bl	800e164 <HAL_IWDG_Refresh>

    memset(_QBuffer_Queue_Send, '\0', Queue_Size_Send);
 800b3f4:	f44f 7246 	mov.w	r2, #792	@ 0x318
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	480b      	ldr	r0, [pc, #44]	@ (800b428 <init_vars+0x80>)
 800b3fc:	f006 fe91 	bl	8012122 <memset>
	HAL_IWDG_Refresh(&hiwdg);
 800b400:	4804      	ldr	r0, [pc, #16]	@ (800b414 <init_vars+0x6c>)
 800b402:	f002 feaf 	bl	800e164 <HAL_IWDG_Refresh>

    return;
 800b406:	bf00      	nop
}
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	20002ae0 	.word	0x20002ae0
 800b410:	20002b64 	.word	0x20002b64
 800b414:	20000988 	.word	0x20000988
 800b418:	20002b70 	.word	0x20002b70
 800b41c:	20002bf4 	.word	0x20002bf4
 800b420:	20002cfc 	.word	0x20002cfc
 800b424:	200002e0 	.word	0x200002e0
 800b428:	2000061c 	.word	0x2000061c

0800b42c <timers_create>:

void timers_create()
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
    // Create without start.
    OS_TIMER_Create(&Timer_Read_Linux, Timer_Read_Linux_Callback, 10);
 800b430:	220a      	movs	r2, #10
 800b432:	492d      	ldr	r1, [pc, #180]	@ (800b4e8 <timers_create+0xbc>)
 800b434:	482d      	ldr	r0, [pc, #180]	@ (800b4ec <timers_create+0xc0>)
 800b436:	f005 f8b7 	bl	80105a8 <OS_TIMER_Create>
    HAL_IWDG_Refresh(&hiwdg);
 800b43a:	482d      	ldr	r0, [pc, #180]	@ (800b4f0 <timers_create+0xc4>)
 800b43c:	f002 fe92 	bl	800e164 <HAL_IWDG_Refresh>

    OS_TIMER_Create(&Timer_RGB_LED, Timer_RGB_LED_Callback, 1000);
 800b440:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b444:	492b      	ldr	r1, [pc, #172]	@ (800b4f4 <timers_create+0xc8>)
 800b446:	482c      	ldr	r0, [pc, #176]	@ (800b4f8 <timers_create+0xcc>)
 800b448:	f005 f8ae 	bl	80105a8 <OS_TIMER_Create>
    HAL_IWDG_Refresh(&hiwdg);
 800b44c:	4828      	ldr	r0, [pc, #160]	@ (800b4f0 <timers_create+0xc4>)
 800b44e:	f002 fe89 	bl	800e164 <HAL_IWDG_Refresh>

    OS_TIMER_Create(&Timer_Read_W_Port1, Timer_Read_W_Port1_Callback, 100);
 800b452:	2264      	movs	r2, #100	@ 0x64
 800b454:	4929      	ldr	r1, [pc, #164]	@ (800b4fc <timers_create+0xd0>)
 800b456:	482a      	ldr	r0, [pc, #168]	@ (800b500 <timers_create+0xd4>)
 800b458:	f005 f8a6 	bl	80105a8 <OS_TIMER_Create>
    HAL_IWDG_Refresh(&hiwdg);
 800b45c:	4824      	ldr	r0, [pc, #144]	@ (800b4f0 <timers_create+0xc4>)
 800b45e:	f002 fe81 	bl	800e164 <HAL_IWDG_Refresh>
    OS_TIMER_Create(&Timer_Read_W_Port2, Timer_Read_W_Port2_Callback, 100);
 800b462:	2264      	movs	r2, #100	@ 0x64
 800b464:	4927      	ldr	r1, [pc, #156]	@ (800b504 <timers_create+0xd8>)
 800b466:	4828      	ldr	r0, [pc, #160]	@ (800b508 <timers_create+0xdc>)
 800b468:	f005 f89e 	bl	80105a8 <OS_TIMER_Create>
    HAL_IWDG_Refresh(&hiwdg);
 800b46c:	4820      	ldr	r0, [pc, #128]	@ (800b4f0 <timers_create+0xc4>)
 800b46e:	f002 fe79 	bl	800e164 <HAL_IWDG_Refresh>

    OS_TIMER_Create(&Timer_AfterRead_In1, Timer_AfterRead_Input1_Callback, 10);
 800b472:	220a      	movs	r2, #10
 800b474:	4925      	ldr	r1, [pc, #148]	@ (800b50c <timers_create+0xe0>)
 800b476:	4826      	ldr	r0, [pc, #152]	@ (800b510 <timers_create+0xe4>)
 800b478:	f005 f896 	bl	80105a8 <OS_TIMER_Create>
    HAL_IWDG_Refresh(&hiwdg);
 800b47c:	481c      	ldr	r0, [pc, #112]	@ (800b4f0 <timers_create+0xc4>)
 800b47e:	f002 fe71 	bl	800e164 <HAL_IWDG_Refresh>
    OS_TIMER_Create(&Timer_AfterRead_Port1, Timer_AfterRead_Port1_Callback, 10);
 800b482:	220a      	movs	r2, #10
 800b484:	4923      	ldr	r1, [pc, #140]	@ (800b514 <timers_create+0xe8>)
 800b486:	4824      	ldr	r0, [pc, #144]	@ (800b518 <timers_create+0xec>)
 800b488:	f005 f88e 	bl	80105a8 <OS_TIMER_Create>
    HAL_IWDG_Refresh(&hiwdg);
 800b48c:	4818      	ldr	r0, [pc, #96]	@ (800b4f0 <timers_create+0xc4>)
 800b48e:	f002 fe69 	bl	800e164 <HAL_IWDG_Refresh>

    OS_TIMER_Create(&Timer_AfterRead_In2, Timer_AfterRead_Input2_Callback, 10);
 800b492:	220a      	movs	r2, #10
 800b494:	4921      	ldr	r1, [pc, #132]	@ (800b51c <timers_create+0xf0>)
 800b496:	4822      	ldr	r0, [pc, #136]	@ (800b520 <timers_create+0xf4>)
 800b498:	f005 f886 	bl	80105a8 <OS_TIMER_Create>
    HAL_IWDG_Refresh(&hiwdg);
 800b49c:	4814      	ldr	r0, [pc, #80]	@ (800b4f0 <timers_create+0xc4>)
 800b49e:	f002 fe61 	bl	800e164 <HAL_IWDG_Refresh>
    OS_TIMER_Create(&Timer_AfterRead_Port2, Timer_AfterRead_Port2_Callback, 10);
 800b4a2:	220a      	movs	r2, #10
 800b4a4:	491f      	ldr	r1, [pc, #124]	@ (800b524 <timers_create+0xf8>)
 800b4a6:	4820      	ldr	r0, [pc, #128]	@ (800b528 <timers_create+0xfc>)
 800b4a8:	f005 f87e 	bl	80105a8 <OS_TIMER_Create>
    HAL_IWDG_Refresh(&hiwdg);
 800b4ac:	4810      	ldr	r0, [pc, #64]	@ (800b4f0 <timers_create+0xc4>)
 800b4ae:	f002 fe59 	bl	800e164 <HAL_IWDG_Refresh>

    OS_TIMER_Create(&Timer_WD, Timer_WD_Callback, 100);
 800b4b2:	2264      	movs	r2, #100	@ 0x64
 800b4b4:	491d      	ldr	r1, [pc, #116]	@ (800b52c <timers_create+0x100>)
 800b4b6:	481e      	ldr	r0, [pc, #120]	@ (800b530 <timers_create+0x104>)
 800b4b8:	f005 f876 	bl	80105a8 <OS_TIMER_Create>
    HAL_IWDG_Refresh(&hiwdg);
 800b4bc:	480c      	ldr	r0, [pc, #48]	@ (800b4f0 <timers_create+0xc4>)
 800b4be:	f002 fe51 	bl	800e164 <HAL_IWDG_Refresh>

    OS_TIMER_Create(&Timer_Inps, Timer_Inps_Callback, 50);
 800b4c2:	2232      	movs	r2, #50	@ 0x32
 800b4c4:	491b      	ldr	r1, [pc, #108]	@ (800b534 <timers_create+0x108>)
 800b4c6:	481c      	ldr	r0, [pc, #112]	@ (800b538 <timers_create+0x10c>)
 800b4c8:	f005 f86e 	bl	80105a8 <OS_TIMER_Create>
    HAL_IWDG_Refresh(&hiwdg);
 800b4cc:	4808      	ldr	r0, [pc, #32]	@ (800b4f0 <timers_create+0xc4>)
 800b4ce:	f002 fe49 	bl	800e164 <HAL_IWDG_Refresh>

//    OS_TIMER_CREATE(&Timer_Update, Timer_Update_Callback, 1000);
//    OS_TIMER_Stop(&Timer_Update);
//    HAL_IWDG_Refresh(&hiwdg);

    OS_TIMER_Create(&Timer_intr, Timer_Intr_Callback, 200);
 800b4d2:	22c8      	movs	r2, #200	@ 0xc8
 800b4d4:	4919      	ldr	r1, [pc, #100]	@ (800b53c <timers_create+0x110>)
 800b4d6:	481a      	ldr	r0, [pc, #104]	@ (800b540 <timers_create+0x114>)
 800b4d8:	f005 f866 	bl	80105a8 <OS_TIMER_Create>
	HAL_IWDG_Refresh(&hiwdg);
 800b4dc:	4804      	ldr	r0, [pc, #16]	@ (800b4f0 <timers_create+0xc4>)
 800b4de:	f002 fe41 	bl	800e164 <HAL_IWDG_Refresh>

    return;
 800b4e2:	bf00      	nop
}
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	0800b61d 	.word	0x0800b61d
 800b4ec:	200029e8 	.word	0x200029e8
 800b4f0:	20000988 	.word	0x20000988
 800b4f4:	0800b6d9 	.word	0x0800b6d9
 800b4f8:	200029fc 	.word	0x200029fc
 800b4fc:	0800b75d 	.word	0x0800b75d
 800b500:	20002a10 	.word	0x20002a10
 800b504:	0800b821 	.word	0x0800b821
 800b508:	20002a24 	.word	0x20002a24
 800b50c:	0800b8e5 	.word	0x0800b8e5
 800b510:	20002a38 	.word	0x20002a38
 800b514:	0800b931 	.word	0x0800b931
 800b518:	20002a4c 	.word	0x20002a4c
 800b51c:	0800b995 	.word	0x0800b995
 800b520:	20002a60 	.word	0x20002a60
 800b524:	0800b9e1 	.word	0x0800b9e1
 800b528:	20002a74 	.word	0x20002a74
 800b52c:	0800ba45 	.word	0x0800ba45
 800b530:	20002a88 	.word	0x20002a88
 800b534:	0800ba69 	.word	0x0800ba69
 800b538:	20002a9c 	.word	0x20002a9c
 800b53c:	0800ba89 	.word	0x0800ba89
 800b540:	20002ab0 	.word	0x20002ab0

0800b544 <Task_Main>:

void Task_Main()
{
 800b544:	b580      	push	{r7, lr}
 800b546:	af00      	add	r7, sp, #0
	Inits();
 800b548:	f7ff feac 	bl	800b2a4 <Inits>
	while(1){
		Proc_Task_main();
 800b54c:	f000 f80a 	bl	800b564 <Proc_Task_main>
		HAL_IWDG_Refresh(&hiwdg);
 800b550:	4803      	ldr	r0, [pc, #12]	@ (800b560 <Task_Main+0x1c>)
 800b552:	f002 fe07 	bl	800e164 <HAL_IWDG_Refresh>
		OS_TASK_Delay(TASK_DELAY_Main_MS);
 800b556:	200a      	movs	r0, #10
 800b558:	f004 fe90 	bl	801027c <OS_TASK_Delay>
		Proc_Task_main();
 800b55c:	bf00      	nop
 800b55e:	e7f5      	b.n	800b54c <Task_Main+0x8>
 800b560:	20000988 	.word	0x20000988

0800b564 <Proc_Task_main>:

	return;
}

void Proc_Task_main()
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0

	void* ret_send = NULL;
 800b56a:	2300      	movs	r3, #0
 800b56c:	607b      	str	r3, [r7, #4]
	ret_send = q_get_message(&_Queue_Send);
 800b56e:	4825      	ldr	r0, [pc, #148]	@ (800b604 <Proc_Task_main+0xa0>)
 800b570:	f7fe fd4a 	bl	800a008 <q_get_message>
 800b574:	6078      	str	r0, [r7, #4]
	while(ret_send){
 800b576:	e022      	b.n	800b5be <Proc_Task_main+0x5a>
		HAL_IWDG_Refresh(&hiwdg);
 800b578:	4823      	ldr	r0, [pc, #140]	@ (800b608 <Proc_Task_main+0xa4>)
 800b57a:	f002 fdf3 	bl	800e164 <HAL_IWDG_Refresh>
		UART_Linux_PutString((char*)ret_send);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7ff f8ea 	bl	800a758 <UART_Linux_PutString>
		if(memcmp((char*)ret_send, "{FOT_REQ}:", 10) != 0){
 800b584:	220a      	movs	r2, #10
 800b586:	4921      	ldr	r1, [pc, #132]	@ (800b60c <Proc_Task_main+0xa8>)
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f006 fda0 	bl	80120ce <memcmp>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d008      	beq.n	800b5a6 <Proc_Task_main+0x42>
			UART_Debug_PutString("Proc_Task_main -> send: ");
 800b594:	481e      	ldr	r0, [pc, #120]	@ (800b610 <Proc_Task_main+0xac>)
 800b596:	f7ff f8c9 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString((char*)ret_send);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff f8c6 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString("\r\n");
 800b5a0:	481c      	ldr	r0, [pc, #112]	@ (800b614 <Proc_Task_main+0xb0>)
 800b5a2:	f7ff f8c3 	bl	800a72c <UART_Debug_PutString>
		}
		OS_QUEUE_Purge(&_Queue_Send);
 800b5a6:	4817      	ldr	r0, [pc, #92]	@ (800b604 <Proc_Task_main+0xa0>)
 800b5a8:	f005 fa3e 	bl	8010a28 <OS_QUEUE_Purge>

		OS_TASK_Delay(TASK_DELAY_Main_MS);
 800b5ac:	200a      	movs	r0, #10
 800b5ae:	f004 fe65 	bl	801027c <OS_TASK_Delay>
		ret_send = NULL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	607b      	str	r3, [r7, #4]
		ret_send = q_get_message(&_Queue_Send);
 800b5b6:	4813      	ldr	r0, [pc, #76]	@ (800b604 <Proc_Task_main+0xa0>)
 800b5b8:	f7fe fd26 	bl	800a008 <q_get_message>
 800b5bc:	6078      	str	r0, [r7, #4]
	while(ret_send){
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1d9      	bne.n	800b578 <Proc_Task_main+0x14>
	}

	void* ret = NULL;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	603b      	str	r3, [r7, #0]
	ret = q_get_message(&_Queue_Main);
 800b5c8:	4813      	ldr	r0, [pc, #76]	@ (800b618 <Proc_Task_main+0xb4>)
 800b5ca:	f7fe fd1d 	bl	800a008 <q_get_message>
 800b5ce:	6038      	str	r0, [r7, #0]
	while(ret){
 800b5d0:	e011      	b.n	800b5f6 <Proc_Task_main+0x92>
		HAL_IWDG_Refresh(&hiwdg);
 800b5d2:	480d      	ldr	r0, [pc, #52]	@ (800b608 <Proc_Task_main+0xa4>)
 800b5d4:	f002 fdc6 	bl	800e164 <HAL_IWDG_Refresh>
		CmdTask((char*)ret);
 800b5d8:	6838      	ldr	r0, [r7, #0]
 800b5da:	f7ff fb4b 	bl	800ac74 <CmdTask>
		OS_QUEUE_Purge(&_Queue_Main);
 800b5de:	480e      	ldr	r0, [pc, #56]	@ (800b618 <Proc_Task_main+0xb4>)
 800b5e0:	f005 fa22 	bl	8010a28 <OS_QUEUE_Purge>
		OS_TASK_Delay(TASK_DELAY_Main_MS);
 800b5e4:	200a      	movs	r0, #10
 800b5e6:	f004 fe49 	bl	801027c <OS_TASK_Delay>
		ret = NULL;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	603b      	str	r3, [r7, #0]
		ret = q_get_message(&_Queue_Main);
 800b5ee:	480a      	ldr	r0, [pc, #40]	@ (800b618 <Proc_Task_main+0xb4>)
 800b5f0:	f7fe fd0a 	bl	800a008 <q_get_message>
 800b5f4:	6038      	str	r0, [r7, #0]
	while(ret){
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1ea      	bne.n	800b5d2 <Proc_Task_main+0x6e>
	}
	return;
 800b5fc:	bf00      	nop
}
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	200005f8 	.word	0x200005f8
 800b608:	20000988 	.word	0x20000988
 800b60c:	08013b40 	.word	0x08013b40
 800b610:	08013b4c 	.word	0x08013b4c
 800b614:	08013744 	.word	0x08013744
 800b618:	200002bc 	.word	0x200002bc

0800b61c <Timer_Read_Linux_Callback>:

//Callbacks
void Timer_Read_Linux_Callback()
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b0a0      	sub	sp, #128	@ 0x80
 800b620:	af00      	add	r7, sp, #0
//	UART_Debug_PutString(data);
//	UART_Debug_PutString(UART_Linux_Rx_Buffer);
//	UART_Debug_PutString("\r\n");
//	UART_Debug_PutString("****************************\r\n");

	if(UART_Linux_Rx_Buffer[UART_Linux_Rx_Counter - 1] == '\0'){
 800b622:	4b24      	ldr	r3, [pc, #144]	@ (800b6b4 <Timer_Read_Linux_Callback+0x98>)
 800b624:	881b      	ldrh	r3, [r3, #0]
 800b626:	3b01      	subs	r3, #1
 800b628:	4a23      	ldr	r2, [pc, #140]	@ (800b6b8 <Timer_Read_Linux_Callback+0x9c>)
 800b62a:	5cd3      	ldrb	r3, [r2, r3]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d113      	bne.n	800b658 <Timer_Read_Linux_Callback+0x3c>
		if(!q_put_message(&_Queue_Main, UART_Linux_Rx_Buffer, UART_Linux_Rx_Counter)){
 800b630:	4b20      	ldr	r3, [pc, #128]	@ (800b6b4 <Timer_Read_Linux_Callback+0x98>)
 800b632:	881b      	ldrh	r3, [r3, #0]
 800b634:	461a      	mov	r2, r3
 800b636:	4920      	ldr	r1, [pc, #128]	@ (800b6b8 <Timer_Read_Linux_Callback+0x9c>)
 800b638:	4820      	ldr	r0, [pc, #128]	@ (800b6bc <Timer_Read_Linux_Callback+0xa0>)
 800b63a:	f7fe fcc9 	bl	8009fd0 <q_put_message>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d128      	bne.n	800b696 <Timer_Read_Linux_Callback+0x7a>
			UART_Debug_PutString("HAL_UART_RxCpltCallback >> failed to put to _Queue_Main >> ");
 800b644:	481e      	ldr	r0, [pc, #120]	@ (800b6c0 <Timer_Read_Linux_Callback+0xa4>)
 800b646:	f7ff f871 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString(UART_Linux_Rx_Buffer);
 800b64a:	481b      	ldr	r0, [pc, #108]	@ (800b6b8 <Timer_Read_Linux_Callback+0x9c>)
 800b64c:	f7ff f86e 	bl	800a72c <UART_Debug_PutString>
			UART_Debug_PutString("\r\n");
 800b650:	481c      	ldr	r0, [pc, #112]	@ (800b6c4 <Timer_Read_Linux_Callback+0xa8>)
 800b652:	f7ff f86b 	bl	800a72c <UART_Debug_PutString>
 800b656:	e01e      	b.n	800b696 <Timer_Read_Linux_Callback+0x7a>
		}
	}
	else{
		linux_uart_failure++;
 800b658:	4b1b      	ldr	r3, [pc, #108]	@ (800b6c8 <Timer_Read_Linux_Callback+0xac>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3301      	adds	r3, #1
 800b65e:	4a1a      	ldr	r2, [pc, #104]	@ (800b6c8 <Timer_Read_Linux_Callback+0xac>)
 800b660:	6013      	str	r3, [r2, #0]
		char data[128];
		sprintf(data, "linux_uart_failure = %lu\r\n", linux_uart_failure);
 800b662:	4b19      	ldr	r3, [pc, #100]	@ (800b6c8 <Timer_Read_Linux_Callback+0xac>)
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	463b      	mov	r3, r7
 800b668:	4918      	ldr	r1, [pc, #96]	@ (800b6cc <Timer_Read_Linux_Callback+0xb0>)
 800b66a:	4618      	mov	r0, r3
 800b66c:	f006 fccc 	bl	8012008 <siprintf>
		UART_Debug_PutString("****************************\r\n");
 800b670:	4817      	ldr	r0, [pc, #92]	@ (800b6d0 <Timer_Read_Linux_Callback+0xb4>)
 800b672:	f7ff f85b 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString("Timer_Read_Linux_Callback\r\n");
 800b676:	4817      	ldr	r0, [pc, #92]	@ (800b6d4 <Timer_Read_Linux_Callback+0xb8>)
 800b678:	f7ff f858 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString(data);
 800b67c:	463b      	mov	r3, r7
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff f854 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString(UART_Linux_Rx_Buffer);
 800b684:	480c      	ldr	r0, [pc, #48]	@ (800b6b8 <Timer_Read_Linux_Callback+0x9c>)
 800b686:	f7ff f851 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString("\r\n");
 800b68a:	480e      	ldr	r0, [pc, #56]	@ (800b6c4 <Timer_Read_Linux_Callback+0xa8>)
 800b68c:	f7ff f84e 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString("****************************\r\n");
 800b690:	480f      	ldr	r0, [pc, #60]	@ (800b6d0 <Timer_Read_Linux_Callback+0xb4>)
 800b692:	f7ff f84b 	bl	800a72c <UART_Debug_PutString>
	}

	memset(UART_Linux_Rx_Buffer, '\0', UART_Linux_Rx_Counter);
 800b696:	4b07      	ldr	r3, [pc, #28]	@ (800b6b4 <Timer_Read_Linux_Callback+0x98>)
 800b698:	881b      	ldrh	r3, [r3, #0]
 800b69a:	461a      	mov	r2, r3
 800b69c:	2100      	movs	r1, #0
 800b69e:	4806      	ldr	r0, [pc, #24]	@ (800b6b8 <Timer_Read_Linux_Callback+0x9c>)
 800b6a0:	f006 fd3f 	bl	8012122 <memset>
	UART_Linux_Rx_Counter = 0;
 800b6a4:	4b03      	ldr	r3, [pc, #12]	@ (800b6b4 <Timer_Read_Linux_Callback+0x98>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	801a      	strh	r2, [r3, #0]


    return;
 800b6aa:	bf00      	nop
}
 800b6ac:	3780      	adds	r7, #128	@ 0x80
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20002cf8 	.word	0x20002cf8
 800b6b8:	20002bf8 	.word	0x20002bf8
 800b6bc:	200002bc 	.word	0x200002bc
 800b6c0:	08013b68 	.word	0x08013b68
 800b6c4:	08013744 	.word	0x08013744
 800b6c8:	20002ad4 	.word	0x20002ad4
 800b6cc:	08013ba4 	.word	0x08013ba4
 800b6d0:	08013bc0 	.word	0x08013bc0
 800b6d4:	08013be0 	.word	0x08013be0

0800b6d8 <Timer_RGB_LED_Callback>:

void Timer_RGB_LED_Callback()
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b0c0      	sub	sp, #256	@ 0x100
 800b6dc:	af00      	add	r7, sp, #0
    OS_TIMER_Stop(&Timer_RGB_LED);
 800b6de:	4819      	ldr	r0, [pc, #100]	@ (800b744 <Timer_RGB_LED_Callback+0x6c>)
 800b6e0:	f005 f82e 	bl	8010740 <OS_TIMER_Stop>
    if(!fota_flag_start){
 800b6e4:	4b18      	ldr	r3, [pc, #96]	@ (800b748 <Timer_RGB_LED_Callback+0x70>)
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d123      	bne.n	800b734 <Timer_RGB_LED_Callback+0x5c>
		RGB_Color = 1;
 800b6ec:	4b17      	ldr	r3, [pc, #92]	@ (800b74c <Timer_RGB_LED_Callback+0x74>)
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	701a      	strb	r2, [r3, #0]
		if(RGB_Color != RGB_Color_Old){
 800b6f2:	4b16      	ldr	r3, [pc, #88]	@ (800b74c <Timer_RGB_LED_Callback+0x74>)
 800b6f4:	781a      	ldrb	r2, [r3, #0]
 800b6f6:	4b16      	ldr	r3, [pc, #88]	@ (800b750 <Timer_RGB_LED_Callback+0x78>)
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d01a      	beq.n	800b734 <Timer_RGB_LED_Callback+0x5c>
			RGB_Color_Old = RGB_Color;
 800b6fe:	4b13      	ldr	r3, [pc, #76]	@ (800b74c <Timer_RGB_LED_Callback+0x74>)
 800b700:	781a      	ldrb	r2, [r3, #0]
 800b702:	4b13      	ldr	r3, [pc, #76]	@ (800b750 <Timer_RGB_LED_Callback+0x78>)
 800b704:	701a      	strb	r2, [r3, #0]
			RGB(RGB_Color);
 800b706:	4b11      	ldr	r3, [pc, #68]	@ (800b74c <Timer_RGB_LED_Callback+0x74>)
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fd fe1c 	bl	8009348 <RGB>

			char ss[256];
			sprintf(ss, "Timer_RGB_LED_Callback --> RGB_Color = %d\r\n", RGB_Color);
 800b710:	4b0e      	ldr	r3, [pc, #56]	@ (800b74c <Timer_RGB_LED_Callback+0x74>)
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	461a      	mov	r2, r3
 800b716:	463b      	mov	r3, r7
 800b718:	490e      	ldr	r1, [pc, #56]	@ (800b754 <Timer_RGB_LED_Callback+0x7c>)
 800b71a:	4618      	mov	r0, r3
 800b71c:	f006 fc74 	bl	8012008 <siprintf>
			HAL_IWDG_Refresh(&hiwdg);
 800b720:	480d      	ldr	r0, [pc, #52]	@ (800b758 <Timer_RGB_LED_Callback+0x80>)
 800b722:	f002 fd1f 	bl	800e164 <HAL_IWDG_Refresh>
			UART_Debug_PutString(ss);
 800b726:	463b      	mov	r3, r7
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe ffff 	bl	800a72c <UART_Debug_PutString>
			HAL_IWDG_Refresh(&hiwdg);
 800b72e:	480a      	ldr	r0, [pc, #40]	@ (800b758 <Timer_RGB_LED_Callback+0x80>)
 800b730:	f002 fd18 	bl	800e164 <HAL_IWDG_Refresh>
		}
    }

    OS_TIMER_Restart(&Timer_RGB_LED);
 800b734:	4803      	ldr	r0, [pc, #12]	@ (800b744 <Timer_RGB_LED_Callback+0x6c>)
 800b736:	f004 ffb7 	bl	80106a8 <OS_TIMER_Restart>

    return;
 800b73a:	bf00      	nop
}
 800b73c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	200029fc 	.word	0x200029fc
 800b748:	20000295 	.word	0x20000295
 800b74c:	200002b8 	.word	0x200002b8
 800b750:	200002b9 	.word	0x200002b9
 800b754:	08013bfc 	.word	0x08013bfc
 800b758:	20000988 	.word	0x20000988

0800b75c <Timer_Read_W_Port1_Callback>:

void Timer_Read_W_Port1_Callback()
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b0c2      	sub	sp, #264	@ 0x108
 800b760:	af02      	add	r7, sp, #8
    OS_TIMER_Stop(&Timer_Read_W_Port1);
 800b762:	4822      	ldr	r0, [pc, #136]	@ (800b7ec <Timer_Read_W_Port1_Callback+0x90>)
 800b764:	f004 ffec 	bl	8010740 <OS_TIMER_Stop>

    read_failure_port1++;
 800b768:	4b21      	ldr	r3, [pc, #132]	@ (800b7f0 <Timer_Read_W_Port1_Callback+0x94>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3301      	adds	r3, #1
 800b76e:	4a20      	ldr	r2, [pc, #128]	@ (800b7f0 <Timer_Read_W_Port1_Callback+0x94>)
 800b770:	6013      	str	r3, [r2, #0]
    read_failure_total = read_failure_port1 + read_failure_port2;
 800b772:	4b1f      	ldr	r3, [pc, #124]	@ (800b7f0 <Timer_Read_W_Port1_Callback+0x94>)
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	4b1f      	ldr	r3, [pc, #124]	@ (800b7f4 <Timer_Read_W_Port1_Callback+0x98>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4413      	add	r3, r2
 800b77c:	4a1e      	ldr	r2, [pc, #120]	@ (800b7f8 <Timer_Read_W_Port1_Callback+0x9c>)
 800b77e:	6013      	str	r3, [r2, #0]
    char data[256];
    sprintf(data, "read_failure_port1 = %lu, read_failure_port2 = %lu, read_failure_total = %lu\r\n", read_failure_port1, read_failure_port2, read_failure_total);
 800b780:	4b1b      	ldr	r3, [pc, #108]	@ (800b7f0 <Timer_Read_W_Port1_Callback+0x94>)
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	4b1b      	ldr	r3, [pc, #108]	@ (800b7f4 <Timer_Read_W_Port1_Callback+0x98>)
 800b786:	6819      	ldr	r1, [r3, #0]
 800b788:	4b1b      	ldr	r3, [pc, #108]	@ (800b7f8 <Timer_Read_W_Port1_Callback+0x9c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4638      	mov	r0, r7
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	460b      	mov	r3, r1
 800b792:	491a      	ldr	r1, [pc, #104]	@ (800b7fc <Timer_Read_W_Port1_Callback+0xa0>)
 800b794:	f006 fc38 	bl	8012008 <siprintf>
    UART_Debug_PutString("****************************\r\n");
 800b798:	4819      	ldr	r0, [pc, #100]	@ (800b800 <Timer_Read_W_Port1_Callback+0xa4>)
 800b79a:	f7fe ffc7 	bl	800a72c <UART_Debug_PutString>
    UART_Debug_PutString("Timer_Read_W_Port1_Callback:");
 800b79e:	4819      	ldr	r0, [pc, #100]	@ (800b804 <Timer_Read_W_Port1_Callback+0xa8>)
 800b7a0:	f7fe ffc4 	bl	800a72c <UART_Debug_PutString>
    UART_Debug_PutString(Port1_W);
 800b7a4:	4818      	ldr	r0, [pc, #96]	@ (800b808 <Timer_Read_W_Port1_Callback+0xac>)
 800b7a6:	f7fe ffc1 	bl	800a72c <UART_Debug_PutString>
    UART_Debug_PutString("\r\n");
 800b7aa:	4818      	ldr	r0, [pc, #96]	@ (800b80c <Timer_Read_W_Port1_Callback+0xb0>)
 800b7ac:	f7fe ffbe 	bl	800a72c <UART_Debug_PutString>
    HAL_IWDG_Refresh(&hiwdg);
 800b7b0:	4817      	ldr	r0, [pc, #92]	@ (800b810 <Timer_Read_W_Port1_Callback+0xb4>)
 800b7b2:	f002 fcd7 	bl	800e164 <HAL_IWDG_Refresh>
    UART_Debug_PutString(data);
 800b7b6:	463b      	mov	r3, r7
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fe ffb7 	bl	800a72c <UART_Debug_PutString>
    UART_Debug_PutString("****************************\r\n");
 800b7be:	4810      	ldr	r0, [pc, #64]	@ (800b800 <Timer_Read_W_Port1_Callback+0xa4>)
 800b7c0:	f7fe ffb4 	bl	800a72c <UART_Debug_PutString>
    HAL_IWDG_Refresh(&hiwdg);
 800b7c4:	4812      	ldr	r0, [pc, #72]	@ (800b810 <Timer_Read_W_Port1_Callback+0xb4>)
 800b7c6:	f002 fccd 	bl	800e164 <HAL_IWDG_Refresh>

    Port1_W_Counter = 0;
 800b7ca:	4b12      	ldr	r3, [pc, #72]	@ (800b814 <Timer_Read_W_Port1_Callback+0xb8>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	701a      	strb	r2, [r3, #0]
    Port1_w_Start = 0;
 800b7d0:	4b11      	ldr	r3, [pc, #68]	@ (800b818 <Timer_Read_W_Port1_Callback+0xbc>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	701a      	strb	r2, [r3, #0]
    Port1_W[0] = '\0';
 800b7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b808 <Timer_Read_W_Port1_Callback+0xac>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	701a      	strb	r2, [r3, #0]
    Port1_w_have = 0;
 800b7dc:	4b0f      	ldr	r3, [pc, #60]	@ (800b81c <Timer_Read_W_Port1_Callback+0xc0>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	701a      	strb	r2, [r3, #0]

    return;
 800b7e2:	bf00      	nop
}
 800b7e4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	20002a10 	.word	0x20002a10
 800b7f0:	20002ac8 	.word	0x20002ac8
 800b7f4:	20002acc 	.word	0x20002acc
 800b7f8:	20002ad0 	.word	0x20002ad0
 800b7fc:	08013c28 	.word	0x08013c28
 800b800:	08013bc0 	.word	0x08013bc0
 800b804:	08013c78 	.word	0x08013c78
 800b808:	20002ae0 	.word	0x20002ae0
 800b80c:	08013744 	.word	0x08013744
 800b810:	20000988 	.word	0x20000988
 800b814:	20002b67 	.word	0x20002b67
 800b818:	20002adc 	.word	0x20002adc
 800b81c:	20002add 	.word	0x20002add

0800b820 <Timer_Read_W_Port2_Callback>:

void Timer_Read_W_Port2_Callback()
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b0c2      	sub	sp, #264	@ 0x108
 800b824:	af02      	add	r7, sp, #8
    OS_TIMER_Stop(&Timer_Read_W_Port2);
 800b826:	4822      	ldr	r0, [pc, #136]	@ (800b8b0 <Timer_Read_W_Port2_Callback+0x90>)
 800b828:	f004 ff8a 	bl	8010740 <OS_TIMER_Stop>

    read_failure_port2++;
 800b82c:	4b21      	ldr	r3, [pc, #132]	@ (800b8b4 <Timer_Read_W_Port2_Callback+0x94>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3301      	adds	r3, #1
 800b832:	4a20      	ldr	r2, [pc, #128]	@ (800b8b4 <Timer_Read_W_Port2_Callback+0x94>)
 800b834:	6013      	str	r3, [r2, #0]
    read_failure_total = read_failure_port1 + read_failure_port2;
 800b836:	4b20      	ldr	r3, [pc, #128]	@ (800b8b8 <Timer_Read_W_Port2_Callback+0x98>)
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	4b1e      	ldr	r3, [pc, #120]	@ (800b8b4 <Timer_Read_W_Port2_Callback+0x94>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4413      	add	r3, r2
 800b840:	4a1e      	ldr	r2, [pc, #120]	@ (800b8bc <Timer_Read_W_Port2_Callback+0x9c>)
 800b842:	6013      	str	r3, [r2, #0]
    char data[256];
    sprintf(data, "read_failure_port1 = %lu, read_failure_port2 = %lu, read_failure_total = %lu\r\n", read_failure_port1, read_failure_port2, read_failure_total);
 800b844:	4b1c      	ldr	r3, [pc, #112]	@ (800b8b8 <Timer_Read_W_Port2_Callback+0x98>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	4b1a      	ldr	r3, [pc, #104]	@ (800b8b4 <Timer_Read_W_Port2_Callback+0x94>)
 800b84a:	6819      	ldr	r1, [r3, #0]
 800b84c:	4b1b      	ldr	r3, [pc, #108]	@ (800b8bc <Timer_Read_W_Port2_Callback+0x9c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4638      	mov	r0, r7
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	460b      	mov	r3, r1
 800b856:	491a      	ldr	r1, [pc, #104]	@ (800b8c0 <Timer_Read_W_Port2_Callback+0xa0>)
 800b858:	f006 fbd6 	bl	8012008 <siprintf>
    UART_Debug_PutString("****************************\r\n");
 800b85c:	4819      	ldr	r0, [pc, #100]	@ (800b8c4 <Timer_Read_W_Port2_Callback+0xa4>)
 800b85e:	f7fe ff65 	bl	800a72c <UART_Debug_PutString>
    UART_Debug_PutString("Timer_Read_W_Port2_Callback:");
 800b862:	4819      	ldr	r0, [pc, #100]	@ (800b8c8 <Timer_Read_W_Port2_Callback+0xa8>)
 800b864:	f7fe ff62 	bl	800a72c <UART_Debug_PutString>
    UART_Debug_PutString(Port2_W);
 800b868:	4818      	ldr	r0, [pc, #96]	@ (800b8cc <Timer_Read_W_Port2_Callback+0xac>)
 800b86a:	f7fe ff5f 	bl	800a72c <UART_Debug_PutString>
    UART_Debug_PutString("\r\n");
 800b86e:	4818      	ldr	r0, [pc, #96]	@ (800b8d0 <Timer_Read_W_Port2_Callback+0xb0>)
 800b870:	f7fe ff5c 	bl	800a72c <UART_Debug_PutString>
    HAL_IWDG_Refresh(&hiwdg);
 800b874:	4817      	ldr	r0, [pc, #92]	@ (800b8d4 <Timer_Read_W_Port2_Callback+0xb4>)
 800b876:	f002 fc75 	bl	800e164 <HAL_IWDG_Refresh>
    UART_Debug_PutString(data);
 800b87a:	463b      	mov	r3, r7
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fe ff55 	bl	800a72c <UART_Debug_PutString>
    UART_Debug_PutString("****************************\r\n");
 800b882:	4810      	ldr	r0, [pc, #64]	@ (800b8c4 <Timer_Read_W_Port2_Callback+0xa4>)
 800b884:	f7fe ff52 	bl	800a72c <UART_Debug_PutString>
    HAL_IWDG_Refresh(&hiwdg);
 800b888:	4812      	ldr	r0, [pc, #72]	@ (800b8d4 <Timer_Read_W_Port2_Callback+0xb4>)
 800b88a:	f002 fc6b 	bl	800e164 <HAL_IWDG_Refresh>

    Port2_W_Counter = 0;
 800b88e:	4b12      	ldr	r3, [pc, #72]	@ (800b8d8 <Timer_Read_W_Port2_Callback+0xb8>)
 800b890:	2200      	movs	r2, #0
 800b892:	701a      	strb	r2, [r3, #0]
    Port2_w_Start = 0;
 800b894:	4b11      	ldr	r3, [pc, #68]	@ (800b8dc <Timer_Read_W_Port2_Callback+0xbc>)
 800b896:	2200      	movs	r2, #0
 800b898:	701a      	strb	r2, [r3, #0]
    Port2_W[0] = '\0';
 800b89a:	4b0c      	ldr	r3, [pc, #48]	@ (800b8cc <Timer_Read_W_Port2_Callback+0xac>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	701a      	strb	r2, [r3, #0]
    Port2_w_have = 0;
 800b8a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b8e0 <Timer_Read_W_Port2_Callback+0xc0>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	701a      	strb	r2, [r3, #0]

    return;
 800b8a6:	bf00      	nop
}
 800b8a8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20002a24 	.word	0x20002a24
 800b8b4:	20002acc 	.word	0x20002acc
 800b8b8:	20002ac8 	.word	0x20002ac8
 800b8bc:	20002ad0 	.word	0x20002ad0
 800b8c0:	08013c28 	.word	0x08013c28
 800b8c4:	08013bc0 	.word	0x08013bc0
 800b8c8:	08013c98 	.word	0x08013c98
 800b8cc:	20002b70 	.word	0x20002b70
 800b8d0:	08013744 	.word	0x08013744
 800b8d4:	20000988 	.word	0x20000988
 800b8d8:	20002bf7 	.word	0x20002bf7
 800b8dc:	20002b6c 	.word	0x20002b6c
 800b8e0:	20002b6d 	.word	0x20002b6d

0800b8e4 <Timer_AfterRead_Input1_Callback>:

void Timer_AfterRead_Input1_Callback()
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	af00      	add	r7, sp, #0
//    HAL_IWDG_Refresh(&hiwdg);
//    UART_Debug_PutString(data);
//    UART_Debug_PutString("****************************\r\n");
//    HAL_IWDG_Refresh(&hiwdg);

	if(!q_put_message(&_Queue_Send, In1, 3)){
 800b8e8:	2203      	movs	r2, #3
 800b8ea:	490d      	ldr	r1, [pc, #52]	@ (800b920 <Timer_AfterRead_Input1_Callback+0x3c>)
 800b8ec:	480d      	ldr	r0, [pc, #52]	@ (800b924 <Timer_AfterRead_Input1_Callback+0x40>)
 800b8ee:	f7fe fb6f 	bl	8009fd0 <q_put_message>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d108      	bne.n	800b90a <Timer_AfterRead_Input1_Callback+0x26>
		UART_Debug_PutString("Timer_AfterRead_Input1_Callback >> failed to put to _Queue_Send >> ");
 800b8f8:	480b      	ldr	r0, [pc, #44]	@ (800b928 <Timer_AfterRead_Input1_Callback+0x44>)
 800b8fa:	f7fe ff17 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString(In1);
 800b8fe:	4808      	ldr	r0, [pc, #32]	@ (800b920 <Timer_AfterRead_Input1_Callback+0x3c>)
 800b900:	f7fe ff14 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString("\r\n");
 800b904:	4809      	ldr	r0, [pc, #36]	@ (800b92c <Timer_AfterRead_Input1_Callback+0x48>)
 800b906:	f7fe ff11 	bl	800a72c <UART_Debug_PutString>
	}

    In1[0] = '\0';
 800b90a:	4b05      	ldr	r3, [pc, #20]	@ (800b920 <Timer_AfterRead_Input1_Callback+0x3c>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	701a      	strb	r2, [r3, #0]
    In1[1] = '\0';
 800b910:	4b03      	ldr	r3, [pc, #12]	@ (800b920 <Timer_AfterRead_Input1_Callback+0x3c>)
 800b912:	2200      	movs	r2, #0
 800b914:	705a      	strb	r2, [r3, #1]
    In1[2] = '\0';
 800b916:	4b02      	ldr	r3, [pc, #8]	@ (800b920 <Timer_AfterRead_Input1_Callback+0x3c>)
 800b918:	2200      	movs	r2, #0
 800b91a:	709a      	strb	r2, [r3, #2]

    return;
 800b91c:	bf00      	nop
}
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	20002b64 	.word	0x20002b64
 800b924:	200005f8 	.word	0x200005f8
 800b928:	08013cb8 	.word	0x08013cb8
 800b92c:	08013744 	.word	0x08013744

0800b930 <Timer_AfterRead_Port1_Callback>:

void Timer_AfterRead_Port1_Callback()
{
 800b930:	b580      	push	{r7, lr}
 800b932:	af00      	add	r7, sp, #0
//    HAL_IWDG_Refresh(&hiwdg);
//    UART_Debug_PutString(data);
//    UART_Debug_PutString("****************************\r\n");
//    HAL_IWDG_Refresh(&hiwdg);

	if(!q_put_message(&_Queue_Send, Port1_W, Port1_W_Counter)){
 800b934:	4b10      	ldr	r3, [pc, #64]	@ (800b978 <Timer_AfterRead_Port1_Callback+0x48>)
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	461a      	mov	r2, r3
 800b93a:	4910      	ldr	r1, [pc, #64]	@ (800b97c <Timer_AfterRead_Port1_Callback+0x4c>)
 800b93c:	4810      	ldr	r0, [pc, #64]	@ (800b980 <Timer_AfterRead_Port1_Callback+0x50>)
 800b93e:	f7fe fb47 	bl	8009fd0 <q_put_message>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d108      	bne.n	800b95a <Timer_AfterRead_Port1_Callback+0x2a>
		UART_Debug_PutString("Timer_AfterRead_Port1_Callback >> failed to put to _Queue_Send >> ");
 800b948:	480e      	ldr	r0, [pc, #56]	@ (800b984 <Timer_AfterRead_Port1_Callback+0x54>)
 800b94a:	f7fe feef 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString(Port1_W);
 800b94e:	480b      	ldr	r0, [pc, #44]	@ (800b97c <Timer_AfterRead_Port1_Callback+0x4c>)
 800b950:	f7fe feec 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString("\r\n");
 800b954:	480c      	ldr	r0, [pc, #48]	@ (800b988 <Timer_AfterRead_Port1_Callback+0x58>)
 800b956:	f7fe fee9 	bl	800a72c <UART_Debug_PutString>
	}

    Port1_W_Counter = 0;
 800b95a:	4b07      	ldr	r3, [pc, #28]	@ (800b978 <Timer_AfterRead_Port1_Callback+0x48>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	701a      	strb	r2, [r3, #0]
    Port1_w_Start = 0;
 800b960:	4b0a      	ldr	r3, [pc, #40]	@ (800b98c <Timer_AfterRead_Port1_Callback+0x5c>)
 800b962:	2200      	movs	r2, #0
 800b964:	701a      	strb	r2, [r3, #0]
    Port1_W[0] = '\0';
 800b966:	4b05      	ldr	r3, [pc, #20]	@ (800b97c <Timer_AfterRead_Port1_Callback+0x4c>)
 800b968:	2200      	movs	r2, #0
 800b96a:	701a      	strb	r2, [r3, #0]
    Port1_w_have = 0;
 800b96c:	4b08      	ldr	r3, [pc, #32]	@ (800b990 <Timer_AfterRead_Port1_Callback+0x60>)
 800b96e:	2200      	movs	r2, #0
 800b970:	701a      	strb	r2, [r3, #0]

    return;
 800b972:	bf00      	nop
}
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	20002b67 	.word	0x20002b67
 800b97c:	20002ae0 	.word	0x20002ae0
 800b980:	200005f8 	.word	0x200005f8
 800b984:	08013cfc 	.word	0x08013cfc
 800b988:	08013744 	.word	0x08013744
 800b98c:	20002adc 	.word	0x20002adc
 800b990:	20002add 	.word	0x20002add

0800b994 <Timer_AfterRead_Input2_Callback>:

void Timer_AfterRead_Input2_Callback()
{
 800b994:	b580      	push	{r7, lr}
 800b996:	af00      	add	r7, sp, #0
//    HAL_IWDG_Refresh(&hiwdg);
//    UART_Debug_PutString(data);
//    UART_Debug_PutString("****************************\r\n");
//    HAL_IWDG_Refresh(&hiwdg);

	if(!q_put_message(&_Queue_Send, In2, 3)){
 800b998:	2203      	movs	r2, #3
 800b99a:	490d      	ldr	r1, [pc, #52]	@ (800b9d0 <Timer_AfterRead_Input2_Callback+0x3c>)
 800b99c:	480d      	ldr	r0, [pc, #52]	@ (800b9d4 <Timer_AfterRead_Input2_Callback+0x40>)
 800b99e:	f7fe fb17 	bl	8009fd0 <q_put_message>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d108      	bne.n	800b9ba <Timer_AfterRead_Input2_Callback+0x26>
		UART_Debug_PutString("Timer_AfterRead_Input2_Callback >> failed to put to _Queue_Send >> ");
 800b9a8:	480b      	ldr	r0, [pc, #44]	@ (800b9d8 <Timer_AfterRead_Input2_Callback+0x44>)
 800b9aa:	f7fe febf 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString(In2);
 800b9ae:	4808      	ldr	r0, [pc, #32]	@ (800b9d0 <Timer_AfterRead_Input2_Callback+0x3c>)
 800b9b0:	f7fe febc 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString("\r\n");
 800b9b4:	4809      	ldr	r0, [pc, #36]	@ (800b9dc <Timer_AfterRead_Input2_Callback+0x48>)
 800b9b6:	f7fe feb9 	bl	800a72c <UART_Debug_PutString>
	}

    In2[0] = '\0';
 800b9ba:	4b05      	ldr	r3, [pc, #20]	@ (800b9d0 <Timer_AfterRead_Input2_Callback+0x3c>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	701a      	strb	r2, [r3, #0]
    In2[1] = '\0';
 800b9c0:	4b03      	ldr	r3, [pc, #12]	@ (800b9d0 <Timer_AfterRead_Input2_Callback+0x3c>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	705a      	strb	r2, [r3, #1]
    In2[2] = '\0';
 800b9c6:	4b02      	ldr	r3, [pc, #8]	@ (800b9d0 <Timer_AfterRead_Input2_Callback+0x3c>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	709a      	strb	r2, [r3, #2]

    return;
 800b9cc:	bf00      	nop
}
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20002bf4 	.word	0x20002bf4
 800b9d4:	200005f8 	.word	0x200005f8
 800b9d8:	08013d40 	.word	0x08013d40
 800b9dc:	08013744 	.word	0x08013744

0800b9e0 <Timer_AfterRead_Port2_Callback>:

void Timer_AfterRead_Port2_Callback()
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	af00      	add	r7, sp, #0
//    HAL_IWDG_Refresh(&hiwdg);
//    UART_Debug_PutString(data);
//    UART_Debug_PutString("****************************\r\n");
//    HAL_IWDG_Refresh(&hiwdg);

	if(!q_put_message(&_Queue_Send, Port2_W, Port2_W_Counter)){
 800b9e4:	4b10      	ldr	r3, [pc, #64]	@ (800ba28 <Timer_AfterRead_Port2_Callback+0x48>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	4910      	ldr	r1, [pc, #64]	@ (800ba2c <Timer_AfterRead_Port2_Callback+0x4c>)
 800b9ec:	4810      	ldr	r0, [pc, #64]	@ (800ba30 <Timer_AfterRead_Port2_Callback+0x50>)
 800b9ee:	f7fe faef 	bl	8009fd0 <q_put_message>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d108      	bne.n	800ba0a <Timer_AfterRead_Port2_Callback+0x2a>
		UART_Debug_PutString("Timer_AfterRead_Port2_Callback >> failed to put to _Queue_Send >> ");
 800b9f8:	480e      	ldr	r0, [pc, #56]	@ (800ba34 <Timer_AfterRead_Port2_Callback+0x54>)
 800b9fa:	f7fe fe97 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString(Port2_W);
 800b9fe:	480b      	ldr	r0, [pc, #44]	@ (800ba2c <Timer_AfterRead_Port2_Callback+0x4c>)
 800ba00:	f7fe fe94 	bl	800a72c <UART_Debug_PutString>
		UART_Debug_PutString("\r\n");
 800ba04:	480c      	ldr	r0, [pc, #48]	@ (800ba38 <Timer_AfterRead_Port2_Callback+0x58>)
 800ba06:	f7fe fe91 	bl	800a72c <UART_Debug_PutString>
	}

    Port2_W_Counter = 0;
 800ba0a:	4b07      	ldr	r3, [pc, #28]	@ (800ba28 <Timer_AfterRead_Port2_Callback+0x48>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	701a      	strb	r2, [r3, #0]
    Port2_w_Start = 0;
 800ba10:	4b0a      	ldr	r3, [pc, #40]	@ (800ba3c <Timer_AfterRead_Port2_Callback+0x5c>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	701a      	strb	r2, [r3, #0]
    Port2_W[0] = '\0';
 800ba16:	4b05      	ldr	r3, [pc, #20]	@ (800ba2c <Timer_AfterRead_Port2_Callback+0x4c>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	701a      	strb	r2, [r3, #0]
    Port2_w_have = 0;
 800ba1c:	4b08      	ldr	r3, [pc, #32]	@ (800ba40 <Timer_AfterRead_Port2_Callback+0x60>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	701a      	strb	r2, [r3, #0]

    return;
 800ba22:	bf00      	nop
}
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	20002bf7 	.word	0x20002bf7
 800ba2c:	20002b70 	.word	0x20002b70
 800ba30:	200005f8 	.word	0x200005f8
 800ba34:	08013d84 	.word	0x08013d84
 800ba38:	08013744 	.word	0x08013744
 800ba3c:	20002b6c 	.word	0x20002b6c
 800ba40:	20002b6d 	.word	0x20002b6d

0800ba44 <Timer_WD_Callback>:

void Timer_WD_Callback()
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	af00      	add	r7, sp, #0
    OS_TIMER_Stop(&Timer_WD);
 800ba48:	4805      	ldr	r0, [pc, #20]	@ (800ba60 <Timer_WD_Callback+0x1c>)
 800ba4a:	f004 fe79 	bl	8010740 <OS_TIMER_Stop>
    HAL_IWDG_Refresh(&hiwdg);
 800ba4e:	4805      	ldr	r0, [pc, #20]	@ (800ba64 <Timer_WD_Callback+0x20>)
 800ba50:	f002 fb88 	bl	800e164 <HAL_IWDG_Refresh>
    OS_TIMER_Restart(&Timer_WD);
 800ba54:	4802      	ldr	r0, [pc, #8]	@ (800ba60 <Timer_WD_Callback+0x1c>)
 800ba56:	f004 fe27 	bl	80106a8 <OS_TIMER_Restart>

    return;
 800ba5a:	bf00      	nop
}
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	20002a88 	.word	0x20002a88
 800ba64:	20000988 	.word	0x20000988

0800ba68 <Timer_Inps_Callback>:

void Timer_Inps_Callback()
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	af00      	add	r7, sp, #0
    OS_TIMER_Stop(&Timer_Inps);
 800ba6c:	4805      	ldr	r0, [pc, #20]	@ (800ba84 <Timer_Inps_Callback+0x1c>)
 800ba6e:	f004 fe67 	bl	8010740 <OS_TIMER_Stop>
    Inputs_Job();
 800ba72:	f7ff f887 	bl	800ab84 <Inputs_Job>
    Inps();
 800ba76:	f7ff f8c5 	bl	800ac04 <Inps>
//    UART_Debug_PutString("inps\r\n");
    OS_TIMER_Restart(&Timer_Inps);
 800ba7a:	4802      	ldr	r0, [pc, #8]	@ (800ba84 <Timer_Inps_Callback+0x1c>)
 800ba7c:	f004 fe14 	bl	80106a8 <OS_TIMER_Restart>
    return;
 800ba80:	bf00      	nop
}
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	20002a9c 	.word	0x20002a9c

0800ba88 <Timer_Intr_Callback>:
////    NVIC_SystemReset();
//    return;
//}

void Timer_Intr_Callback()
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < intr_counter; i++)
 800ba8e:	2300      	movs	r3, #0
 800ba90:	71fb      	strb	r3, [r7, #7]
 800ba92:	e008      	b.n	800baa6 <Timer_Intr_Callback+0x1e>
		Ports_Job(intr[i]);
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	4a0a      	ldr	r2, [pc, #40]	@ (800bac0 <Timer_Intr_Callback+0x38>)
 800ba98:	5cd3      	ldrb	r3, [r2, r3]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fe fe74 	bl	800a788 <Ports_Job>
	for(uint8_t i = 0; i < intr_counter; i++)
 800baa0:	79fb      	ldrb	r3, [r7, #7]
 800baa2:	3301      	adds	r3, #1
 800baa4:	71fb      	strb	r3, [r7, #7]
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	4b06      	ldr	r3, [pc, #24]	@ (800bac4 <Timer_Intr_Callback+0x3c>)
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d3f0      	bcc.n	800ba94 <Timer_Intr_Callback+0xc>
	intr_counter = 0;
 800bab2:	4b04      	ldr	r3, [pc, #16]	@ (800bac4 <Timer_Intr_Callback+0x3c>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	801a      	strh	r2, [r3, #0]
	return;
 800bab8:	bf00      	nop
}
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	20002cfc 	.word	0x20002cfc
 800bac4:	20002efc 	.word	0x20002efc

0800bac8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
//	__disable_irq();
	OS_INT_Enter();
 800bad0:	4b50      	ldr	r3, [pc, #320]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bad2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d102      	bne.n	800bae0 <HAL_UART_RxCpltCallback+0x18>
 800bada:	20a5      	movs	r0, #165	@ 0xa5
 800badc:	f004 f870 	bl	800fbc0 <OS_Error>
 800bae0:	4b4c      	ldr	r3, [pc, #304]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bae2:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800bae6:	3301      	adds	r3, #1
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	4b4a      	ldr	r3, [pc, #296]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800baec:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
 800baf0:	f005 f858 	bl	8010ba4 <OS_AssertCPUInISRMode>
 800baf4:	2380      	movs	r3, #128	@ 0x80
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	4b46      	ldr	r3, [pc, #280]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	3301      	adds	r3, #1
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	4b43      	ldr	r3, [pc, #268]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb06:	701a      	strb	r2, [r3, #0]
 800bb08:	4b42      	ldr	r3, [pc, #264]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb0a:	785b      	ldrb	r3, [r3, #1]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	3301      	adds	r3, #1
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	4b40      	ldr	r3, [pc, #256]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb14:	705a      	strb	r2, [r3, #1]
 800bb16:	4b3f      	ldr	r3, [pc, #252]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d003      	beq.n	800bb26 <HAL_UART_RxCpltCallback+0x5e>
 800bb1e:	4b3d      	ldr	r3, [pc, #244]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4798      	blx	r3


	if(huart->Instance == USART1){
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a3b      	ldr	r2, [pc, #236]	@ (800bc18 <HAL_UART_RxCpltCallback+0x150>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d116      	bne.n	800bb5e <HAL_UART_RxCpltCallback+0x96>
		OS_TIMER_Restart(&Timer_Read_Linux);
 800bb30:	483a      	ldr	r0, [pc, #232]	@ (800bc1c <HAL_UART_RxCpltCallback+0x154>)
 800bb32:	f004 fdb9 	bl	80106a8 <OS_TIMER_Restart>
		UART_Linux_Rx_Buffer[UART_Linux_Rx_Counter] = huart1.Instance->DR;
 800bb36:	4b3a      	ldr	r3, [pc, #232]	@ (800bc20 <HAL_UART_RxCpltCallback+0x158>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	6859      	ldr	r1, [r3, #4]
 800bb3c:	4b39      	ldr	r3, [pc, #228]	@ (800bc24 <HAL_UART_RxCpltCallback+0x15c>)
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	461a      	mov	r2, r3
 800bb42:	b2c9      	uxtb	r1, r1
 800bb44:	4b38      	ldr	r3, [pc, #224]	@ (800bc28 <HAL_UART_RxCpltCallback+0x160>)
 800bb46:	5499      	strb	r1, [r3, r2]
		UART_Linux_Rx_Counter++;
 800bb48:	4b36      	ldr	r3, [pc, #216]	@ (800bc24 <HAL_UART_RxCpltCallback+0x15c>)
 800bb4a:	881b      	ldrh	r3, [r3, #0]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	4b34      	ldr	r3, [pc, #208]	@ (800bc24 <HAL_UART_RxCpltCallback+0x15c>)
 800bb52:	801a      	strh	r2, [r3, #0]
//			}
//			memset(UART_Linux_Rx_Buffer, '\0', UART_Linux_Rx_Counter);
//			UART_Linux_Rx_Counter = 0;
//		}

		HAL_UART_Receive_DMA(&huart1, linux_rx, sizeof(linux_rx));
 800bb54:	2201      	movs	r2, #1
 800bb56:	4935      	ldr	r1, [pc, #212]	@ (800bc2c <HAL_UART_RxCpltCallback+0x164>)
 800bb58:	4831      	ldr	r0, [pc, #196]	@ (800bc20 <HAL_UART_RxCpltCallback+0x158>)
 800bb5a:	f003 fa96 	bl	800f08a <HAL_UART_Receive_DMA>
	}

    OS_INT_Leave();
 800bb5e:	4b2d      	ldr	r3, [pc, #180]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d10c      	bne.n	800bb82 <HAL_UART_RxCpltCallback+0xba>
 800bb68:	4b2a      	ldr	r3, [pc, #168]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d008      	beq.n	800bb82 <HAL_UART_RxCpltCallback+0xba>
 800bb70:	4b28      	ldr	r3, [pc, #160]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00c      	beq.n	800bb92 <HAL_UART_RxCpltCallback+0xca>
 800bb78:	4b26      	ldr	r3, [pc, #152]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	4798      	blx	r3
 800bb80:	e007      	b.n	800bb92 <HAL_UART_RxCpltCallback+0xca>
 800bb82:	4b24      	ldr	r3, [pc, #144]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <HAL_UART_RxCpltCallback+0xca>
 800bb8a:	4b22      	ldr	r3, [pc, #136]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	4798      	blx	r3
 800bb92:	4b20      	ldr	r3, [pc, #128]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb94:	785b      	ldrb	r3, [r3, #1]
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	4b1d      	ldr	r3, [pc, #116]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bb9e:	705a      	strb	r2, [r3, #1]
 800bba0:	4b1c      	ldr	r3, [pc, #112]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d116      	bne.n	800bbd8 <HAL_UART_RxCpltCallback+0x110>
 800bbaa:	4b1a      	ldr	r3, [pc, #104]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d012      	beq.n	800bbd8 <HAL_UART_RxCpltCallback+0x110>
 800bbb2:	4b18      	ldr	r3, [pc, #96]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bbb4:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d102      	bne.n	800bbc2 <HAL_UART_RxCpltCallback+0xfa>
 800bbbc:	2098      	movs	r0, #152	@ 0x98
 800bbbe:	f003 ffff 	bl	800fbc0 <OS_Error>
 800bbc2:	4b14      	ldr	r3, [pc, #80]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bbc4:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	4b11      	ldr	r3, [pc, #68]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bbce:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
 800bbd2:	f7fc ffa2 	bl	8008b1a <OS_SwitchFromInt>
 800bbd6:	e00f      	b.n	800bbf8 <HAL_UART_RxCpltCallback+0x130>
 800bbd8:	4b0e      	ldr	r3, [pc, #56]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bbda:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d102      	bne.n	800bbe8 <HAL_UART_RxCpltCallback+0x120>
 800bbe2:	2098      	movs	r0, #152	@ 0x98
 800bbe4:	f003 ffec 	bl	800fbc0 <OS_Error>
 800bbe8:	4b0a      	ldr	r3, [pc, #40]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bbea:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	4b08      	ldr	r3, [pc, #32]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bbf4:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
 800bbf8:	4b06      	ldr	r3, [pc, #24]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	4b04      	ldr	r3, [pc, #16]	@ (800bc14 <HAL_UART_RxCpltCallback+0x14c>)
 800bc04:	701a      	strb	r2, [r3, #0]
 800bc06:	2300      	movs	r3, #0
 800bc08:	f383 8811 	msr	BASEPRI, r3
//    __enable_irq();

	return;
 800bc0c:	bf00      	nop
}
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	20003088 	.word	0x20003088
 800bc18:	40013800 	.word	0x40013800
 800bc1c:	200029e8 	.word	0x200029e8
 800bc20:	20002f4c 	.word	0x20002f4c
 800bc24:	20002cf8 	.word	0x20002cf8
 800bc28:	20002bf8 	.word	0x20002bf8
 800bc2c:	20002ac4 	.word	0x20002ac4

0800bc30 <HAL_GPIO_EXTI_Callback>:
//}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bc30:	b590      	push	{r4, r7, lr}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	4603      	mov	r3, r0
 800bc38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
//	__disable_irq();
	OS_INT_Enter();
 800bc3a:	4b62      	ldr	r3, [pc, #392]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bc3c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d102      	bne.n	800bc4a <HAL_GPIO_EXTI_Callback+0x1a>
 800bc44:	20a5      	movs	r0, #165	@ 0xa5
 800bc46:	f003 ffbb 	bl	800fbc0 <OS_Error>
 800bc4a:	4b5e      	ldr	r3, [pc, #376]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bc4c:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800bc50:	3301      	adds	r3, #1
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	4b5b      	ldr	r3, [pc, #364]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bc56:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
 800bc5a:	f004 ffa3 	bl	8010ba4 <OS_AssertCPUInISRMode>
 800bc5e:	2380      	movs	r3, #128	@ 0x80
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	4b57      	ldr	r3, [pc, #348]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	4b55      	ldr	r3, [pc, #340]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bc70:	701a      	strb	r2, [r3, #0]
 800bc72:	4b54      	ldr	r3, [pc, #336]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bc74:	785b      	ldrb	r3, [r3, #1]
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	3301      	adds	r3, #1
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	4b51      	ldr	r3, [pc, #324]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bc7e:	705a      	strb	r2, [r3, #1]
 800bc80:	4b50      	ldr	r3, [pc, #320]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bc82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d003      	beq.n	800bc90 <HAL_GPIO_EXTI_Callback+0x60>
 800bc88:	4b4e      	ldr	r3, [pc, #312]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bc8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4798      	blx	r3

	OS_TIMER_Restart(&Timer_intr);
 800bc90:	484d      	ldr	r0, [pc, #308]	@ (800bdc8 <HAL_GPIO_EXTI_Callback+0x198>)
 800bc92:	f004 fd09 	bl	80106a8 <OS_TIMER_Restart>
	intr[intr_counter] = (!HAL_GPIO_ReadPin(GPIOC, GPIO_Input_1_Pin)  << 0) | (!HAL_GPIO_ReadPin(GPIOC, GPIO_Input_2_Pin)  << 1) |
 800bc96:	2101      	movs	r1, #1
 800bc98:	484c      	ldr	r0, [pc, #304]	@ (800bdcc <HAL_GPIO_EXTI_Callback+0x19c>)
 800bc9a:	f001 fbff 	bl	800d49c <HAL_GPIO_ReadPin>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bf0c      	ite	eq
 800bca4:	2301      	moveq	r3, #1
 800bca6:	2300      	movne	r3, #0
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	b25c      	sxtb	r4, r3
 800bcac:	2102      	movs	r1, #2
 800bcae:	4847      	ldr	r0, [pc, #284]	@ (800bdcc <HAL_GPIO_EXTI_Callback+0x19c>)
 800bcb0:	f001 fbf4 	bl	800d49c <HAL_GPIO_ReadPin>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <HAL_GPIO_EXTI_Callback+0x8e>
 800bcba:	2302      	movs	r3, #2
 800bcbc:	e000      	b.n	800bcc0 <HAL_GPIO_EXTI_Callback+0x90>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	4323      	orrs	r3, r4
 800bcc2:	b25c      	sxtb	r4, r3
			             (!HAL_GPIO_ReadPin(GPIOA, GPIO_Input_4_Pin)  << 5) | (!HAL_GPIO_ReadPin(GPIOA, GPIO_Input_5_Pin)  << 6) ;
 800bcc4:	2120      	movs	r1, #32
 800bcc6:	4842      	ldr	r0, [pc, #264]	@ (800bdd0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800bcc8:	f001 fbe8 	bl	800d49c <HAL_GPIO_ReadPin>
 800bccc:	4603      	mov	r3, r0
	intr[intr_counter] = (!HAL_GPIO_ReadPin(GPIOC, GPIO_Input_1_Pin)  << 0) | (!HAL_GPIO_ReadPin(GPIOC, GPIO_Input_2_Pin)  << 1) |
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d101      	bne.n	800bcd6 <HAL_GPIO_EXTI_Callback+0xa6>
 800bcd2:	2320      	movs	r3, #32
 800bcd4:	e000      	b.n	800bcd8 <HAL_GPIO_EXTI_Callback+0xa8>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	4323      	orrs	r3, r4
 800bcda:	b25c      	sxtb	r4, r3
			             (!HAL_GPIO_ReadPin(GPIOA, GPIO_Input_4_Pin)  << 5) | (!HAL_GPIO_ReadPin(GPIOA, GPIO_Input_5_Pin)  << 6) ;
 800bcdc:	2140      	movs	r1, #64	@ 0x40
 800bcde:	483c      	ldr	r0, [pc, #240]	@ (800bdd0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800bce0:	f001 fbdc 	bl	800d49c <HAL_GPIO_ReadPin>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d101      	bne.n	800bcee <HAL_GPIO_EXTI_Callback+0xbe>
 800bcea:	2340      	movs	r3, #64	@ 0x40
 800bcec:	e000      	b.n	800bcf0 <HAL_GPIO_EXTI_Callback+0xc0>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4323      	orrs	r3, r4
 800bcf2:	b259      	sxtb	r1, r3
	intr[intr_counter] = (!HAL_GPIO_ReadPin(GPIOC, GPIO_Input_1_Pin)  << 0) | (!HAL_GPIO_ReadPin(GPIOC, GPIO_Input_2_Pin)  << 1) |
 800bcf4:	4b37      	ldr	r3, [pc, #220]	@ (800bdd4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	461a      	mov	r2, r3
			             (!HAL_GPIO_ReadPin(GPIOA, GPIO_Input_4_Pin)  << 5) | (!HAL_GPIO_ReadPin(GPIOA, GPIO_Input_5_Pin)  << 6) ;
 800bcfa:	b2c9      	uxtb	r1, r1
	intr[intr_counter] = (!HAL_GPIO_ReadPin(GPIOC, GPIO_Input_1_Pin)  << 0) | (!HAL_GPIO_ReadPin(GPIOC, GPIO_Input_2_Pin)  << 1) |
 800bcfc:	4b36      	ldr	r3, [pc, #216]	@ (800bdd8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800bcfe:	5499      	strb	r1, [r3, r2]
	intr_counter++;
 800bd00:	4b34      	ldr	r3, [pc, #208]	@ (800bdd4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	3301      	adds	r3, #1
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	4b32      	ldr	r3, [pc, #200]	@ (800bdd4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800bd0a:	801a      	strh	r2, [r3, #0]
//	Ports_Job(GPIO_Pin);



	OS_INT_Leave();
 800bd0c:	4b2d      	ldr	r3, [pc, #180]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d10c      	bne.n	800bd30 <HAL_GPIO_EXTI_Callback+0x100>
 800bd16:	4b2b      	ldr	r3, [pc, #172]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d008      	beq.n	800bd30 <HAL_GPIO_EXTI_Callback+0x100>
 800bd1e:	4b29      	ldr	r3, [pc, #164]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00c      	beq.n	800bd40 <HAL_GPIO_EXTI_Callback+0x110>
 800bd26:	4b27      	ldr	r3, [pc, #156]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	4798      	blx	r3
 800bd2e:	e007      	b.n	800bd40 <HAL_GPIO_EXTI_Callback+0x110>
 800bd30:	4b24      	ldr	r3, [pc, #144]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d003      	beq.n	800bd40 <HAL_GPIO_EXTI_Callback+0x110>
 800bd38:	4b22      	ldr	r3, [pc, #136]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	4798      	blx	r3
 800bd40:	4b20      	ldr	r3, [pc, #128]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd42:	785b      	ldrb	r3, [r3, #1]
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	3b01      	subs	r3, #1
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	4b1e      	ldr	r3, [pc, #120]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd4c:	705a      	strb	r2, [r3, #1]
 800bd4e:	4b1d      	ldr	r3, [pc, #116]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d116      	bne.n	800bd86 <HAL_GPIO_EXTI_Callback+0x156>
 800bd58:	4b1a      	ldr	r3, [pc, #104]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d012      	beq.n	800bd86 <HAL_GPIO_EXTI_Callback+0x156>
 800bd60:	4b18      	ldr	r3, [pc, #96]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd62:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d102      	bne.n	800bd70 <HAL_GPIO_EXTI_Callback+0x140>
 800bd6a:	2098      	movs	r0, #152	@ 0x98
 800bd6c:	f003 ff28 	bl	800fbc0 <OS_Error>
 800bd70:	4b14      	ldr	r3, [pc, #80]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd72:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800bd76:	3b01      	subs	r3, #1
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	4b12      	ldr	r3, [pc, #72]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd7c:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
 800bd80:	f7fc fecb 	bl	8008b1a <OS_SwitchFromInt>
 800bd84:	e00f      	b.n	800bda6 <HAL_GPIO_EXTI_Callback+0x176>
 800bd86:	4b0f      	ldr	r3, [pc, #60]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd88:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d102      	bne.n	800bd96 <HAL_GPIO_EXTI_Callback+0x166>
 800bd90:	2098      	movs	r0, #152	@ 0x98
 800bd92:	f003 ff15 	bl	800fbc0 <OS_Error>
 800bd96:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bd98:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	4b08      	ldr	r3, [pc, #32]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bda2:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
 800bda6:	4b07      	ldr	r3, [pc, #28]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	3b01      	subs	r3, #1
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	4b04      	ldr	r3, [pc, #16]	@ (800bdc4 <HAL_GPIO_EXTI_Callback+0x194>)
 800bdb2:	701a      	strb	r2, [r3, #0]
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f383 8811 	msr	BASEPRI, r3
//	__enable_irq();
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800bdba:	bf00      	nop
 800bdbc:	370c      	adds	r7, #12
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd90      	pop	{r4, r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	20003088 	.word	0x20003088
 800bdc8:	20002ab0 	.word	0x20002ab0
 800bdcc:	40011000 	.word	0x40011000
 800bdd0:	40010800 	.word	0x40010800
 800bdd4:	20002efc 	.word	0x20002efc
 800bdd8:	20002cfc 	.word	0x20002cfc

0800bddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdec:	d101      	bne.n	800bdf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800bdee:	f000 fb85 	bl	800c4fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800bdf2:	bf00      	nop
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800bdfe:	b672      	cpsid	i
}
 800be00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800be02:	bf00      	nop
 800be04:	e7fd      	b.n	800be02 <Error_Handler+0x8>
	...

0800be08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800be08:	b480      	push	{r7}
 800be0a:	b085      	sub	sp, #20
 800be0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800be0e:	4b15      	ldr	r3, [pc, #84]	@ (800be64 <HAL_MspInit+0x5c>)
 800be10:	699b      	ldr	r3, [r3, #24]
 800be12:	4a14      	ldr	r2, [pc, #80]	@ (800be64 <HAL_MspInit+0x5c>)
 800be14:	f043 0301 	orr.w	r3, r3, #1
 800be18:	6193      	str	r3, [r2, #24]
 800be1a:	4b12      	ldr	r3, [pc, #72]	@ (800be64 <HAL_MspInit+0x5c>)
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	f003 0301 	and.w	r3, r3, #1
 800be22:	60bb      	str	r3, [r7, #8]
 800be24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800be26:	4b0f      	ldr	r3, [pc, #60]	@ (800be64 <HAL_MspInit+0x5c>)
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	4a0e      	ldr	r2, [pc, #56]	@ (800be64 <HAL_MspInit+0x5c>)
 800be2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be30:	61d3      	str	r3, [r2, #28]
 800be32:	4b0c      	ldr	r3, [pc, #48]	@ (800be64 <HAL_MspInit+0x5c>)
 800be34:	69db      	ldr	r3, [r3, #28]
 800be36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be3a:	607b      	str	r3, [r7, #4]
 800be3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800be3e:	4b0a      	ldr	r3, [pc, #40]	@ (800be68 <HAL_MspInit+0x60>)
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	60fb      	str	r3, [r7, #12]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800be52:	60fb      	str	r3, [r7, #12]
 800be54:	4a04      	ldr	r2, [pc, #16]	@ (800be68 <HAL_MspInit+0x60>)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800be5a:	bf00      	nop
 800be5c:	3714      	adds	r7, #20
 800be5e:	46bd      	mov	sp, r7
 800be60:	bc80      	pop	{r7}
 800be62:	4770      	bx	lr
 800be64:	40021000 	.word	0x40021000
 800be68:	40010000 	.word	0x40010000

0800be6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b08e      	sub	sp, #56	@ 0x38
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800be74:	2300      	movs	r3, #0
 800be76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800be78:	2300      	movs	r3, #0
 800be7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800be7c:	2300      	movs	r3, #0
 800be7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800be82:	4b34      	ldr	r3, [pc, #208]	@ (800bf54 <HAL_InitTick+0xe8>)
 800be84:	69db      	ldr	r3, [r3, #28]
 800be86:	4a33      	ldr	r2, [pc, #204]	@ (800bf54 <HAL_InitTick+0xe8>)
 800be88:	f043 0301 	orr.w	r3, r3, #1
 800be8c:	61d3      	str	r3, [r2, #28]
 800be8e:	4b31      	ldr	r3, [pc, #196]	@ (800bf54 <HAL_InitTick+0xe8>)
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	60fb      	str	r3, [r7, #12]
 800be98:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800be9a:	f107 0210 	add.w	r2, r7, #16
 800be9e:	f107 0314 	add.w	r3, r7, #20
 800bea2:	4611      	mov	r1, r2
 800bea4:	4618      	mov	r0, r3
 800bea6:	f002 fd5f 	bl	800e968 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800beaa:	6a3b      	ldr	r3, [r7, #32]
 800beac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800beae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d103      	bne.n	800bebc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800beb4:	f002 fd30 	bl	800e918 <HAL_RCC_GetPCLK1Freq>
 800beb8:	6378      	str	r0, [r7, #52]	@ 0x34
 800beba:	e004      	b.n	800bec6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800bebc:	f002 fd2c 	bl	800e918 <HAL_RCC_GetPCLK1Freq>
 800bec0:	4603      	mov	r3, r0
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800bec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bec8:	4a23      	ldr	r2, [pc, #140]	@ (800bf58 <HAL_InitTick+0xec>)
 800beca:	fba2 2303 	umull	r2, r3, r2, r3
 800bece:	0c9b      	lsrs	r3, r3, #18
 800bed0:	3b01      	subs	r3, #1
 800bed2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800bed4:	4b21      	ldr	r3, [pc, #132]	@ (800bf5c <HAL_InitTick+0xf0>)
 800bed6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800beda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800bedc:	4b1f      	ldr	r3, [pc, #124]	@ (800bf5c <HAL_InitTick+0xf0>)
 800bede:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800bee2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800bee4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf5c <HAL_InitTick+0xf0>)
 800bee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800beea:	4b1c      	ldr	r3, [pc, #112]	@ (800bf5c <HAL_InitTick+0xf0>)
 800beec:	2200      	movs	r2, #0
 800beee:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bef0:	4b1a      	ldr	r3, [pc, #104]	@ (800bf5c <HAL_InitTick+0xf0>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bef6:	4b19      	ldr	r3, [pc, #100]	@ (800bf5c <HAL_InitTick+0xf0>)
 800bef8:	2200      	movs	r2, #0
 800befa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800befc:	4817      	ldr	r0, [pc, #92]	@ (800bf5c <HAL_InitTick+0xf0>)
 800befe:	f002 fd81 	bl	800ea04 <HAL_TIM_Base_Init>
 800bf02:	4603      	mov	r3, r0
 800bf04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800bf08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d11b      	bne.n	800bf48 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800bf10:	4812      	ldr	r0, [pc, #72]	@ (800bf5c <HAL_InitTick+0xf0>)
 800bf12:	f002 fdcf 	bl	800eab4 <HAL_TIM_Base_Start_IT>
 800bf16:	4603      	mov	r3, r0
 800bf18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800bf1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d111      	bne.n	800bf48 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800bf24:	201c      	movs	r0, #28
 800bf26:	f000 fbd6 	bl	800c6d6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b0f      	cmp	r3, #15
 800bf2e:	d808      	bhi.n	800bf42 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800bf30:	2200      	movs	r2, #0
 800bf32:	6879      	ldr	r1, [r7, #4]
 800bf34:	201c      	movs	r0, #28
 800bf36:	f000 fbb2 	bl	800c69e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bf3a:	4a09      	ldr	r2, [pc, #36]	@ (800bf60 <HAL_InitTick+0xf4>)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	e002      	b.n	800bf48 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800bf48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3738      	adds	r7, #56	@ 0x38
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	40021000 	.word	0x40021000
 800bf58:	431bde83 	.word	0x431bde83
 800bf5c:	20002f00 	.word	0x20002f00
 800bf60:	20000020 	.word	0x20000020

0800bf64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bf64:	b480      	push	{r7}
 800bf66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800bf68:	bf00      	nop
 800bf6a:	e7fd      	b.n	800bf68 <NMI_Handler+0x4>

0800bf6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bf70:	bf00      	nop
 800bf72:	e7fd      	b.n	800bf70 <HardFault_Handler+0x4>

0800bf74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bf74:	b480      	push	{r7}
 800bf76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bf78:	bf00      	nop
 800bf7a:	e7fd      	b.n	800bf78 <MemManage_Handler+0x4>

0800bf7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bf80:	bf00      	nop
 800bf82:	e7fd      	b.n	800bf80 <BusFault_Handler+0x4>

0800bf84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bf84:	b480      	push	{r7}
 800bf86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bf88:	bf00      	nop
 800bf8a:	e7fd      	b.n	800bf88 <UsageFault_Handler+0x4>

0800bf8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bf90:	bf00      	nop
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bc80      	pop	{r7}
 800bf96:	4770      	bx	lr

0800bf98 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_Input_1_Pin);
 800bf9c:	2001      	movs	r0, #1
 800bf9e:	f001 faad 	bl	800d4fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800bfa2:	bf00      	nop
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_Input_2_Pin);
 800bfaa:	2002      	movs	r0, #2
 800bfac:	f001 faa6 	bl	800d4fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800bfb0:	bf00      	nop
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800bfb8:	4802      	ldr	r0, [pc, #8]	@ (800bfc4 <DMA1_Channel5_IRQHandler+0x10>)
 800bfba:	f000 fc71 	bl	800c8a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800bfbe:	bf00      	nop
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20002fdc 	.word	0x20002fdc

0800bfc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_Input_4_Pin);
 800bfcc:	2020      	movs	r0, #32
 800bfce:	f001 fa95 	bl	800d4fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_Input_5_Pin);
 800bfd2:	2040      	movs	r0, #64	@ 0x40
 800bfd4:	f001 fa92 	bl	800d4fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800bfd8:	bf00      	nop
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800bfe0:	4802      	ldr	r0, [pc, #8]	@ (800bfec <TIM2_IRQHandler+0x10>)
 800bfe2:	f002 fdc7 	bl	800eb74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800bfe6:	bf00      	nop
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	20002f00 	.word	0x20002f00

0800bff0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bff0:	b480      	push	{r7}
 800bff2:	af00      	add	r7, sp, #0
  return 1;
 800bff4:	2301      	movs	r3, #1
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bc80      	pop	{r7}
 800bffc:	4770      	bx	lr

0800bffe <_kill>:

int _kill(int pid, int sig)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b082      	sub	sp, #8
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800c008:	f006 f96a 	bl	80122e0 <__errno>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2216      	movs	r2, #22
 800c010:	601a      	str	r2, [r3, #0]
  return -1;
 800c012:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c016:	4618      	mov	r0, r3
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <_exit>:

void _exit (int status)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b082      	sub	sp, #8
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800c026:	f04f 31ff 	mov.w	r1, #4294967295
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7ff ffe7 	bl	800bffe <_kill>
  while (1) {}    /* Make sure we hang here */
 800c030:	bf00      	nop
 800c032:	e7fd      	b.n	800c030 <_exit+0x12>

0800c034 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c040:	2300      	movs	r3, #0
 800c042:	617b      	str	r3, [r7, #20]
 800c044:	e00a      	b.n	800c05c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c046:	f3af 8000 	nop.w
 800c04a:	4601      	mov	r1, r0
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	60ba      	str	r2, [r7, #8]
 800c052:	b2ca      	uxtb	r2, r1
 800c054:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	3301      	adds	r3, #1
 800c05a:	617b      	str	r3, [r7, #20]
 800c05c:	697a      	ldr	r2, [r7, #20]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	429a      	cmp	r2, r3
 800c062:	dbf0      	blt.n	800c046 <_read+0x12>
  }

  return len;
 800c064:	687b      	ldr	r3, [r7, #4]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3718      	adds	r7, #24
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b086      	sub	sp, #24
 800c072:	af00      	add	r7, sp, #0
 800c074:	60f8      	str	r0, [r7, #12]
 800c076:	60b9      	str	r1, [r7, #8]
 800c078:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c07a:	2300      	movs	r3, #0
 800c07c:	617b      	str	r3, [r7, #20]
 800c07e:	e009      	b.n	800c094 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	60ba      	str	r2, [r7, #8]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	4618      	mov	r0, r3
 800c08a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	3301      	adds	r3, #1
 800c092:	617b      	str	r3, [r7, #20]
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	429a      	cmp	r2, r3
 800c09a:	dbf1      	blt.n	800c080 <_write+0x12>
  }
  return len;
 800c09c:	687b      	ldr	r3, [r7, #4]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3718      	adds	r7, #24
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <_close>:

int _close(int file)
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c0ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bc80      	pop	{r7}
 800c0ba:	4770      	bx	lr

0800c0bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c0cc:	605a      	str	r2, [r3, #4]
  return 0;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bc80      	pop	{r7}
 800c0d8:	4770      	bx	lr

0800c0da <_isatty>:

int _isatty(int file)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b083      	sub	sp, #12
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c0e2:	2301      	movs	r3, #1
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bc80      	pop	{r7}
 800c0ec:	4770      	bx	lr

0800c0ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c0ee:	b480      	push	{r7}
 800c0f0:	b085      	sub	sp, #20
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	60f8      	str	r0, [r7, #12]
 800c0f6:	60b9      	str	r1, [r7, #8]
 800c0f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3714      	adds	r7, #20
 800c100:	46bd      	mov	sp, r7
 800c102:	bc80      	pop	{r7}
 800c104:	4770      	bx	lr
	...

0800c108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b086      	sub	sp, #24
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c110:	4a14      	ldr	r2, [pc, #80]	@ (800c164 <_sbrk+0x5c>)
 800c112:	4b15      	ldr	r3, [pc, #84]	@ (800c168 <_sbrk+0x60>)
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c11c:	4b13      	ldr	r3, [pc, #76]	@ (800c16c <_sbrk+0x64>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d102      	bne.n	800c12a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c124:	4b11      	ldr	r3, [pc, #68]	@ (800c16c <_sbrk+0x64>)
 800c126:	4a12      	ldr	r2, [pc, #72]	@ (800c170 <_sbrk+0x68>)
 800c128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c12a:	4b10      	ldr	r3, [pc, #64]	@ (800c16c <_sbrk+0x64>)
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4413      	add	r3, r2
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	429a      	cmp	r2, r3
 800c136:	d207      	bcs.n	800c148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c138:	f006 f8d2 	bl	80122e0 <__errno>
 800c13c:	4603      	mov	r3, r0
 800c13e:	220c      	movs	r2, #12
 800c140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c142:	f04f 33ff 	mov.w	r3, #4294967295
 800c146:	e009      	b.n	800c15c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c148:	4b08      	ldr	r3, [pc, #32]	@ (800c16c <_sbrk+0x64>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c14e:	4b07      	ldr	r3, [pc, #28]	@ (800c16c <_sbrk+0x64>)
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4413      	add	r3, r2
 800c156:	4a05      	ldr	r2, [pc, #20]	@ (800c16c <_sbrk+0x64>)
 800c158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c15a:	68fb      	ldr	r3, [r7, #12]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3718      	adds	r7, #24
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20010000 	.word	0x20010000
 800c168:	00000400 	.word	0x00000400
 800c16c:	20002f48 	.word	0x20002f48
 800c170:	20003370 	.word	0x20003370

0800c174 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800c174:	b480      	push	{r7}
 800c176:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800c178:	4b03      	ldr	r3, [pc, #12]	@ (800c188 <SystemInit+0x14>)
 800c17a:	4a04      	ldr	r2, [pc, #16]	@ (800c18c <SystemInit+0x18>)
 800c17c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c17e:	bf00      	nop
 800c180:	46bd      	mov	sp, r7
 800c182:	bc80      	pop	{r7}
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	e000ed00 	.word	0xe000ed00
 800c18c:	08008800 	.word	0x08008800

0800c190 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 800c196:	2300      	movs	r3, #0
 800c198:	60fb      	str	r3, [r7, #12]
 800c19a:	2300      	movs	r3, #0
 800c19c:	60bb      	str	r3, [r7, #8]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800c1a2:	4b2f      	ldr	r3, [pc, #188]	@ (800c260 <SystemCoreClockUpdate+0xd0>)
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	f003 030c 	and.w	r3, r3, #12
 800c1aa:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2b08      	cmp	r3, #8
 800c1b0:	d011      	beq.n	800c1d6 <SystemCoreClockUpdate+0x46>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2b08      	cmp	r3, #8
 800c1b6:	d83a      	bhi.n	800c22e <SystemCoreClockUpdate+0x9e>
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d003      	beq.n	800c1c6 <SystemCoreClockUpdate+0x36>
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2b04      	cmp	r3, #4
 800c1c2:	d004      	beq.n	800c1ce <SystemCoreClockUpdate+0x3e>
 800c1c4:	e033      	b.n	800c22e <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800c1c6:	4b27      	ldr	r3, [pc, #156]	@ (800c264 <SystemCoreClockUpdate+0xd4>)
 800c1c8:	4a27      	ldr	r2, [pc, #156]	@ (800c268 <SystemCoreClockUpdate+0xd8>)
 800c1ca:	601a      	str	r2, [r3, #0]
      break;
 800c1cc:	e033      	b.n	800c236 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800c1ce:	4b25      	ldr	r3, [pc, #148]	@ (800c264 <SystemCoreClockUpdate+0xd4>)
 800c1d0:	4a25      	ldr	r2, [pc, #148]	@ (800c268 <SystemCoreClockUpdate+0xd8>)
 800c1d2:	601a      	str	r2, [r3, #0]
      break;
 800c1d4:	e02f      	b.n	800c236 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800c1d6:	4b22      	ldr	r3, [pc, #136]	@ (800c260 <SystemCoreClockUpdate+0xd0>)
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800c1de:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800c1e0:	4b1f      	ldr	r3, [pc, #124]	@ (800c260 <SystemCoreClockUpdate+0xd0>)
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1e8:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	0c9b      	lsrs	r3, r3, #18
 800c1ee:	3302      	adds	r3, #2
 800c1f0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d106      	bne.n	800c206 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	4a1c      	ldr	r2, [pc, #112]	@ (800c26c <SystemCoreClockUpdate+0xdc>)
 800c1fc:	fb02 f303 	mul.w	r3, r2, r3
 800c200:	4a18      	ldr	r2, [pc, #96]	@ (800c264 <SystemCoreClockUpdate+0xd4>)
 800c202:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 800c204:	e017      	b.n	800c236 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800c206:	4b16      	ldr	r3, [pc, #88]	@ (800c260 <SystemCoreClockUpdate+0xd0>)
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d006      	beq.n	800c220 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	4a15      	ldr	r2, [pc, #84]	@ (800c26c <SystemCoreClockUpdate+0xdc>)
 800c216:	fb02 f303 	mul.w	r3, r2, r3
 800c21a:	4a12      	ldr	r2, [pc, #72]	@ (800c264 <SystemCoreClockUpdate+0xd4>)
 800c21c:	6013      	str	r3, [r2, #0]
      break;
 800c21e:	e00a      	b.n	800c236 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	4a11      	ldr	r2, [pc, #68]	@ (800c268 <SystemCoreClockUpdate+0xd8>)
 800c224:	fb02 f303 	mul.w	r3, r2, r3
 800c228:	4a0e      	ldr	r2, [pc, #56]	@ (800c264 <SystemCoreClockUpdate+0xd4>)
 800c22a:	6013      	str	r3, [r2, #0]
      break;
 800c22c:	e003      	b.n	800c236 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800c22e:	4b0d      	ldr	r3, [pc, #52]	@ (800c264 <SystemCoreClockUpdate+0xd4>)
 800c230:	4a0d      	ldr	r2, [pc, #52]	@ (800c268 <SystemCoreClockUpdate+0xd8>)
 800c232:	601a      	str	r2, [r3, #0]
      break;
 800c234:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800c236:	4b0a      	ldr	r3, [pc, #40]	@ (800c260 <SystemCoreClockUpdate+0xd0>)
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	091b      	lsrs	r3, r3, #4
 800c23c:	f003 030f 	and.w	r3, r3, #15
 800c240:	4a0b      	ldr	r2, [pc, #44]	@ (800c270 <SystemCoreClockUpdate+0xe0>)
 800c242:	5cd3      	ldrb	r3, [r2, r3]
 800c244:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800c246:	4b07      	ldr	r3, [pc, #28]	@ (800c264 <SystemCoreClockUpdate+0xd4>)
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	fa22 f303 	lsr.w	r3, r2, r3
 800c250:	4a04      	ldr	r2, [pc, #16]	@ (800c264 <SystemCoreClockUpdate+0xd4>)
 800c252:	6013      	str	r3, [r2, #0]
}
 800c254:	bf00      	nop
 800c256:	3714      	adds	r7, #20
 800c258:	46bd      	mov	sp, r7
 800c25a:	bc80      	pop	{r7}
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	40021000 	.word	0x40021000
 800c264:	2000001c 	.word	0x2000001c
 800c268:	007a1200 	.word	0x007a1200
 800c26c:	003d0900 	.word	0x003d0900
 800c270:	08013dc8 	.word	0x08013dc8

0800c274 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c278:	4b11      	ldr	r3, [pc, #68]	@ (800c2c0 <MX_USART1_UART_Init+0x4c>)
 800c27a:	4a12      	ldr	r2, [pc, #72]	@ (800c2c4 <MX_USART1_UART_Init+0x50>)
 800c27c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800c27e:	4b10      	ldr	r3, [pc, #64]	@ (800c2c0 <MX_USART1_UART_Init+0x4c>)
 800c280:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800c284:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c286:	4b0e      	ldr	r3, [pc, #56]	@ (800c2c0 <MX_USART1_UART_Init+0x4c>)
 800c288:	2200      	movs	r2, #0
 800c28a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c28c:	4b0c      	ldr	r3, [pc, #48]	@ (800c2c0 <MX_USART1_UART_Init+0x4c>)
 800c28e:	2200      	movs	r2, #0
 800c290:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c292:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c0 <MX_USART1_UART_Init+0x4c>)
 800c294:	2200      	movs	r2, #0
 800c296:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c298:	4b09      	ldr	r3, [pc, #36]	@ (800c2c0 <MX_USART1_UART_Init+0x4c>)
 800c29a:	220c      	movs	r2, #12
 800c29c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c29e:	4b08      	ldr	r3, [pc, #32]	@ (800c2c0 <MX_USART1_UART_Init+0x4c>)
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c2a4:	4b06      	ldr	r3, [pc, #24]	@ (800c2c0 <MX_USART1_UART_Init+0x4c>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c2aa:	4805      	ldr	r0, [pc, #20]	@ (800c2c0 <MX_USART1_UART_Init+0x4c>)
 800c2ac:	f002 fe1a 	bl	800eee4 <HAL_UART_Init>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d001      	beq.n	800c2ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c2b6:	f7ff fda0 	bl	800bdfa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c2ba:	bf00      	nop
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	20002f4c 	.word	0x20002f4c
 800c2c4:	40013800 	.word	0x40013800

0800c2c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800c2cc:	4b11      	ldr	r3, [pc, #68]	@ (800c314 <MX_USART3_UART_Init+0x4c>)
 800c2ce:	4a12      	ldr	r2, [pc, #72]	@ (800c318 <MX_USART3_UART_Init+0x50>)
 800c2d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800c2d2:	4b10      	ldr	r3, [pc, #64]	@ (800c314 <MX_USART3_UART_Init+0x4c>)
 800c2d4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800c2d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c2da:	4b0e      	ldr	r3, [pc, #56]	@ (800c314 <MX_USART3_UART_Init+0x4c>)
 800c2dc:	2200      	movs	r2, #0
 800c2de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c2e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c314 <MX_USART3_UART_Init+0x4c>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c2e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c314 <MX_USART3_UART_Init+0x4c>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c2ec:	4b09      	ldr	r3, [pc, #36]	@ (800c314 <MX_USART3_UART_Init+0x4c>)
 800c2ee:	220c      	movs	r2, #12
 800c2f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c2f2:	4b08      	ldr	r3, [pc, #32]	@ (800c314 <MX_USART3_UART_Init+0x4c>)
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c2f8:	4b06      	ldr	r3, [pc, #24]	@ (800c314 <MX_USART3_UART_Init+0x4c>)
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c2fe:	4805      	ldr	r0, [pc, #20]	@ (800c314 <MX_USART3_UART_Init+0x4c>)
 800c300:	f002 fdf0 	bl	800eee4 <HAL_UART_Init>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d001      	beq.n	800c30e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800c30a:	f7ff fd76 	bl	800bdfa <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800c30e:	bf00      	nop
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	20002f94 	.word	0x20002f94
 800c318:	40004800 	.word	0x40004800

0800c31c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08a      	sub	sp, #40	@ 0x28
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c324:	f107 0318 	add.w	r3, r7, #24
 800c328:	2200      	movs	r2, #0
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	605a      	str	r2, [r3, #4]
 800c32e:	609a      	str	r2, [r3, #8]
 800c330:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a4c      	ldr	r2, [pc, #304]	@ (800c468 <HAL_UART_MspInit+0x14c>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d159      	bne.n	800c3f0 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c33c:	4b4b      	ldr	r3, [pc, #300]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c33e:	699b      	ldr	r3, [r3, #24]
 800c340:	4a4a      	ldr	r2, [pc, #296]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c342:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c346:	6193      	str	r3, [r2, #24]
 800c348:	4b48      	ldr	r3, [pc, #288]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c350:	617b      	str	r3, [r7, #20]
 800c352:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c354:	4b45      	ldr	r3, [pc, #276]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c356:	699b      	ldr	r3, [r3, #24]
 800c358:	4a44      	ldr	r2, [pc, #272]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c35a:	f043 0304 	orr.w	r3, r3, #4
 800c35e:	6193      	str	r3, [r2, #24]
 800c360:	4b42      	ldr	r3, [pc, #264]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c362:	699b      	ldr	r3, [r3, #24]
 800c364:	f003 0304 	and.w	r3, r3, #4
 800c368:	613b      	str	r3, [r7, #16]
 800c36a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c36c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c372:	2302      	movs	r3, #2
 800c374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c376:	2303      	movs	r3, #3
 800c378:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c37a:	f107 0318 	add.w	r3, r7, #24
 800c37e:	4619      	mov	r1, r3
 800c380:	483b      	ldr	r0, [pc, #236]	@ (800c470 <HAL_UART_MspInit+0x154>)
 800c382:	f000 fef7 	bl	800d174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c38a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c38c:	2300      	movs	r3, #0
 800c38e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c390:	2300      	movs	r3, #0
 800c392:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c394:	f107 0318 	add.w	r3, r7, #24
 800c398:	4619      	mov	r1, r3
 800c39a:	4835      	ldr	r0, [pc, #212]	@ (800c470 <HAL_UART_MspInit+0x154>)
 800c39c:	f000 feea 	bl	800d174 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800c3a0:	4b34      	ldr	r3, [pc, #208]	@ (800c474 <HAL_UART_MspInit+0x158>)
 800c3a2:	4a35      	ldr	r2, [pc, #212]	@ (800c478 <HAL_UART_MspInit+0x15c>)
 800c3a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c3a6:	4b33      	ldr	r3, [pc, #204]	@ (800c474 <HAL_UART_MspInit+0x158>)
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c3ac:	4b31      	ldr	r3, [pc, #196]	@ (800c474 <HAL_UART_MspInit+0x158>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c3b2:	4b30      	ldr	r3, [pc, #192]	@ (800c474 <HAL_UART_MspInit+0x158>)
 800c3b4:	2280      	movs	r2, #128	@ 0x80
 800c3b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c3b8:	4b2e      	ldr	r3, [pc, #184]	@ (800c474 <HAL_UART_MspInit+0x158>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c3be:	4b2d      	ldr	r3, [pc, #180]	@ (800c474 <HAL_UART_MspInit+0x158>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800c3c4:	4b2b      	ldr	r3, [pc, #172]	@ (800c474 <HAL_UART_MspInit+0x158>)
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800c3ca:	4b2a      	ldr	r3, [pc, #168]	@ (800c474 <HAL_UART_MspInit+0x158>)
 800c3cc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800c3d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800c3d2:	4828      	ldr	r0, [pc, #160]	@ (800c474 <HAL_UART_MspInit+0x158>)
 800c3d4:	f000 f98e 	bl	800c6f4 <HAL_DMA_Init>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800c3de:	f7ff fd0c 	bl	800bdfa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4a23      	ldr	r2, [pc, #140]	@ (800c474 <HAL_UART_MspInit+0x158>)
 800c3e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c3e8:	4a22      	ldr	r2, [pc, #136]	@ (800c474 <HAL_UART_MspInit+0x158>)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800c3ee:	e036      	b.n	800c45e <HAL_UART_MspInit+0x142>
  else if(uartHandle->Instance==USART3)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a21      	ldr	r2, [pc, #132]	@ (800c47c <HAL_UART_MspInit+0x160>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d131      	bne.n	800c45e <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART3_CLK_ENABLE();
 800c3fa:	4b1c      	ldr	r3, [pc, #112]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c3fc:	69db      	ldr	r3, [r3, #28]
 800c3fe:	4a1b      	ldr	r2, [pc, #108]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c404:	61d3      	str	r3, [r2, #28]
 800c406:	4b19      	ldr	r3, [pc, #100]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c408:	69db      	ldr	r3, [r3, #28]
 800c40a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c412:	4b16      	ldr	r3, [pc, #88]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	4a15      	ldr	r2, [pc, #84]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c418:	f043 0308 	orr.w	r3, r3, #8
 800c41c:	6193      	str	r3, [r2, #24]
 800c41e:	4b13      	ldr	r3, [pc, #76]	@ (800c46c <HAL_UART_MspInit+0x150>)
 800c420:	699b      	ldr	r3, [r3, #24]
 800c422:	f003 0308 	and.w	r3, r3, #8
 800c426:	60bb      	str	r3, [r7, #8]
 800c428:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c42a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c42e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c430:	2302      	movs	r3, #2
 800c432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c434:	2303      	movs	r3, #3
 800c436:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c438:	f107 0318 	add.w	r3, r7, #24
 800c43c:	4619      	mov	r1, r3
 800c43e:	4810      	ldr	r0, [pc, #64]	@ (800c480 <HAL_UART_MspInit+0x164>)
 800c440:	f000 fe98 	bl	800d174 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800c444:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c44a:	2300      	movs	r3, #0
 800c44c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c44e:	2300      	movs	r3, #0
 800c450:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c452:	f107 0318 	add.w	r3, r7, #24
 800c456:	4619      	mov	r1, r3
 800c458:	4809      	ldr	r0, [pc, #36]	@ (800c480 <HAL_UART_MspInit+0x164>)
 800c45a:	f000 fe8b 	bl	800d174 <HAL_GPIO_Init>
}
 800c45e:	bf00      	nop
 800c460:	3728      	adds	r7, #40	@ 0x28
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	40013800 	.word	0x40013800
 800c46c:	40021000 	.word	0x40021000
 800c470:	40010800 	.word	0x40010800
 800c474:	20002fdc 	.word	0x20002fdc
 800c478:	40020058 	.word	0x40020058
 800c47c:	40004800 	.word	0x40004800
 800c480:	40010c00 	.word	0x40010c00

0800c484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800c484:	f7ff fe76 	bl	800c174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c488:	480b      	ldr	r0, [pc, #44]	@ (800c4b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800c48a:	490c      	ldr	r1, [pc, #48]	@ (800c4bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800c48c:	4a0c      	ldr	r2, [pc, #48]	@ (800c4c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800c48e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c490:	e002      	b.n	800c498 <LoopCopyDataInit>

0800c492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c496:	3304      	adds	r3, #4

0800c498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c49a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c49c:	d3f9      	bcc.n	800c492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c49e:	4a09      	ldr	r2, [pc, #36]	@ (800c4c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800c4a0:	4c09      	ldr	r4, [pc, #36]	@ (800c4c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800c4a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c4a4:	e001      	b.n	800c4aa <LoopFillZerobss>

0800c4a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c4a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c4a8:	3204      	adds	r2, #4

0800c4aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c4aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c4ac:	d3fb      	bcc.n	800c4a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c4ae:	f005 ff1d 	bl	80122ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c4b2:	f7fe fe63 	bl	800b17c <main>
  bx lr
 800c4b6:	4770      	bx	lr
  ldr r0, =_sdata
 800c4b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c4bc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800c4c0:	08014044 	.word	0x08014044
  ldr r2, =_sbss
 800c4c4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800c4c8:	20003370 	.word	0x20003370

0800c4cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c4cc:	e7fe      	b.n	800c4cc <ADC1_2_IRQHandler>
	...

0800c4d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c4d4:	4b08      	ldr	r3, [pc, #32]	@ (800c4f8 <HAL_Init+0x28>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a07      	ldr	r2, [pc, #28]	@ (800c4f8 <HAL_Init+0x28>)
 800c4da:	f043 0310 	orr.w	r3, r3, #16
 800c4de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c4e0:	2003      	movs	r0, #3
 800c4e2:	f000 f8d1 	bl	800c688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c4e6:	200f      	movs	r0, #15
 800c4e8:	f7ff fcc0 	bl	800be6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c4ec:	f7ff fc8c 	bl	800be08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c4f0:	2300      	movs	r3, #0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	40022000 	.word	0x40022000

0800c4fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c500:	4b05      	ldr	r3, [pc, #20]	@ (800c518 <HAL_IncTick+0x1c>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	461a      	mov	r2, r3
 800c506:	4b05      	ldr	r3, [pc, #20]	@ (800c51c <HAL_IncTick+0x20>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4413      	add	r3, r2
 800c50c:	4a03      	ldr	r2, [pc, #12]	@ (800c51c <HAL_IncTick+0x20>)
 800c50e:	6013      	str	r3, [r2, #0]
}
 800c510:	bf00      	nop
 800c512:	46bd      	mov	sp, r7
 800c514:	bc80      	pop	{r7}
 800c516:	4770      	bx	lr
 800c518:	20000024 	.word	0x20000024
 800c51c:	20003020 	.word	0x20003020

0800c520 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c520:	b480      	push	{r7}
 800c522:	af00      	add	r7, sp, #0
  return uwTick;
 800c524:	4b02      	ldr	r3, [pc, #8]	@ (800c530 <HAL_GetTick+0x10>)
 800c526:	681b      	ldr	r3, [r3, #0]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bc80      	pop	{r7}
 800c52e:	4770      	bx	lr
 800c530:	20003020 	.word	0x20003020

0800c534 <__NVIC_SetPriorityGrouping>:
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f003 0307 	and.w	r3, r3, #7
 800c542:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c544:	4b0c      	ldr	r3, [pc, #48]	@ (800c578 <__NVIC_SetPriorityGrouping+0x44>)
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c550:	4013      	ands	r3, r2
 800c552:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c55c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c566:	4a04      	ldr	r2, [pc, #16]	@ (800c578 <__NVIC_SetPriorityGrouping+0x44>)
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	60d3      	str	r3, [r2, #12]
}
 800c56c:	bf00      	nop
 800c56e:	3714      	adds	r7, #20
 800c570:	46bd      	mov	sp, r7
 800c572:	bc80      	pop	{r7}
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	e000ed00 	.word	0xe000ed00

0800c57c <__NVIC_GetPriorityGrouping>:
{
 800c57c:	b480      	push	{r7}
 800c57e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c580:	4b04      	ldr	r3, [pc, #16]	@ (800c594 <__NVIC_GetPriorityGrouping+0x18>)
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	0a1b      	lsrs	r3, r3, #8
 800c586:	f003 0307 	and.w	r3, r3, #7
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bc80      	pop	{r7}
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	e000ed00 	.word	0xe000ed00

0800c598 <__NVIC_EnableIRQ>:
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c5a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	db0b      	blt.n	800c5c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c5aa:	79fb      	ldrb	r3, [r7, #7]
 800c5ac:	f003 021f 	and.w	r2, r3, #31
 800c5b0:	4906      	ldr	r1, [pc, #24]	@ (800c5cc <__NVIC_EnableIRQ+0x34>)
 800c5b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5b6:	095b      	lsrs	r3, r3, #5
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	fa00 f202 	lsl.w	r2, r0, r2
 800c5be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c5c2:	bf00      	nop
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bc80      	pop	{r7}
 800c5ca:	4770      	bx	lr
 800c5cc:	e000e100 	.word	0xe000e100

0800c5d0 <__NVIC_SetPriority>:
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	6039      	str	r1, [r7, #0]
 800c5da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c5dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	db0a      	blt.n	800c5fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	490c      	ldr	r1, [pc, #48]	@ (800c61c <__NVIC_SetPriority+0x4c>)
 800c5ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5ee:	0112      	lsls	r2, r2, #4
 800c5f0:	b2d2      	uxtb	r2, r2
 800c5f2:	440b      	add	r3, r1
 800c5f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c5f8:	e00a      	b.n	800c610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	4908      	ldr	r1, [pc, #32]	@ (800c620 <__NVIC_SetPriority+0x50>)
 800c600:	79fb      	ldrb	r3, [r7, #7]
 800c602:	f003 030f 	and.w	r3, r3, #15
 800c606:	3b04      	subs	r3, #4
 800c608:	0112      	lsls	r2, r2, #4
 800c60a:	b2d2      	uxtb	r2, r2
 800c60c:	440b      	add	r3, r1
 800c60e:	761a      	strb	r2, [r3, #24]
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	bc80      	pop	{r7}
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	e000e100 	.word	0xe000e100
 800c620:	e000ed00 	.word	0xe000ed00

0800c624 <NVIC_EncodePriority>:
{
 800c624:	b480      	push	{r7}
 800c626:	b089      	sub	sp, #36	@ 0x24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f003 0307 	and.w	r3, r3, #7
 800c636:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	f1c3 0307 	rsb	r3, r3, #7
 800c63e:	2b04      	cmp	r3, #4
 800c640:	bf28      	it	cs
 800c642:	2304      	movcs	r3, #4
 800c644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	3304      	adds	r3, #4
 800c64a:	2b06      	cmp	r3, #6
 800c64c:	d902      	bls.n	800c654 <NVIC_EncodePriority+0x30>
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	3b03      	subs	r3, #3
 800c652:	e000      	b.n	800c656 <NVIC_EncodePriority+0x32>
 800c654:	2300      	movs	r3, #0
 800c656:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c658:	f04f 32ff 	mov.w	r2, #4294967295
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	fa02 f303 	lsl.w	r3, r2, r3
 800c662:	43da      	mvns	r2, r3
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	401a      	ands	r2, r3
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c66c:	f04f 31ff 	mov.w	r1, #4294967295
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	fa01 f303 	lsl.w	r3, r1, r3
 800c676:	43d9      	mvns	r1, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c67c:	4313      	orrs	r3, r2
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3724      	adds	r7, #36	@ 0x24
 800c682:	46bd      	mov	sp, r7
 800c684:	bc80      	pop	{r7}
 800c686:	4770      	bx	lr

0800c688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7ff ff4f 	bl	800c534 <__NVIC_SetPriorityGrouping>
}
 800c696:	bf00      	nop
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b086      	sub	sp, #24
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	60b9      	str	r1, [r7, #8]
 800c6a8:	607a      	str	r2, [r7, #4]
 800c6aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c6b0:	f7ff ff64 	bl	800c57c <__NVIC_GetPriorityGrouping>
 800c6b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	68b9      	ldr	r1, [r7, #8]
 800c6ba:	6978      	ldr	r0, [r7, #20]
 800c6bc:	f7ff ffb2 	bl	800c624 <NVIC_EncodePriority>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7ff ff81 	bl	800c5d0 <__NVIC_SetPriority>
}
 800c6ce:	bf00      	nop
 800c6d0:	3718      	adds	r7, #24
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b082      	sub	sp, #8
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	4603      	mov	r3, r0
 800c6de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c6e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7ff ff57 	bl	800c598 <__NVIC_EnableIRQ>
}
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
	...

0800c6f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d101      	bne.n	800c70a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800c706:	2301      	movs	r3, #1
 800c708:	e059      	b.n	800c7be <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	461a      	mov	r2, r3
 800c710:	4b2d      	ldr	r3, [pc, #180]	@ (800c7c8 <HAL_DMA_Init+0xd4>)
 800c712:	429a      	cmp	r2, r3
 800c714:	d80f      	bhi.n	800c736 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	4b2b      	ldr	r3, [pc, #172]	@ (800c7cc <HAL_DMA_Init+0xd8>)
 800c71e:	4413      	add	r3, r2
 800c720:	4a2b      	ldr	r2, [pc, #172]	@ (800c7d0 <HAL_DMA_Init+0xdc>)
 800c722:	fba2 2303 	umull	r2, r3, r2, r3
 800c726:	091b      	lsrs	r3, r3, #4
 800c728:	009a      	lsls	r2, r3, #2
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a28      	ldr	r2, [pc, #160]	@ (800c7d4 <HAL_DMA_Init+0xe0>)
 800c732:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c734:	e00e      	b.n	800c754 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	4b26      	ldr	r3, [pc, #152]	@ (800c7d8 <HAL_DMA_Init+0xe4>)
 800c73e:	4413      	add	r3, r2
 800c740:	4a23      	ldr	r2, [pc, #140]	@ (800c7d0 <HAL_DMA_Init+0xdc>)
 800c742:	fba2 2303 	umull	r2, r3, r2, r3
 800c746:	091b      	lsrs	r3, r3, #4
 800c748:	009a      	lsls	r2, r3, #2
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4a22      	ldr	r2, [pc, #136]	@ (800c7dc <HAL_DMA_Init+0xe8>)
 800c752:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2202      	movs	r2, #2
 800c758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800c76a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800c76e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800c778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	69db      	ldr	r3, [r3, #28]
 800c796:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	4313      	orrs	r3, r2
 800c79c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3714      	adds	r7, #20
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bc80      	pop	{r7}
 800c7c6:	4770      	bx	lr
 800c7c8:	40020407 	.word	0x40020407
 800c7cc:	bffdfff8 	.word	0xbffdfff8
 800c7d0:	cccccccd 	.word	0xcccccccd
 800c7d4:	40020000 	.word	0x40020000
 800c7d8:	bffdfbf8 	.word	0xbffdfbf8
 800c7dc:	40020400 	.word	0x40020400

0800c7e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
 800c7ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d101      	bne.n	800c800 <HAL_DMA_Start_IT+0x20>
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	e04b      	b.n	800c898 <HAL_DMA_Start_IT+0xb8>
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2201      	movs	r2, #1
 800c804:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	2b01      	cmp	r3, #1
 800c812:	d13a      	bne.n	800c88a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2202      	movs	r2, #2
 800c818:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f022 0201 	bic.w	r2, r2, #1
 800c830:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	68b9      	ldr	r1, [r7, #8]
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f000 fa6d 	bl	800cd18 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c842:	2b00      	cmp	r3, #0
 800c844:	d008      	beq.n	800c858 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f042 020e 	orr.w	r2, r2, #14
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	e00f      	b.n	800c878 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f022 0204 	bic.w	r2, r2, #4
 800c866:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f042 020a 	orr.w	r2, r2, #10
 800c876:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f042 0201 	orr.w	r2, r2, #1
 800c886:	601a      	str	r2, [r3, #0]
 800c888:	e005      	b.n	800c896 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800c892:	2302      	movs	r3, #2
 800c894:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800c896:	7dfb      	ldrb	r3, [r7, #23]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8bc:	2204      	movs	r2, #4
 800c8be:	409a      	lsls	r2, r3
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f000 80f1 	beq.w	800caac <HAL_DMA_IRQHandler+0x20c>
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	f003 0304 	and.w	r3, r3, #4
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f000 80eb 	beq.w	800caac <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f003 0320 	and.w	r3, r3, #32
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d107      	bne.n	800c8f4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f022 0204 	bic.w	r2, r2, #4
 800c8f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	4b5f      	ldr	r3, [pc, #380]	@ (800ca78 <HAL_DMA_IRQHandler+0x1d8>)
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d958      	bls.n	800c9b2 <HAL_DMA_IRQHandler+0x112>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a5d      	ldr	r2, [pc, #372]	@ (800ca7c <HAL_DMA_IRQHandler+0x1dc>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d04f      	beq.n	800c9aa <HAL_DMA_IRQHandler+0x10a>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a5c      	ldr	r2, [pc, #368]	@ (800ca80 <HAL_DMA_IRQHandler+0x1e0>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d048      	beq.n	800c9a6 <HAL_DMA_IRQHandler+0x106>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a5a      	ldr	r2, [pc, #360]	@ (800ca84 <HAL_DMA_IRQHandler+0x1e4>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d040      	beq.n	800c9a0 <HAL_DMA_IRQHandler+0x100>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a59      	ldr	r2, [pc, #356]	@ (800ca88 <HAL_DMA_IRQHandler+0x1e8>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d038      	beq.n	800c99a <HAL_DMA_IRQHandler+0xfa>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a57      	ldr	r2, [pc, #348]	@ (800ca8c <HAL_DMA_IRQHandler+0x1ec>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d030      	beq.n	800c994 <HAL_DMA_IRQHandler+0xf4>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a56      	ldr	r2, [pc, #344]	@ (800ca90 <HAL_DMA_IRQHandler+0x1f0>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d028      	beq.n	800c98e <HAL_DMA_IRQHandler+0xee>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a4d      	ldr	r2, [pc, #308]	@ (800ca78 <HAL_DMA_IRQHandler+0x1d8>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d020      	beq.n	800c988 <HAL_DMA_IRQHandler+0xe8>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a52      	ldr	r2, [pc, #328]	@ (800ca94 <HAL_DMA_IRQHandler+0x1f4>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d019      	beq.n	800c984 <HAL_DMA_IRQHandler+0xe4>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a50      	ldr	r2, [pc, #320]	@ (800ca98 <HAL_DMA_IRQHandler+0x1f8>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d012      	beq.n	800c980 <HAL_DMA_IRQHandler+0xe0>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a4f      	ldr	r2, [pc, #316]	@ (800ca9c <HAL_DMA_IRQHandler+0x1fc>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d00a      	beq.n	800c97a <HAL_DMA_IRQHandler+0xda>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a4d      	ldr	r2, [pc, #308]	@ (800caa0 <HAL_DMA_IRQHandler+0x200>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d102      	bne.n	800c974 <HAL_DMA_IRQHandler+0xd4>
 800c96e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c972:	e01b      	b.n	800c9ac <HAL_DMA_IRQHandler+0x10c>
 800c974:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c978:	e018      	b.n	800c9ac <HAL_DMA_IRQHandler+0x10c>
 800c97a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c97e:	e015      	b.n	800c9ac <HAL_DMA_IRQHandler+0x10c>
 800c980:	2340      	movs	r3, #64	@ 0x40
 800c982:	e013      	b.n	800c9ac <HAL_DMA_IRQHandler+0x10c>
 800c984:	2304      	movs	r3, #4
 800c986:	e011      	b.n	800c9ac <HAL_DMA_IRQHandler+0x10c>
 800c988:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c98c:	e00e      	b.n	800c9ac <HAL_DMA_IRQHandler+0x10c>
 800c98e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c992:	e00b      	b.n	800c9ac <HAL_DMA_IRQHandler+0x10c>
 800c994:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c998:	e008      	b.n	800c9ac <HAL_DMA_IRQHandler+0x10c>
 800c99a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c99e:	e005      	b.n	800c9ac <HAL_DMA_IRQHandler+0x10c>
 800c9a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9a4:	e002      	b.n	800c9ac <HAL_DMA_IRQHandler+0x10c>
 800c9a6:	2340      	movs	r3, #64	@ 0x40
 800c9a8:	e000      	b.n	800c9ac <HAL_DMA_IRQHandler+0x10c>
 800c9aa:	2304      	movs	r3, #4
 800c9ac:	4a3d      	ldr	r2, [pc, #244]	@ (800caa4 <HAL_DMA_IRQHandler+0x204>)
 800c9ae:	6053      	str	r3, [r2, #4]
 800c9b0:	e057      	b.n	800ca62 <HAL_DMA_IRQHandler+0x1c2>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a31      	ldr	r2, [pc, #196]	@ (800ca7c <HAL_DMA_IRQHandler+0x1dc>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d04f      	beq.n	800ca5c <HAL_DMA_IRQHandler+0x1bc>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a2f      	ldr	r2, [pc, #188]	@ (800ca80 <HAL_DMA_IRQHandler+0x1e0>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d048      	beq.n	800ca58 <HAL_DMA_IRQHandler+0x1b8>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a2e      	ldr	r2, [pc, #184]	@ (800ca84 <HAL_DMA_IRQHandler+0x1e4>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d040      	beq.n	800ca52 <HAL_DMA_IRQHandler+0x1b2>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a2c      	ldr	r2, [pc, #176]	@ (800ca88 <HAL_DMA_IRQHandler+0x1e8>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d038      	beq.n	800ca4c <HAL_DMA_IRQHandler+0x1ac>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a2b      	ldr	r2, [pc, #172]	@ (800ca8c <HAL_DMA_IRQHandler+0x1ec>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d030      	beq.n	800ca46 <HAL_DMA_IRQHandler+0x1a6>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a29      	ldr	r2, [pc, #164]	@ (800ca90 <HAL_DMA_IRQHandler+0x1f0>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d028      	beq.n	800ca40 <HAL_DMA_IRQHandler+0x1a0>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a21      	ldr	r2, [pc, #132]	@ (800ca78 <HAL_DMA_IRQHandler+0x1d8>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d020      	beq.n	800ca3a <HAL_DMA_IRQHandler+0x19a>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a25      	ldr	r2, [pc, #148]	@ (800ca94 <HAL_DMA_IRQHandler+0x1f4>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d019      	beq.n	800ca36 <HAL_DMA_IRQHandler+0x196>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a24      	ldr	r2, [pc, #144]	@ (800ca98 <HAL_DMA_IRQHandler+0x1f8>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d012      	beq.n	800ca32 <HAL_DMA_IRQHandler+0x192>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a22      	ldr	r2, [pc, #136]	@ (800ca9c <HAL_DMA_IRQHandler+0x1fc>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d00a      	beq.n	800ca2c <HAL_DMA_IRQHandler+0x18c>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a21      	ldr	r2, [pc, #132]	@ (800caa0 <HAL_DMA_IRQHandler+0x200>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d102      	bne.n	800ca26 <HAL_DMA_IRQHandler+0x186>
 800ca20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ca24:	e01b      	b.n	800ca5e <HAL_DMA_IRQHandler+0x1be>
 800ca26:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ca2a:	e018      	b.n	800ca5e <HAL_DMA_IRQHandler+0x1be>
 800ca2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca30:	e015      	b.n	800ca5e <HAL_DMA_IRQHandler+0x1be>
 800ca32:	2340      	movs	r3, #64	@ 0x40
 800ca34:	e013      	b.n	800ca5e <HAL_DMA_IRQHandler+0x1be>
 800ca36:	2304      	movs	r3, #4
 800ca38:	e011      	b.n	800ca5e <HAL_DMA_IRQHandler+0x1be>
 800ca3a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ca3e:	e00e      	b.n	800ca5e <HAL_DMA_IRQHandler+0x1be>
 800ca40:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ca44:	e00b      	b.n	800ca5e <HAL_DMA_IRQHandler+0x1be>
 800ca46:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ca4a:	e008      	b.n	800ca5e <HAL_DMA_IRQHandler+0x1be>
 800ca4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ca50:	e005      	b.n	800ca5e <HAL_DMA_IRQHandler+0x1be>
 800ca52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca56:	e002      	b.n	800ca5e <HAL_DMA_IRQHandler+0x1be>
 800ca58:	2340      	movs	r3, #64	@ 0x40
 800ca5a:	e000      	b.n	800ca5e <HAL_DMA_IRQHandler+0x1be>
 800ca5c:	2304      	movs	r3, #4
 800ca5e:	4a12      	ldr	r2, [pc, #72]	@ (800caa8 <HAL_DMA_IRQHandler+0x208>)
 800ca60:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 8136 	beq.w	800ccd8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800ca74:	e130      	b.n	800ccd8 <HAL_DMA_IRQHandler+0x438>
 800ca76:	bf00      	nop
 800ca78:	40020080 	.word	0x40020080
 800ca7c:	40020008 	.word	0x40020008
 800ca80:	4002001c 	.word	0x4002001c
 800ca84:	40020030 	.word	0x40020030
 800ca88:	40020044 	.word	0x40020044
 800ca8c:	40020058 	.word	0x40020058
 800ca90:	4002006c 	.word	0x4002006c
 800ca94:	40020408 	.word	0x40020408
 800ca98:	4002041c 	.word	0x4002041c
 800ca9c:	40020430 	.word	0x40020430
 800caa0:	40020444 	.word	0x40020444
 800caa4:	40020400 	.word	0x40020400
 800caa8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cab0:	2202      	movs	r2, #2
 800cab2:	409a      	lsls	r2, r3
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	4013      	ands	r3, r2
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f000 80dd 	beq.w	800cc78 <HAL_DMA_IRQHandler+0x3d8>
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	f003 0302 	and.w	r3, r3, #2
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f000 80d7 	beq.w	800cc78 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f003 0320 	and.w	r3, r3, #32
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10b      	bne.n	800caf0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f022 020a 	bic.w	r2, r2, #10
 800cae6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	461a      	mov	r2, r3
 800caf6:	4b7b      	ldr	r3, [pc, #492]	@ (800cce4 <HAL_DMA_IRQHandler+0x444>)
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d958      	bls.n	800cbae <HAL_DMA_IRQHandler+0x30e>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a79      	ldr	r2, [pc, #484]	@ (800cce8 <HAL_DMA_IRQHandler+0x448>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d04f      	beq.n	800cba6 <HAL_DMA_IRQHandler+0x306>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a78      	ldr	r2, [pc, #480]	@ (800ccec <HAL_DMA_IRQHandler+0x44c>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d048      	beq.n	800cba2 <HAL_DMA_IRQHandler+0x302>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a76      	ldr	r2, [pc, #472]	@ (800ccf0 <HAL_DMA_IRQHandler+0x450>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d040      	beq.n	800cb9c <HAL_DMA_IRQHandler+0x2fc>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a75      	ldr	r2, [pc, #468]	@ (800ccf4 <HAL_DMA_IRQHandler+0x454>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d038      	beq.n	800cb96 <HAL_DMA_IRQHandler+0x2f6>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a73      	ldr	r2, [pc, #460]	@ (800ccf8 <HAL_DMA_IRQHandler+0x458>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d030      	beq.n	800cb90 <HAL_DMA_IRQHandler+0x2f0>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a72      	ldr	r2, [pc, #456]	@ (800ccfc <HAL_DMA_IRQHandler+0x45c>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d028      	beq.n	800cb8a <HAL_DMA_IRQHandler+0x2ea>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a69      	ldr	r2, [pc, #420]	@ (800cce4 <HAL_DMA_IRQHandler+0x444>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d020      	beq.n	800cb84 <HAL_DMA_IRQHandler+0x2e4>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a6e      	ldr	r2, [pc, #440]	@ (800cd00 <HAL_DMA_IRQHandler+0x460>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d019      	beq.n	800cb80 <HAL_DMA_IRQHandler+0x2e0>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a6c      	ldr	r2, [pc, #432]	@ (800cd04 <HAL_DMA_IRQHandler+0x464>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d012      	beq.n	800cb7c <HAL_DMA_IRQHandler+0x2dc>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a6b      	ldr	r2, [pc, #428]	@ (800cd08 <HAL_DMA_IRQHandler+0x468>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d00a      	beq.n	800cb76 <HAL_DMA_IRQHandler+0x2d6>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a69      	ldr	r2, [pc, #420]	@ (800cd0c <HAL_DMA_IRQHandler+0x46c>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d102      	bne.n	800cb70 <HAL_DMA_IRQHandler+0x2d0>
 800cb6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cb6e:	e01b      	b.n	800cba8 <HAL_DMA_IRQHandler+0x308>
 800cb70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cb74:	e018      	b.n	800cba8 <HAL_DMA_IRQHandler+0x308>
 800cb76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb7a:	e015      	b.n	800cba8 <HAL_DMA_IRQHandler+0x308>
 800cb7c:	2320      	movs	r3, #32
 800cb7e:	e013      	b.n	800cba8 <HAL_DMA_IRQHandler+0x308>
 800cb80:	2302      	movs	r3, #2
 800cb82:	e011      	b.n	800cba8 <HAL_DMA_IRQHandler+0x308>
 800cb84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cb88:	e00e      	b.n	800cba8 <HAL_DMA_IRQHandler+0x308>
 800cb8a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800cb8e:	e00b      	b.n	800cba8 <HAL_DMA_IRQHandler+0x308>
 800cb90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cb94:	e008      	b.n	800cba8 <HAL_DMA_IRQHandler+0x308>
 800cb96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cb9a:	e005      	b.n	800cba8 <HAL_DMA_IRQHandler+0x308>
 800cb9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cba0:	e002      	b.n	800cba8 <HAL_DMA_IRQHandler+0x308>
 800cba2:	2320      	movs	r3, #32
 800cba4:	e000      	b.n	800cba8 <HAL_DMA_IRQHandler+0x308>
 800cba6:	2302      	movs	r3, #2
 800cba8:	4a59      	ldr	r2, [pc, #356]	@ (800cd10 <HAL_DMA_IRQHandler+0x470>)
 800cbaa:	6053      	str	r3, [r2, #4]
 800cbac:	e057      	b.n	800cc5e <HAL_DMA_IRQHandler+0x3be>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a4d      	ldr	r2, [pc, #308]	@ (800cce8 <HAL_DMA_IRQHandler+0x448>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d04f      	beq.n	800cc58 <HAL_DMA_IRQHandler+0x3b8>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a4b      	ldr	r2, [pc, #300]	@ (800ccec <HAL_DMA_IRQHandler+0x44c>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d048      	beq.n	800cc54 <HAL_DMA_IRQHandler+0x3b4>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a4a      	ldr	r2, [pc, #296]	@ (800ccf0 <HAL_DMA_IRQHandler+0x450>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d040      	beq.n	800cc4e <HAL_DMA_IRQHandler+0x3ae>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a48      	ldr	r2, [pc, #288]	@ (800ccf4 <HAL_DMA_IRQHandler+0x454>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d038      	beq.n	800cc48 <HAL_DMA_IRQHandler+0x3a8>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a47      	ldr	r2, [pc, #284]	@ (800ccf8 <HAL_DMA_IRQHandler+0x458>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d030      	beq.n	800cc42 <HAL_DMA_IRQHandler+0x3a2>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a45      	ldr	r2, [pc, #276]	@ (800ccfc <HAL_DMA_IRQHandler+0x45c>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d028      	beq.n	800cc3c <HAL_DMA_IRQHandler+0x39c>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a3d      	ldr	r2, [pc, #244]	@ (800cce4 <HAL_DMA_IRQHandler+0x444>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d020      	beq.n	800cc36 <HAL_DMA_IRQHandler+0x396>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a41      	ldr	r2, [pc, #260]	@ (800cd00 <HAL_DMA_IRQHandler+0x460>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d019      	beq.n	800cc32 <HAL_DMA_IRQHandler+0x392>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a40      	ldr	r2, [pc, #256]	@ (800cd04 <HAL_DMA_IRQHandler+0x464>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d012      	beq.n	800cc2e <HAL_DMA_IRQHandler+0x38e>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a3e      	ldr	r2, [pc, #248]	@ (800cd08 <HAL_DMA_IRQHandler+0x468>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d00a      	beq.n	800cc28 <HAL_DMA_IRQHandler+0x388>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a3d      	ldr	r2, [pc, #244]	@ (800cd0c <HAL_DMA_IRQHandler+0x46c>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d102      	bne.n	800cc22 <HAL_DMA_IRQHandler+0x382>
 800cc1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cc20:	e01b      	b.n	800cc5a <HAL_DMA_IRQHandler+0x3ba>
 800cc22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cc26:	e018      	b.n	800cc5a <HAL_DMA_IRQHandler+0x3ba>
 800cc28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc2c:	e015      	b.n	800cc5a <HAL_DMA_IRQHandler+0x3ba>
 800cc2e:	2320      	movs	r3, #32
 800cc30:	e013      	b.n	800cc5a <HAL_DMA_IRQHandler+0x3ba>
 800cc32:	2302      	movs	r3, #2
 800cc34:	e011      	b.n	800cc5a <HAL_DMA_IRQHandler+0x3ba>
 800cc36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cc3a:	e00e      	b.n	800cc5a <HAL_DMA_IRQHandler+0x3ba>
 800cc3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800cc40:	e00b      	b.n	800cc5a <HAL_DMA_IRQHandler+0x3ba>
 800cc42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cc46:	e008      	b.n	800cc5a <HAL_DMA_IRQHandler+0x3ba>
 800cc48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cc4c:	e005      	b.n	800cc5a <HAL_DMA_IRQHandler+0x3ba>
 800cc4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc52:	e002      	b.n	800cc5a <HAL_DMA_IRQHandler+0x3ba>
 800cc54:	2320      	movs	r3, #32
 800cc56:	e000      	b.n	800cc5a <HAL_DMA_IRQHandler+0x3ba>
 800cc58:	2302      	movs	r3, #2
 800cc5a:	4a2e      	ldr	r2, [pc, #184]	@ (800cd14 <HAL_DMA_IRQHandler+0x474>)
 800cc5c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d034      	beq.n	800ccd8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800cc76:	e02f      	b.n	800ccd8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc7c:	2208      	movs	r2, #8
 800cc7e:	409a      	lsls	r2, r3
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	4013      	ands	r3, r2
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d028      	beq.n	800ccda <HAL_DMA_IRQHandler+0x43a>
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	f003 0308 	and.w	r3, r3, #8
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d023      	beq.n	800ccda <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f022 020e 	bic.w	r2, r2, #14
 800cca0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccaa:	2101      	movs	r1, #1
 800ccac:	fa01 f202 	lsl.w	r2, r1, r2
 800ccb0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d004      	beq.n	800ccda <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	4798      	blx	r3
    }
  }
  return;
 800ccd8:	bf00      	nop
 800ccda:	bf00      	nop
}
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	40020080 	.word	0x40020080
 800cce8:	40020008 	.word	0x40020008
 800ccec:	4002001c 	.word	0x4002001c
 800ccf0:	40020030 	.word	0x40020030
 800ccf4:	40020044 	.word	0x40020044
 800ccf8:	40020058 	.word	0x40020058
 800ccfc:	4002006c 	.word	0x4002006c
 800cd00:	40020408 	.word	0x40020408
 800cd04:	4002041c 	.word	0x4002041c
 800cd08:	40020430 	.word	0x40020430
 800cd0c:	40020444 	.word	0x40020444
 800cd10:	40020400 	.word	0x40020400
 800cd14:	40020000 	.word	0x40020000

0800cd18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd2e:	2101      	movs	r1, #1
 800cd30:	fa01 f202 	lsl.w	r2, r1, r2
 800cd34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	2b10      	cmp	r3, #16
 800cd44:	d108      	bne.n	800cd58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800cd56:	e007      	b.n	800cd68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	60da      	str	r2, [r3, #12]
}
 800cd68:	bf00      	nop
 800cd6a:	3714      	adds	r7, #20
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bc80      	pop	{r7}
 800cd70:	4770      	bx	lr
	...

0800cd74 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800cd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd76:	b087      	sub	sp, #28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800cd86:	2300      	movs	r3, #0
 800cd88:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cd8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ce4c <HAL_FLASH_Program+0xd8>)
 800cd90:	7e1b      	ldrb	r3, [r3, #24]
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d101      	bne.n	800cd9a <HAL_FLASH_Program+0x26>
 800cd96:	2302      	movs	r3, #2
 800cd98:	e054      	b.n	800ce44 <HAL_FLASH_Program+0xd0>
 800cd9a:	4b2c      	ldr	r3, [pc, #176]	@ (800ce4c <HAL_FLASH_Program+0xd8>)
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cda0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cda4:	f000 f8a8 	bl	800cef8 <FLASH_WaitForLastOperation>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d144      	bne.n	800ce3c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d102      	bne.n	800cdbe <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	757b      	strb	r3, [r7, #21]
 800cdbc:	e007      	b.n	800cdce <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d102      	bne.n	800cdca <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	757b      	strb	r3, [r7, #21]
 800cdc8:	e001      	b.n	800cdce <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800cdca:	2304      	movs	r3, #4
 800cdcc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800cdce:	2300      	movs	r3, #0
 800cdd0:	75bb      	strb	r3, [r7, #22]
 800cdd2:	e02d      	b.n	800ce30 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800cdd4:	7dbb      	ldrb	r3, [r7, #22]
 800cdd6:	005a      	lsls	r2, r3, #1
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	eb02 0c03 	add.w	ip, r2, r3
 800cdde:	7dbb      	ldrb	r3, [r7, #22]
 800cde0:	0119      	lsls	r1, r3, #4
 800cde2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde6:	f1c1 0620 	rsb	r6, r1, #32
 800cdea:	f1a1 0020 	sub.w	r0, r1, #32
 800cdee:	fa22 f401 	lsr.w	r4, r2, r1
 800cdf2:	fa03 f606 	lsl.w	r6, r3, r6
 800cdf6:	4334      	orrs	r4, r6
 800cdf8:	fa23 f000 	lsr.w	r0, r3, r0
 800cdfc:	4304      	orrs	r4, r0
 800cdfe:	fa23 f501 	lsr.w	r5, r3, r1
 800ce02:	b2a3      	uxth	r3, r4
 800ce04:	4619      	mov	r1, r3
 800ce06:	4660      	mov	r0, ip
 800ce08:	f000 f85a 	bl	800cec0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ce0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ce10:	f000 f872 	bl	800cef8 <FLASH_WaitForLastOperation>
 800ce14:	4603      	mov	r3, r0
 800ce16:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ce18:	4b0d      	ldr	r3, [pc, #52]	@ (800ce50 <HAL_FLASH_Program+0xdc>)
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	4a0c      	ldr	r2, [pc, #48]	@ (800ce50 <HAL_FLASH_Program+0xdc>)
 800ce1e:	f023 0301 	bic.w	r3, r3, #1
 800ce22:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d107      	bne.n	800ce3a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800ce2a:	7dbb      	ldrb	r3, [r7, #22]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	75bb      	strb	r3, [r7, #22]
 800ce30:	7dba      	ldrb	r2, [r7, #22]
 800ce32:	7d7b      	ldrb	r3, [r7, #21]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d3cd      	bcc.n	800cdd4 <HAL_FLASH_Program+0x60>
 800ce38:	e000      	b.n	800ce3c <HAL_FLASH_Program+0xc8>
      {
        break;
 800ce3a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ce3c:	4b03      	ldr	r3, [pc, #12]	@ (800ce4c <HAL_FLASH_Program+0xd8>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	761a      	strb	r2, [r3, #24]

  return status;
 800ce42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	371c      	adds	r7, #28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce4c:	20003028 	.word	0x20003028
 800ce50:	40022000 	.word	0x40022000

0800ce54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce94 <HAL_FLASH_Unlock+0x40>)
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00d      	beq.n	800ce86 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ce6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ce94 <HAL_FLASH_Unlock+0x40>)
 800ce6c:	4a0a      	ldr	r2, [pc, #40]	@ (800ce98 <HAL_FLASH_Unlock+0x44>)
 800ce6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ce70:	4b08      	ldr	r3, [pc, #32]	@ (800ce94 <HAL_FLASH_Unlock+0x40>)
 800ce72:	4a0a      	ldr	r2, [pc, #40]	@ (800ce9c <HAL_FLASH_Unlock+0x48>)
 800ce74:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ce76:	4b07      	ldr	r3, [pc, #28]	@ (800ce94 <HAL_FLASH_Unlock+0x40>)
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800ce82:	2301      	movs	r3, #1
 800ce84:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800ce86:	79fb      	ldrb	r3, [r7, #7]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	370c      	adds	r7, #12
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bc80      	pop	{r7}
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	40022000 	.word	0x40022000
 800ce98:	45670123 	.word	0x45670123
 800ce9c:	cdef89ab 	.word	0xcdef89ab

0800cea0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cea0:	b480      	push	{r7}
 800cea2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800cea4:	4b05      	ldr	r3, [pc, #20]	@ (800cebc <HAL_FLASH_Lock+0x1c>)
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	4a04      	ldr	r2, [pc, #16]	@ (800cebc <HAL_FLASH_Lock+0x1c>)
 800ceaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceae:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800ceb0:	2300      	movs	r3, #0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bc80      	pop	{r7}
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	40022000 	.word	0x40022000

0800cec0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cecc:	4b08      	ldr	r3, [pc, #32]	@ (800cef0 <FLASH_Program_HalfWord+0x30>)
 800cece:	2200      	movs	r2, #0
 800ced0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800ced2:	4b08      	ldr	r3, [pc, #32]	@ (800cef4 <FLASH_Program_HalfWord+0x34>)
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	4a07      	ldr	r2, [pc, #28]	@ (800cef4 <FLASH_Program_HalfWord+0x34>)
 800ced8:	f043 0301 	orr.w	r3, r3, #1
 800cedc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	887a      	ldrh	r2, [r7, #2]
 800cee2:	801a      	strh	r2, [r3, #0]
}
 800cee4:	bf00      	nop
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bc80      	pop	{r7}
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	20003028 	.word	0x20003028
 800cef4:	40022000 	.word	0x40022000

0800cef8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800cf00:	f7ff fb0e 	bl	800c520 <HAL_GetTick>
 800cf04:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cf06:	e010      	b.n	800cf2a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf0e:	d00c      	beq.n	800cf2a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d007      	beq.n	800cf26 <FLASH_WaitForLastOperation+0x2e>
 800cf16:	f7ff fb03 	bl	800c520 <HAL_GetTick>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d201      	bcs.n	800cf2a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800cf26:	2303      	movs	r3, #3
 800cf28:	e025      	b.n	800cf76 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cf2a:	4b15      	ldr	r3, [pc, #84]	@ (800cf80 <FLASH_WaitForLastOperation+0x88>)
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	f003 0301 	and.w	r3, r3, #1
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d1e8      	bne.n	800cf08 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800cf36:	4b12      	ldr	r3, [pc, #72]	@ (800cf80 <FLASH_WaitForLastOperation+0x88>)
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	f003 0320 	and.w	r3, r3, #32
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d002      	beq.n	800cf48 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cf42:	4b0f      	ldr	r3, [pc, #60]	@ (800cf80 <FLASH_WaitForLastOperation+0x88>)
 800cf44:	2220      	movs	r2, #32
 800cf46:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800cf48:	4b0d      	ldr	r3, [pc, #52]	@ (800cf80 <FLASH_WaitForLastOperation+0x88>)
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	f003 0310 	and.w	r3, r3, #16
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d10b      	bne.n	800cf6c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800cf54:	4b0a      	ldr	r3, [pc, #40]	@ (800cf80 <FLASH_WaitForLastOperation+0x88>)
 800cf56:	69db      	ldr	r3, [r3, #28]
 800cf58:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d105      	bne.n	800cf6c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800cf60:	4b07      	ldr	r3, [pc, #28]	@ (800cf80 <FLASH_WaitForLastOperation+0x88>)
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d003      	beq.n	800cf74 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800cf6c:	f000 f80a 	bl	800cf84 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e000      	b.n	800cf76 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	40022000 	.word	0x40022000

0800cf84 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800cf8e:	4b23      	ldr	r3, [pc, #140]	@ (800d01c <FLASH_SetErrorCode+0x98>)
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	f003 0310 	and.w	r3, r3, #16
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d009      	beq.n	800cfae <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cf9a:	4b21      	ldr	r3, [pc, #132]	@ (800d020 <FLASH_SetErrorCode+0x9c>)
 800cf9c:	69db      	ldr	r3, [r3, #28]
 800cf9e:	f043 0302 	orr.w	r3, r3, #2
 800cfa2:	4a1f      	ldr	r2, [pc, #124]	@ (800d020 <FLASH_SetErrorCode+0x9c>)
 800cfa4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f043 0310 	orr.w	r3, r3, #16
 800cfac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800cfae:	4b1b      	ldr	r3, [pc, #108]	@ (800d01c <FLASH_SetErrorCode+0x98>)
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	f003 0304 	and.w	r3, r3, #4
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d009      	beq.n	800cfce <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800cfba:	4b19      	ldr	r3, [pc, #100]	@ (800d020 <FLASH_SetErrorCode+0x9c>)
 800cfbc:	69db      	ldr	r3, [r3, #28]
 800cfbe:	f043 0301 	orr.w	r3, r3, #1
 800cfc2:	4a17      	ldr	r2, [pc, #92]	@ (800d020 <FLASH_SetErrorCode+0x9c>)
 800cfc4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f043 0304 	orr.w	r3, r3, #4
 800cfcc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800cfce:	4b13      	ldr	r3, [pc, #76]	@ (800d01c <FLASH_SetErrorCode+0x98>)
 800cfd0:	69db      	ldr	r3, [r3, #28]
 800cfd2:	f003 0301 	and.w	r3, r3, #1
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00b      	beq.n	800cff2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800cfda:	4b11      	ldr	r3, [pc, #68]	@ (800d020 <FLASH_SetErrorCode+0x9c>)
 800cfdc:	69db      	ldr	r3, [r3, #28]
 800cfde:	f043 0304 	orr.w	r3, r3, #4
 800cfe2:	4a0f      	ldr	r2, [pc, #60]	@ (800d020 <FLASH_SetErrorCode+0x9c>)
 800cfe4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800cfe6:	4b0d      	ldr	r3, [pc, #52]	@ (800d01c <FLASH_SetErrorCode+0x98>)
 800cfe8:	69db      	ldr	r3, [r3, #28]
 800cfea:	4a0c      	ldr	r2, [pc, #48]	@ (800d01c <FLASH_SetErrorCode+0x98>)
 800cfec:	f023 0301 	bic.w	r3, r3, #1
 800cff0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f240 1201 	movw	r2, #257	@ 0x101
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d106      	bne.n	800d00a <FLASH_SetErrorCode+0x86>
 800cffc:	4b07      	ldr	r3, [pc, #28]	@ (800d01c <FLASH_SetErrorCode+0x98>)
 800cffe:	69db      	ldr	r3, [r3, #28]
 800d000:	4a06      	ldr	r2, [pc, #24]	@ (800d01c <FLASH_SetErrorCode+0x98>)
 800d002:	f023 0301 	bic.w	r3, r3, #1
 800d006:	61d3      	str	r3, [r2, #28]
}  
 800d008:	e002      	b.n	800d010 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800d00a:	4a04      	ldr	r2, [pc, #16]	@ (800d01c <FLASH_SetErrorCode+0x98>)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	60d3      	str	r3, [r2, #12]
}  
 800d010:	bf00      	nop
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	bc80      	pop	{r7}
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	40022000 	.word	0x40022000
 800d020:	20003028 	.word	0x20003028

0800d024 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800d032:	2300      	movs	r3, #0
 800d034:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d036:	4b2f      	ldr	r3, [pc, #188]	@ (800d0f4 <HAL_FLASHEx_Erase+0xd0>)
 800d038:	7e1b      	ldrb	r3, [r3, #24]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d101      	bne.n	800d042 <HAL_FLASHEx_Erase+0x1e>
 800d03e:	2302      	movs	r3, #2
 800d040:	e053      	b.n	800d0ea <HAL_FLASHEx_Erase+0xc6>
 800d042:	4b2c      	ldr	r3, [pc, #176]	@ (800d0f4 <HAL_FLASHEx_Erase+0xd0>)
 800d044:	2201      	movs	r2, #1
 800d046:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d116      	bne.n	800d07e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800d050:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d054:	f7ff ff50 	bl	800cef8 <FLASH_WaitForLastOperation>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d141      	bne.n	800d0e2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800d05e:	2001      	movs	r0, #1
 800d060:	f000 f84c 	bl	800d0fc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d064:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d068:	f7ff ff46 	bl	800cef8 <FLASH_WaitForLastOperation>
 800d06c:	4603      	mov	r3, r0
 800d06e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800d070:	4b21      	ldr	r3, [pc, #132]	@ (800d0f8 <HAL_FLASHEx_Erase+0xd4>)
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	4a20      	ldr	r2, [pc, #128]	@ (800d0f8 <HAL_FLASHEx_Erase+0xd4>)
 800d076:	f023 0304 	bic.w	r3, r3, #4
 800d07a:	6113      	str	r3, [r2, #16]
 800d07c:	e031      	b.n	800d0e2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800d07e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d082:	f7ff ff39 	bl	800cef8 <FLASH_WaitForLastOperation>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d12a      	bne.n	800d0e2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	f04f 32ff 	mov.w	r2, #4294967295
 800d092:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	689b      	ldr	r3, [r3, #8]
 800d098:	60bb      	str	r3, [r7, #8]
 800d09a:	e019      	b.n	800d0d0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800d09c:	68b8      	ldr	r0, [r7, #8]
 800d09e:	f000 f849 	bl	800d134 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d0a2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d0a6:	f7ff ff27 	bl	800cef8 <FLASH_WaitForLastOperation>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800d0ae:	4b12      	ldr	r3, [pc, #72]	@ (800d0f8 <HAL_FLASHEx_Erase+0xd4>)
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	4a11      	ldr	r2, [pc, #68]	@ (800d0f8 <HAL_FLASHEx_Erase+0xd4>)
 800d0b4:	f023 0302 	bic.w	r3, r3, #2
 800d0b8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d003      	beq.n	800d0c8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	68ba      	ldr	r2, [r7, #8]
 800d0c4:	601a      	str	r2, [r3, #0]
            break;
 800d0c6:	e00c      	b.n	800d0e2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0ce:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	02da      	lsls	r2, r3, #11
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	4413      	add	r3, r2
 800d0dc:	68ba      	ldr	r2, [r7, #8]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d3dc      	bcc.n	800d09c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d0e2:	4b04      	ldr	r3, [pc, #16]	@ (800d0f4 <HAL_FLASHEx_Erase+0xd0>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	761a      	strb	r2, [r3, #24]

  return status;
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	20003028 	.word	0x20003028
 800d0f8:	40022000 	.word	0x40022000

0800d0fc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d104:	4b09      	ldr	r3, [pc, #36]	@ (800d12c <FLASH_MassErase+0x30>)
 800d106:	2200      	movs	r2, #0
 800d108:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800d10a:	4b09      	ldr	r3, [pc, #36]	@ (800d130 <FLASH_MassErase+0x34>)
 800d10c:	691b      	ldr	r3, [r3, #16]
 800d10e:	4a08      	ldr	r2, [pc, #32]	@ (800d130 <FLASH_MassErase+0x34>)
 800d110:	f043 0304 	orr.w	r3, r3, #4
 800d114:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d116:	4b06      	ldr	r3, [pc, #24]	@ (800d130 <FLASH_MassErase+0x34>)
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	4a05      	ldr	r2, [pc, #20]	@ (800d130 <FLASH_MassErase+0x34>)
 800d11c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d120:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d122:	bf00      	nop
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	bc80      	pop	{r7}
 800d12a:	4770      	bx	lr
 800d12c:	20003028 	.word	0x20003028
 800d130:	40022000 	.word	0x40022000

0800d134 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d13c:	4b0b      	ldr	r3, [pc, #44]	@ (800d16c <FLASH_PageErase+0x38>)
 800d13e:	2200      	movs	r2, #0
 800d140:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d142:	4b0b      	ldr	r3, [pc, #44]	@ (800d170 <FLASH_PageErase+0x3c>)
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	4a0a      	ldr	r2, [pc, #40]	@ (800d170 <FLASH_PageErase+0x3c>)
 800d148:	f043 0302 	orr.w	r3, r3, #2
 800d14c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800d14e:	4a08      	ldr	r2, [pc, #32]	@ (800d170 <FLASH_PageErase+0x3c>)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d154:	4b06      	ldr	r3, [pc, #24]	@ (800d170 <FLASH_PageErase+0x3c>)
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	4a05      	ldr	r2, [pc, #20]	@ (800d170 <FLASH_PageErase+0x3c>)
 800d15a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d15e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d160:	bf00      	nop
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	bc80      	pop	{r7}
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop
 800d16c:	20003028 	.word	0x20003028
 800d170:	40022000 	.word	0x40022000

0800d174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d174:	b480      	push	{r7}
 800d176:	b08b      	sub	sp, #44	@ 0x2c
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d17e:	2300      	movs	r3, #0
 800d180:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800d182:	2300      	movs	r3, #0
 800d184:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d186:	e179      	b.n	800d47c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800d188:	2201      	movs	r2, #1
 800d18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18c:	fa02 f303 	lsl.w	r3, r2, r3
 800d190:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	69fa      	ldr	r2, [r7, #28]
 800d198:	4013      	ands	r3, r2
 800d19a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800d19c:	69ba      	ldr	r2, [r7, #24]
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	f040 8168 	bne.w	800d476 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	4a96      	ldr	r2, [pc, #600]	@ (800d404 <HAL_GPIO_Init+0x290>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d05e      	beq.n	800d26e <HAL_GPIO_Init+0xfa>
 800d1b0:	4a94      	ldr	r2, [pc, #592]	@ (800d404 <HAL_GPIO_Init+0x290>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d875      	bhi.n	800d2a2 <HAL_GPIO_Init+0x12e>
 800d1b6:	4a94      	ldr	r2, [pc, #592]	@ (800d408 <HAL_GPIO_Init+0x294>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d058      	beq.n	800d26e <HAL_GPIO_Init+0xfa>
 800d1bc:	4a92      	ldr	r2, [pc, #584]	@ (800d408 <HAL_GPIO_Init+0x294>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d86f      	bhi.n	800d2a2 <HAL_GPIO_Init+0x12e>
 800d1c2:	4a92      	ldr	r2, [pc, #584]	@ (800d40c <HAL_GPIO_Init+0x298>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d052      	beq.n	800d26e <HAL_GPIO_Init+0xfa>
 800d1c8:	4a90      	ldr	r2, [pc, #576]	@ (800d40c <HAL_GPIO_Init+0x298>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d869      	bhi.n	800d2a2 <HAL_GPIO_Init+0x12e>
 800d1ce:	4a90      	ldr	r2, [pc, #576]	@ (800d410 <HAL_GPIO_Init+0x29c>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d04c      	beq.n	800d26e <HAL_GPIO_Init+0xfa>
 800d1d4:	4a8e      	ldr	r2, [pc, #568]	@ (800d410 <HAL_GPIO_Init+0x29c>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d863      	bhi.n	800d2a2 <HAL_GPIO_Init+0x12e>
 800d1da:	4a8e      	ldr	r2, [pc, #568]	@ (800d414 <HAL_GPIO_Init+0x2a0>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d046      	beq.n	800d26e <HAL_GPIO_Init+0xfa>
 800d1e0:	4a8c      	ldr	r2, [pc, #560]	@ (800d414 <HAL_GPIO_Init+0x2a0>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d85d      	bhi.n	800d2a2 <HAL_GPIO_Init+0x12e>
 800d1e6:	2b12      	cmp	r3, #18
 800d1e8:	d82a      	bhi.n	800d240 <HAL_GPIO_Init+0xcc>
 800d1ea:	2b12      	cmp	r3, #18
 800d1ec:	d859      	bhi.n	800d2a2 <HAL_GPIO_Init+0x12e>
 800d1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800d1f4 <HAL_GPIO_Init+0x80>)
 800d1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f4:	0800d26f 	.word	0x0800d26f
 800d1f8:	0800d249 	.word	0x0800d249
 800d1fc:	0800d25b 	.word	0x0800d25b
 800d200:	0800d29d 	.word	0x0800d29d
 800d204:	0800d2a3 	.word	0x0800d2a3
 800d208:	0800d2a3 	.word	0x0800d2a3
 800d20c:	0800d2a3 	.word	0x0800d2a3
 800d210:	0800d2a3 	.word	0x0800d2a3
 800d214:	0800d2a3 	.word	0x0800d2a3
 800d218:	0800d2a3 	.word	0x0800d2a3
 800d21c:	0800d2a3 	.word	0x0800d2a3
 800d220:	0800d2a3 	.word	0x0800d2a3
 800d224:	0800d2a3 	.word	0x0800d2a3
 800d228:	0800d2a3 	.word	0x0800d2a3
 800d22c:	0800d2a3 	.word	0x0800d2a3
 800d230:	0800d2a3 	.word	0x0800d2a3
 800d234:	0800d2a3 	.word	0x0800d2a3
 800d238:	0800d251 	.word	0x0800d251
 800d23c:	0800d265 	.word	0x0800d265
 800d240:	4a75      	ldr	r2, [pc, #468]	@ (800d418 <HAL_GPIO_Init+0x2a4>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d013      	beq.n	800d26e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800d246:	e02c      	b.n	800d2a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	623b      	str	r3, [r7, #32]
          break;
 800d24e:	e029      	b.n	800d2a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	3304      	adds	r3, #4
 800d256:	623b      	str	r3, [r7, #32]
          break;
 800d258:	e024      	b.n	800d2a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	3308      	adds	r3, #8
 800d260:	623b      	str	r3, [r7, #32]
          break;
 800d262:	e01f      	b.n	800d2a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	330c      	adds	r3, #12
 800d26a:	623b      	str	r3, [r7, #32]
          break;
 800d26c:	e01a      	b.n	800d2a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d102      	bne.n	800d27c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800d276:	2304      	movs	r3, #4
 800d278:	623b      	str	r3, [r7, #32]
          break;
 800d27a:	e013      	b.n	800d2a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d105      	bne.n	800d290 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d284:	2308      	movs	r3, #8
 800d286:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	69fa      	ldr	r2, [r7, #28]
 800d28c:	611a      	str	r2, [r3, #16]
          break;
 800d28e:	e009      	b.n	800d2a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d290:	2308      	movs	r3, #8
 800d292:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	69fa      	ldr	r2, [r7, #28]
 800d298:	615a      	str	r2, [r3, #20]
          break;
 800d29a:	e003      	b.n	800d2a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800d29c:	2300      	movs	r3, #0
 800d29e:	623b      	str	r3, [r7, #32]
          break;
 800d2a0:	e000      	b.n	800d2a4 <HAL_GPIO_Init+0x130>
          break;
 800d2a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	2bff      	cmp	r3, #255	@ 0xff
 800d2a8:	d801      	bhi.n	800d2ae <HAL_GPIO_Init+0x13a>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	e001      	b.n	800d2b2 <HAL_GPIO_Init+0x13e>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	2bff      	cmp	r3, #255	@ 0xff
 800d2b8:	d802      	bhi.n	800d2c0 <HAL_GPIO_Init+0x14c>
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	e002      	b.n	800d2c6 <HAL_GPIO_Init+0x152>
 800d2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c2:	3b08      	subs	r3, #8
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	210f      	movs	r1, #15
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d2d4:	43db      	mvns	r3, r3
 800d2d6:	401a      	ands	r2, r3
 800d2d8:	6a39      	ldr	r1, [r7, #32]
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d2e0:	431a      	orrs	r2, r3
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 80c1 	beq.w	800d476 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800d2f4:	4b49      	ldr	r3, [pc, #292]	@ (800d41c <HAL_GPIO_Init+0x2a8>)
 800d2f6:	699b      	ldr	r3, [r3, #24]
 800d2f8:	4a48      	ldr	r2, [pc, #288]	@ (800d41c <HAL_GPIO_Init+0x2a8>)
 800d2fa:	f043 0301 	orr.w	r3, r3, #1
 800d2fe:	6193      	str	r3, [r2, #24]
 800d300:	4b46      	ldr	r3, [pc, #280]	@ (800d41c <HAL_GPIO_Init+0x2a8>)
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	f003 0301 	and.w	r3, r3, #1
 800d308:	60bb      	str	r3, [r7, #8]
 800d30a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800d30c:	4a44      	ldr	r2, [pc, #272]	@ (800d420 <HAL_GPIO_Init+0x2ac>)
 800d30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d310:	089b      	lsrs	r3, r3, #2
 800d312:	3302      	adds	r3, #2
 800d314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d318:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800d31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31c:	f003 0303 	and.w	r3, r3, #3
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	220f      	movs	r2, #15
 800d324:	fa02 f303 	lsl.w	r3, r2, r3
 800d328:	43db      	mvns	r3, r3
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	4013      	ands	r3, r2
 800d32e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a3c      	ldr	r2, [pc, #240]	@ (800d424 <HAL_GPIO_Init+0x2b0>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d01f      	beq.n	800d378 <HAL_GPIO_Init+0x204>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a3b      	ldr	r2, [pc, #236]	@ (800d428 <HAL_GPIO_Init+0x2b4>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d019      	beq.n	800d374 <HAL_GPIO_Init+0x200>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a3a      	ldr	r2, [pc, #232]	@ (800d42c <HAL_GPIO_Init+0x2b8>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d013      	beq.n	800d370 <HAL_GPIO_Init+0x1fc>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4a39      	ldr	r2, [pc, #228]	@ (800d430 <HAL_GPIO_Init+0x2bc>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d00d      	beq.n	800d36c <HAL_GPIO_Init+0x1f8>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4a38      	ldr	r2, [pc, #224]	@ (800d434 <HAL_GPIO_Init+0x2c0>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d007      	beq.n	800d368 <HAL_GPIO_Init+0x1f4>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a37      	ldr	r2, [pc, #220]	@ (800d438 <HAL_GPIO_Init+0x2c4>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d101      	bne.n	800d364 <HAL_GPIO_Init+0x1f0>
 800d360:	2305      	movs	r3, #5
 800d362:	e00a      	b.n	800d37a <HAL_GPIO_Init+0x206>
 800d364:	2306      	movs	r3, #6
 800d366:	e008      	b.n	800d37a <HAL_GPIO_Init+0x206>
 800d368:	2304      	movs	r3, #4
 800d36a:	e006      	b.n	800d37a <HAL_GPIO_Init+0x206>
 800d36c:	2303      	movs	r3, #3
 800d36e:	e004      	b.n	800d37a <HAL_GPIO_Init+0x206>
 800d370:	2302      	movs	r3, #2
 800d372:	e002      	b.n	800d37a <HAL_GPIO_Init+0x206>
 800d374:	2301      	movs	r3, #1
 800d376:	e000      	b.n	800d37a <HAL_GPIO_Init+0x206>
 800d378:	2300      	movs	r3, #0
 800d37a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d37c:	f002 0203 	and.w	r2, r2, #3
 800d380:	0092      	lsls	r2, r2, #2
 800d382:	4093      	lsls	r3, r2
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	4313      	orrs	r3, r2
 800d388:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800d38a:	4925      	ldr	r1, [pc, #148]	@ (800d420 <HAL_GPIO_Init+0x2ac>)
 800d38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38e:	089b      	lsrs	r3, r3, #2
 800d390:	3302      	adds	r3, #2
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d006      	beq.n	800d3b2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800d3a4:	4b25      	ldr	r3, [pc, #148]	@ (800d43c <HAL_GPIO_Init+0x2c8>)
 800d3a6:	689a      	ldr	r2, [r3, #8]
 800d3a8:	4924      	ldr	r1, [pc, #144]	@ (800d43c <HAL_GPIO_Init+0x2c8>)
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	608b      	str	r3, [r1, #8]
 800d3b0:	e006      	b.n	800d3c0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800d3b2:	4b22      	ldr	r3, [pc, #136]	@ (800d43c <HAL_GPIO_Init+0x2c8>)
 800d3b4:	689a      	ldr	r2, [r3, #8]
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	43db      	mvns	r3, r3
 800d3ba:	4920      	ldr	r1, [pc, #128]	@ (800d43c <HAL_GPIO_Init+0x2c8>)
 800d3bc:	4013      	ands	r3, r2
 800d3be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d006      	beq.n	800d3da <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800d3cc:	4b1b      	ldr	r3, [pc, #108]	@ (800d43c <HAL_GPIO_Init+0x2c8>)
 800d3ce:	68da      	ldr	r2, [r3, #12]
 800d3d0:	491a      	ldr	r1, [pc, #104]	@ (800d43c <HAL_GPIO_Init+0x2c8>)
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	60cb      	str	r3, [r1, #12]
 800d3d8:	e006      	b.n	800d3e8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800d3da:	4b18      	ldr	r3, [pc, #96]	@ (800d43c <HAL_GPIO_Init+0x2c8>)
 800d3dc:	68da      	ldr	r2, [r3, #12]
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	43db      	mvns	r3, r3
 800d3e2:	4916      	ldr	r1, [pc, #88]	@ (800d43c <HAL_GPIO_Init+0x2c8>)
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d025      	beq.n	800d440 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800d3f4:	4b11      	ldr	r3, [pc, #68]	@ (800d43c <HAL_GPIO_Init+0x2c8>)
 800d3f6:	685a      	ldr	r2, [r3, #4]
 800d3f8:	4910      	ldr	r1, [pc, #64]	@ (800d43c <HAL_GPIO_Init+0x2c8>)
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	604b      	str	r3, [r1, #4]
 800d400:	e025      	b.n	800d44e <HAL_GPIO_Init+0x2da>
 800d402:	bf00      	nop
 800d404:	10320000 	.word	0x10320000
 800d408:	10310000 	.word	0x10310000
 800d40c:	10220000 	.word	0x10220000
 800d410:	10210000 	.word	0x10210000
 800d414:	10120000 	.word	0x10120000
 800d418:	10110000 	.word	0x10110000
 800d41c:	40021000 	.word	0x40021000
 800d420:	40010000 	.word	0x40010000
 800d424:	40010800 	.word	0x40010800
 800d428:	40010c00 	.word	0x40010c00
 800d42c:	40011000 	.word	0x40011000
 800d430:	40011400 	.word	0x40011400
 800d434:	40011800 	.word	0x40011800
 800d438:	40011c00 	.word	0x40011c00
 800d43c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800d440:	4b15      	ldr	r3, [pc, #84]	@ (800d498 <HAL_GPIO_Init+0x324>)
 800d442:	685a      	ldr	r2, [r3, #4]
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	43db      	mvns	r3, r3
 800d448:	4913      	ldr	r1, [pc, #76]	@ (800d498 <HAL_GPIO_Init+0x324>)
 800d44a:	4013      	ands	r3, r2
 800d44c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d456:	2b00      	cmp	r3, #0
 800d458:	d006      	beq.n	800d468 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800d45a:	4b0f      	ldr	r3, [pc, #60]	@ (800d498 <HAL_GPIO_Init+0x324>)
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	490e      	ldr	r1, [pc, #56]	@ (800d498 <HAL_GPIO_Init+0x324>)
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	4313      	orrs	r3, r2
 800d464:	600b      	str	r3, [r1, #0]
 800d466:	e006      	b.n	800d476 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800d468:	4b0b      	ldr	r3, [pc, #44]	@ (800d498 <HAL_GPIO_Init+0x324>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	43db      	mvns	r3, r3
 800d470:	4909      	ldr	r1, [pc, #36]	@ (800d498 <HAL_GPIO_Init+0x324>)
 800d472:	4013      	ands	r3, r2
 800d474:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800d476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d478:	3301      	adds	r3, #1
 800d47a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d482:	fa22 f303 	lsr.w	r3, r2, r3
 800d486:	2b00      	cmp	r3, #0
 800d488:	f47f ae7e 	bne.w	800d188 <HAL_GPIO_Init+0x14>
  }
}
 800d48c:	bf00      	nop
 800d48e:	bf00      	nop
 800d490:	372c      	adds	r7, #44	@ 0x2c
 800d492:	46bd      	mov	sp, r7
 800d494:	bc80      	pop	{r7}
 800d496:	4770      	bx	lr
 800d498:	40010400 	.word	0x40010400

0800d49c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b085      	sub	sp, #20
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	689a      	ldr	r2, [r3, #8]
 800d4ac:	887b      	ldrh	r3, [r7, #2]
 800d4ae:	4013      	ands	r3, r2
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	73fb      	strb	r3, [r7, #15]
 800d4b8:	e001      	b.n	800d4be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3714      	adds	r7, #20
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bc80      	pop	{r7}
 800d4c8:	4770      	bx	lr

0800d4ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	b083      	sub	sp, #12
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	807b      	strh	r3, [r7, #2]
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d4da:	787b      	ldrb	r3, [r7, #1]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d003      	beq.n	800d4e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d4e0:	887a      	ldrh	r2, [r7, #2]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800d4e6:	e003      	b.n	800d4f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800d4e8:	887b      	ldrh	r3, [r7, #2]
 800d4ea:	041a      	lsls	r2, r3, #16
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	611a      	str	r2, [r3, #16]
}
 800d4f0:	bf00      	nop
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bc80      	pop	{r7}
 800d4f8:	4770      	bx	lr
	...

0800d4fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	4603      	mov	r3, r0
 800d504:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d506:	4b08      	ldr	r3, [pc, #32]	@ (800d528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d508:	695a      	ldr	r2, [r3, #20]
 800d50a:	88fb      	ldrh	r3, [r7, #6]
 800d50c:	4013      	ands	r3, r2
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d006      	beq.n	800d520 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d512:	4a05      	ldr	r2, [pc, #20]	@ (800d528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d514:	88fb      	ldrh	r3, [r7, #6]
 800d516:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d518:	88fb      	ldrh	r3, [r7, #6]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fe fb88 	bl	800bc30 <HAL_GPIO_EXTI_Callback>
  }
}
 800d520:	bf00      	nop
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	40010400 	.word	0x40010400

0800d52c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d101      	bne.n	800d53e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	e12b      	b.n	800d796 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b00      	cmp	r3, #0
 800d548:	d106      	bne.n	800d558 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7fd f87c 	bl	800a650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2224      	movs	r2, #36	@ 0x24
 800d55c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	681a      	ldr	r2, [r3, #0]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f022 0201 	bic.w	r2, r2, #1
 800d56e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d57e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d58e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d590:	f001 f9c2 	bl	800e918 <HAL_RCC_GetPCLK1Freq>
 800d594:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	4a81      	ldr	r2, [pc, #516]	@ (800d7a0 <HAL_I2C_Init+0x274>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d807      	bhi.n	800d5b0 <HAL_I2C_Init+0x84>
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	4a80      	ldr	r2, [pc, #512]	@ (800d7a4 <HAL_I2C_Init+0x278>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	bf94      	ite	ls
 800d5a8:	2301      	movls	r3, #1
 800d5aa:	2300      	movhi	r3, #0
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	e006      	b.n	800d5be <HAL_I2C_Init+0x92>
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	4a7d      	ldr	r2, [pc, #500]	@ (800d7a8 <HAL_I2C_Init+0x27c>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	bf94      	ite	ls
 800d5b8:	2301      	movls	r3, #1
 800d5ba:	2300      	movhi	r3, #0
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d001      	beq.n	800d5c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e0e7      	b.n	800d796 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	4a78      	ldr	r2, [pc, #480]	@ (800d7ac <HAL_I2C_Init+0x280>)
 800d5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ce:	0c9b      	lsrs	r3, r3, #18
 800d5d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	68ba      	ldr	r2, [r7, #8]
 800d5e2:	430a      	orrs	r2, r1
 800d5e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	6a1b      	ldr	r3, [r3, #32]
 800d5ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	4a6a      	ldr	r2, [pc, #424]	@ (800d7a0 <HAL_I2C_Init+0x274>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d802      	bhi.n	800d600 <HAL_I2C_Init+0xd4>
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	e009      	b.n	800d614 <HAL_I2C_Init+0xe8>
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d606:	fb02 f303 	mul.w	r3, r2, r3
 800d60a:	4a69      	ldr	r2, [pc, #420]	@ (800d7b0 <HAL_I2C_Init+0x284>)
 800d60c:	fba2 2303 	umull	r2, r3, r2, r3
 800d610:	099b      	lsrs	r3, r3, #6
 800d612:	3301      	adds	r3, #1
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	6812      	ldr	r2, [r2, #0]
 800d618:	430b      	orrs	r3, r1
 800d61a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	69db      	ldr	r3, [r3, #28]
 800d622:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800d626:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	495c      	ldr	r1, [pc, #368]	@ (800d7a0 <HAL_I2C_Init+0x274>)
 800d630:	428b      	cmp	r3, r1
 800d632:	d819      	bhi.n	800d668 <HAL_I2C_Init+0x13c>
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	1e59      	subs	r1, r3, #1
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	005b      	lsls	r3, r3, #1
 800d63e:	fbb1 f3f3 	udiv	r3, r1, r3
 800d642:	1c59      	adds	r1, r3, #1
 800d644:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d648:	400b      	ands	r3, r1
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00a      	beq.n	800d664 <HAL_I2C_Init+0x138>
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	1e59      	subs	r1, r3, #1
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	005b      	lsls	r3, r3, #1
 800d658:	fbb1 f3f3 	udiv	r3, r1, r3
 800d65c:	3301      	adds	r3, #1
 800d65e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d662:	e051      	b.n	800d708 <HAL_I2C_Init+0x1dc>
 800d664:	2304      	movs	r3, #4
 800d666:	e04f      	b.n	800d708 <HAL_I2C_Init+0x1dc>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d111      	bne.n	800d694 <HAL_I2C_Init+0x168>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	1e58      	subs	r0, r3, #1
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6859      	ldr	r1, [r3, #4]
 800d678:	460b      	mov	r3, r1
 800d67a:	005b      	lsls	r3, r3, #1
 800d67c:	440b      	add	r3, r1
 800d67e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d682:	3301      	adds	r3, #1
 800d684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d688:	2b00      	cmp	r3, #0
 800d68a:	bf0c      	ite	eq
 800d68c:	2301      	moveq	r3, #1
 800d68e:	2300      	movne	r3, #0
 800d690:	b2db      	uxtb	r3, r3
 800d692:	e012      	b.n	800d6ba <HAL_I2C_Init+0x18e>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	1e58      	subs	r0, r3, #1
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6859      	ldr	r1, [r3, #4]
 800d69c:	460b      	mov	r3, r1
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	440b      	add	r3, r1
 800d6a2:	0099      	lsls	r1, r3, #2
 800d6a4:	440b      	add	r3, r1
 800d6a6:	fbb0 f3f3 	udiv	r3, r0, r3
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	bf0c      	ite	eq
 800d6b4:	2301      	moveq	r3, #1
 800d6b6:	2300      	movne	r3, #0
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d001      	beq.n	800d6c2 <HAL_I2C_Init+0x196>
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e022      	b.n	800d708 <HAL_I2C_Init+0x1dc>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d10e      	bne.n	800d6e8 <HAL_I2C_Init+0x1bc>
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	1e58      	subs	r0, r3, #1
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6859      	ldr	r1, [r3, #4]
 800d6d2:	460b      	mov	r3, r1
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	440b      	add	r3, r1
 800d6d8:	fbb0 f3f3 	udiv	r3, r0, r3
 800d6dc:	3301      	adds	r3, #1
 800d6de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d6e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6e6:	e00f      	b.n	800d708 <HAL_I2C_Init+0x1dc>
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	1e58      	subs	r0, r3, #1
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6859      	ldr	r1, [r3, #4]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	440b      	add	r3, r1
 800d6f6:	0099      	lsls	r1, r3, #2
 800d6f8:	440b      	add	r3, r1
 800d6fa:	fbb0 f3f3 	udiv	r3, r0, r3
 800d6fe:	3301      	adds	r3, #1
 800d700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d704:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d708:	6879      	ldr	r1, [r7, #4]
 800d70a:	6809      	ldr	r1, [r1, #0]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	69da      	ldr	r2, [r3, #28]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a1b      	ldr	r3, [r3, #32]
 800d722:	431a      	orrs	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	430a      	orrs	r2, r1
 800d72a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d736:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	6911      	ldr	r1, [r2, #16]
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	68d2      	ldr	r2, [r2, #12]
 800d742:	4311      	orrs	r1, r2
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	6812      	ldr	r2, [r2, #0]
 800d748:	430b      	orrs	r3, r1
 800d74a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	695a      	ldr	r2, [r3, #20]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	699b      	ldr	r3, [r3, #24]
 800d75e:	431a      	orrs	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	430a      	orrs	r2, r1
 800d766:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f042 0201 	orr.w	r2, r2, #1
 800d776:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2220      	movs	r2, #32
 800d782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	000186a0 	.word	0x000186a0
 800d7a4:	001e847f 	.word	0x001e847f
 800d7a8:	003d08ff 	.word	0x003d08ff
 800d7ac:	431bde83 	.word	0x431bde83
 800d7b0:	10624dd3 	.word	0x10624dd3

0800d7b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b088      	sub	sp, #32
 800d7b8:	af02      	add	r7, sp, #8
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	4608      	mov	r0, r1
 800d7be:	4611      	mov	r1, r2
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	817b      	strh	r3, [r7, #10]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	813b      	strh	r3, [r7, #8]
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d7ce:	f7fe fea7 	bl	800c520 <HAL_GetTick>
 800d7d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b20      	cmp	r3, #32
 800d7de:	f040 80d9 	bne.w	800d994 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	2319      	movs	r3, #25
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	496d      	ldr	r1, [pc, #436]	@ (800d9a0 <HAL_I2C_Mem_Write+0x1ec>)
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f000 fa9f 	bl	800dd30 <I2C_WaitOnFlagUntilTimeout>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d001      	beq.n	800d7fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d7f8:	2302      	movs	r3, #2
 800d7fa:	e0cc      	b.n	800d996 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d802:	2b01      	cmp	r3, #1
 800d804:	d101      	bne.n	800d80a <HAL_I2C_Mem_Write+0x56>
 800d806:	2302      	movs	r3, #2
 800d808:	e0c5      	b.n	800d996 <HAL_I2C_Mem_Write+0x1e2>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d007      	beq.n	800d830 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f042 0201 	orr.w	r2, r2, #1
 800d82e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d83e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2221      	movs	r2, #33	@ 0x21
 800d844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2240      	movs	r2, #64	@ 0x40
 800d84c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2200      	movs	r2, #0
 800d854:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6a3a      	ldr	r2, [r7, #32]
 800d85a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d860:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d866:	b29a      	uxth	r2, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	4a4d      	ldr	r2, [pc, #308]	@ (800d9a4 <HAL_I2C_Mem_Write+0x1f0>)
 800d870:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d872:	88f8      	ldrh	r0, [r7, #6]
 800d874:	893a      	ldrh	r2, [r7, #8]
 800d876:	8979      	ldrh	r1, [r7, #10]
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	9301      	str	r3, [sp, #4]
 800d87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	4603      	mov	r3, r0
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	f000 f9be 	bl	800dc04 <I2C_RequestMemoryWrite>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d052      	beq.n	800d934 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d88e:	2301      	movs	r3, #1
 800d890:	e081      	b.n	800d996 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d892:	697a      	ldr	r2, [r7, #20]
 800d894:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f000 fb64 	bl	800df64 <I2C_WaitOnTXEFlagUntilTimeout>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00d      	beq.n	800d8be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	d107      	bne.n	800d8ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d8b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e06b      	b.n	800d996 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8c2:	781a      	ldrb	r2, [r3, #0]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ce:	1c5a      	adds	r2, r3, #1
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	695b      	ldr	r3, [r3, #20]
 800d8f4:	f003 0304 	and.w	r3, r3, #4
 800d8f8:	2b04      	cmp	r3, #4
 800d8fa:	d11b      	bne.n	800d934 <HAL_I2C_Mem_Write+0x180>
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d900:	2b00      	cmp	r3, #0
 800d902:	d017      	beq.n	800d934 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d908:	781a      	ldrb	r2, [r3, #0]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d914:	1c5a      	adds	r2, r3, #1
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d91e:	3b01      	subs	r3, #1
 800d920:	b29a      	uxth	r2, r3
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	3b01      	subs	r3, #1
 800d92e:	b29a      	uxth	r2, r3
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1aa      	bne.n	800d892 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d93c:	697a      	ldr	r2, [r7, #20]
 800d93e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f000 fb57 	bl	800dff4 <I2C_WaitOnBTFFlagUntilTimeout>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00d      	beq.n	800d968 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d950:	2b04      	cmp	r3, #4
 800d952:	d107      	bne.n	800d964 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d962:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d964:	2301      	movs	r3, #1
 800d966:	e016      	b.n	800d996 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2220      	movs	r2, #32
 800d97c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	e000      	b.n	800d996 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d994:	2302      	movs	r3, #2
  }
}
 800d996:	4618      	mov	r0, r3
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	00100002 	.word	0x00100002
 800d9a4:	ffff0000 	.word	0xffff0000

0800d9a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08a      	sub	sp, #40	@ 0x28
 800d9ac:	af02      	add	r7, sp, #8
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	607a      	str	r2, [r7, #4]
 800d9b2:	603b      	str	r3, [r7, #0]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800d9b8:	f7fe fdb2 	bl	800c520 <HAL_GetTick>
 800d9bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	2b20      	cmp	r3, #32
 800d9cc:	f040 8111 	bne.w	800dbf2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	2319      	movs	r3, #25
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	4988      	ldr	r1, [pc, #544]	@ (800dbfc <HAL_I2C_IsDeviceReady+0x254>)
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f000 f9a8 	bl	800dd30 <I2C_WaitOnFlagUntilTimeout>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d001      	beq.n	800d9ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	e104      	b.n	800dbf4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d101      	bne.n	800d9f8 <HAL_I2C_IsDeviceReady+0x50>
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	e0fd      	b.n	800dbf4 <HAL_I2C_IsDeviceReady+0x24c>
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f003 0301 	and.w	r3, r3, #1
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d007      	beq.n	800da1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f042 0201 	orr.w	r2, r2, #1
 800da1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800da2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2224      	movs	r2, #36	@ 0x24
 800da32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2200      	movs	r2, #0
 800da3a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	4a70      	ldr	r2, [pc, #448]	@ (800dc00 <HAL_I2C_IsDeviceReady+0x258>)
 800da40:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800da50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2200      	movs	r2, #0
 800da5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f000 f966 	bl	800dd30 <I2C_WaitOnFlagUntilTimeout>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00d      	beq.n	800da86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da78:	d103      	bne.n	800da82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da80:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800da82:	2303      	movs	r3, #3
 800da84:	e0b6      	b.n	800dbf4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800da86:	897b      	ldrh	r3, [r7, #10]
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	461a      	mov	r2, r3
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800da94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800da96:	f7fe fd43 	bl	800c520 <HAL_GetTick>
 800da9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	f003 0302 	and.w	r3, r3, #2
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	bf0c      	ite	eq
 800daaa:	2301      	moveq	r3, #1
 800daac:	2300      	movne	r3, #0
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	695b      	ldr	r3, [r3, #20]
 800dab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dabc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dac0:	bf0c      	ite	eq
 800dac2:	2301      	moveq	r3, #1
 800dac4:	2300      	movne	r3, #0
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800daca:	e025      	b.n	800db18 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800dacc:	f7fe fd28 	bl	800c520 <HAL_GetTick>
 800dad0:	4602      	mov	r2, r0
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	1ad3      	subs	r3, r2, r3
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d302      	bcc.n	800dae2 <HAL_I2C_IsDeviceReady+0x13a>
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d103      	bne.n	800daea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	22a0      	movs	r2, #160	@ 0xa0
 800dae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	695b      	ldr	r3, [r3, #20]
 800daf0:	f003 0302 	and.w	r3, r3, #2
 800daf4:	2b02      	cmp	r3, #2
 800daf6:	bf0c      	ite	eq
 800daf8:	2301      	moveq	r3, #1
 800dafa:	2300      	movne	r3, #0
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db0e:	bf0c      	ite	eq
 800db10:	2301      	moveq	r3, #1
 800db12:	2300      	movne	r3, #0
 800db14:	b2db      	uxtb	r3, r3
 800db16:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2ba0      	cmp	r3, #160	@ 0xa0
 800db22:	d005      	beq.n	800db30 <HAL_I2C_IsDeviceReady+0x188>
 800db24:	7dfb      	ldrb	r3, [r7, #23]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d102      	bne.n	800db30 <HAL_I2C_IsDeviceReady+0x188>
 800db2a:	7dbb      	ldrb	r3, [r7, #22]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d0cd      	beq.n	800dacc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2220      	movs	r2, #32
 800db34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	695b      	ldr	r3, [r3, #20]
 800db3e:	f003 0302 	and.w	r3, r3, #2
 800db42:	2b02      	cmp	r3, #2
 800db44:	d129      	bne.n	800db9a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800db54:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db56:	2300      	movs	r3, #0
 800db58:	613b      	str	r3, [r7, #16]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	613b      	str	r3, [r7, #16]
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	699b      	ldr	r3, [r3, #24]
 800db68:	613b      	str	r3, [r7, #16]
 800db6a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	9300      	str	r3, [sp, #0]
 800db70:	2319      	movs	r3, #25
 800db72:	2201      	movs	r2, #1
 800db74:	4921      	ldr	r1, [pc, #132]	@ (800dbfc <HAL_I2C_IsDeviceReady+0x254>)
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f000 f8da 	bl	800dd30 <I2C_WaitOnFlagUntilTimeout>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d001      	beq.n	800db86 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800db82:	2301      	movs	r3, #1
 800db84:	e036      	b.n	800dbf4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2220      	movs	r2, #32
 800db8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2200      	movs	r2, #0
 800db92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	e02c      	b.n	800dbf4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dba8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800dbb2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	2319      	movs	r3, #25
 800dbba:	2201      	movs	r2, #1
 800dbbc:	490f      	ldr	r1, [pc, #60]	@ (800dbfc <HAL_I2C_IsDeviceReady+0x254>)
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	f000 f8b6 	bl	800dd30 <I2C_WaitOnFlagUntilTimeout>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e012      	b.n	800dbf4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800dbd4:	69ba      	ldr	r2, [r7, #24]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	f4ff af32 	bcc.w	800da42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2220      	movs	r2, #32
 800dbe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e000      	b.n	800dbf4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800dbf2:	2302      	movs	r3, #2
  }
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3720      	adds	r7, #32
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	00100002 	.word	0x00100002
 800dc00:	ffff0000 	.word	0xffff0000

0800dc04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af02      	add	r7, sp, #8
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	4608      	mov	r0, r1
 800dc0e:	4611      	mov	r1, r2
 800dc10:	461a      	mov	r2, r3
 800dc12:	4603      	mov	r3, r0
 800dc14:	817b      	strh	r3, [r7, #10]
 800dc16:	460b      	mov	r3, r1
 800dc18:	813b      	strh	r3, [r7, #8]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dc2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	6a3b      	ldr	r3, [r7, #32]
 800dc34:	2200      	movs	r2, #0
 800dc36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f000 f878 	bl	800dd30 <I2C_WaitOnFlagUntilTimeout>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00d      	beq.n	800dc62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc54:	d103      	bne.n	800dc5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800dc5e:	2303      	movs	r3, #3
 800dc60:	e05f      	b.n	800dd22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dc62:	897b      	ldrh	r3, [r7, #10]
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	461a      	mov	r2, r3
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800dc70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc74:	6a3a      	ldr	r2, [r7, #32]
 800dc76:	492d      	ldr	r1, [pc, #180]	@ (800dd2c <I2C_RequestMemoryWrite+0x128>)
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f000 f8d3 	bl	800de24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d001      	beq.n	800dc88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800dc84:	2301      	movs	r3, #1
 800dc86:	e04c      	b.n	800dd22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc88:	2300      	movs	r3, #0
 800dc8a:	617b      	str	r3, [r7, #20]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	695b      	ldr	r3, [r3, #20]
 800dc92:	617b      	str	r3, [r7, #20]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	617b      	str	r3, [r7, #20]
 800dc9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dc9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dca0:	6a39      	ldr	r1, [r7, #32]
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	f000 f95e 	bl	800df64 <I2C_WaitOnTXEFlagUntilTimeout>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d00d      	beq.n	800dcca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcb2:	2b04      	cmp	r3, #4
 800dcb4:	d107      	bne.n	800dcc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dcc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e02b      	b.n	800dd22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800dcca:	88fb      	ldrh	r3, [r7, #6]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d105      	bne.n	800dcdc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800dcd0:	893b      	ldrh	r3, [r7, #8]
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	611a      	str	r2, [r3, #16]
 800dcda:	e021      	b.n	800dd20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800dcdc:	893b      	ldrh	r3, [r7, #8]
 800dcde:	0a1b      	lsrs	r3, r3, #8
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dcea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcec:	6a39      	ldr	r1, [r7, #32]
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f000 f938 	bl	800df64 <I2C_WaitOnTXEFlagUntilTimeout>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00d      	beq.n	800dd16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcfe:	2b04      	cmp	r3, #4
 800dd00:	d107      	bne.n	800dd12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e005      	b.n	800dd22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800dd16:	893b      	ldrh	r3, [r7, #8]
 800dd18:	b2da      	uxtb	r2, r3
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3718      	adds	r7, #24
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	00010002 	.word	0x00010002

0800dd30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	603b      	str	r3, [r7, #0]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dd40:	e048      	b.n	800ddd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd48:	d044      	beq.n	800ddd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd4a:	f7fe fbe9 	bl	800c520 <HAL_GetTick>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	683a      	ldr	r2, [r7, #0]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d302      	bcc.n	800dd60 <I2C_WaitOnFlagUntilTimeout+0x30>
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d139      	bne.n	800ddd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	0c1b      	lsrs	r3, r3, #16
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	d10d      	bne.n	800dd86 <I2C_WaitOnFlagUntilTimeout+0x56>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	695b      	ldr	r3, [r3, #20]
 800dd70:	43da      	mvns	r2, r3
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	4013      	ands	r3, r2
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	bf0c      	ite	eq
 800dd7c:	2301      	moveq	r3, #1
 800dd7e:	2300      	movne	r3, #0
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	461a      	mov	r2, r3
 800dd84:	e00c      	b.n	800dda0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	699b      	ldr	r3, [r3, #24]
 800dd8c:	43da      	mvns	r2, r3
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	4013      	ands	r3, r2
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	bf0c      	ite	eq
 800dd98:	2301      	moveq	r3, #1
 800dd9a:	2300      	movne	r3, #0
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	461a      	mov	r2, r3
 800dda0:	79fb      	ldrb	r3, [r7, #7]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d116      	bne.n	800ddd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2220      	movs	r2, #32
 800ddb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddc0:	f043 0220 	orr.w	r2, r3, #32
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e023      	b.n	800de1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	0c1b      	lsrs	r3, r3, #16
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d10d      	bne.n	800ddfa <I2C_WaitOnFlagUntilTimeout+0xca>
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	695b      	ldr	r3, [r3, #20]
 800dde4:	43da      	mvns	r2, r3
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	4013      	ands	r3, r2
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	bf0c      	ite	eq
 800ddf0:	2301      	moveq	r3, #1
 800ddf2:	2300      	movne	r3, #0
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	e00c      	b.n	800de14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	699b      	ldr	r3, [r3, #24]
 800de00:	43da      	mvns	r2, r3
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	4013      	ands	r3, r2
 800de06:	b29b      	uxth	r3, r3
 800de08:	2b00      	cmp	r3, #0
 800de0a:	bf0c      	ite	eq
 800de0c:	2301      	moveq	r3, #1
 800de0e:	2300      	movne	r3, #0
 800de10:	b2db      	uxtb	r3, r3
 800de12:	461a      	mov	r2, r3
 800de14:	79fb      	ldrb	r3, [r7, #7]
 800de16:	429a      	cmp	r2, r3
 800de18:	d093      	beq.n	800dd42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3710      	adds	r7, #16
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
 800de30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800de32:	e071      	b.n	800df18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	695b      	ldr	r3, [r3, #20]
 800de3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de42:	d123      	bne.n	800de8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800de5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2200      	movs	r2, #0
 800de62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2220      	movs	r2, #32
 800de68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de78:	f043 0204 	orr.w	r2, r3, #4
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2200      	movs	r2, #0
 800de84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800de88:	2301      	movs	r3, #1
 800de8a:	e067      	b.n	800df5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de92:	d041      	beq.n	800df18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de94:	f7fe fb44 	bl	800c520 <HAL_GetTick>
 800de98:	4602      	mov	r2, r0
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	1ad3      	subs	r3, r2, r3
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d302      	bcc.n	800deaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d136      	bne.n	800df18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	0c1b      	lsrs	r3, r3, #16
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d10c      	bne.n	800dece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	695b      	ldr	r3, [r3, #20]
 800deba:	43da      	mvns	r2, r3
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	4013      	ands	r3, r2
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	bf14      	ite	ne
 800dec6:	2301      	movne	r3, #1
 800dec8:	2300      	moveq	r3, #0
 800deca:	b2db      	uxtb	r3, r3
 800decc:	e00b      	b.n	800dee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	699b      	ldr	r3, [r3, #24]
 800ded4:	43da      	mvns	r2, r3
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	4013      	ands	r3, r2
 800deda:	b29b      	uxth	r3, r3
 800dedc:	2b00      	cmp	r3, #0
 800dede:	bf14      	ite	ne
 800dee0:	2301      	movne	r3, #1
 800dee2:	2300      	moveq	r3, #0
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d016      	beq.n	800df18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2220      	movs	r2, #32
 800def4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2200      	movs	r2, #0
 800defc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df04:	f043 0220 	orr.w	r2, r3, #32
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2200      	movs	r2, #0
 800df10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800df14:	2301      	movs	r3, #1
 800df16:	e021      	b.n	800df5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	0c1b      	lsrs	r3, r3, #16
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d10c      	bne.n	800df3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	695b      	ldr	r3, [r3, #20]
 800df28:	43da      	mvns	r2, r3
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	4013      	ands	r3, r2
 800df2e:	b29b      	uxth	r3, r3
 800df30:	2b00      	cmp	r3, #0
 800df32:	bf14      	ite	ne
 800df34:	2301      	movne	r3, #1
 800df36:	2300      	moveq	r3, #0
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	e00b      	b.n	800df54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	699b      	ldr	r3, [r3, #24]
 800df42:	43da      	mvns	r2, r3
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	4013      	ands	r3, r2
 800df48:	b29b      	uxth	r3, r3
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	bf14      	ite	ne
 800df4e:	2301      	movne	r3, #1
 800df50:	2300      	moveq	r3, #0
 800df52:	b2db      	uxtb	r3, r3
 800df54:	2b00      	cmp	r3, #0
 800df56:	f47f af6d 	bne.w	800de34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800df5a:	2300      	movs	r3, #0
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800df70:	e034      	b.n	800dfdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f000 f886 	bl	800e084 <I2C_IsAcknowledgeFailed>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d001      	beq.n	800df82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
 800df80:	e034      	b.n	800dfec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df88:	d028      	beq.n	800dfdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df8a:	f7fe fac9 	bl	800c520 <HAL_GetTick>
 800df8e:	4602      	mov	r2, r0
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	1ad3      	subs	r3, r2, r3
 800df94:	68ba      	ldr	r2, [r7, #8]
 800df96:	429a      	cmp	r2, r3
 800df98:	d302      	bcc.n	800dfa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d11d      	bne.n	800dfdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	695b      	ldr	r3, [r3, #20]
 800dfa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfaa:	2b80      	cmp	r3, #128	@ 0x80
 800dfac:	d016      	beq.n	800dfdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2220      	movs	r2, #32
 800dfb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfc8:	f043 0220 	orr.w	r2, r3, #32
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e007      	b.n	800dfec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	695b      	ldr	r3, [r3, #20]
 800dfe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfe6:	2b80      	cmp	r3, #128	@ 0x80
 800dfe8:	d1c3      	bne.n	800df72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800dfea:	2300      	movs	r3, #0
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3710      	adds	r7, #16
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e000:	e034      	b.n	800e06c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f000 f83e 	bl	800e084 <I2C_IsAcknowledgeFailed>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d001      	beq.n	800e012 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e034      	b.n	800e07c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e018:	d028      	beq.n	800e06c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e01a:	f7fe fa81 	bl	800c520 <HAL_GetTick>
 800e01e:	4602      	mov	r2, r0
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	429a      	cmp	r2, r3
 800e028:	d302      	bcc.n	800e030 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d11d      	bne.n	800e06c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	695b      	ldr	r3, [r3, #20]
 800e036:	f003 0304 	and.w	r3, r3, #4
 800e03a:	2b04      	cmp	r3, #4
 800e03c:	d016      	beq.n	800e06c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2200      	movs	r2, #0
 800e042:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2220      	movs	r2, #32
 800e048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2200      	movs	r2, #0
 800e050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e058:	f043 0220 	orr.w	r2, r3, #32
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2200      	movs	r2, #0
 800e064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e068:	2301      	movs	r3, #1
 800e06a:	e007      	b.n	800e07c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	695b      	ldr	r3, [r3, #20]
 800e072:	f003 0304 	and.w	r3, r3, #4
 800e076:	2b04      	cmp	r3, #4
 800e078:	d1c3      	bne.n	800e002 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	695b      	ldr	r3, [r3, #20]
 800e092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e09a:	d11b      	bne.n	800e0d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e0a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2220      	movs	r2, #32
 800e0b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0c0:	f043 0204 	orr.w	r2, r3, #4
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e000      	b.n	800e0d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e0d4:	2300      	movs	r3, #0
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	370c      	adds	r7, #12
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bc80      	pop	{r7}
 800e0de:	4770      	bx	lr

0800e0e0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e034      	b.n	800e15c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800e0fa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f245 5255 	movw	r2, #21845	@ 0x5555
 800e104:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	6852      	ldr	r2, [r2, #4]
 800e10e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	6892      	ldr	r2, [r2, #8]
 800e118:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800e11a:	f7fe fa01 	bl	800c520 <HAL_GetTick>
 800e11e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e120:	e00f      	b.n	800e142 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800e122:	f7fe f9fd 	bl	800c520 <HAL_GetTick>
 800e126:	4602      	mov	r2, r0
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	2b27      	cmp	r3, #39	@ 0x27
 800e12e:	d908      	bls.n	800e142 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68db      	ldr	r3, [r3, #12]
 800e136:	f003 0303 	and.w	r3, r3, #3
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d001      	beq.n	800e142 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800e13e:	2303      	movs	r3, #3
 800e140:	e00c      	b.n	800e15c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	f003 0303 	and.w	r3, r3, #3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d1e8      	bne.n	800e122 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800e158:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e15a:	2300      	movs	r3, #0
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800e164:	b480      	push	{r7}
 800e166:	b083      	sub	sp, #12
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800e174:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e176:	2300      	movs	r3, #0
}
 800e178:	4618      	mov	r0, r3
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bc80      	pop	{r7}
 800e180:	4770      	bx	lr
	...

0800e184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b086      	sub	sp, #24
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d101      	bne.n	800e196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e192:	2301      	movs	r3, #1
 800e194:	e272      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f003 0301 	and.w	r3, r3, #1
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f000 8087 	beq.w	800e2b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e1a4:	4b92      	ldr	r3, [pc, #584]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	f003 030c 	and.w	r3, r3, #12
 800e1ac:	2b04      	cmp	r3, #4
 800e1ae:	d00c      	beq.n	800e1ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800e1b0:	4b8f      	ldr	r3, [pc, #572]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	f003 030c 	and.w	r3, r3, #12
 800e1b8:	2b08      	cmp	r3, #8
 800e1ba:	d112      	bne.n	800e1e2 <HAL_RCC_OscConfig+0x5e>
 800e1bc:	4b8c      	ldr	r3, [pc, #560]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e1c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1c8:	d10b      	bne.n	800e1e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e1ca:	4b89      	ldr	r3, [pc, #548]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d06c      	beq.n	800e2b0 <HAL_RCC_OscConfig+0x12c>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d168      	bne.n	800e2b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	e24c      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1ea:	d106      	bne.n	800e1fa <HAL_RCC_OscConfig+0x76>
 800e1ec:	4b80      	ldr	r3, [pc, #512]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4a7f      	ldr	r2, [pc, #508]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e1f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e1f6:	6013      	str	r3, [r2, #0]
 800e1f8:	e02e      	b.n	800e258 <HAL_RCC_OscConfig+0xd4>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10c      	bne.n	800e21c <HAL_RCC_OscConfig+0x98>
 800e202:	4b7b      	ldr	r3, [pc, #492]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4a7a      	ldr	r2, [pc, #488]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e20c:	6013      	str	r3, [r2, #0]
 800e20e:	4b78      	ldr	r3, [pc, #480]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a77      	ldr	r2, [pc, #476]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e214:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e218:	6013      	str	r3, [r2, #0]
 800e21a:	e01d      	b.n	800e258 <HAL_RCC_OscConfig+0xd4>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e224:	d10c      	bne.n	800e240 <HAL_RCC_OscConfig+0xbc>
 800e226:	4b72      	ldr	r3, [pc, #456]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a71      	ldr	r2, [pc, #452]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e22c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e230:	6013      	str	r3, [r2, #0]
 800e232:	4b6f      	ldr	r3, [pc, #444]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a6e      	ldr	r2, [pc, #440]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e23c:	6013      	str	r3, [r2, #0]
 800e23e:	e00b      	b.n	800e258 <HAL_RCC_OscConfig+0xd4>
 800e240:	4b6b      	ldr	r3, [pc, #428]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a6a      	ldr	r2, [pc, #424]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	4b68      	ldr	r3, [pc, #416]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a67      	ldr	r2, [pc, #412]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d013      	beq.n	800e288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e260:	f7fe f95e 	bl	800c520 <HAL_GetTick>
 800e264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e266:	e008      	b.n	800e27a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e268:	f7fe f95a 	bl	800c520 <HAL_GetTick>
 800e26c:	4602      	mov	r2, r0
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	2b64      	cmp	r3, #100	@ 0x64
 800e274:	d901      	bls.n	800e27a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800e276:	2303      	movs	r3, #3
 800e278:	e200      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e27a:	4b5d      	ldr	r3, [pc, #372]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e282:	2b00      	cmp	r3, #0
 800e284:	d0f0      	beq.n	800e268 <HAL_RCC_OscConfig+0xe4>
 800e286:	e014      	b.n	800e2b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e288:	f7fe f94a 	bl	800c520 <HAL_GetTick>
 800e28c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e28e:	e008      	b.n	800e2a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e290:	f7fe f946 	bl	800c520 <HAL_GetTick>
 800e294:	4602      	mov	r2, r0
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	1ad3      	subs	r3, r2, r3
 800e29a:	2b64      	cmp	r3, #100	@ 0x64
 800e29c:	d901      	bls.n	800e2a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800e29e:	2303      	movs	r3, #3
 800e2a0:	e1ec      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e2a2:	4b53      	ldr	r3, [pc, #332]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d1f0      	bne.n	800e290 <HAL_RCC_OscConfig+0x10c>
 800e2ae:	e000      	b.n	800e2b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e2b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f003 0302 	and.w	r3, r3, #2
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d063      	beq.n	800e386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e2be:	4b4c      	ldr	r3, [pc, #304]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	f003 030c 	and.w	r3, r3, #12
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00b      	beq.n	800e2e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800e2ca:	4b49      	ldr	r3, [pc, #292]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	f003 030c 	and.w	r3, r3, #12
 800e2d2:	2b08      	cmp	r3, #8
 800e2d4:	d11c      	bne.n	800e310 <HAL_RCC_OscConfig+0x18c>
 800e2d6:	4b46      	ldr	r3, [pc, #280]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d116      	bne.n	800e310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e2e2:	4b43      	ldr	r3, [pc, #268]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f003 0302 	and.w	r3, r3, #2
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d005      	beq.n	800e2fa <HAL_RCC_OscConfig+0x176>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	691b      	ldr	r3, [r3, #16]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d001      	beq.n	800e2fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e1c0      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e2fa:	4b3d      	ldr	r3, [pc, #244]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	00db      	lsls	r3, r3, #3
 800e308:	4939      	ldr	r1, [pc, #228]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e30a:	4313      	orrs	r3, r2
 800e30c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e30e:	e03a      	b.n	800e386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d020      	beq.n	800e35a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e318:	4b36      	ldr	r3, [pc, #216]	@ (800e3f4 <HAL_RCC_OscConfig+0x270>)
 800e31a:	2201      	movs	r2, #1
 800e31c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e31e:	f7fe f8ff 	bl	800c520 <HAL_GetTick>
 800e322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e324:	e008      	b.n	800e338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e326:	f7fe f8fb 	bl	800c520 <HAL_GetTick>
 800e32a:	4602      	mov	r2, r0
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	2b02      	cmp	r3, #2
 800e332:	d901      	bls.n	800e338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800e334:	2303      	movs	r3, #3
 800e336:	e1a1      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e338:	4b2d      	ldr	r3, [pc, #180]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f003 0302 	and.w	r3, r3, #2
 800e340:	2b00      	cmp	r3, #0
 800e342:	d0f0      	beq.n	800e326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e344:	4b2a      	ldr	r3, [pc, #168]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	695b      	ldr	r3, [r3, #20]
 800e350:	00db      	lsls	r3, r3, #3
 800e352:	4927      	ldr	r1, [pc, #156]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e354:	4313      	orrs	r3, r2
 800e356:	600b      	str	r3, [r1, #0]
 800e358:	e015      	b.n	800e386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e35a:	4b26      	ldr	r3, [pc, #152]	@ (800e3f4 <HAL_RCC_OscConfig+0x270>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e360:	f7fe f8de 	bl	800c520 <HAL_GetTick>
 800e364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e366:	e008      	b.n	800e37a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e368:	f7fe f8da 	bl	800c520 <HAL_GetTick>
 800e36c:	4602      	mov	r2, r0
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	2b02      	cmp	r3, #2
 800e374:	d901      	bls.n	800e37a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800e376:	2303      	movs	r3, #3
 800e378:	e180      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e37a:	4b1d      	ldr	r3, [pc, #116]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f003 0302 	and.w	r3, r3, #2
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1f0      	bne.n	800e368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f003 0308 	and.w	r3, r3, #8
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d03a      	beq.n	800e408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	699b      	ldr	r3, [r3, #24]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d019      	beq.n	800e3ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e39a:	4b17      	ldr	r3, [pc, #92]	@ (800e3f8 <HAL_RCC_OscConfig+0x274>)
 800e39c:	2201      	movs	r2, #1
 800e39e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e3a0:	f7fe f8be 	bl	800c520 <HAL_GetTick>
 800e3a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e3a6:	e008      	b.n	800e3ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e3a8:	f7fe f8ba 	bl	800c520 <HAL_GetTick>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	1ad3      	subs	r3, r2, r3
 800e3b2:	2b02      	cmp	r3, #2
 800e3b4:	d901      	bls.n	800e3ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800e3b6:	2303      	movs	r3, #3
 800e3b8:	e160      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e3ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e3f0 <HAL_RCC_OscConfig+0x26c>)
 800e3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3be:	f003 0302 	and.w	r3, r3, #2
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d0f0      	beq.n	800e3a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800e3c6:	2001      	movs	r0, #1
 800e3c8:	f000 fafe 	bl	800e9c8 <RCC_Delay>
 800e3cc:	e01c      	b.n	800e408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e3ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e3f8 <HAL_RCC_OscConfig+0x274>)
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e3d4:	f7fe f8a4 	bl	800c520 <HAL_GetTick>
 800e3d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e3da:	e00f      	b.n	800e3fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e3dc:	f7fe f8a0 	bl	800c520 <HAL_GetTick>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	1ad3      	subs	r3, r2, r3
 800e3e6:	2b02      	cmp	r3, #2
 800e3e8:	d908      	bls.n	800e3fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800e3ea:	2303      	movs	r3, #3
 800e3ec:	e146      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
 800e3ee:	bf00      	nop
 800e3f0:	40021000 	.word	0x40021000
 800e3f4:	42420000 	.word	0x42420000
 800e3f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e3fc:	4b92      	ldr	r3, [pc, #584]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e400:	f003 0302 	and.w	r3, r3, #2
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1e9      	bne.n	800e3dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f003 0304 	and.w	r3, r3, #4
 800e410:	2b00      	cmp	r3, #0
 800e412:	f000 80a6 	beq.w	800e562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e416:	2300      	movs	r3, #0
 800e418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e41a:	4b8b      	ldr	r3, [pc, #556]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e41c:	69db      	ldr	r3, [r3, #28]
 800e41e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e422:	2b00      	cmp	r3, #0
 800e424:	d10d      	bne.n	800e442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e426:	4b88      	ldr	r3, [pc, #544]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e428:	69db      	ldr	r3, [r3, #28]
 800e42a:	4a87      	ldr	r2, [pc, #540]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e42c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e430:	61d3      	str	r3, [r2, #28]
 800e432:	4b85      	ldr	r3, [pc, #532]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e434:	69db      	ldr	r3, [r3, #28]
 800e436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e43a:	60bb      	str	r3, [r7, #8]
 800e43c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e43e:	2301      	movs	r3, #1
 800e440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e442:	4b82      	ldr	r3, [pc, #520]	@ (800e64c <HAL_RCC_OscConfig+0x4c8>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d118      	bne.n	800e480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e44e:	4b7f      	ldr	r3, [pc, #508]	@ (800e64c <HAL_RCC_OscConfig+0x4c8>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4a7e      	ldr	r2, [pc, #504]	@ (800e64c <HAL_RCC_OscConfig+0x4c8>)
 800e454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e45a:	f7fe f861 	bl	800c520 <HAL_GetTick>
 800e45e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e460:	e008      	b.n	800e474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e462:	f7fe f85d 	bl	800c520 <HAL_GetTick>
 800e466:	4602      	mov	r2, r0
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	1ad3      	subs	r3, r2, r3
 800e46c:	2b64      	cmp	r3, #100	@ 0x64
 800e46e:	d901      	bls.n	800e474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800e470:	2303      	movs	r3, #3
 800e472:	e103      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e474:	4b75      	ldr	r3, [pc, #468]	@ (800e64c <HAL_RCC_OscConfig+0x4c8>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d0f0      	beq.n	800e462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d106      	bne.n	800e496 <HAL_RCC_OscConfig+0x312>
 800e488:	4b6f      	ldr	r3, [pc, #444]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e48a:	6a1b      	ldr	r3, [r3, #32]
 800e48c:	4a6e      	ldr	r2, [pc, #440]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e48e:	f043 0301 	orr.w	r3, r3, #1
 800e492:	6213      	str	r3, [r2, #32]
 800e494:	e02d      	b.n	800e4f2 <HAL_RCC_OscConfig+0x36e>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	68db      	ldr	r3, [r3, #12]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d10c      	bne.n	800e4b8 <HAL_RCC_OscConfig+0x334>
 800e49e:	4b6a      	ldr	r3, [pc, #424]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4a0:	6a1b      	ldr	r3, [r3, #32]
 800e4a2:	4a69      	ldr	r2, [pc, #420]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4a4:	f023 0301 	bic.w	r3, r3, #1
 800e4a8:	6213      	str	r3, [r2, #32]
 800e4aa:	4b67      	ldr	r3, [pc, #412]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4ac:	6a1b      	ldr	r3, [r3, #32]
 800e4ae:	4a66      	ldr	r2, [pc, #408]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4b0:	f023 0304 	bic.w	r3, r3, #4
 800e4b4:	6213      	str	r3, [r2, #32]
 800e4b6:	e01c      	b.n	800e4f2 <HAL_RCC_OscConfig+0x36e>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	2b05      	cmp	r3, #5
 800e4be:	d10c      	bne.n	800e4da <HAL_RCC_OscConfig+0x356>
 800e4c0:	4b61      	ldr	r3, [pc, #388]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4c2:	6a1b      	ldr	r3, [r3, #32]
 800e4c4:	4a60      	ldr	r2, [pc, #384]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4c6:	f043 0304 	orr.w	r3, r3, #4
 800e4ca:	6213      	str	r3, [r2, #32]
 800e4cc:	4b5e      	ldr	r3, [pc, #376]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4ce:	6a1b      	ldr	r3, [r3, #32]
 800e4d0:	4a5d      	ldr	r2, [pc, #372]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4d2:	f043 0301 	orr.w	r3, r3, #1
 800e4d6:	6213      	str	r3, [r2, #32]
 800e4d8:	e00b      	b.n	800e4f2 <HAL_RCC_OscConfig+0x36e>
 800e4da:	4b5b      	ldr	r3, [pc, #364]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4dc:	6a1b      	ldr	r3, [r3, #32]
 800e4de:	4a5a      	ldr	r2, [pc, #360]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4e0:	f023 0301 	bic.w	r3, r3, #1
 800e4e4:	6213      	str	r3, [r2, #32]
 800e4e6:	4b58      	ldr	r3, [pc, #352]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4e8:	6a1b      	ldr	r3, [r3, #32]
 800e4ea:	4a57      	ldr	r2, [pc, #348]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e4ec:	f023 0304 	bic.w	r3, r3, #4
 800e4f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d015      	beq.n	800e526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e4fa:	f7fe f811 	bl	800c520 <HAL_GetTick>
 800e4fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e500:	e00a      	b.n	800e518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e502:	f7fe f80d 	bl	800c520 <HAL_GetTick>
 800e506:	4602      	mov	r2, r0
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	1ad3      	subs	r3, r2, r3
 800e50c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e510:	4293      	cmp	r3, r2
 800e512:	d901      	bls.n	800e518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800e514:	2303      	movs	r3, #3
 800e516:	e0b1      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e518:	4b4b      	ldr	r3, [pc, #300]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e51a:	6a1b      	ldr	r3, [r3, #32]
 800e51c:	f003 0302 	and.w	r3, r3, #2
 800e520:	2b00      	cmp	r3, #0
 800e522:	d0ee      	beq.n	800e502 <HAL_RCC_OscConfig+0x37e>
 800e524:	e014      	b.n	800e550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e526:	f7fd fffb 	bl	800c520 <HAL_GetTick>
 800e52a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e52c:	e00a      	b.n	800e544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e52e:	f7fd fff7 	bl	800c520 <HAL_GetTick>
 800e532:	4602      	mov	r2, r0
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	1ad3      	subs	r3, r2, r3
 800e538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d901      	bls.n	800e544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800e540:	2303      	movs	r3, #3
 800e542:	e09b      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e544:	4b40      	ldr	r3, [pc, #256]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e546:	6a1b      	ldr	r3, [r3, #32]
 800e548:	f003 0302 	and.w	r3, r3, #2
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1ee      	bne.n	800e52e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800e550:	7dfb      	ldrb	r3, [r7, #23]
 800e552:	2b01      	cmp	r3, #1
 800e554:	d105      	bne.n	800e562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e556:	4b3c      	ldr	r3, [pc, #240]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e558:	69db      	ldr	r3, [r3, #28]
 800e55a:	4a3b      	ldr	r2, [pc, #236]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e55c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	69db      	ldr	r3, [r3, #28]
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 8087 	beq.w	800e67a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e56c:	4b36      	ldr	r3, [pc, #216]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	f003 030c 	and.w	r3, r3, #12
 800e574:	2b08      	cmp	r3, #8
 800e576:	d061      	beq.n	800e63c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	69db      	ldr	r3, [r3, #28]
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d146      	bne.n	800e60e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e580:	4b33      	ldr	r3, [pc, #204]	@ (800e650 <HAL_RCC_OscConfig+0x4cc>)
 800e582:	2200      	movs	r2, #0
 800e584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e586:	f7fd ffcb 	bl	800c520 <HAL_GetTick>
 800e58a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e58c:	e008      	b.n	800e5a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e58e:	f7fd ffc7 	bl	800c520 <HAL_GetTick>
 800e592:	4602      	mov	r2, r0
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	1ad3      	subs	r3, r2, r3
 800e598:	2b02      	cmp	r3, #2
 800e59a:	d901      	bls.n	800e5a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800e59c:	2303      	movs	r3, #3
 800e59e:	e06d      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e5a0:	4b29      	ldr	r3, [pc, #164]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1f0      	bne.n	800e58e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6a1b      	ldr	r3, [r3, #32]
 800e5b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5b4:	d108      	bne.n	800e5c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800e5b6:	4b24      	ldr	r3, [pc, #144]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	689b      	ldr	r3, [r3, #8]
 800e5c2:	4921      	ldr	r1, [pc, #132]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e5c8:	4b1f      	ldr	r3, [pc, #124]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a19      	ldr	r1, [r3, #32]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5d8:	430b      	orrs	r3, r1
 800e5da:	491b      	ldr	r1, [pc, #108]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e5e0:	4b1b      	ldr	r3, [pc, #108]	@ (800e650 <HAL_RCC_OscConfig+0x4cc>)
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e5e6:	f7fd ff9b 	bl	800c520 <HAL_GetTick>
 800e5ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800e5ec:	e008      	b.n	800e600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e5ee:	f7fd ff97 	bl	800c520 <HAL_GetTick>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	2b02      	cmp	r3, #2
 800e5fa:	d901      	bls.n	800e600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800e5fc:	2303      	movs	r3, #3
 800e5fe:	e03d      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800e600:	4b11      	ldr	r3, [pc, #68]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d0f0      	beq.n	800e5ee <HAL_RCC_OscConfig+0x46a>
 800e60c:	e035      	b.n	800e67a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e60e:	4b10      	ldr	r3, [pc, #64]	@ (800e650 <HAL_RCC_OscConfig+0x4cc>)
 800e610:	2200      	movs	r2, #0
 800e612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e614:	f7fd ff84 	bl	800c520 <HAL_GetTick>
 800e618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e61a:	e008      	b.n	800e62e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e61c:	f7fd ff80 	bl	800c520 <HAL_GetTick>
 800e620:	4602      	mov	r2, r0
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	2b02      	cmp	r3, #2
 800e628:	d901      	bls.n	800e62e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800e62a:	2303      	movs	r3, #3
 800e62c:	e026      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e62e:	4b06      	ldr	r3, [pc, #24]	@ (800e648 <HAL_RCC_OscConfig+0x4c4>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e636:	2b00      	cmp	r3, #0
 800e638:	d1f0      	bne.n	800e61c <HAL_RCC_OscConfig+0x498>
 800e63a:	e01e      	b.n	800e67a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	69db      	ldr	r3, [r3, #28]
 800e640:	2b01      	cmp	r3, #1
 800e642:	d107      	bne.n	800e654 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800e644:	2301      	movs	r3, #1
 800e646:	e019      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
 800e648:	40021000 	.word	0x40021000
 800e64c:	40007000 	.word	0x40007000
 800e650:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800e654:	4b0b      	ldr	r3, [pc, #44]	@ (800e684 <HAL_RCC_OscConfig+0x500>)
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a1b      	ldr	r3, [r3, #32]
 800e664:	429a      	cmp	r2, r3
 800e666:	d106      	bne.n	800e676 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e672:	429a      	cmp	r2, r3
 800e674:	d001      	beq.n	800e67a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800e676:	2301      	movs	r3, #1
 800e678:	e000      	b.n	800e67c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3718      	adds	r7, #24
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	40021000 	.word	0x40021000

0800e688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d101      	bne.n	800e69c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e698:	2301      	movs	r3, #1
 800e69a:	e0d0      	b.n	800e83e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e69c:	4b6a      	ldr	r3, [pc, #424]	@ (800e848 <HAL_RCC_ClockConfig+0x1c0>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f003 0307 	and.w	r3, r3, #7
 800e6a4:	683a      	ldr	r2, [r7, #0]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d910      	bls.n	800e6cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e6aa:	4b67      	ldr	r3, [pc, #412]	@ (800e848 <HAL_RCC_ClockConfig+0x1c0>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f023 0207 	bic.w	r2, r3, #7
 800e6b2:	4965      	ldr	r1, [pc, #404]	@ (800e848 <HAL_RCC_ClockConfig+0x1c0>)
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6ba:	4b63      	ldr	r3, [pc, #396]	@ (800e848 <HAL_RCC_ClockConfig+0x1c0>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f003 0307 	and.w	r3, r3, #7
 800e6c2:	683a      	ldr	r2, [r7, #0]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d001      	beq.n	800e6cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	e0b8      	b.n	800e83e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f003 0302 	and.w	r3, r3, #2
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d020      	beq.n	800e71a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f003 0304 	and.w	r3, r3, #4
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d005      	beq.n	800e6f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e6e4:	4b59      	ldr	r3, [pc, #356]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	4a58      	ldr	r2, [pc, #352]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e6ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800e6ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f003 0308 	and.w	r3, r3, #8
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d005      	beq.n	800e708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e6fc:	4b53      	ldr	r3, [pc, #332]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	4a52      	ldr	r2, [pc, #328]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e702:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800e706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e708:	4b50      	ldr	r3, [pc, #320]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	689b      	ldr	r3, [r3, #8]
 800e714:	494d      	ldr	r1, [pc, #308]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e716:	4313      	orrs	r3, r2
 800e718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f003 0301 	and.w	r3, r3, #1
 800e722:	2b00      	cmp	r3, #0
 800e724:	d040      	beq.n	800e7a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d107      	bne.n	800e73e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e72e:	4b47      	ldr	r3, [pc, #284]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e736:	2b00      	cmp	r3, #0
 800e738:	d115      	bne.n	800e766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e73a:	2301      	movs	r3, #1
 800e73c:	e07f      	b.n	800e83e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	2b02      	cmp	r3, #2
 800e744:	d107      	bne.n	800e756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e746:	4b41      	ldr	r3, [pc, #260]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d109      	bne.n	800e766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	e073      	b.n	800e83e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e756:	4b3d      	ldr	r3, [pc, #244]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f003 0302 	and.w	r3, r3, #2
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d101      	bne.n	800e766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e762:	2301      	movs	r3, #1
 800e764:	e06b      	b.n	800e83e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e766:	4b39      	ldr	r3, [pc, #228]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	f023 0203 	bic.w	r2, r3, #3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	4936      	ldr	r1, [pc, #216]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e774:	4313      	orrs	r3, r2
 800e776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e778:	f7fd fed2 	bl	800c520 <HAL_GetTick>
 800e77c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e77e:	e00a      	b.n	800e796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e780:	f7fd fece 	bl	800c520 <HAL_GetTick>
 800e784:	4602      	mov	r2, r0
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e78e:	4293      	cmp	r3, r2
 800e790:	d901      	bls.n	800e796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e792:	2303      	movs	r3, #3
 800e794:	e053      	b.n	800e83e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e796:	4b2d      	ldr	r3, [pc, #180]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	f003 020c 	and.w	r2, r3, #12
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d1eb      	bne.n	800e780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e7a8:	4b27      	ldr	r3, [pc, #156]	@ (800e848 <HAL_RCC_ClockConfig+0x1c0>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f003 0307 	and.w	r3, r3, #7
 800e7b0:	683a      	ldr	r2, [r7, #0]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d210      	bcs.n	800e7d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e7b6:	4b24      	ldr	r3, [pc, #144]	@ (800e848 <HAL_RCC_ClockConfig+0x1c0>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f023 0207 	bic.w	r2, r3, #7
 800e7be:	4922      	ldr	r1, [pc, #136]	@ (800e848 <HAL_RCC_ClockConfig+0x1c0>)
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e7c6:	4b20      	ldr	r3, [pc, #128]	@ (800e848 <HAL_RCC_ClockConfig+0x1c0>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f003 0307 	and.w	r3, r3, #7
 800e7ce:	683a      	ldr	r2, [r7, #0]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d001      	beq.n	800e7d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	e032      	b.n	800e83e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f003 0304 	and.w	r3, r3, #4
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d008      	beq.n	800e7f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e7e4:	4b19      	ldr	r3, [pc, #100]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	4916      	ldr	r1, [pc, #88]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f003 0308 	and.w	r3, r3, #8
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d009      	beq.n	800e816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800e802:	4b12      	ldr	r3, [pc, #72]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	691b      	ldr	r3, [r3, #16]
 800e80e:	00db      	lsls	r3, r3, #3
 800e810:	490e      	ldr	r1, [pc, #56]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e812:	4313      	orrs	r3, r2
 800e814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e816:	f000 f821 	bl	800e85c <HAL_RCC_GetSysClockFreq>
 800e81a:	4602      	mov	r2, r0
 800e81c:	4b0b      	ldr	r3, [pc, #44]	@ (800e84c <HAL_RCC_ClockConfig+0x1c4>)
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	091b      	lsrs	r3, r3, #4
 800e822:	f003 030f 	and.w	r3, r3, #15
 800e826:	490a      	ldr	r1, [pc, #40]	@ (800e850 <HAL_RCC_ClockConfig+0x1c8>)
 800e828:	5ccb      	ldrb	r3, [r1, r3]
 800e82a:	fa22 f303 	lsr.w	r3, r2, r3
 800e82e:	4a09      	ldr	r2, [pc, #36]	@ (800e854 <HAL_RCC_ClockConfig+0x1cc>)
 800e830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800e832:	4b09      	ldr	r3, [pc, #36]	@ (800e858 <HAL_RCC_ClockConfig+0x1d0>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4618      	mov	r0, r3
 800e838:	f7fd fb18 	bl	800be6c <HAL_InitTick>

  return HAL_OK;
 800e83c:	2300      	movs	r3, #0
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	40022000 	.word	0x40022000
 800e84c:	40021000 	.word	0x40021000
 800e850:	08013dc8 	.word	0x08013dc8
 800e854:	2000001c 	.word	0x2000001c
 800e858:	20000020 	.word	0x20000020

0800e85c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b087      	sub	sp, #28
 800e860:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800e862:	2300      	movs	r3, #0
 800e864:	60fb      	str	r3, [r7, #12]
 800e866:	2300      	movs	r3, #0
 800e868:	60bb      	str	r3, [r7, #8]
 800e86a:	2300      	movs	r3, #0
 800e86c:	617b      	str	r3, [r7, #20]
 800e86e:	2300      	movs	r3, #0
 800e870:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800e872:	2300      	movs	r3, #0
 800e874:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800e876:	4b1e      	ldr	r3, [pc, #120]	@ (800e8f0 <HAL_RCC_GetSysClockFreq+0x94>)
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f003 030c 	and.w	r3, r3, #12
 800e882:	2b04      	cmp	r3, #4
 800e884:	d002      	beq.n	800e88c <HAL_RCC_GetSysClockFreq+0x30>
 800e886:	2b08      	cmp	r3, #8
 800e888:	d003      	beq.n	800e892 <HAL_RCC_GetSysClockFreq+0x36>
 800e88a:	e027      	b.n	800e8dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800e88c:	4b19      	ldr	r3, [pc, #100]	@ (800e8f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800e88e:	613b      	str	r3, [r7, #16]
      break;
 800e890:	e027      	b.n	800e8e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	0c9b      	lsrs	r3, r3, #18
 800e896:	f003 030f 	and.w	r3, r3, #15
 800e89a:	4a17      	ldr	r2, [pc, #92]	@ (800e8f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800e89c:	5cd3      	ldrb	r3, [r2, r3]
 800e89e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d010      	beq.n	800e8cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800e8aa:	4b11      	ldr	r3, [pc, #68]	@ (800e8f0 <HAL_RCC_GetSysClockFreq+0x94>)
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	0c5b      	lsrs	r3, r3, #17
 800e8b0:	f003 0301 	and.w	r3, r3, #1
 800e8b4:	4a11      	ldr	r2, [pc, #68]	@ (800e8fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800e8b6:	5cd3      	ldrb	r3, [r2, r3]
 800e8b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	4a0d      	ldr	r2, [pc, #52]	@ (800e8f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800e8be:	fb03 f202 	mul.w	r2, r3, r2
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8c8:	617b      	str	r3, [r7, #20]
 800e8ca:	e004      	b.n	800e8d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4a0c      	ldr	r2, [pc, #48]	@ (800e900 <HAL_RCC_GetSysClockFreq+0xa4>)
 800e8d0:	fb02 f303 	mul.w	r3, r2, r3
 800e8d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	613b      	str	r3, [r7, #16]
      break;
 800e8da:	e002      	b.n	800e8e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800e8dc:	4b05      	ldr	r3, [pc, #20]	@ (800e8f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800e8de:	613b      	str	r3, [r7, #16]
      break;
 800e8e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e8e2:	693b      	ldr	r3, [r7, #16]
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	371c      	adds	r7, #28
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bc80      	pop	{r7}
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	40021000 	.word	0x40021000
 800e8f4:	007a1200 	.word	0x007a1200
 800e8f8:	08013de0 	.word	0x08013de0
 800e8fc:	08013df0 	.word	0x08013df0
 800e900:	003d0900 	.word	0x003d0900

0800e904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e904:	b480      	push	{r7}
 800e906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e908:	4b02      	ldr	r3, [pc, #8]	@ (800e914 <HAL_RCC_GetHCLKFreq+0x10>)
 800e90a:	681b      	ldr	r3, [r3, #0]
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	46bd      	mov	sp, r7
 800e910:	bc80      	pop	{r7}
 800e912:	4770      	bx	lr
 800e914:	2000001c 	.word	0x2000001c

0800e918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e91c:	f7ff fff2 	bl	800e904 <HAL_RCC_GetHCLKFreq>
 800e920:	4602      	mov	r2, r0
 800e922:	4b05      	ldr	r3, [pc, #20]	@ (800e938 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	0a1b      	lsrs	r3, r3, #8
 800e928:	f003 0307 	and.w	r3, r3, #7
 800e92c:	4903      	ldr	r1, [pc, #12]	@ (800e93c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e92e:	5ccb      	ldrb	r3, [r1, r3]
 800e930:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e934:	4618      	mov	r0, r3
 800e936:	bd80      	pop	{r7, pc}
 800e938:	40021000 	.word	0x40021000
 800e93c:	08013dd8 	.word	0x08013dd8

0800e940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e944:	f7ff ffde 	bl	800e904 <HAL_RCC_GetHCLKFreq>
 800e948:	4602      	mov	r2, r0
 800e94a:	4b05      	ldr	r3, [pc, #20]	@ (800e960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	0adb      	lsrs	r3, r3, #11
 800e950:	f003 0307 	and.w	r3, r3, #7
 800e954:	4903      	ldr	r1, [pc, #12]	@ (800e964 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e956:	5ccb      	ldrb	r3, [r1, r3]
 800e958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	40021000 	.word	0x40021000
 800e964:	08013dd8 	.word	0x08013dd8

0800e968 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	220f      	movs	r2, #15
 800e976:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e978:	4b11      	ldr	r3, [pc, #68]	@ (800e9c0 <HAL_RCC_GetClockConfig+0x58>)
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	f003 0203 	and.w	r2, r3, #3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e984:	4b0e      	ldr	r3, [pc, #56]	@ (800e9c0 <HAL_RCC_GetClockConfig+0x58>)
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e990:	4b0b      	ldr	r3, [pc, #44]	@ (800e9c0 <HAL_RCC_GetClockConfig+0x58>)
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e99c:	4b08      	ldr	r3, [pc, #32]	@ (800e9c0 <HAL_RCC_GetClockConfig+0x58>)
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	08db      	lsrs	r3, r3, #3
 800e9a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e9aa:	4b06      	ldr	r3, [pc, #24]	@ (800e9c4 <HAL_RCC_GetClockConfig+0x5c>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f003 0207 	and.w	r2, r3, #7
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800e9b6:	bf00      	nop
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bc80      	pop	{r7}
 800e9be:	4770      	bx	lr
 800e9c0:	40021000 	.word	0x40021000
 800e9c4:	40022000 	.word	0x40022000

0800e9c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800e9d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e9fc <RCC_Delay+0x34>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a0a      	ldr	r2, [pc, #40]	@ (800ea00 <RCC_Delay+0x38>)
 800e9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800e9da:	0a5b      	lsrs	r3, r3, #9
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	fb02 f303 	mul.w	r3, r2, r3
 800e9e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800e9e4:	bf00      	nop
  }
  while (Delay --);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	1e5a      	subs	r2, r3, #1
 800e9ea:	60fa      	str	r2, [r7, #12]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1f9      	bne.n	800e9e4 <RCC_Delay+0x1c>
}
 800e9f0:	bf00      	nop
 800e9f2:	bf00      	nop
 800e9f4:	3714      	adds	r7, #20
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bc80      	pop	{r7}
 800e9fa:	4770      	bx	lr
 800e9fc:	2000001c 	.word	0x2000001c
 800ea00:	10624dd3 	.word	0x10624dd3

0800ea04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d101      	bne.n	800ea16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ea12:	2301      	movs	r3, #1
 800ea14:	e041      	b.n	800ea9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d106      	bne.n	800ea30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 f839 	bl	800eaa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2202      	movs	r2, #2
 800ea34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	3304      	adds	r3, #4
 800ea40:	4619      	mov	r1, r3
 800ea42:	4610      	mov	r0, r2
 800ea44:	f000 f9c2 	bl	800edcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2201      	movs	r2, #1
 800ea54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2201      	movs	r2, #1
 800ea64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2201      	movs	r2, #1
 800ea74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2201      	movs	r2, #1
 800ea84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2201      	movs	r2, #1
 800ea94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ea98:	2300      	movs	r3, #0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b083      	sub	sp, #12
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800eaaa:	bf00      	nop
 800eaac:	370c      	adds	r7, #12
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bc80      	pop	{r7}
 800eab2:	4770      	bx	lr

0800eab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b085      	sub	sp, #20
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d001      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eac8:	2301      	movs	r3, #1
 800eaca:	e044      	b.n	800eb56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2202      	movs	r2, #2
 800ead0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	68da      	ldr	r2, [r3, #12]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f042 0201 	orr.w	r2, r2, #1
 800eae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4a1d      	ldr	r2, [pc, #116]	@ (800eb60 <HAL_TIM_Base_Start_IT+0xac>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d018      	beq.n	800eb20 <HAL_TIM_Base_Start_IT+0x6c>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	4a1c      	ldr	r2, [pc, #112]	@ (800eb64 <HAL_TIM_Base_Start_IT+0xb0>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d013      	beq.n	800eb20 <HAL_TIM_Base_Start_IT+0x6c>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb00:	d00e      	beq.n	800eb20 <HAL_TIM_Base_Start_IT+0x6c>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4a18      	ldr	r2, [pc, #96]	@ (800eb68 <HAL_TIM_Base_Start_IT+0xb4>)
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d009      	beq.n	800eb20 <HAL_TIM_Base_Start_IT+0x6c>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4a16      	ldr	r2, [pc, #88]	@ (800eb6c <HAL_TIM_Base_Start_IT+0xb8>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d004      	beq.n	800eb20 <HAL_TIM_Base_Start_IT+0x6c>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4a15      	ldr	r2, [pc, #84]	@ (800eb70 <HAL_TIM_Base_Start_IT+0xbc>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d111      	bne.n	800eb44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	689b      	ldr	r3, [r3, #8]
 800eb26:	f003 0307 	and.w	r3, r3, #7
 800eb2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2b06      	cmp	r3, #6
 800eb30:	d010      	beq.n	800eb54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f042 0201 	orr.w	r2, r2, #1
 800eb40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb42:	e007      	b.n	800eb54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f042 0201 	orr.w	r2, r2, #1
 800eb52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3714      	adds	r7, #20
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bc80      	pop	{r7}
 800eb5e:	4770      	bx	lr
 800eb60:	40012c00 	.word	0x40012c00
 800eb64:	40013400 	.word	0x40013400
 800eb68:	40000400 	.word	0x40000400
 800eb6c:	40000800 	.word	0x40000800
 800eb70:	40000c00 	.word	0x40000c00

0800eb74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	691b      	ldr	r3, [r3, #16]
 800eb82:	f003 0302 	and.w	r3, r3, #2
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	d122      	bne.n	800ebd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	f003 0302 	and.w	r3, r3, #2
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d11b      	bne.n	800ebd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f06f 0202 	mvn.w	r2, #2
 800eba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2201      	movs	r2, #1
 800eba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	699b      	ldr	r3, [r3, #24]
 800ebae:	f003 0303 	and.w	r3, r3, #3
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d003      	beq.n	800ebbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 f8ed 	bl	800ed96 <HAL_TIM_IC_CaptureCallback>
 800ebbc:	e005      	b.n	800ebca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 f8e0 	bl	800ed84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 f8ef 	bl	800eda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	691b      	ldr	r3, [r3, #16]
 800ebd6:	f003 0304 	and.w	r3, r3, #4
 800ebda:	2b04      	cmp	r3, #4
 800ebdc:	d122      	bne.n	800ec24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	68db      	ldr	r3, [r3, #12]
 800ebe4:	f003 0304 	and.w	r3, r3, #4
 800ebe8:	2b04      	cmp	r3, #4
 800ebea:	d11b      	bne.n	800ec24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f06f 0204 	mvn.w	r2, #4
 800ebf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2202      	movs	r2, #2
 800ebfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	699b      	ldr	r3, [r3, #24]
 800ec02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d003      	beq.n	800ec12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f000 f8c3 	bl	800ed96 <HAL_TIM_IC_CaptureCallback>
 800ec10:	e005      	b.n	800ec1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 f8b6 	bl	800ed84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f000 f8c5 	bl	800eda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2200      	movs	r2, #0
 800ec22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	f003 0308 	and.w	r3, r3, #8
 800ec2e:	2b08      	cmp	r3, #8
 800ec30:	d122      	bne.n	800ec78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	f003 0308 	and.w	r3, r3, #8
 800ec3c:	2b08      	cmp	r3, #8
 800ec3e:	d11b      	bne.n	800ec78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f06f 0208 	mvn.w	r2, #8
 800ec48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2204      	movs	r2, #4
 800ec4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	69db      	ldr	r3, [r3, #28]
 800ec56:	f003 0303 	and.w	r3, r3, #3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d003      	beq.n	800ec66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 f899 	bl	800ed96 <HAL_TIM_IC_CaptureCallback>
 800ec64:	e005      	b.n	800ec72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 f88c 	bl	800ed84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 f89b 	bl	800eda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	f003 0310 	and.w	r3, r3, #16
 800ec82:	2b10      	cmp	r3, #16
 800ec84:	d122      	bne.n	800eccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	f003 0310 	and.w	r3, r3, #16
 800ec90:	2b10      	cmp	r3, #16
 800ec92:	d11b      	bne.n	800eccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f06f 0210 	mvn.w	r2, #16
 800ec9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2208      	movs	r2, #8
 800eca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	69db      	ldr	r3, [r3, #28]
 800ecaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d003      	beq.n	800ecba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f86f 	bl	800ed96 <HAL_TIM_IC_CaptureCallback>
 800ecb8:	e005      	b.n	800ecc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 f862 	bl	800ed84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 f871 	bl	800eda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	f003 0301 	and.w	r3, r3, #1
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d10e      	bne.n	800ecf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	68db      	ldr	r3, [r3, #12]
 800ece0:	f003 0301 	and.w	r3, r3, #1
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d107      	bne.n	800ecf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f06f 0201 	mvn.w	r2, #1
 800ecf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f7fd f872 	bl	800bddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	691b      	ldr	r3, [r3, #16]
 800ecfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed02:	2b80      	cmp	r3, #128	@ 0x80
 800ed04:	d10e      	bne.n	800ed24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	68db      	ldr	r3, [r3, #12]
 800ed0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed10:	2b80      	cmp	r3, #128	@ 0x80
 800ed12:	d107      	bne.n	800ed24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ed1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f000 f8d7 	bl	800eed2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed2e:	2b40      	cmp	r3, #64	@ 0x40
 800ed30:	d10e      	bne.n	800ed50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed3c:	2b40      	cmp	r3, #64	@ 0x40
 800ed3e:	d107      	bne.n	800ed50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ed48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f000 f835 	bl	800edba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	691b      	ldr	r3, [r3, #16]
 800ed56:	f003 0320 	and.w	r3, r3, #32
 800ed5a:	2b20      	cmp	r3, #32
 800ed5c:	d10e      	bne.n	800ed7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	68db      	ldr	r3, [r3, #12]
 800ed64:	f003 0320 	and.w	r3, r3, #32
 800ed68:	2b20      	cmp	r3, #32
 800ed6a:	d107      	bne.n	800ed7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f06f 0220 	mvn.w	r2, #32
 800ed74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 f8a2 	bl	800eec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed7c:	bf00      	nop
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b083      	sub	sp, #12
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ed8c:	bf00      	nop
 800ed8e:	370c      	adds	r7, #12
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bc80      	pop	{r7}
 800ed94:	4770      	bx	lr

0800ed96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ed96:	b480      	push	{r7}
 800ed98:	b083      	sub	sp, #12
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ed9e:	bf00      	nop
 800eda0:	370c      	adds	r7, #12
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bc80      	pop	{r7}
 800eda6:	4770      	bx	lr

0800eda8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800edb0:	bf00      	nop
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bc80      	pop	{r7}
 800edb8:	4770      	bx	lr

0800edba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800edba:	b480      	push	{r7}
 800edbc:	b083      	sub	sp, #12
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800edc2:	bf00      	nop
 800edc4:	370c      	adds	r7, #12
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bc80      	pop	{r7}
 800edca:	4770      	bx	lr

0800edcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800edcc:	b480      	push	{r7}
 800edce:	b085      	sub	sp, #20
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	4a33      	ldr	r2, [pc, #204]	@ (800eeac <TIM_Base_SetConfig+0xe0>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d013      	beq.n	800ee0c <TIM_Base_SetConfig+0x40>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	4a32      	ldr	r2, [pc, #200]	@ (800eeb0 <TIM_Base_SetConfig+0xe4>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d00f      	beq.n	800ee0c <TIM_Base_SetConfig+0x40>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edf2:	d00b      	beq.n	800ee0c <TIM_Base_SetConfig+0x40>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	4a2f      	ldr	r2, [pc, #188]	@ (800eeb4 <TIM_Base_SetConfig+0xe8>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d007      	beq.n	800ee0c <TIM_Base_SetConfig+0x40>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4a2e      	ldr	r2, [pc, #184]	@ (800eeb8 <TIM_Base_SetConfig+0xec>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d003      	beq.n	800ee0c <TIM_Base_SetConfig+0x40>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	4a2d      	ldr	r2, [pc, #180]	@ (800eebc <TIM_Base_SetConfig+0xf0>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d108      	bne.n	800ee1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4a22      	ldr	r2, [pc, #136]	@ (800eeac <TIM_Base_SetConfig+0xe0>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d013      	beq.n	800ee4e <TIM_Base_SetConfig+0x82>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4a21      	ldr	r2, [pc, #132]	@ (800eeb0 <TIM_Base_SetConfig+0xe4>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d00f      	beq.n	800ee4e <TIM_Base_SetConfig+0x82>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee34:	d00b      	beq.n	800ee4e <TIM_Base_SetConfig+0x82>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	4a1e      	ldr	r2, [pc, #120]	@ (800eeb4 <TIM_Base_SetConfig+0xe8>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d007      	beq.n	800ee4e <TIM_Base_SetConfig+0x82>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4a1d      	ldr	r2, [pc, #116]	@ (800eeb8 <TIM_Base_SetConfig+0xec>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d003      	beq.n	800ee4e <TIM_Base_SetConfig+0x82>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	4a1c      	ldr	r2, [pc, #112]	@ (800eebc <TIM_Base_SetConfig+0xf0>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d108      	bne.n	800ee60 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ee54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	695b      	ldr	r3, [r3, #20]
 800ee6a:	4313      	orrs	r3, r2
 800ee6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	689a      	ldr	r2, [r3, #8]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	4a09      	ldr	r2, [pc, #36]	@ (800eeac <TIM_Base_SetConfig+0xe0>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d003      	beq.n	800ee94 <TIM_Base_SetConfig+0xc8>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	4a08      	ldr	r2, [pc, #32]	@ (800eeb0 <TIM_Base_SetConfig+0xe4>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d103      	bne.n	800ee9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	691a      	ldr	r2, [r3, #16]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2201      	movs	r2, #1
 800eea0:	615a      	str	r2, [r3, #20]
}
 800eea2:	bf00      	nop
 800eea4:	3714      	adds	r7, #20
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bc80      	pop	{r7}
 800eeaa:	4770      	bx	lr
 800eeac:	40012c00 	.word	0x40012c00
 800eeb0:	40013400 	.word	0x40013400
 800eeb4:	40000400 	.word	0x40000400
 800eeb8:	40000800 	.word	0x40000800
 800eebc:	40000c00 	.word	0x40000c00

0800eec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eec8:	bf00      	nop
 800eeca:	370c      	adds	r7, #12
 800eecc:	46bd      	mov	sp, r7
 800eece:	bc80      	pop	{r7}
 800eed0:	4770      	bx	lr

0800eed2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eed2:	b480      	push	{r7}
 800eed4:	b083      	sub	sp, #12
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eeda:	bf00      	nop
 800eedc:	370c      	adds	r7, #12
 800eede:	46bd      	mov	sp, r7
 800eee0:	bc80      	pop	{r7}
 800eee2:	4770      	bx	lr

0800eee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d101      	bne.n	800eef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eef2:	2301      	movs	r3, #1
 800eef4:	e042      	b.n	800ef7c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d106      	bne.n	800ef10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2200      	movs	r2, #0
 800ef06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f7fd fa06 	bl	800c31c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2224      	movs	r2, #36	@ 0x24
 800ef14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	68da      	ldr	r2, [r3, #12]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ef26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 fb81 	bl	800f630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	691a      	ldr	r2, [r3, #16]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ef3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	695a      	ldr	r2, [r3, #20]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ef4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	68da      	ldr	r2, [r3, #12]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ef5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2200      	movs	r2, #0
 800ef62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2220      	movs	r2, #32
 800ef68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2220      	movs	r2, #32
 800ef70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b08a      	sub	sp, #40	@ 0x28
 800ef88:	af02      	add	r7, sp, #8
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	603b      	str	r3, [r7, #0]
 800ef90:	4613      	mov	r3, r2
 800ef92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ef94:	2300      	movs	r3, #0
 800ef96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	2b20      	cmp	r3, #32
 800efa2:	d16d      	bne.n	800f080 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d002      	beq.n	800efb0 <HAL_UART_Transmit+0x2c>
 800efaa:	88fb      	ldrh	r3, [r7, #6]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d101      	bne.n	800efb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800efb0:	2301      	movs	r3, #1
 800efb2:	e066      	b.n	800f082 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2200      	movs	r2, #0
 800efb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2221      	movs	r2, #33	@ 0x21
 800efbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800efc2:	f7fd faad 	bl	800c520 <HAL_GetTick>
 800efc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	88fa      	ldrh	r2, [r7, #6]
 800efcc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	88fa      	ldrh	r2, [r7, #6]
 800efd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800efdc:	d108      	bne.n	800eff0 <HAL_UART_Transmit+0x6c>
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	691b      	ldr	r3, [r3, #16]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d104      	bne.n	800eff0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800efe6:	2300      	movs	r3, #0
 800efe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	61bb      	str	r3, [r7, #24]
 800efee:	e003      	b.n	800eff8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eff4:	2300      	movs	r3, #0
 800eff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eff8:	e02a      	b.n	800f050 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	9300      	str	r3, [sp, #0]
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	2200      	movs	r2, #0
 800f002:	2180      	movs	r1, #128	@ 0x80
 800f004:	68f8      	ldr	r0, [r7, #12]
 800f006:	f000 f980 	bl	800f30a <UART_WaitOnFlagUntilTimeout>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d001      	beq.n	800f014 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800f010:	2303      	movs	r3, #3
 800f012:	e036      	b.n	800f082 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10b      	bne.n	800f032 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	461a      	mov	r2, r3
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	3302      	adds	r3, #2
 800f02e:	61bb      	str	r3, [r7, #24]
 800f030:	e007      	b.n	800f042 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f032:	69fb      	ldr	r3, [r7, #28]
 800f034:	781a      	ldrb	r2, [r3, #0]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	3301      	adds	r3, #1
 800f040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f046:	b29b      	uxth	r3, r3
 800f048:	3b01      	subs	r3, #1
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f054:	b29b      	uxth	r3, r3
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1cf      	bne.n	800effa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	2200      	movs	r2, #0
 800f062:	2140      	movs	r1, #64	@ 0x40
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f000 f950 	bl	800f30a <UART_WaitOnFlagUntilTimeout>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d001      	beq.n	800f074 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800f070:	2303      	movs	r3, #3
 800f072:	e006      	b.n	800f082 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2220      	movs	r2, #32
 800f078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800f07c:	2300      	movs	r3, #0
 800f07e:	e000      	b.n	800f082 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800f080:	2302      	movs	r3, #2
  }
}
 800f082:	4618      	mov	r0, r3
 800f084:	3720      	adds	r7, #32
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}

0800f08a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f08a:	b580      	push	{r7, lr}
 800f08c:	b084      	sub	sp, #16
 800f08e:	af00      	add	r7, sp, #0
 800f090:	60f8      	str	r0, [r7, #12]
 800f092:	60b9      	str	r1, [r7, #8]
 800f094:	4613      	mov	r3, r2
 800f096:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	2b20      	cmp	r3, #32
 800f0a2:	d112      	bne.n	800f0ca <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d002      	beq.n	800f0b0 <HAL_UART_Receive_DMA+0x26>
 800f0aa:	88fb      	ldrh	r3, [r7, #6]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d101      	bne.n	800f0b4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e00b      	b.n	800f0cc <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f0ba:	88fb      	ldrh	r3, [r7, #6]
 800f0bc:	461a      	mov	r2, r3
 800f0be:	68b9      	ldr	r1, [r7, #8]
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f000 f991 	bl	800f3e8 <UART_Start_Receive_DMA>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	e000      	b.n	800f0cc <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800f0ca:	2302      	movs	r3, #2
  }
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800f0dc:	bf00      	nop
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bc80      	pop	{r7}
 800f0e4:	4770      	bx	lr

0800f0e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f0e6:	b480      	push	{r7}
 800f0e8:	b083      	sub	sp, #12
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f0ee:	bf00      	nop
 800f0f0:	370c      	adds	r7, #12
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bc80      	pop	{r7}
 800f0f6:	4770      	bx	lr

0800f0f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b083      	sub	sp, #12
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	460b      	mov	r3, r1
 800f102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f104:	bf00      	nop
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	bc80      	pop	{r7}
 800f10c:	4770      	bx	lr

0800f10e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b09c      	sub	sp, #112	@ 0x70
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f11a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f003 0320 	and.w	r3, r3, #32
 800f126:	2b00      	cmp	r3, #0
 800f128:	d172      	bne.n	800f210 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f12a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f12c:	2200      	movs	r2, #0
 800f12e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	330c      	adds	r3, #12
 800f136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f13a:	e853 3f00 	ldrex	r3, [r3]
 800f13e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f142:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f146:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	330c      	adds	r3, #12
 800f14e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f150:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f152:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f154:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f156:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f158:	e841 2300 	strex	r3, r2, [r1]
 800f15c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f15e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f160:	2b00      	cmp	r3, #0
 800f162:	d1e5      	bne.n	800f130 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f164:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	3314      	adds	r3, #20
 800f16a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f16e:	e853 3f00 	ldrex	r3, [r3]
 800f172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f176:	f023 0301 	bic.w	r3, r3, #1
 800f17a:	667b      	str	r3, [r7, #100]	@ 0x64
 800f17c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	3314      	adds	r3, #20
 800f182:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f184:	647a      	str	r2, [r7, #68]	@ 0x44
 800f186:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f18a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f18c:	e841 2300 	strex	r3, r2, [r1]
 800f190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1e5      	bne.n	800f164 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	3314      	adds	r3, #20
 800f19e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a2:	e853 3f00 	ldrex	r3, [r3]
 800f1a6:	623b      	str	r3, [r7, #32]
   return(result);
 800f1a8:	6a3b      	ldr	r3, [r7, #32]
 800f1aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1ae:	663b      	str	r3, [r7, #96]	@ 0x60
 800f1b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	3314      	adds	r3, #20
 800f1b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f1b8:	633a      	str	r2, [r7, #48]	@ 0x30
 800f1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f1be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1c0:	e841 2300 	strex	r3, r2, [r1]
 800f1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1e5      	bne.n	800f198 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f1cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1ce:	2220      	movs	r2, #32
 800f1d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d119      	bne.n	800f210 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	330c      	adds	r3, #12
 800f1e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	e853 3f00 	ldrex	r3, [r3]
 800f1ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f023 0310 	bic.w	r3, r3, #16
 800f1f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f1f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	330c      	adds	r3, #12
 800f1fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f1fc:	61fa      	str	r2, [r7, #28]
 800f1fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f200:	69b9      	ldr	r1, [r7, #24]
 800f202:	69fa      	ldr	r2, [r7, #28]
 800f204:	e841 2300 	strex	r3, r2, [r1]
 800f208:	617b      	str	r3, [r7, #20]
   return(result);
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1e5      	bne.n	800f1dc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f212:	2200      	movs	r2, #0
 800f214:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d106      	bne.n	800f22c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f21e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f220:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f222:	4619      	mov	r1, r3
 800f224:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f226:	f7ff ff67 	bl	800f0f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f22a:	e002      	b.n	800f232 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800f22c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f22e:	f7fc fc4b 	bl	800bac8 <HAL_UART_RxCpltCallback>
}
 800f232:	bf00      	nop
 800f234:	3770      	adds	r7, #112	@ 0x70
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}

0800f23a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b084      	sub	sp, #16
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f246:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2201      	movs	r2, #1
 800f24c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f252:	2b01      	cmp	r3, #1
 800f254:	d108      	bne.n	800f268 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f25a:	085b      	lsrs	r3, r3, #1
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	4619      	mov	r1, r3
 800f260:	68f8      	ldr	r0, [r7, #12]
 800f262:	f7ff ff49 	bl	800f0f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f266:	e002      	b.n	800f26e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f7ff ff33 	bl	800f0d4 <HAL_UART_RxHalfCpltCallback>
}
 800f26e:	bf00      	nop
 800f270:	3710      	adds	r7, #16
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}

0800f276 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f276:	b580      	push	{r7, lr}
 800f278:	b084      	sub	sp, #16
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f27e:	2300      	movs	r3, #0
 800f280:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f286:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	695b      	ldr	r3, [r3, #20]
 800f28e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f292:	2b00      	cmp	r3, #0
 800f294:	bf14      	ite	ne
 800f296:	2301      	movne	r3, #1
 800f298:	2300      	moveq	r3, #0
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	2b21      	cmp	r3, #33	@ 0x21
 800f2a8:	d108      	bne.n	800f2bc <UART_DMAError+0x46>
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d005      	beq.n	800f2bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800f2b6:	68b8      	ldr	r0, [r7, #8]
 800f2b8:	f000 f930 	bl	800f51c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	695b      	ldr	r3, [r3, #20]
 800f2c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	bf14      	ite	ne
 800f2ca:	2301      	movne	r3, #1
 800f2cc:	2300      	moveq	r3, #0
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	2b22      	cmp	r3, #34	@ 0x22
 800f2dc:	d108      	bne.n	800f2f0 <UART_DMAError+0x7a>
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d005      	beq.n	800f2f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800f2ea:	68b8      	ldr	r0, [r7, #8]
 800f2ec:	f000 f93d 	bl	800f56a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2f4:	f043 0210 	orr.w	r2, r3, #16
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f2fc:	68b8      	ldr	r0, [r7, #8]
 800f2fe:	f7ff fef2 	bl	800f0e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f302:	bf00      	nop
 800f304:	3710      	adds	r7, #16
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}

0800f30a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800f30a:	b580      	push	{r7, lr}
 800f30c:	b090      	sub	sp, #64	@ 0x40
 800f30e:	af00      	add	r7, sp, #0
 800f310:	60f8      	str	r0, [r7, #12]
 800f312:	60b9      	str	r1, [r7, #8]
 800f314:	603b      	str	r3, [r7, #0]
 800f316:	4613      	mov	r3, r2
 800f318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f31a:	e050      	b.n	800f3be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f31c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f322:	d04c      	beq.n	800f3be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f326:	2b00      	cmp	r3, #0
 800f328:	d007      	beq.n	800f33a <UART_WaitOnFlagUntilTimeout+0x30>
 800f32a:	f7fd f8f9 	bl	800c520 <HAL_GetTick>
 800f32e:	4602      	mov	r2, r0
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	1ad3      	subs	r3, r2, r3
 800f334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f336:	429a      	cmp	r2, r3
 800f338:	d241      	bcs.n	800f3be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	330c      	adds	r3, #12
 800f340:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f344:	e853 3f00 	ldrex	r3, [r3]
 800f348:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f34c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800f350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	330c      	adds	r3, #12
 800f358:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f35a:	637a      	str	r2, [r7, #52]	@ 0x34
 800f35c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f360:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f362:	e841 2300 	strex	r3, r2, [r1]
 800f366:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1e5      	bne.n	800f33a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	3314      	adds	r3, #20
 800f374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	e853 3f00 	ldrex	r3, [r3]
 800f37c:	613b      	str	r3, [r7, #16]
   return(result);
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	f023 0301 	bic.w	r3, r3, #1
 800f384:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	3314      	adds	r3, #20
 800f38c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f38e:	623a      	str	r2, [r7, #32]
 800f390:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f392:	69f9      	ldr	r1, [r7, #28]
 800f394:	6a3a      	ldr	r2, [r7, #32]
 800f396:	e841 2300 	strex	r3, r2, [r1]
 800f39a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d1e5      	bne.n	800f36e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2220      	movs	r2, #32
 800f3a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2220      	movs	r2, #32
 800f3ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800f3ba:	2303      	movs	r3, #3
 800f3bc:	e00f      	b.n	800f3de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	681a      	ldr	r2, [r3, #0]
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	4013      	ands	r3, r2
 800f3c8:	68ba      	ldr	r2, [r7, #8]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	bf0c      	ite	eq
 800f3ce:	2301      	moveq	r3, #1
 800f3d0:	2300      	movne	r3, #0
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	79fb      	ldrb	r3, [r7, #7]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d09f      	beq.n	800f31c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3740      	adds	r7, #64	@ 0x40
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
	...

0800f3e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b098      	sub	sp, #96	@ 0x60
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	4613      	mov	r3, r2
 800f3f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800f3f6:	68ba      	ldr	r2, [r7, #8]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	88fa      	ldrh	r2, [r7, #6]
 800f400:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2200      	movs	r2, #0
 800f406:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2222      	movs	r2, #34	@ 0x22
 800f40c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f414:	4a3e      	ldr	r2, [pc, #248]	@ (800f510 <UART_Start_Receive_DMA+0x128>)
 800f416:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f41c:	4a3d      	ldr	r2, [pc, #244]	@ (800f514 <UART_Start_Receive_DMA+0x12c>)
 800f41e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f424:	4a3c      	ldr	r2, [pc, #240]	@ (800f518 <UART_Start_Receive_DMA+0x130>)
 800f426:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f42c:	2200      	movs	r2, #0
 800f42e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800f430:	f107 0308 	add.w	r3, r7, #8
 800f434:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	3304      	adds	r3, #4
 800f440:	4619      	mov	r1, r3
 800f442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	88fb      	ldrh	r3, [r7, #6]
 800f448:	f7fd f9ca 	bl	800c7e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800f44c:	2300      	movs	r3, #0
 800f44e:	613b      	str	r3, [r7, #16]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	613b      	str	r3, [r7, #16]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	613b      	str	r3, [r7, #16]
 800f460:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d019      	beq.n	800f49e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	330c      	adds	r3, #12
 800f470:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f474:	e853 3f00 	ldrex	r3, [r3]
 800f478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f47c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f480:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	330c      	adds	r3, #12
 800f488:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f48a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800f48c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f48e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800f490:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f492:	e841 2300 	strex	r3, r2, [r1]
 800f496:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d1e5      	bne.n	800f46a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	3314      	adds	r3, #20
 800f4a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4a8:	e853 3f00 	ldrex	r3, [r3]
 800f4ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b0:	f043 0301 	orr.w	r3, r3, #1
 800f4b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	3314      	adds	r3, #20
 800f4bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f4be:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f4c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f4c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f4c6:	e841 2300 	strex	r3, r2, [r1]
 800f4ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1e5      	bne.n	800f49e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	3314      	adds	r3, #20
 800f4d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	e853 3f00 	ldrex	r3, [r3]
 800f4e0:	617b      	str	r3, [r7, #20]
   return(result);
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	3314      	adds	r3, #20
 800f4f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f4f2:	627a      	str	r2, [r7, #36]	@ 0x24
 800f4f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f6:	6a39      	ldr	r1, [r7, #32]
 800f4f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4fa:	e841 2300 	strex	r3, r2, [r1]
 800f4fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1e5      	bne.n	800f4d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800f506:	2300      	movs	r3, #0
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3760      	adds	r7, #96	@ 0x60
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	0800f10f 	.word	0x0800f10f
 800f514:	0800f23b 	.word	0x0800f23b
 800f518:	0800f277 	.word	0x0800f277

0800f51c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b089      	sub	sp, #36	@ 0x24
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	330c      	adds	r3, #12
 800f52a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	e853 3f00 	ldrex	r3, [r3]
 800f532:	60bb      	str	r3, [r7, #8]
   return(result);
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f53a:	61fb      	str	r3, [r7, #28]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	330c      	adds	r3, #12
 800f542:	69fa      	ldr	r2, [r7, #28]
 800f544:	61ba      	str	r2, [r7, #24]
 800f546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f548:	6979      	ldr	r1, [r7, #20]
 800f54a:	69ba      	ldr	r2, [r7, #24]
 800f54c:	e841 2300 	strex	r3, r2, [r1]
 800f550:	613b      	str	r3, [r7, #16]
   return(result);
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1e5      	bne.n	800f524 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2220      	movs	r2, #32
 800f55c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800f560:	bf00      	nop
 800f562:	3724      	adds	r7, #36	@ 0x24
 800f564:	46bd      	mov	sp, r7
 800f566:	bc80      	pop	{r7}
 800f568:	4770      	bx	lr

0800f56a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f56a:	b480      	push	{r7}
 800f56c:	b095      	sub	sp, #84	@ 0x54
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	330c      	adds	r3, #12
 800f578:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f57c:	e853 3f00 	ldrex	r3, [r3]
 800f580:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f584:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	330c      	adds	r3, #12
 800f590:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f592:	643a      	str	r2, [r7, #64]	@ 0x40
 800f594:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f596:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f598:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f59a:	e841 2300 	strex	r3, r2, [r1]
 800f59e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d1e5      	bne.n	800f572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	3314      	adds	r3, #20
 800f5ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ae:	6a3b      	ldr	r3, [r7, #32]
 800f5b0:	e853 3f00 	ldrex	r3, [r3]
 800f5b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	f023 0301 	bic.w	r3, r3, #1
 800f5bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	3314      	adds	r3, #20
 800f5c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f5c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f5c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5ce:	e841 2300 	strex	r3, r2, [r1]
 800f5d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1e5      	bne.n	800f5a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	d119      	bne.n	800f616 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	330c      	adds	r3, #12
 800f5e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	e853 3f00 	ldrex	r3, [r3]
 800f5f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	f023 0310 	bic.w	r3, r3, #16
 800f5f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	330c      	adds	r3, #12
 800f600:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f602:	61ba      	str	r2, [r7, #24]
 800f604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f606:	6979      	ldr	r1, [r7, #20]
 800f608:	69ba      	ldr	r2, [r7, #24]
 800f60a:	e841 2300 	strex	r3, r2, [r1]
 800f60e:	613b      	str	r3, [r7, #16]
   return(result);
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d1e5      	bne.n	800f5e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2220      	movs	r2, #32
 800f61a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2200      	movs	r2, #0
 800f622:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800f624:	bf00      	nop
 800f626:	3754      	adds	r7, #84	@ 0x54
 800f628:	46bd      	mov	sp, r7
 800f62a:	bc80      	pop	{r7}
 800f62c:	4770      	bx	lr
	...

0800f630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	691b      	ldr	r3, [r3, #16]
 800f63e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	68da      	ldr	r2, [r3, #12]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	430a      	orrs	r2, r1
 800f64c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	689a      	ldr	r2, [r3, #8]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	691b      	ldr	r3, [r3, #16]
 800f656:	431a      	orrs	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	695b      	ldr	r3, [r3, #20]
 800f65c:	4313      	orrs	r3, r2
 800f65e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800f66a:	f023 030c 	bic.w	r3, r3, #12
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	6812      	ldr	r2, [r2, #0]
 800f672:	68b9      	ldr	r1, [r7, #8]
 800f674:	430b      	orrs	r3, r1
 800f676:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	695b      	ldr	r3, [r3, #20]
 800f67e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	699a      	ldr	r2, [r3, #24]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	430a      	orrs	r2, r1
 800f68c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4a2c      	ldr	r2, [pc, #176]	@ (800f744 <UART_SetConfig+0x114>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d103      	bne.n	800f6a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800f698:	f7ff f952 	bl	800e940 <HAL_RCC_GetPCLK2Freq>
 800f69c:	60f8      	str	r0, [r7, #12]
 800f69e:	e002      	b.n	800f6a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800f6a0:	f7ff f93a 	bl	800e918 <HAL_RCC_GetPCLK1Freq>
 800f6a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f6a6:	68fa      	ldr	r2, [r7, #12]
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	4413      	add	r3, r2
 800f6ae:	009a      	lsls	r2, r3, #2
 800f6b0:	441a      	add	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6bc:	4a22      	ldr	r2, [pc, #136]	@ (800f748 <UART_SetConfig+0x118>)
 800f6be:	fba2 2303 	umull	r2, r3, r2, r3
 800f6c2:	095b      	lsrs	r3, r3, #5
 800f6c4:	0119      	lsls	r1, r3, #4
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	4613      	mov	r3, r2
 800f6ca:	009b      	lsls	r3, r3, #2
 800f6cc:	4413      	add	r3, r2
 800f6ce:	009a      	lsls	r2, r3, #2
 800f6d0:	441a      	add	r2, r3
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	fbb2 f2f3 	udiv	r2, r2, r3
 800f6dc:	4b1a      	ldr	r3, [pc, #104]	@ (800f748 <UART_SetConfig+0x118>)
 800f6de:	fba3 0302 	umull	r0, r3, r3, r2
 800f6e2:	095b      	lsrs	r3, r3, #5
 800f6e4:	2064      	movs	r0, #100	@ 0x64
 800f6e6:	fb00 f303 	mul.w	r3, r0, r3
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	011b      	lsls	r3, r3, #4
 800f6ee:	3332      	adds	r3, #50	@ 0x32
 800f6f0:	4a15      	ldr	r2, [pc, #84]	@ (800f748 <UART_SetConfig+0x118>)
 800f6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f6f6:	095b      	lsrs	r3, r3, #5
 800f6f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f6fc:	4419      	add	r1, r3
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	4613      	mov	r3, r2
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4413      	add	r3, r2
 800f706:	009a      	lsls	r2, r3, #2
 800f708:	441a      	add	r2, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	fbb2 f2f3 	udiv	r2, r2, r3
 800f714:	4b0c      	ldr	r3, [pc, #48]	@ (800f748 <UART_SetConfig+0x118>)
 800f716:	fba3 0302 	umull	r0, r3, r3, r2
 800f71a:	095b      	lsrs	r3, r3, #5
 800f71c:	2064      	movs	r0, #100	@ 0x64
 800f71e:	fb00 f303 	mul.w	r3, r0, r3
 800f722:	1ad3      	subs	r3, r2, r3
 800f724:	011b      	lsls	r3, r3, #4
 800f726:	3332      	adds	r3, #50	@ 0x32
 800f728:	4a07      	ldr	r2, [pc, #28]	@ (800f748 <UART_SetConfig+0x118>)
 800f72a:	fba2 2303 	umull	r2, r3, r2, r3
 800f72e:	095b      	lsrs	r3, r3, #5
 800f730:	f003 020f 	and.w	r2, r3, #15
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	440a      	add	r2, r1
 800f73a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800f73c:	bf00      	nop
 800f73e:	3710      	adds	r7, #16
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}
 800f744:	40013800 	.word	0x40013800
 800f748:	51eb851f 	.word	0x51eb851f

0800f74c <__malloc_lock>:

/*********************************************************************
*
*       __malloc_lock()
*/
void __malloc_lock (struct _reent *_r) {
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  OS_USE_PARA(_r);
#if (OS_INTERRUPT_SAFE == 1)
  OS_InterruptSafe_Lock();
 800f754:	f000 fbb4 	bl	800fec0 <OS_InterruptSafe_Lock>
#else
  OS_ThreadSafe_Lock();
#endif
}
 800f758:	bf00      	nop
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <__malloc_unlock>:

/*********************************************************************
*
*       __malloc_unlock()
*/
void __malloc_unlock(struct _reent *_r) {
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  OS_USE_PARA(_r);
#if (OS_INTERRUPT_SAFE == 1)
  OS_InterruptSafe_Unlock();
 800f768:	f000 fbc0 	bl	800feec <OS_InterruptSafe_Unlock>
#else
  OS_ThreadSafe_Unlock();
#endif
}
 800f76c:	bf00      	nop
 800f76e:	3708      	adds	r7, #8
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <_Init>:
*       _Init()
*
*  Function description
*    Performs initialization of memory locations used for communication.
*/
static void _Init(void) {
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
  OS_U32 VectorTableBaseAddr;

  //
  // On Cortex-M initial top of stack is stored at address defined by VTOR
  //
  VectorTableBaseAddr  = VTOR_ADDR;                /*lint !e9078 MISRA C:2012 Rule 11.4, advisory */ /*lint !e923 MISRA C:2012 Rule 11.6, required */
 800f77a:	4b1c      	ldr	r3, [pc, #112]	@ (800f7ec <_Init+0x78>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	607b      	str	r3, [r7, #4]
  _BaseAddr    = (*(OS_U32*)VectorTableBaseAddr);  /*lint !e9078 MISRA C:2012 Rule 11.4, advisory */ /*lint !e923 MISRA C:2012 Rule 11.6, required */
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4a1a      	ldr	r2, [pc, #104]	@ (800f7f0 <_Init+0x7c>)
 800f786:	6013      	str	r3, [r2, #0]
  HOST_ACT     = 0u;
 800f788:	4b19      	ldr	r3, [pc, #100]	@ (800f7f0 <_Init+0x7c>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	3b17      	subs	r3, #23
 800f78e:	2200      	movs	r2, #0
 800f790:	701a      	strb	r2, [r3, #0]
  RX_SIZE      = RX_BUF_SIZE;
 800f792:	4b17      	ldr	r3, [pc, #92]	@ (800f7f0 <_Init+0x7c>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	3b02      	subs	r3, #2
 800f798:	2208      	movs	r2, #8
 800f79a:	701a      	strb	r2, [r3, #0]
  TX_SIZE      = TX_BUF_SIZE;
 800f79c:	4b14      	ldr	r3, [pc, #80]	@ (800f7f0 <_Init+0x7c>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	3b03      	subs	r3, #3
 800f7a2:	2212      	movs	r2, #18
 800f7a4:	701a      	strb	r2, [r3, #0]
  RX_CNT       = 0u;
 800f7a6:	4b12      	ldr	r3, [pc, #72]	@ (800f7f0 <_Init+0x7c>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	3b18      	subs	r3, #24
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	701a      	strb	r2, [r3, #0]
  TX_CNT       = 0u;
 800f7b0:	4b0f      	ldr	r3, [pc, #60]	@ (800f7f0 <_Init+0x7c>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	3b16      	subs	r3, #22
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	701a      	strb	r2, [r3, #0]
  PROT_ID      = MAGIC_NUM;
 800f7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f7f0 <_Init+0x7c>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	3b01      	subs	r3, #1
 800f7c0:	2252      	movs	r2, #82	@ 0x52
 800f7c2:	701a      	strb	r2, [r3, #0]
  _pTxBuf      = (OS_U8*)(_BaseAddr - (TX_BUF_SIZE + 3u));
 800f7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800f7f0 <_Init+0x7c>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	3b15      	subs	r3, #21
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	4b09      	ldr	r3, [pc, #36]	@ (800f7f4 <_Init+0x80>)
 800f7ce:	601a      	str	r2, [r3, #0]
  _pRxBuf      = (OS_U8*)(_BaseAddr - (TX_BUF_SIZE + RX_BUF_SIZE + 6u));
 800f7d0:	4b07      	ldr	r3, [pc, #28]	@ (800f7f0 <_Init+0x7c>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	3b20      	subs	r3, #32
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	4b07      	ldr	r3, [pc, #28]	@ (800f7f8 <_Init+0x84>)
 800f7da:	601a      	str	r2, [r3, #0]
  _TxIsPending = 0u;
 800f7dc:	4b07      	ldr	r3, [pc, #28]	@ (800f7fc <_Init+0x88>)
 800f7de:	2200      	movs	r2, #0
 800f7e0:	601a      	str	r2, [r3, #0]
}
 800f7e2:	bf00      	nop
 800f7e4:	370c      	adds	r7, #12
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bc80      	pop	{r7}
 800f7ea:	4770      	bx	lr
 800f7ec:	e000ed08 	.word	0xe000ed08
 800f7f0:	20003054 	.word	0x20003054
 800f7f4:	20003068 	.word	0x20003068
 800f7f8:	20003064 	.word	0x20003064
 800f7fc:	20003058 	.word	0x20003058

0800f800 <_LockTxBuf>:
*
*  Return value
*    1: Sending buffer locked.
*    0: Sending buffer couldn't be locked as already in use.
*/
static unsigned int _LockTxBuf(void) {
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
  unsigned int Locked;

  Locked = 0u;
 800f806:	2300      	movs	r3, #0
 800f808:	607b      	str	r3, [r7, #4]
  OS_INT_Disable();
 800f80a:	2380      	movs	r3, #128	@ 0x80
 800f80c:	f383 8811 	msr	BASEPRI, r3
  if (_TxBufLocked == 0u) {
 800f810:	4b0e      	ldr	r3, [pc, #56]	@ (800f84c <_LockTxBuf+0x4c>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d104      	bne.n	800f822 <_LockTxBuf+0x22>
    _TxBufLocked = 1u;
 800f818:	4b0c      	ldr	r3, [pc, #48]	@ (800f84c <_LockTxBuf+0x4c>)
 800f81a:	2201      	movs	r2, #1
 800f81c:	601a      	str	r2, [r3, #0]
    Locked = 1u;
 800f81e:	2301      	movs	r3, #1
 800f820:	607b      	str	r3, [r7, #4]
  }
  OS_INT_EnableConditional();
 800f822:	4b0b      	ldr	r3, [pc, #44]	@ (800f850 <_LockTxBuf+0x50>)
 800f824:	785b      	ldrb	r3, [r3, #1]
 800f826:	b2db      	uxtb	r3, r3
 800f828:	2b0f      	cmp	r3, #15
 800f82a:	d902      	bls.n	800f832 <_LockTxBuf+0x32>
 800f82c:	2099      	movs	r0, #153	@ 0x99
 800f82e:	f000 f9c7 	bl	800fbc0 <OS_Error>
 800f832:	4b07      	ldr	r3, [pc, #28]	@ (800f850 <_LockTxBuf+0x50>)
 800f834:	785b      	ldrb	r3, [r3, #1]
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d102      	bne.n	800f842 <_LockTxBuf+0x42>
 800f83c:	2300      	movs	r3, #0
 800f83e:	f383 8811 	msr	BASEPRI, r3
  return Locked;
 800f842:	687b      	ldr	r3, [r7, #4]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3708      	adds	r7, #8
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	20003070 	.word	0x20003070
 800f850:	20003088 	.word	0x20003088

0800f854 <_UnlockTxBuf>:
*       _UnlockTxBuf()
*
*  Function description
*    Releases the exclusive access to sending buffer.
*/
static void _UnlockTxBuf(void) {
 800f854:	b480      	push	{r7}
 800f856:	af00      	add	r7, sp, #0
  _TxBufLocked = 0u;
 800f858:	4b03      	ldr	r3, [pc, #12]	@ (800f868 <_UnlockTxBuf+0x14>)
 800f85a:	2200      	movs	r2, #0
 800f85c:	601a      	str	r2, [r3, #0]
}
 800f85e:	bf00      	nop
 800f860:	46bd      	mov	sp, r7
 800f862:	bc80      	pop	{r7}
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	20003070 	.word	0x20003070

0800f86c <_Receive>:
*       _Receive()
*
*  Function description
*    Performs Command / data read from embOSView
*/
static void _Receive(void) {
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
  OS_U8        i;
  const OS_U8* pBuf;

  if (RX_CNT > 0u) {  // Data received?
 800f872:	4b1b      	ldr	r3, [pc, #108]	@ (800f8e0 <_Receive+0x74>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	3b18      	subs	r3, #24
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d02a      	beq.n	800f8d6 <_Receive+0x6a>
    if (_pfOnRx != NULL) {
 800f880:	4b18      	ldr	r3, [pc, #96]	@ (800f8e4 <_Receive+0x78>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d021      	beq.n	800f8cc <_Receive+0x60>
      pBuf = _pRxBuf + (RX_BUF_SIZE - RX_CNT);  //lint !e9016 MISRA C:2012 Rule 18.4, advisory
 800f888:	4b17      	ldr	r3, [pc, #92]	@ (800f8e8 <_Receive+0x7c>)
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	4b14      	ldr	r3, [pc, #80]	@ (800f8e0 <_Receive+0x74>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	3b18      	subs	r3, #24
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	b2db      	uxtb	r3, r3
 800f896:	f1c3 0308 	rsb	r3, r3, #8
 800f89a:	4413      	add	r3, r2
 800f89c:	603b      	str	r3, [r7, #0]
      for (i = 0u; i < RX_CNT; i++) {
 800f89e:	2300      	movs	r3, #0
 800f8a0:	71fb      	strb	r3, [r7, #7]
 800f8a2:	e00b      	b.n	800f8bc <_Receive+0x50>
        _pfOnRx(*pBuf);
 800f8a4:	4b0f      	ldr	r3, [pc, #60]	@ (800f8e4 <_Receive+0x78>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	683a      	ldr	r2, [r7, #0]
 800f8aa:	7812      	ldrb	r2, [r2, #0]
 800f8ac:	4610      	mov	r0, r2
 800f8ae:	4798      	blx	r3
        pBuf++;
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	603b      	str	r3, [r7, #0]
      for (i = 0u; i < RX_CNT; i++) {
 800f8b6:	79fb      	ldrb	r3, [r7, #7]
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	71fb      	strb	r3, [r7, #7]
 800f8bc:	4b08      	ldr	r3, [pc, #32]	@ (800f8e0 <_Receive+0x74>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	3b18      	subs	r3, #24
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	79fa      	ldrb	r2, [r7, #7]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d3eb      	bcc.n	800f8a4 <_Receive+0x38>
      }
    }
    RX_CNT = 0u;
 800f8cc:	4b04      	ldr	r3, [pc, #16]	@ (800f8e0 <_Receive+0x74>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	3b18      	subs	r3, #24
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	701a      	strb	r2, [r3, #0]
  }
}
 800f8d6:	bf00      	nop
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	20003054 	.word	0x20003054
 800f8e4:	20003048 	.word	0x20003048
 800f8e8:	20003064 	.word	0x20003064

0800f8ec <_FillTxBuf>:
*    Stores bytes in the sending buffer.
*
*  Parameter
*    Data: Data byte to be sent.
*/
static void _FillTxBuf(OS_U8 Data) {
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b086      	sub	sp, #24
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	71fb      	strb	r3, [r7, #7]
  unsigned int Cnt;
  OS_INT       Byte;
  OS_U8*       pBuf;

  Cnt   = 1u;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	617b      	str	r3, [r7, #20]
  pBuf  = _pTxBuf;
 800f8fa:	4b23      	ldr	r3, [pc, #140]	@ (800f988 <_FillTxBuf+0x9c>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	613b      	str	r3, [r7, #16]
  *pBuf = Data;
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	79fa      	ldrb	r2, [r7, #7]
 800f904:	701a      	strb	r2, [r3, #0]
  pBuf++;
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	3301      	adds	r3, #1
 800f90a:	613b      	str	r3, [r7, #16]
  if (_pfGetNextChar != NULL) {
 800f90c:	4b1f      	ldr	r3, [pc, #124]	@ (800f98c <_FillTxBuf+0xa0>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d017      	beq.n	800f944 <_FillTxBuf+0x58>
    //
    // Get more bytes from the communication state machine
    // until the sending buffer is full.
    //
    for (;;) {
      if (Cnt >= TX_BUF_SIZE) {
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	2b11      	cmp	r3, #17
 800f918:	d811      	bhi.n	800f93e <_FillTxBuf+0x52>
        break;
      }
      Byte = _pfGetNextChar();
 800f91a:	4b1c      	ldr	r3, [pc, #112]	@ (800f98c <_FillTxBuf+0xa0>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	4798      	blx	r3
 800f920:	60f8      	str	r0, [r7, #12]
      if (Byte < 0) {
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2b00      	cmp	r3, #0
 800f926:	db0c      	blt.n	800f942 <_FillTxBuf+0x56>
        break;  //lint !e9011 MISRA C:2012 Rule 15.4, advisory
      }
      *pBuf = (OS_U8)Byte;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	b2da      	uxtb	r2, r3
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	701a      	strb	r2, [r3, #0]
      pBuf++;
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	3301      	adds	r3, #1
 800f934:	613b      	str	r3, [r7, #16]
      Cnt++;
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	3301      	adds	r3, #1
 800f93a:	617b      	str	r3, [r7, #20]
      if (Cnt >= TX_BUF_SIZE) {
 800f93c:	e7ea      	b.n	800f914 <_FillTxBuf+0x28>
        break;
 800f93e:	bf00      	nop
 800f940:	e000      	b.n	800f944 <_FillTxBuf+0x58>
        break;  //lint !e9011 MISRA C:2012 Rule 15.4, advisory
 800f942:	bf00      	nop
    }
  }
  OS_INT_Disable();
 800f944:	2380      	movs	r3, #128	@ 0x80
 800f946:	f383 8811 	msr	BASEPRI, r3
  _TxTimeoutTimer = TX_TIMEOUT;
 800f94a:	4b11      	ldr	r3, [pc, #68]	@ (800f990 <_FillTxBuf+0xa4>)
 800f94c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f950:	601a      	str	r2, [r3, #0]
  TX_CNT = (OS_U8)Cnt;
 800f952:	4b10      	ldr	r3, [pc, #64]	@ (800f994 <_FillTxBuf+0xa8>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	3b16      	subs	r3, #22
 800f958:	697a      	ldr	r2, [r7, #20]
 800f95a:	b2d2      	uxtb	r2, r2
 800f95c:	701a      	strb	r2, [r3, #0]
  OS_INT_EnableConditional();
 800f95e:	4b0e      	ldr	r3, [pc, #56]	@ (800f998 <_FillTxBuf+0xac>)
 800f960:	785b      	ldrb	r3, [r3, #1]
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b0f      	cmp	r3, #15
 800f966:	d902      	bls.n	800f96e <_FillTxBuf+0x82>
 800f968:	2099      	movs	r0, #153	@ 0x99
 800f96a:	f000 f929 	bl	800fbc0 <OS_Error>
 800f96e:	4b0a      	ldr	r3, [pc, #40]	@ (800f998 <_FillTxBuf+0xac>)
 800f970:	785b      	ldrb	r3, [r3, #1]
 800f972:	b2db      	uxtb	r3, r3
 800f974:	2b00      	cmp	r3, #0
 800f976:	d102      	bne.n	800f97e <_FillTxBuf+0x92>
 800f978:	2300      	movs	r3, #0
 800f97a:	f383 8811 	msr	BASEPRI, r3
}
 800f97e:	bf00      	nop
 800f980:	3718      	adds	r7, #24
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	20003068 	.word	0x20003068
 800f98c:	20003050 	.word	0x20003050
 800f990:	2000306c 	.word	0x2000306c
 800f994:	20003054 	.word	0x20003054
 800f998:	20003088 	.word	0x20003088

0800f99c <_DropTxData>:
*       _DropTxData
*
*  Function description
*    Empties the sending buffer of embOS.
*/
static void _DropTxData(void) {
 800f99c:	b580      	push	{r7, lr}
 800f99e:	af00      	add	r7, sp, #0
  if (_pfGetNextChar != NULL) {
 800f9a0:	4b06      	ldr	r3, [pc, #24]	@ (800f9bc <_DropTxData+0x20>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d006      	beq.n	800f9b6 <_DropTxData+0x1a>
    while (_pfGetNextChar() >= 0) {
 800f9a8:	bf00      	nop
 800f9aa:	4b04      	ldr	r3, [pc, #16]	@ (800f9bc <_DropTxData+0x20>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	4798      	blx	r3
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	daf9      	bge.n	800f9aa <_DropTxData+0xe>
      ;
    }
  }
}
 800f9b6:	bf00      	nop
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	20003050 	.word	0x20003050

0800f9c0 <_Send>:
*       _Send()
*
*  Function description
*    Sends data back to embOSView if it is ready to receive data.
*/
static void _Send(void) {
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	af00      	add	r7, sp, #0
  if (TX_CNT == 0u) {  // Can we send data?
 800f9c4:	4b13      	ldr	r3, [pc, #76]	@ (800fa14 <_Send+0x54>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	3b16      	subs	r3, #22
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d11d      	bne.n	800fa0e <_Send+0x4e>
    _TxTimeoutTimer = 0u;
 800f9d2:	4b11      	ldr	r3, [pc, #68]	@ (800fa18 <_Send+0x58>)
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	601a      	str	r2, [r3, #0]
    if (_TxIsPending != 0u) {
 800f9d8:	4b10      	ldr	r3, [pc, #64]	@ (800fa1c <_Send+0x5c>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d008      	beq.n	800f9f2 <_Send+0x32>
      _FillTxBuf(_TxPendingData);
 800f9e0:	4b0f      	ldr	r3, [pc, #60]	@ (800fa20 <_Send+0x60>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7ff ff81 	bl	800f8ec <_FillTxBuf>
      _TxIsPending = 0u;
 800f9ea:	4b0c      	ldr	r3, [pc, #48]	@ (800fa1c <_Send+0x5c>)
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	601a      	str	r2, [r3, #0]
          _UnlockTxBuf();
        }
      }
    }
  }
}
 800f9f0:	e00d      	b.n	800fa0e <_Send+0x4e>
      if (_pfOnTx != NULL) {
 800f9f2:	4b0c      	ldr	r3, [pc, #48]	@ (800fa24 <_Send+0x64>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d009      	beq.n	800fa0e <_Send+0x4e>
        if (_LockTxBuf() != 0u) {
 800f9fa:	f7ff ff01 	bl	800f800 <_LockTxBuf>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d004      	beq.n	800fa0e <_Send+0x4e>
          (void)_pfOnTx();
 800fa04:	4b07      	ldr	r3, [pc, #28]	@ (800fa24 <_Send+0x64>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4798      	blx	r3
          _UnlockTxBuf();
 800fa0a:	f7ff ff23 	bl	800f854 <_UnlockTxBuf>
}
 800fa0e:	bf00      	nop
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	20003054 	.word	0x20003054
 800fa18:	2000306c 	.word	0x2000306c
 800fa1c:	20003058 	.word	0x20003058
 800fa20:	2000305c 	.word	0x2000305c
 800fa24:	2000304c 	.word	0x2000304c

0800fa28 <JLINKMEM_Process>:
*  Function description
*    This function should be called more or less regularly to allow
*    memory reads while the application program is running.
*    The more often it is called, the higher the transfer speed.
*/
void JLINKMEM_Process(void) {
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	af00      	add	r7, sp, #0
  static unsigned int _TxTimeout;  // Set when the embOSView fails to fetch our data
  if (OS_IsRunning() != 0u) {      // No communication until the embOS starts
 800fa2c:	f001 fbfc 	bl	8011228 <OS_IsRunning>
 800fa30:	4603      	mov	r3, r0
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d03a      	beq.n	800faac <JLINKMEM_Process+0x84>
    if (_IsInited == 0u) {
 800fa36:	4b1e      	ldr	r3, [pc, #120]	@ (800fab0 <JLINKMEM_Process+0x88>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d104      	bne.n	800fa48 <JLINKMEM_Process+0x20>
      _Init();
 800fa3e:	f7ff fe99 	bl	800f774 <_Init>
      _IsInited = 1u;
 800fa42:	4b1b      	ldr	r3, [pc, #108]	@ (800fab0 <JLINKMEM_Process+0x88>)
 800fa44:	2201      	movs	r2, #1
 800fa46:	601a      	str	r2, [r3, #0]
    }
    if (HOST_ACT != 0u) {          // Do nothing until the embOSView connects to us
 800fa48:	4b1a      	ldr	r3, [pc, #104]	@ (800fab4 <JLINKMEM_Process+0x8c>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	3b17      	subs	r3, #23
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d02a      	beq.n	800faac <JLINKMEM_Process+0x84>
      //
      // Handle Timeout timer
      //
      if (_TxTimeoutTimer > 0u) {
 800fa56:	4b18      	ldr	r3, [pc, #96]	@ (800fab8 <JLINKMEM_Process+0x90>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00b      	beq.n	800fa76 <JLINKMEM_Process+0x4e>
        _TxTimeoutTimer--;
 800fa5e:	4b16      	ldr	r3, [pc, #88]	@ (800fab8 <JLINKMEM_Process+0x90>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	3b01      	subs	r3, #1
 800fa64:	4a14      	ldr	r2, [pc, #80]	@ (800fab8 <JLINKMEM_Process+0x90>)
 800fa66:	6013      	str	r3, [r2, #0]
        if (_TxTimeoutTimer == 0u) {
 800fa68:	4b13      	ldr	r3, [pc, #76]	@ (800fab8 <JLINKMEM_Process+0x90>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d102      	bne.n	800fa76 <JLINKMEM_Process+0x4e>
          _TxTimeout = 1u;
 800fa70:	4b12      	ldr	r3, [pc, #72]	@ (800fabc <JLINKMEM_Process+0x94>)
 800fa72:	2201      	movs	r2, #1
 800fa74:	601a      	str	r2, [r3, #0]
        }
      }

      if (_TxTimeout != 0u) {
 800fa76:	4b11      	ldr	r3, [pc, #68]	@ (800fabc <JLINKMEM_Process+0x94>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d012      	beq.n	800faa4 <JLINKMEM_Process+0x7c>
        HOST_ACT     = 0u;
 800fa7e:	4b0d      	ldr	r3, [pc, #52]	@ (800fab4 <JLINKMEM_Process+0x8c>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	3b17      	subs	r3, #23
 800fa84:	2200      	movs	r2, #0
 800fa86:	701a      	strb	r2, [r3, #0]
        _TxTimeout   = 0u;
 800fa88:	4b0c      	ldr	r3, [pc, #48]	@ (800fabc <JLINKMEM_Process+0x94>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	601a      	str	r2, [r3, #0]
        _TxIsPending = 0u;
 800fa8e:	4b0c      	ldr	r3, [pc, #48]	@ (800fac0 <JLINKMEM_Process+0x98>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	601a      	str	r2, [r3, #0]
        _DropTxData();
 800fa94:	f7ff ff82 	bl	800f99c <_DropTxData>
        RX_CNT = 0u;               // Drop all bytes form receiving buffer.
 800fa98:	4b06      	ldr	r3, [pc, #24]	@ (800fab4 <JLINKMEM_Process+0x8c>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	3b18      	subs	r3, #24
 800fa9e:	2200      	movs	r2, #0
 800faa0:	701a      	strb	r2, [r3, #0]
        _Receive();
        _Send();
      }
    }
  }
}
 800faa2:	e003      	b.n	800faac <JLINKMEM_Process+0x84>
        _Receive();
 800faa4:	f7ff fee2 	bl	800f86c <_Receive>
        _Send();
 800faa8:	f7ff ff8a 	bl	800f9c0 <_Send>
}
 800faac:	bf00      	nop
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	20003060 	.word	0x20003060
 800fab4:	20003054 	.word	0x20003054
 800fab8:	2000306c 	.word	0x2000306c
 800fabc:	20003074 	.word	0x20003074
 800fac0:	20003058 	.word	0x20003058

0800fac4 <JLINKMEM_SendChar>:
*    and sent later, when the handler is called.
*
*  Parameter
*    Data: Data byte to be sent.
*/
void JLINKMEM_SendChar(OS_U8 Data) {
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	4603      	mov	r3, r0
 800facc:	71fb      	strb	r3, [r7, #7]
  if (OS_IsRunning() != 0u) {  // No communication until the embOS starts
 800face:	f001 fbab 	bl	8011228 <OS_IsRunning>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d037      	beq.n	800fb48 <JLINKMEM_SendChar+0x84>
    if (_IsInited == 0u) {
 800fad8:	4b20      	ldr	r3, [pc, #128]	@ (800fb5c <JLINKMEM_SendChar+0x98>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d104      	bne.n	800faea <JLINKMEM_SendChar+0x26>
      _Init();
 800fae0:	f7ff fe48 	bl	800f774 <_Init>
      _IsInited = 1u;
 800fae4:	4b1d      	ldr	r3, [pc, #116]	@ (800fb5c <JLINKMEM_SendChar+0x98>)
 800fae6:	2201      	movs	r2, #1
 800fae8:	601a      	str	r2, [r3, #0]
    }
    if (HOST_ACT != 0u) {      // Do nothing until embOSView connects to us
 800faea:	4b1d      	ldr	r3, [pc, #116]	@ (800fb60 <JLINKMEM_SendChar+0x9c>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	3b17      	subs	r3, #23
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d020      	beq.n	800fb3a <JLINKMEM_SendChar+0x76>
      if (TX_CNT == 0u) {
 800faf8:	4b19      	ldr	r3, [pc, #100]	@ (800fb60 <JLINKMEM_SendChar+0x9c>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	3b16      	subs	r3, #22
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d112      	bne.n	800fb2c <JLINKMEM_SendChar+0x68>
        if (_LockTxBuf() != 0u) {
 800fb06:	f7ff fe7b 	bl	800f800 <_LockTxBuf>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d006      	beq.n	800fb1e <JLINKMEM_SendChar+0x5a>
          _FillTxBuf(Data);
 800fb10:	79fb      	ldrb	r3, [r7, #7]
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7ff feea 	bl	800f8ec <_FillTxBuf>
          _UnlockTxBuf();
 800fb18:	f7ff fe9c 	bl	800f854 <_UnlockTxBuf>
    //
    OS_TASK_EnterRegion();
    OS_COM_ClearTxActive();
    OS_TASK_LeaveRegion();
  }
}
 800fb1c:	e01a      	b.n	800fb54 <JLINKMEM_SendChar+0x90>
          _TxIsPending   = 1u;
 800fb1e:	4b11      	ldr	r3, [pc, #68]	@ (800fb64 <JLINKMEM_SendChar+0xa0>)
 800fb20:	2201      	movs	r2, #1
 800fb22:	601a      	str	r2, [r3, #0]
          _TxPendingData = Data;
 800fb24:	4a10      	ldr	r2, [pc, #64]	@ (800fb68 <JLINKMEM_SendChar+0xa4>)
 800fb26:	79fb      	ldrb	r3, [r7, #7]
 800fb28:	7013      	strb	r3, [r2, #0]
}
 800fb2a:	e013      	b.n	800fb54 <JLINKMEM_SendChar+0x90>
        _TxIsPending   = 1u;
 800fb2c:	4b0d      	ldr	r3, [pc, #52]	@ (800fb64 <JLINKMEM_SendChar+0xa0>)
 800fb2e:	2201      	movs	r2, #1
 800fb30:	601a      	str	r2, [r3, #0]
        _TxPendingData = Data;
 800fb32:	4a0d      	ldr	r2, [pc, #52]	@ (800fb68 <JLINKMEM_SendChar+0xa4>)
 800fb34:	79fb      	ldrb	r3, [r7, #7]
 800fb36:	7013      	strb	r3, [r2, #0]
}
 800fb38:	e00c      	b.n	800fb54 <JLINKMEM_SendChar+0x90>
      OS_TASK_EnterRegion();
 800fb3a:	f001 f8b3 	bl	8010ca4 <OS_EnterRegionFunc>
      OS_COM_ClearTxActive();
 800fb3e:	f001 fda7 	bl	8011690 <OS_COM_ClearTxActive>
      OS_TASK_LeaveRegion();
 800fb42:	f000 fc2f 	bl	80103a4 <OS_TASK_LeaveRegion>
}
 800fb46:	e005      	b.n	800fb54 <JLINKMEM_SendChar+0x90>
    OS_TASK_EnterRegion();
 800fb48:	f001 f8ac 	bl	8010ca4 <OS_EnterRegionFunc>
    OS_COM_ClearTxActive();
 800fb4c:	f001 fda0 	bl	8011690 <OS_COM_ClearTxActive>
    OS_TASK_LeaveRegion();
 800fb50:	f000 fc28 	bl	80103a4 <OS_TASK_LeaveRegion>
}
 800fb54:	bf00      	nop
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	20003060 	.word	0x20003060
 800fb60:	20003054 	.word	0x20003054
 800fb64:	20003058 	.word	0x20003058
 800fb68:	2000305c 	.word	0x2000305c

0800fb6c <JLINKMEM_SetpfOnRx>:
*    Sets the Rx callback routine
*
*  Parameter
*    pfOnRx: Pointer to Rx callback routine
*/
void JLINKMEM_SetpfOnRx(void (*pfOnRx)(OS_U8 Data)) {
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  _pfOnRx = pfOnRx;
 800fb74:	4a03      	ldr	r2, [pc, #12]	@ (800fb84 <JLINKMEM_SetpfOnRx+0x18>)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6013      	str	r3, [r2, #0]
}
 800fb7a:	bf00      	nop
 800fb7c:	370c      	adds	r7, #12
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bc80      	pop	{r7}
 800fb82:	4770      	bx	lr
 800fb84:	20003048 	.word	0x20003048

0800fb88 <JLINKMEM_SetpfOnTx>:
*    Sets the Tx callback routine
*
*  Parameter
*    pfOnTx: Pointer to Tx callback routine
*/
void JLINKMEM_SetpfOnTx(OS_U8 (*pfOnTx)(void)) {
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  _pfOnTx = pfOnTx;
 800fb90:	4a03      	ldr	r2, [pc, #12]	@ (800fba0 <JLINKMEM_SetpfOnTx+0x18>)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6013      	str	r3, [r2, #0]
}
 800fb96:	bf00      	nop
 800fb98:	370c      	adds	r7, #12
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bc80      	pop	{r7}
 800fb9e:	4770      	bx	lr
 800fba0:	2000304c 	.word	0x2000304c

0800fba4 <JLINKMEM_SetpfGetNextChar>:
*    Sets the get next character callback routine
*
*  Parameter
*    pfGetNextChar: Pointer to  get next character callback routine
*/
void JLINKMEM_SetpfGetNextChar(OS_INT (*pfGetNextChar)(void)) {
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  _pfGetNextChar = pfGetNextChar;
 800fbac:	4a03      	ldr	r2, [pc, #12]	@ (800fbbc <JLINKMEM_SetpfGetNextChar+0x18>)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6013      	str	r3, [r2, #0]
}
 800fbb2:	bf00      	nop
 800fbb4:	370c      	adds	r7, #12
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bc80      	pop	{r7}
 800fbba:	4770      	bx	lr
 800fbbc:	20003050 	.word	0x20003050

0800fbc0 <OS_Error>:
*    of the listed errors may occur.
*
*  Parameters
*    ErrCode: embOS error code
*/
void OS_Error(OS_STATUS ErrCode) {
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	80fb      	strh	r3, [r7, #6]
  OS_MPU_PRIVSTATE_ENTER();
  //
  // Disabling preemptive task switches avoids that other higher priority
  // tasks preempt OS_Error() which makes debugging easier.
  //
  OS_TASK_EnterRegion();
 800fbca:	f001 f86b 	bl	8010ca4 <OS_EnterRegionFunc>
  //
  // Enable interrupts for embOSView communication.
  //
  OS_Global.Counters.Cnt.DI = 0u;
 800fbce:	4b09      	ldr	r3, [pc, #36]	@ (800fbf4 <OS_Error+0x34>)
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	705a      	strb	r2, [r3, #1]
  OS_INT_Enable();
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	f383 8811 	msr	BASEPRI, r3
  //
  // OS_Global.Status will be shown in e.g. embOSView and IDE plugins.
  // It is available in debug and stack check builds only.
  //
#if (OS_DEBUG != 0) || (OS_SUPPORT_STACKCHECK != 0)
  OS_Global.Status = ErrCode;
 800fbda:	4a06      	ldr	r2, [pc, #24]	@ (800fbf4 <OS_Error+0x34>)
 800fbdc:	88fb      	ldrh	r3, [r7, #6]
 800fbde:	f8a2 3074 	strh.w	r3, [r2, #116]	@ 0x74
#endif
  //
  // Endless loop may be left by setting ErrCode to OS_OK (0).
  //
  while (ErrCode != OS_OK) {
 800fbe2:	bf00      	nop
 800fbe4:	88fb      	ldrh	r3, [r7, #6]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1fc      	bne.n	800fbe4 <OS_Error+0x24>
  }
  OS_MPU_PRIVSTATE_LEAVE();
}
 800fbea:	bf00      	nop
 800fbec:	bf00      	nop
 800fbee:	3708      	adds	r7, #8
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}
 800fbf4:	20003088 	.word	0x20003088

0800fbf8 <__NVIC_SetPriority>:
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	4603      	mov	r3, r0
 800fc00:	6039      	str	r1, [r7, #0]
 800fc02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fc04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	db0a      	blt.n	800fc22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	b2da      	uxtb	r2, r3
 800fc10:	490c      	ldr	r1, [pc, #48]	@ (800fc44 <__NVIC_SetPriority+0x4c>)
 800fc12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc16:	0112      	lsls	r2, r2, #4
 800fc18:	b2d2      	uxtb	r2, r2
 800fc1a:	440b      	add	r3, r1
 800fc1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800fc20:	e00a      	b.n	800fc38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	b2da      	uxtb	r2, r3
 800fc26:	4908      	ldr	r1, [pc, #32]	@ (800fc48 <__NVIC_SetPriority+0x50>)
 800fc28:	79fb      	ldrb	r3, [r7, #7]
 800fc2a:	f003 030f 	and.w	r3, r3, #15
 800fc2e:	3b04      	subs	r3, #4
 800fc30:	0112      	lsls	r2, r2, #4
 800fc32:	b2d2      	uxtb	r2, r2
 800fc34:	440b      	add	r3, r1
 800fc36:	761a      	strb	r2, [r3, #24]
}
 800fc38:	bf00      	nop
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bc80      	pop	{r7}
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	e000e100 	.word	0xe000e100
 800fc48:	e000ed00 	.word	0xe000ed00

0800fc4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	3b01      	subs	r3, #1
 800fc58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc5c:	d301      	bcc.n	800fc62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e00f      	b.n	800fc82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fc62:	4a0a      	ldr	r2, [pc, #40]	@ (800fc8c <SysTick_Config+0x40>)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	3b01      	subs	r3, #1
 800fc68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800fc6a:	210f      	movs	r1, #15
 800fc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc70:	f7ff ffc2 	bl	800fbf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fc74:	4b05      	ldr	r3, [pc, #20]	@ (800fc8c <SysTick_Config+0x40>)
 800fc76:	2200      	movs	r2, #0
 800fc78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fc7a:	4b04      	ldr	r3, [pc, #16]	@ (800fc8c <SysTick_Config+0x40>)
 800fc7c:	2207      	movs	r2, #7
 800fc7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fc80:	2300      	movs	r3, #0
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3708      	adds	r7, #8
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	e000e010 	.word	0xe000e010

0800fc90 <_OS_GetHWTimerCycles>:
*    Returns the current hardware timer count value.
*
*  Return value
*    Current timer count value.
*/
static unsigned int _OS_GetHWTimerCycles(void) {
 800fc90:	b480      	push	{r7}
 800fc92:	af00      	add	r7, sp, #0
  return SysTick->VAL;
 800fc94:	4b02      	ldr	r3, [pc, #8]	@ (800fca0 <_OS_GetHWTimerCycles+0x10>)
 800fc96:	689b      	ldr	r3, [r3, #8]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bc80      	pop	{r7}
 800fc9e:	4770      	bx	lr
 800fca0:	e000e010 	.word	0xe000e010

0800fca4 <_OS_GetHWTimer_IntPending>:
*
*  Return value
*    == 0: Interrupt pending flag not set.
*    != 0: Interrupt pending flag set.
*/
static unsigned int _OS_GetHWTimer_IntPending(void) {
 800fca4:	b480      	push	{r7}
 800fca6:	af00      	add	r7, sp, #0
  return SCB->ICSR & SCB_ICSR_PENDSTSET_Msk;
 800fca8:	4b03      	ldr	r3, [pc, #12]	@ (800fcb8 <_OS_GetHWTimer_IntPending+0x14>)
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bc80      	pop	{r7}
 800fcb6:	4770      	bx	lr
 800fcb8:	e000ed00 	.word	0xe000ed00

0800fcbc <SysTick_Handler>:
*       SysTick_Handler()
*
*  Function description
*    This is the hardware timer exception handler.
*/
void SysTick_Handler(void) {
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	af00      	add	r7, sp, #0
  OS_INT_EnterNestable();
 800fcc0:	4b40      	ldr	r3, [pc, #256]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fcc2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d102      	bne.n	800fcd0 <SysTick_Handler+0x14>
 800fcca:	20a5      	movs	r0, #165	@ 0xa5
 800fccc:	f7ff ff78 	bl	800fbc0 <OS_Error>
 800fcd0:	4b3c      	ldr	r3, [pc, #240]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fcd2:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	b2da      	uxtb	r2, r3
 800fcda:	4b3a      	ldr	r3, [pc, #232]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fcdc:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
 800fce0:	4b38      	ldr	r3, [pc, #224]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	b2db      	uxtb	r3, r3
 800fce6:	2bff      	cmp	r3, #255	@ 0xff
 800fce8:	d102      	bne.n	800fcf0 <SysTick_Handler+0x34>
 800fcea:	209d      	movs	r0, #157	@ 0x9d
 800fcec:	f7ff ff68 	bl	800fbc0 <OS_Error>
 800fcf0:	4b34      	ldr	r3, [pc, #208]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	b2da      	uxtb	r2, r3
 800fcfa:	4b32      	ldr	r3, [pc, #200]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fcfc:	701a      	strb	r2, [r3, #0]
 800fcfe:	f000 ff51 	bl	8010ba4 <OS_AssertCPUInISRMode>
 800fd02:	4b30      	ldr	r3, [pc, #192]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d003      	beq.n	800fd12 <SysTick_Handler+0x56>
 800fd0a:	4b2e      	ldr	r3, [pc, #184]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4798      	blx	r3
  OS_TICK_Handle();
 800fd12:	f000 fb79 	bl	8010408 <OS_TICK_Handle>
#if (OS_VIEW_IFSELECT == OS_VIEW_IF_JLINK)
  JLINKMEM_Process();
 800fd16:	f7ff fe87 	bl	800fa28 <JLINKMEM_Process>
#endif
  OS_INT_LeaveNestable();
 800fd1a:	4b2a      	ldr	r3, [pc, #168]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d10c      	bne.n	800fd3e <SysTick_Handler+0x82>
 800fd24:	4b27      	ldr	r3, [pc, #156]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d008      	beq.n	800fd3e <SysTick_Handler+0x82>
 800fd2c:	4b25      	ldr	r3, [pc, #148]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00c      	beq.n	800fd4e <SysTick_Handler+0x92>
 800fd34:	4b23      	ldr	r3, [pc, #140]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd38:	689b      	ldr	r3, [r3, #8]
 800fd3a:	4798      	blx	r3
 800fd3c:	e007      	b.n	800fd4e <SysTick_Handler+0x92>
 800fd3e:	4b21      	ldr	r3, [pc, #132]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d003      	beq.n	800fd4e <SysTick_Handler+0x92>
 800fd46:	4b1f      	ldr	r3, [pc, #124]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	4798      	blx	r3
 800fd4e:	2380      	movs	r3, #128	@ 0x80
 800fd50:	f383 8811 	msr	BASEPRI, r3
 800fd54:	4b1b      	ldr	r3, [pc, #108]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d116      	bne.n	800fd8c <SysTick_Handler+0xd0>
 800fd5e:	4b19      	ldr	r3, [pc, #100]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d012      	beq.n	800fd8c <SysTick_Handler+0xd0>
 800fd66:	4b17      	ldr	r3, [pc, #92]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd68:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d102      	bne.n	800fd76 <SysTick_Handler+0xba>
 800fd70:	2098      	movs	r0, #152	@ 0x98
 800fd72:	f7ff ff25 	bl	800fbc0 <OS_Error>
 800fd76:	4b13      	ldr	r3, [pc, #76]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd78:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800fd7c:	3b01      	subs	r3, #1
 800fd7e:	b2da      	uxtb	r2, r3
 800fd80:	4b10      	ldr	r3, [pc, #64]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd82:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
 800fd86:	f7f8 fec8 	bl	8008b1a <OS_SwitchFromInt>
 800fd8a:	e00f      	b.n	800fdac <SysTick_Handler+0xf0>
 800fd8c:	4b0d      	ldr	r3, [pc, #52]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd8e:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d102      	bne.n	800fd9c <SysTick_Handler+0xe0>
 800fd96:	2098      	movs	r0, #152	@ 0x98
 800fd98:	f7ff ff12 	bl	800fbc0 <OS_Error>
 800fd9c:	4b09      	ldr	r3, [pc, #36]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fd9e:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800fda2:	3b01      	subs	r3, #1
 800fda4:	b2da      	uxtb	r2, r3
 800fda6:	4b07      	ldr	r3, [pc, #28]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fda8:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
 800fdac:	4b05      	ldr	r3, [pc, #20]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	b2da      	uxtb	r2, r3
 800fdb6:	4b03      	ldr	r3, [pc, #12]	@ (800fdc4 <SysTick_Handler+0x108>)
 800fdb8:	701a      	strb	r2, [r3, #0]
 800fdba:	2300      	movs	r3, #0
 800fdbc:	f383 8811 	msr	BASEPRI, r3
}
 800fdc0:	bf00      	nop
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	20003088 	.word	0x20003088

0800fdc8 <OS_InitHW>:
*       OS_InitHW()
*
*  Function description
*    Initialize the hardware required for embOS to run.
*/
void OS_InitHW(void) {
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b086      	sub	sp, #24
 800fdcc:	af00      	add	r7, sp, #0
  OS_INT_IncDI();
 800fdce:	4b2b      	ldr	r3, [pc, #172]	@ (800fe7c <OS_InitHW+0xb4>)
 800fdd0:	785b      	ldrb	r3, [r3, #1]
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	2b0f      	cmp	r3, #15
 800fdd6:	d902      	bls.n	800fdde <OS_InitHW+0x16>
 800fdd8:	2099      	movs	r0, #153	@ 0x99
 800fdda:	f7ff fef1 	bl	800fbc0 <OS_Error>
 800fdde:	2380      	movs	r3, #128	@ 0x80
 800fde0:	f383 8811 	msr	BASEPRI, r3
 800fde4:	4b25      	ldr	r3, [pc, #148]	@ (800fe7c <OS_InitHW+0xb4>)
 800fde6:	785b      	ldrb	r3, [r3, #1]
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	3301      	adds	r3, #1
 800fdec:	b2da      	uxtb	r2, r3
 800fdee:	4b23      	ldr	r3, [pc, #140]	@ (800fe7c <OS_InitHW+0xb4>)
 800fdf0:	705a      	strb	r2, [r3, #1]
  //
  // We assume PLL and core clock were already set by the SystemInit() function,
  // which was called from the startup code. Therefore, we just ensure the system
  // clock variable is updated and then set the periodic system timer tick for embOS.
  //
  SystemCoreClockUpdate();                                        // Update the system clock variable (might not have been set before)
 800fdf2:	f7fc f9cd 	bl	800c190 <SystemCoreClockUpdate>
  SysTick_Config(OS_TIMER_FREQ / OS_INT_FREQ);                    // Setup SysTick Timer
 800fdf6:	4b22      	ldr	r3, [pc, #136]	@ (800fe80 <OS_InitHW+0xb8>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	4a22      	ldr	r2, [pc, #136]	@ (800fe84 <OS_InitHW+0xbc>)
 800fdfc:	fba2 2303 	umull	r2, r3, r2, r3
 800fe00:	099b      	lsrs	r3, r3, #6
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7ff ff22 	bl	800fc4c <SysTick_Config>
  NVIC_SetPriority(SysTick_IRQn, (1u << __NVIC_PRIO_BITS) - 2u);  // Set the priority higher than the PendSV priority
 800fe08:	210e      	movs	r1, #14
 800fe0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe0e:	f7ff fef3 	bl	800fbf8 <__NVIC_SetPriority>
  //
  // Inform embOS about the timer settings
  //
  {
    OS_SYSTIMER_CONFIG SysTimerConfig = {OS_TIMER_FREQ, OS_INT_FREQ, OS_TIMER_DOWNCOUNTING, _OS_GetHWTimerCycles, _OS_GetHWTimer_IntPending};
 800fe12:	4b1b      	ldr	r3, [pc, #108]	@ (800fe80 <OS_InitHW+0xb8>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	607b      	str	r3, [r7, #4]
 800fe18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe1c:	60bb      	str	r3, [r7, #8]
 800fe1e:	2300      	movs	r3, #0
 800fe20:	733b      	strb	r3, [r7, #12]
 800fe22:	4b19      	ldr	r3, [pc, #100]	@ (800fe88 <OS_InitHW+0xc0>)
 800fe24:	613b      	str	r3, [r7, #16]
 800fe26:	4b19      	ldr	r3, [pc, #100]	@ (800fe8c <OS_InitHW+0xc4>)
 800fe28:	617b      	str	r3, [r7, #20]
    OS_TIME_ConfigSysTimer(&SysTimerConfig);
 800fe2a:	1d3b      	adds	r3, r7, #4
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f000 f893 	bl	800ff58 <OS_TIME_ConfigSysTimer>
  }
  //
  // Initialize communication for embOSView
  //
#if (OS_VIEW_IFSELECT == OS_VIEW_IF_JLINK)
  JLINKMEM_SetpfOnRx(OS_COM_OnRx);
 800fe32:	4817      	ldr	r0, [pc, #92]	@ (800fe90 <OS_InitHW+0xc8>)
 800fe34:	f7ff fe9a 	bl	800fb6c <JLINKMEM_SetpfOnRx>
  JLINKMEM_SetpfOnTx(OS_COM_OnTx);
 800fe38:	4816      	ldr	r0, [pc, #88]	@ (800fe94 <OS_InitHW+0xcc>)
 800fe3a:	f7ff fea5 	bl	800fb88 <JLINKMEM_SetpfOnTx>
  JLINKMEM_SetpfGetNextChar(OS_COM_GetNextChar);
 800fe3e:	4816      	ldr	r0, [pc, #88]	@ (800fe98 <OS_InitHW+0xd0>)
 800fe40:	f7ff feb0 	bl	800fba4 <JLINKMEM_SetpfGetNextChar>
#elif (OS_VIEW_IFSELECT == OS_VIEW_IF_UART)
  BSP_UART_Init(OS_UART, OS_BAUDRATE, BSP_UART_DATA_BITS_8, BSP_UART_PARITY_NONE, BSP_UART_STOP_BITS_1);
  BSP_UART_SetReadCallback(OS_UART, _OS_OnRX);
  BSP_UART_SetWriteCallback(OS_UART, _OS_OnTX);
#endif
  OS_INT_DecRI();
 800fe44:	4b0d      	ldr	r3, [pc, #52]	@ (800fe7c <OS_InitHW+0xb4>)
 800fe46:	785b      	ldrb	r3, [r3, #1]
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	2b0f      	cmp	r3, #15
 800fe4c:	d902      	bls.n	800fe54 <OS_InitHW+0x8c>
 800fe4e:	2099      	movs	r0, #153	@ 0x99
 800fe50:	f7ff feb6 	bl	800fbc0 <OS_Error>
 800fe54:	4b09      	ldr	r3, [pc, #36]	@ (800fe7c <OS_InitHW+0xb4>)
 800fe56:	785b      	ldrb	r3, [r3, #1]
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	3b01      	subs	r3, #1
 800fe5c:	b2da      	uxtb	r2, r3
 800fe5e:	4b07      	ldr	r3, [pc, #28]	@ (800fe7c <OS_InitHW+0xb4>)
 800fe60:	705a      	strb	r2, [r3, #1]
 800fe62:	4b06      	ldr	r3, [pc, #24]	@ (800fe7c <OS_InitHW+0xb4>)
 800fe64:	785b      	ldrb	r3, [r3, #1]
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d102      	bne.n	800fe72 <OS_InitHW+0xaa>
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	f383 8811 	msr	BASEPRI, r3
}
 800fe72:	bf00      	nop
 800fe74:	3718      	adds	r7, #24
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	20003088 	.word	0x20003088
 800fe80:	2000001c 	.word	0x2000001c
 800fe84:	10624dd3 	.word	0x10624dd3
 800fe88:	0800fc91 	.word	0x0800fc91
 800fe8c:	0800fca5 	.word	0x0800fca5
 800fe90:	08011985 	.word	0x08011985
 800fe94:	08011a41 	.word	0x08011a41
 800fe98:	080116f3 	.word	0x080116f3

0800fe9c <OS_Idle>:
*  Additional information
*    The idle loop does not have a stack of its own, therefore no
*    functionality should be implemented that relies on the stack
*    to be preserved.
*/
void OS_Idle(void) {  // Idle loop: No task is ready to execute
 800fe9c:	b480      	push	{r7}
 800fe9e:	af00      	add	r7, sp, #0
  while (1) {         // Nothing to do ... wait for interrupt
 800fea0:	bf00      	nop
 800fea2:	e7fd      	b.n	800fea0 <OS_Idle+0x4>

0800fea4 <OS_COM_Send1>:
*       OS_COM_Send1()
*
*  Function description
*    Sends one character.
*/
void OS_COM_Send1(OS_U8 c) {
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	4603      	mov	r3, r0
 800feac:	71fb      	strb	r3, [r7, #7]
#if (OS_VIEW_IFSELECT == OS_VIEW_IF_JLINK)
  JLINKMEM_SendChar(c);
 800feae:	79fb      	ldrb	r3, [r7, #7]
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7ff fe07 	bl	800fac4 <JLINKMEM_SendChar>
#elif (OS_VIEW_IFSELECT == OS_VIEW_DISABLED)
  OS_USEPARA(c);           // Avoid compiler warning
  OS_COM_ClearTxActive();  // Let embOS know that Tx is not busy
#endif
}
 800feb6:	bf00      	nop
 800feb8:	3708      	adds	r7, #8
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
	...

0800fec0 <OS_InterruptSafe_Lock>:
 800fec0:	b508      	push	{r3, lr}
 800fec2:	f000 fe85 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 800fec6:	4b07      	ldr	r3, [pc, #28]	@ (800fee4 <OS_InterruptSafe_Lock+0x24>)
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	b932      	cbnz	r2, 800feda <OS_InterruptSafe_Lock+0x1a>
 800fecc:	f3ef 8111 	mrs	r1, BASEPRI
 800fed0:	4a05      	ldr	r2, [pc, #20]	@ (800fee8 <OS_InterruptSafe_Lock+0x28>)
 800fed2:	6011      	str	r1, [r2, #0]
 800fed4:	2280      	movs	r2, #128	@ 0x80
 800fed6:	f382 8811 	msr	BASEPRI, r2
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	3201      	adds	r2, #1
 800fede:	601a      	str	r2, [r3, #0]
 800fee0:	bd08      	pop	{r3, pc}
 800fee2:	bf00      	nop
 800fee4:	2000307c 	.word	0x2000307c
 800fee8:	20003078 	.word	0x20003078

0800feec <OS_InterruptSafe_Unlock>:
 800feec:	4a04      	ldr	r2, [pc, #16]	@ (800ff00 <OS_InterruptSafe_Unlock+0x14>)
 800feee:	6813      	ldr	r3, [r2, #0]
 800fef0:	3b01      	subs	r3, #1
 800fef2:	6013      	str	r3, [r2, #0]
 800fef4:	b91b      	cbnz	r3, 800fefe <OS_InterruptSafe_Unlock+0x12>
 800fef6:	4b03      	ldr	r3, [pc, #12]	@ (800ff04 <OS_InterruptSafe_Unlock+0x18>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f383 8811 	msr	BASEPRI, r3
 800fefe:	4770      	bx	lr
 800ff00:	2000307c 	.word	0x2000307c
 800ff04:	20003078 	.word	0x20003078

0800ff08 <OS_GetCPUState>:
 800ff08:	f3ef 8005 	mrs	r0, IPSR
 800ff0c:	b1f0      	cbz	r0, 800ff4c <OS_GetCPUState+0x44>
 800ff0e:	1e83      	subs	r3, r0, #2
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d918      	bls.n	800ff46 <OS_GetCPUState+0x3e>
 800ff14:	280e      	cmp	r0, #14
 800ff16:	d018      	beq.n	800ff4a <OS_GetCPUState+0x42>
 800ff18:	280f      	cmp	r0, #15
 800ff1a:	d907      	bls.n	800ff2c <OS_GetCPUState+0x24>
 800ff1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ff50 <OS_GetCPUState+0x48>)
 800ff1e:	5c1b      	ldrb	r3, [r3, r0]
 800ff20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ff24:	bf0c      	ite	eq
 800ff26:	2002      	moveq	r0, #2
 800ff28:	2001      	movne	r0, #1
 800ff2a:	4770      	bx	lr
 800ff2c:	1f02      	subs	r2, r0, #4
 800ff2e:	2a0b      	cmp	r2, #11
 800ff30:	d807      	bhi.n	800ff42 <OS_GetCPUState+0x3a>
 800ff32:	f640 1387 	movw	r3, #2439	@ 0x987
 800ff36:	40d3      	lsrs	r3, r2
 800ff38:	f013 0301 	ands.w	r3, r3, #1
 800ff3c:	d0f0      	beq.n	800ff20 <OS_GetCPUState+0x18>
 800ff3e:	4b05      	ldr	r3, [pc, #20]	@ (800ff54 <OS_GetCPUState+0x4c>)
 800ff40:	e7ed      	b.n	800ff1e <OS_GetCPUState+0x16>
 800ff42:	2300      	movs	r3, #0
 800ff44:	e7ec      	b.n	800ff20 <OS_GetCPUState+0x18>
 800ff46:	2002      	movs	r0, #2
 800ff48:	4770      	bx	lr
 800ff4a:	2004      	movs	r0, #4
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	e000e3f0 	.word	0xe000e3f0
 800ff54:	e000ed14 	.word	0xe000ed14

0800ff58 <OS_TIME_ConfigSysTimer>:
 800ff58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff5c:	4e2a      	ldr	r6, [pc, #168]	@ (8010008 <OS_TIME_ConfigSysTimer+0xb0>)
 800ff5e:	4604      	mov	r4, r0
 800ff60:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 800ff62:	b133      	cbz	r3, 800ff72 <OS_TIME_ConfigSysTimer+0x1a>
 800ff64:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800ff66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff68:	4798      	blx	r3
 800ff6a:	4601      	mov	r1, r0
 800ff6c:	f240 101b 	movw	r0, #283	@ 0x11b
 800ff70:	47a8      	blx	r5
 800ff72:	4d26      	ldr	r5, [pc, #152]	@ (801000c <OS_TIME_ConfigSysTimer+0xb4>)
 800ff74:	f000 fe2c 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 800ff78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ff7a:	462f      	mov	r7, r5
 800ff7c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ff7e:	fbb0 f2f1 	udiv	r2, r0, r1
 800ff82:	6823      	ldr	r3, [r4, #0]
 800ff84:	4601      	mov	r1, r0
 800ff86:	603b      	str	r3, [r7, #0]
 800ff88:	616a      	str	r2, [r5, #20]
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ff90:	bb19      	cbnz	r1, 800ffda <OS_TIME_ConfigSysTimer+0x82>
 800ff92:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ff96:	fbb1 f1f2 	udiv	r1, r1, r2
 800ff9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ff9e:	61a9      	str	r1, [r5, #24]
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	61ea      	str	r2, [r5, #28]
 800ffa4:	4a1a      	ldr	r2, [pc, #104]	@ (8010010 <OS_TIME_ConfigSysTimer+0xb8>)
 800ffa6:	b9f9      	cbnz	r1, 800ffe8 <OS_TIME_ConfigSysTimer+0x90>
 800ffa8:	4919      	ldr	r1, [pc, #100]	@ (8010010 <OS_TIME_ConfigSysTimer+0xb8>)
 800ffaa:	fbb1 f1f2 	udiv	r1, r1, r2
 800ffae:	fbb3 f2f2 	udiv	r2, r3, r2
 800ffb2:	626a      	str	r2, [r5, #36]	@ 0x24
 800ffb4:	4a17      	ldr	r2, [pc, #92]	@ (8010014 <OS_TIME_ConfigSysTimer+0xbc>)
 800ffb6:	6229      	str	r1, [r5, #32]
 800ffb8:	4610      	mov	r0, r2
 800ffba:	4619      	mov	r1, r3
 800ffbc:	b9d9      	cbnz	r1, 800fff6 <OS_TIME_ConfigSysTimer+0x9e>
 800ffbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffc2:	fbb0 f0f2 	udiv	r0, r0, r2
 800ffc6:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800ffc8:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 800ffca:	62a8      	str	r0, [r5, #40]	@ 0x28
 800ffcc:	b1d3      	cbz	r3, 8010004 <OS_TIME_ConfigSysTimer+0xac>
 800ffce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd2:	f240 101b 	movw	r0, #283	@ 0x11b
 800ffd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ffd8:	4718      	bx	r3
 800ffda:	fbb2 f0f1 	udiv	r0, r2, r1
 800ffde:	fb01 2010 	mls	r0, r1, r0, r2
 800ffe2:	460a      	mov	r2, r1
 800ffe4:	4601      	mov	r1, r0
 800ffe6:	e7d3      	b.n	800ff90 <OS_TIME_ConfigSysTimer+0x38>
 800ffe8:	fbb2 f0f1 	udiv	r0, r2, r1
 800ffec:	fb01 2010 	mls	r0, r1, r0, r2
 800fff0:	460a      	mov	r2, r1
 800fff2:	4601      	mov	r1, r0
 800fff4:	e7d7      	b.n	800ffa6 <OS_TIME_ConfigSysTimer+0x4e>
 800fff6:	fbb2 f4f1 	udiv	r4, r2, r1
 800fffa:	fb01 2414 	mls	r4, r1, r4, r2
 800fffe:	460a      	mov	r2, r1
 8010000:	4621      	mov	r1, r4
 8010002:	e7db      	b.n	800ffbc <OS_TIME_ConfigSysTimer+0x64>
 8010004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010008:	20003088 	.word	0x20003088
 801000c:	20003108 	.word	0x20003108
 8010010:	000f4240 	.word	0x000f4240
 8010014:	3b9aca00 	.word	0x3b9aca00

08010018 <OS__TIME_GetCycles>:
 8010018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801001c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80100a8 <OS__TIME_GetCycles+0x90>
 8010020:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8010024:	b913      	cbnz	r3, 801002c <OS__TIME_GetCycles+0x14>
 8010026:	20eb      	movs	r0, #235	@ 0xeb
 8010028:	f7ff fdca 	bl	800fbc0 <OS_Error>
 801002c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010030:	b913      	cbnz	r3, 8010038 <OS__TIME_GetCycles+0x20>
 8010032:	20ec      	movs	r0, #236	@ 0xec
 8010034:	f7ff fdc4 	bl	800fbc0 <OS_Error>
 8010038:	2380      	movs	r3, #128	@ 0x80
 801003a:	f383 8811 	msr	BASEPRI, r3
 801003e:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 80100ac <OS__TIME_GetCycles+0x94>
 8010042:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8010046:	e9d8 4704 	ldrd	r4, r7, [r8, #16]
 801004a:	4798      	blx	r3
 801004c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010050:	4605      	mov	r5, r0
 8010052:	4798      	blx	r3
 8010054:	4606      	mov	r6, r0
 8010056:	b138      	cbz	r0, 8010068 <OS__TIME_GetCycles+0x50>
 8010058:	3401      	adds	r4, #1
 801005a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801005e:	f147 0700 	adc.w	r7, r7, #0
 8010062:	4798      	blx	r3
 8010064:	2600      	movs	r6, #0
 8010066:	4605      	mov	r5, r0
 8010068:	f898 3001 	ldrb.w	r3, [r8, #1]
 801006c:	2b0f      	cmp	r3, #15
 801006e:	d902      	bls.n	8010076 <OS__TIME_GetCycles+0x5e>
 8010070:	2099      	movs	r0, #153	@ 0x99
 8010072:	f7ff fda5 	bl	800fbc0 <OS_Error>
 8010076:	f898 3001 	ldrb.w	r3, [r8, #1]
 801007a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801007e:	b90b      	cbnz	r3, 8010084 <OS__TIME_GetCycles+0x6c>
 8010080:	f382 8811 	msr	BASEPRI, r2
 8010084:	f899 2008 	ldrb.w	r2, [r9, #8]
 8010088:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801008c:	b912      	cbnz	r2, 8010094 <OS__TIME_GetCycles+0x7c>
 801008e:	1b5d      	subs	r5, r3, r5
 8010090:	eb66 0606 	sbc.w	r6, r6, r6
 8010094:	fba4 4103 	umull	r4, r1, r4, r3
 8010098:	fb03 1107 	mla	r1, r3, r7, r1
 801009c:	1960      	adds	r0, r4, r5
 801009e:	eb41 0106 	adc.w	r1, r1, r6
 80100a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100a6:	bf00      	nop
 80100a8:	20003108 	.word	0x20003108
 80100ac:	20003088 	.word	0x20003088

080100b0 <OS_TIME_GetTicks>:
 80100b0:	b510      	push	{r4, lr}
 80100b2:	f7ff ff29 	bl	800ff08 <OS_GetCPUState>
 80100b6:	2801      	cmp	r0, #1
 80100b8:	4c05      	ldr	r4, [pc, #20]	@ (80100d0 <OS_TIME_GetTicks+0x20>)
 80100ba:	d105      	bne.n	80100c8 <OS_TIME_GetTicks+0x18>
 80100bc:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 80100c0:	b913      	cbnz	r3, 80100c8 <OS_TIME_GetTicks+0x18>
 80100c2:	20a4      	movs	r0, #164	@ 0xa4
 80100c4:	f7ff fd7c 	bl	800fbc0 <OS_Error>
 80100c8:	f000 fd82 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 80100cc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80100ce:	bd10      	pop	{r4, pc}
 80100d0:	20003088 	.word	0x20003088

080100d4 <OS_TIME_GetTicks32>:
 80100d4:	f7ff bfec 	b.w	80100b0 <OS_TIME_GetTicks>

080100d8 <_DelayUntil>:
 80100d8:	b510      	push	{r4, lr}
 80100da:	4b0e      	ldr	r3, [pc, #56]	@ (8010114 <_DelayUntil+0x3c>)
 80100dc:	4604      	mov	r4, r0
 80100de:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 80100e2:	b952      	cbnz	r2, 80100fa <_DelayUntil+0x22>
 80100e4:	785b      	ldrb	r3, [r3, #1]
 80100e6:	b113      	cbz	r3, 80100ee <_DelayUntil+0x16>
 80100e8:	209a      	movs	r0, #154	@ 0x9a
 80100ea:	f7ff fd69 	bl	800fbc0 <OS_Error>
 80100ee:	f7ff ffdf 	bl	80100b0 <OS_TIME_GetTicks>
 80100f2:	1b00      	subs	r0, r0, r4
 80100f4:	2800      	cmp	r0, #0
 80100f6:	dbfa      	blt.n	80100ee <_DelayUntil+0x16>
 80100f8:	bd10      	pop	{r4, pc}
 80100fa:	2280      	movs	r2, #128	@ 0x80
 80100fc:	f382 8811 	msr	BASEPRI, r2
 8010100:	2204      	movs	r2, #4
 8010102:	689b      	ldr	r3, [r3, #8]
 8010104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8010108:	60d8      	str	r0, [r3, #12]
 801010a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801010e:	f000 bd73 	b.w	8010bf8 <OS_Deactivated>
 8010112:	bf00      	nop
 8010114:	20003088 	.word	0x20003088

08010118 <OS_TASK_Create_DP>:
 8010118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011c:	4d54      	ldr	r5, [pc, #336]	@ (8010270 <OS_TASK_Create_DP+0x158>)
 801011e:	461f      	mov	r7, r3
 8010120:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8010122:	b085      	sub	sp, #20
 8010124:	4604      	mov	r4, r0
 8010126:	e9dd 680e 	ldrd	r6, r8, [sp, #56]	@ 0x38
 801012a:	4691      	mov	r9, r2
 801012c:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8010130:	9103      	str	r1, [sp, #12]
 8010132:	b14b      	cbz	r3, 8010148 <OS_TASK_Create_DP+0x30>
 8010134:	e9d3 b30e 	ldrd	fp, r3, [r3, #56]	@ 0x38
 8010138:	4798      	blx	r3
 801013a:	4633      	mov	r3, r6
 801013c:	4601      	mov	r1, r0
 801013e:	464a      	mov	r2, r9
 8010140:	202e      	movs	r0, #46	@ 0x2e
 8010142:	f8cd 8000 	str.w	r8, [sp]
 8010146:	47d8      	blx	fp
 8010148:	f895 3078 	ldrb.w	r3, [r5, #120]	@ 0x78
 801014c:	b913      	cbnz	r3, 8010154 <OS_TASK_Create_DP+0x3c>
 801014e:	20a5      	movs	r0, #165	@ 0xa5
 8010150:	f7ff fd36 	bl	800fbc0 <OS_Error>
 8010154:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010156:	b12b      	cbz	r3, 8010164 <OS_TASK_Create_DP+0x4c>
 8010158:	f895 3077 	ldrb.w	r3, [r5, #119]	@ 0x77
 801015c:	b913      	cbnz	r3, 8010164 <OS_TASK_Create_DP+0x4c>
 801015e:	20a1      	movs	r0, #161	@ 0xa1
 8010160:	f7ff fd2e 	bl	800fbc0 <OS_Error>
 8010164:	f7ff fed0 	bl	800ff08 <OS_GetCPUState>
 8010168:	2801      	cmp	r0, #1
 801016a:	d102      	bne.n	8010172 <OS_TASK_Create_DP+0x5a>
 801016c:	20a0      	movs	r0, #160	@ 0xa0
 801016e:	f7ff fd27 	bl	800fbc0 <OS_Error>
 8010172:	f000 fd2d 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 8010176:	2380      	movs	r3, #128	@ 0x80
 8010178:	f383 8811 	msr	BASEPRI, r3
 801017c:	f8d5 b018 	ldr.w	fp, [r5, #24]
 8010180:	f1bb 0f00 	cmp.w	fp, #0
 8010184:	d169      	bne.n	801025a <OS_TASK_Create_DP+0x142>
 8010186:	786b      	ldrb	r3, [r5, #1]
 8010188:	2b0f      	cmp	r3, #15
 801018a:	d902      	bls.n	8010192 <OS_TASK_Create_DP+0x7a>
 801018c:	2099      	movs	r0, #153	@ 0x99
 801018e:	f7ff fd17 	bl	800fbc0 <OS_Error>
 8010192:	786b      	ldrb	r3, [r5, #1]
 8010194:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010198:	b90b      	cbnz	r3, 801019e <OS_TASK_Create_DP+0x86>
 801019a:	f382 8811 	msr	BASEPRI, r2
 801019e:	2254      	movs	r2, #84	@ 0x54
 80101a0:	2100      	movs	r1, #0
 80101a2:	4620      	mov	r0, r4
 80101a4:	f001 ffbd 	bl	8012122 <memset>
 80101a8:	230f      	movs	r3, #15
 80101aa:	e9c4 9904 	strd	r9, r9, [r4, #16]
 80101ae:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
 80101b2:	f895 307d 	ldrb.w	r3, [r5, #125]	@ 0x7d
 80101b6:	f1b8 0f57 	cmp.w	r8, #87	@ 0x57
 80101ba:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 80101be:	9b03      	ldr	r3, [sp, #12]
 80101c0:	f884 a052 	strb.w	sl, [r4, #82]	@ 0x52
 80101c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80101c6:	d802      	bhi.n	80101ce <OS_TASK_Create_DP+0xb6>
 80101c8:	2078      	movs	r0, #120	@ 0x78
 80101ca:	f7ff fcf9 	bl	800fbc0 <OS_Error>
 80101ce:	4642      	mov	r2, r8
 80101d0:	21cd      	movs	r1, #205	@ 0xcd
 80101d2:	4630      	mov	r0, r6
 80101d4:	e9c4 860a 	strd	r8, r6, [r4, #40]	@ 0x28
 80101d8:	f001 ffa3 	bl	8012122 <memset>
 80101dc:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80101de:	b113      	cbz	r3, 80101e6 <OS_TASK_Create_DP+0xce>
 80101e0:	4620      	mov	r0, r4
 80101e2:	691b      	ldr	r3, [r3, #16]
 80101e4:	4798      	blx	r3
 80101e6:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80101e8:	b113      	cbz	r3, 80101f0 <OS_TASK_Create_DP+0xd8>
 80101ea:	4620      	mov	r0, r4
 80101ec:	68db      	ldr	r3, [r3, #12]
 80101ee:	4798      	blx	r3
 80101f0:	2100      	movs	r1, #0
 80101f2:	f06f 0202 	mvn.w	r2, #2
 80101f6:	4446      	add	r6, r8
 80101f8:	f026 0607 	bic.w	r6, r6, #7
 80101fc:	f1a6 0358 	sub.w	r3, r6, #88	@ 0x58
 8010200:	f846 1c58 	str.w	r1, [r6, #-88]
 8010204:	625a      	str	r2, [r3, #36]	@ 0x24
 8010206:	4a1b      	ldr	r2, [pc, #108]	@ (8010274 <OS_TASK_Create_DP+0x15c>)
 8010208:	64df      	str	r7, [r3, #76]	@ 0x4c
 801020a:	641a      	str	r2, [r3, #64]	@ 0x40
 801020c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010210:	645a      	str	r2, [r3, #68]	@ 0x44
 8010212:	4a19      	ldr	r2, [pc, #100]	@ (8010278 <OS_TASK_Create_DP+0x160>)
 8010214:	3702      	adds	r7, #2
 8010216:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010218:	3201      	adds	r2, #1
 801021a:	631a      	str	r2, [r3, #48]	@ 0x30
 801021c:	3201      	adds	r2, #1
 801021e:	635a      	str	r2, [r3, #52]	@ 0x34
 8010220:	3201      	adds	r2, #1
 8010222:	605a      	str	r2, [r3, #4]
 8010224:	3201      	adds	r2, #1
 8010226:	609a      	str	r2, [r3, #8]
 8010228:	3201      	adds	r2, #1
 801022a:	60da      	str	r2, [r3, #12]
 801022c:	3201      	adds	r2, #1
 801022e:	611a      	str	r2, [r3, #16]
 8010230:	3201      	adds	r2, #1
 8010232:	615a      	str	r2, [r3, #20]
 8010234:	3201      	adds	r2, #1
 8010236:	619a      	str	r2, [r3, #24]
 8010238:	3201      	adds	r2, #1
 801023a:	61da      	str	r2, [r3, #28]
 801023c:	3201      	adds	r2, #1
 801023e:	651f      	str	r7, [r3, #80]	@ 0x50
 8010240:	621a      	str	r2, [r3, #32]
 8010242:	4620      	mov	r0, r4
 8010244:	6063      	str	r3, [r4, #4]
 8010246:	f000 fdb3 	bl	8010db0 <OS_InsertTask>
 801024a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801024c:	b16b      	cbz	r3, 801026a <OS_TASK_Create_DP+0x152>
 801024e:	202e      	movs	r0, #46	@ 0x2e
 8010250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010252:	b005      	add	sp, #20
 8010254:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010258:	4718      	bx	r3
 801025a:	45a3      	cmp	fp, r4
 801025c:	d102      	bne.n	8010264 <OS_TASK_Create_DP+0x14c>
 801025e:	20aa      	movs	r0, #170	@ 0xaa
 8010260:	f7ff fcae 	bl	800fbc0 <OS_Error>
 8010264:	f8db b000 	ldr.w	fp, [fp]
 8010268:	e78a      	b.n	8010180 <OS_TASK_Create_DP+0x68>
 801026a:	b005      	add	sp, #20
 801026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010270:	20003088 	.word	0x20003088
 8010274:	08008a8d 	.word	0x08008a8d
 8010278:	cccc0001 	.word	0xcccc0001

0801027c <OS_TASK_Delay>:
 801027c:	b570      	push	{r4, r5, r6, lr}
 801027e:	4d14      	ldr	r5, [pc, #80]	@ (80102d0 <OS_TASK_Delay+0x54>)
 8010280:	4604      	mov	r4, r0
 8010282:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8010284:	b11b      	cbz	r3, 801028e <OS_TASK_Delay+0x12>
 8010286:	4601      	mov	r1, r0
 8010288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801028a:	202a      	movs	r0, #42	@ 0x2a
 801028c:	4798      	blx	r3
 801028e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010290:	b12b      	cbz	r3, 801029e <OS_TASK_Delay+0x22>
 8010292:	f895 3077 	ldrb.w	r3, [r5, #119]	@ 0x77
 8010296:	b913      	cbnz	r3, 801029e <OS_TASK_Delay+0x22>
 8010298:	20a1      	movs	r0, #161	@ 0xa1
 801029a:	f7ff fc91 	bl	800fbc0 <OS_Error>
 801029e:	f7ff fe33 	bl	800ff08 <OS_GetCPUState>
 80102a2:	2801      	cmp	r0, #1
 80102a4:	d102      	bne.n	80102ac <OS_TASK_Delay+0x30>
 80102a6:	20a0      	movs	r0, #160	@ 0xa0
 80102a8:	f7ff fc8a 	bl	800fbc0 <OS_Error>
 80102ac:	f000 fc90 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 80102b0:	2c00      	cmp	r4, #0
 80102b2:	dd04      	ble.n	80102be <OS_TASK_Delay+0x42>
 80102b4:	f7ff fefc 	bl	80100b0 <OS_TIME_GetTicks>
 80102b8:	4420      	add	r0, r4
 80102ba:	f7ff ff0d 	bl	80100d8 <_DelayUntil>
 80102be:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80102c0:	b123      	cbz	r3, 80102cc <OS_TASK_Delay+0x50>
 80102c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102c6:	202a      	movs	r0, #42	@ 0x2a
 80102c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80102ca:	4718      	bx	r3
 80102cc:	bd70      	pop	{r4, r5, r6, pc}
 80102ce:	bf00      	nop
 80102d0:	20003088 	.word	0x20003088

080102d4 <OS_TASK_GetName>:
 80102d4:	b570      	push	{r4, r5, r6, lr}
 80102d6:	4d16      	ldr	r5, [pc, #88]	@ (8010330 <OS_TASK_GetName+0x5c>)
 80102d8:	4604      	mov	r4, r0
 80102da:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80102dc:	b133      	cbz	r3, 80102ec <OS_TASK_GetName+0x18>
 80102de:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80102e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102e2:	4798      	blx	r3
 80102e4:	4601      	mov	r1, r0
 80102e6:	f240 1015 	movw	r0, #277	@ 0x115
 80102ea:	47b0      	blx	r6
 80102ec:	f7ff fe0c 	bl	800ff08 <OS_GetCPUState>
 80102f0:	2801      	cmp	r0, #1
 80102f2:	d105      	bne.n	8010300 <OS_TASK_GetName+0x2c>
 80102f4:	f895 3077 	ldrb.w	r3, [r5, #119]	@ 0x77
 80102f8:	b913      	cbnz	r3, 8010300 <OS_TASK_GetName+0x2c>
 80102fa:	20a4      	movs	r0, #164	@ 0xa4
 80102fc:	f7ff fc60 	bl	800fbc0 <OS_Error>
 8010300:	f000 fc66 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 8010304:	b90c      	cbnz	r4, 801030a <OS_TASK_GetName+0x36>
 8010306:	68ac      	ldr	r4, [r5, #8]
 8010308:	b184      	cbz	r4, 801032c <OS_TASK_GetName+0x58>
 801030a:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 801030e:	2b0f      	cmp	r3, #15
 8010310:	d002      	beq.n	8010318 <OS_TASK_GetName+0x44>
 8010312:	2080      	movs	r0, #128	@ 0x80
 8010314:	f7ff fc54 	bl	800fbc0 <OS_Error>
 8010318:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 801031a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801031c:	b123      	cbz	r3, 8010328 <OS_TASK_GetName+0x54>
 801031e:	4621      	mov	r1, r4
 8010320:	f240 1015 	movw	r0, #277	@ 0x115
 8010324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010326:	4798      	blx	r3
 8010328:	4620      	mov	r0, r4
 801032a:	bd70      	pop	{r4, r5, r6, pc}
 801032c:	4c01      	ldr	r4, [pc, #4]	@ (8010334 <OS_TASK_GetName+0x60>)
 801032e:	e7f4      	b.n	801031a <OS_TASK_GetName+0x46>
 8010330:	20003088 	.word	0x20003088
 8010334:	08013df8 	.word	0x08013df8

08010338 <OS_TASK_GetTimeSliceRem>:
 8010338:	b570      	push	{r4, r5, r6, lr}
 801033a:	4d19      	ldr	r5, [pc, #100]	@ (80103a0 <OS_TASK_GetTimeSliceRem+0x68>)
 801033c:	4604      	mov	r4, r0
 801033e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8010340:	b133      	cbz	r3, 8010350 <OS_TASK_GetTimeSliceRem+0x18>
 8010342:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8010344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010346:	4798      	blx	r3
 8010348:	4601      	mov	r1, r0
 801034a:	f44f 708b 	mov.w	r0, #278	@ 0x116
 801034e:	47b0      	blx	r6
 8010350:	f7ff fdda 	bl	800ff08 <OS_GetCPUState>
 8010354:	2801      	cmp	r0, #1
 8010356:	d105      	bne.n	8010364 <OS_TASK_GetTimeSliceRem+0x2c>
 8010358:	f895 3077 	ldrb.w	r3, [r5, #119]	@ 0x77
 801035c:	b913      	cbnz	r3, 8010364 <OS_TASK_GetTimeSliceRem+0x2c>
 801035e:	20a4      	movs	r0, #164	@ 0xa4
 8010360:	f7ff fc2e 	bl	800fbc0 <OS_Error>
 8010364:	f000 fc34 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 8010368:	b93c      	cbnz	r4, 801037a <OS_TASK_GetTimeSliceRem+0x42>
 801036a:	68ac      	ldr	r4, [r5, #8]
 801036c:	b92c      	cbnz	r4, 801037a <OS_TASK_GetTimeSliceRem+0x42>
 801036e:	2080      	movs	r0, #128	@ 0x80
 8010370:	f7ff fc26 	bl	800fbc0 <OS_Error>
 8010374:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 8010378:	deff      	udf	#255	@ 0xff
 801037a:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 801037e:	2b0f      	cmp	r3, #15
 8010380:	d002      	beq.n	8010388 <OS_TASK_GetTimeSliceRem+0x50>
 8010382:	2080      	movs	r0, #128	@ 0x80
 8010384:	f7ff fc1c 	bl	800fbc0 <OS_Error>
 8010388:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801038a:	f894 4051 	ldrb.w	r4, [r4, #81]	@ 0x51
 801038e:	b123      	cbz	r3, 801039a <OS_TASK_GetTimeSliceRem+0x62>
 8010390:	4621      	mov	r1, r4
 8010392:	f44f 708b 	mov.w	r0, #278	@ 0x116
 8010396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010398:	4798      	blx	r3
 801039a:	4620      	mov	r0, r4
 801039c:	bd70      	pop	{r4, r5, r6, pc}
 801039e:	bf00      	nop
 80103a0:	20003088 	.word	0x20003088

080103a4 <OS_TASK_LeaveRegion>:
 80103a4:	b510      	push	{r4, lr}
 80103a6:	4c17      	ldr	r4, [pc, #92]	@ (8010404 <OS_TASK_LeaveRegion+0x60>)
 80103a8:	7823      	ldrb	r3, [r4, #0]
 80103aa:	b913      	cbnz	r3, 80103b2 <OS_TASK_LeaveRegion+0xe>
 80103ac:	2097      	movs	r0, #151	@ 0x97
 80103ae:	f7ff fc07 	bl	800fbc0 <OS_Error>
 80103b2:	7823      	ldrb	r3, [r4, #0]
 80103b4:	3b01      	subs	r3, #1
 80103b6:	b2db      	uxtb	r3, r3
 80103b8:	7023      	strb	r3, [r4, #0]
 80103ba:	7823      	ldrb	r3, [r4, #0]
 80103bc:	bb03      	cbnz	r3, 8010400 <OS_TASK_LeaveRegion+0x5c>
 80103be:	6863      	ldr	r3, [r4, #4]
 80103c0:	b1f3      	cbz	r3, 8010400 <OS_TASK_LeaveRegion+0x5c>
 80103c2:	2380      	movs	r3, #128	@ 0x80
 80103c4:	f383 8811 	msr	BASEPRI, r3
 80103c8:	6863      	ldr	r3, [r4, #4]
 80103ca:	b16b      	cbz	r3, 80103e8 <OS_TASK_LeaveRegion+0x44>
 80103cc:	2301      	movs	r3, #1
 80103ce:	7023      	strb	r3, [r4, #0]
 80103d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80103d2:	b123      	cbz	r3, 80103de <OS_TASK_LeaveRegion+0x3a>
 80103d4:	68a0      	ldr	r0, [r4, #8]
 80103d6:	6a1b      	ldr	r3, [r3, #32]
 80103d8:	f890 1050 	ldrb.w	r1, [r0, #80]	@ 0x50
 80103dc:	4798      	blx	r3
 80103de:	4809      	ldr	r0, [pc, #36]	@ (8010404 <OS_TASK_LeaveRegion+0x60>)
 80103e0:	f7f8 fb89 	bl	8008af6 <OS_Switch>
 80103e4:	2300      	movs	r3, #0
 80103e6:	7023      	strb	r3, [r4, #0]
 80103e8:	7863      	ldrb	r3, [r4, #1]
 80103ea:	2b0f      	cmp	r3, #15
 80103ec:	d902      	bls.n	80103f4 <OS_TASK_LeaveRegion+0x50>
 80103ee:	2099      	movs	r0, #153	@ 0x99
 80103f0:	f7ff fbe6 	bl	800fbc0 <OS_Error>
 80103f4:	7863      	ldrb	r3, [r4, #1]
 80103f6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80103fa:	b90b      	cbnz	r3, 8010400 <OS_TASK_LeaveRegion+0x5c>
 80103fc:	f382 8811 	msr	BASEPRI, r2
 8010400:	bd10      	pop	{r4, pc}
 8010402:	bf00      	nop
 8010404:	20003088 	.word	0x20003088

08010408 <OS_TICK_Handle>:
 8010408:	b570      	push	{r4, r5, r6, lr}
 801040a:	4c2e      	ldr	r4, [pc, #184]	@ (80104c4 <OS_TICK_Handle+0xbc>)
 801040c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801040e:	b11b      	cbz	r3, 8010418 <OS_TICK_Handle+0x10>
 8010410:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8010414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010416:	4798      	blx	r3
 8010418:	f7ff fd76 	bl	800ff08 <OS_GetCPUState>
 801041c:	2801      	cmp	r0, #1
 801041e:	d002      	beq.n	8010426 <OS_TICK_Handle+0x1e>
 8010420:	20a2      	movs	r0, #162	@ 0xa2
 8010422:	f7ff fbcd 	bl	800fbc0 <OS_Error>
 8010426:	f7ff fd6f 	bl	800ff08 <OS_GetCPUState>
 801042a:	2801      	cmp	r0, #1
 801042c:	d105      	bne.n	801043a <OS_TICK_Handle+0x32>
 801042e:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 8010432:	b913      	cbnz	r3, 801043a <OS_TICK_Handle+0x32>
 8010434:	20a4      	movs	r0, #164	@ 0xa4
 8010436:	f7ff fbc3 	bl	800fbc0 <OS_Error>
 801043a:	f000 fbc9 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 801043e:	4b22      	ldr	r3, [pc, #136]	@ (80104c8 <OS_TICK_Handle+0xc0>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2b01      	cmp	r3, #1
 8010444:	d003      	beq.n	801044e <OS_TICK_Handle+0x46>
 8010446:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801044a:	f7ff fbb9 	bl	800fbc0 <OS_Error>
 801044e:	4b1f      	ldr	r3, [pc, #124]	@ (80104cc <OS_TICK_Handle+0xc4>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	2b01      	cmp	r3, #1
 8010454:	d003      	beq.n	801045e <OS_TICK_Handle+0x56>
 8010456:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801045a:	f7ff fbb1 	bl	800fbc0 <OS_Error>
 801045e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010460:	b16b      	cbz	r3, 801047e <OS_TICK_Handle+0x76>
 8010462:	2301      	movs	r3, #1
 8010464:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
 8010468:	7163      	strb	r3, [r4, #5]
 801046a:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 801046c:	bb25      	cbnz	r5, 80104b8 <OS_TICK_Handle+0xb0>
 801046e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010470:	b333      	cbz	r3, 80104c0 <OS_TICK_Handle+0xb8>
 8010472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010476:	f44f 7091 	mov.w	r0, #290	@ 0x122
 801047a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801047c:	4718      	bx	r3
 801047e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8010482:	3201      	adds	r2, #1
 8010484:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010486:	f141 0100 	adc.w	r1, r1, #0
 801048a:	e9c4 2104 	strd	r2, r1, [r4, #16]
 801048e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010490:	3301      	adds	r3, #1
 8010492:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010494:	1a9b      	subs	r3, r3, r2
 8010496:	2b00      	cmp	r3, #0
 8010498:	bfa4      	itt	ge
 801049a:	2301      	movge	r3, #1
 801049c:	7163      	strbge	r3, [r4, #5]
 801049e:	f894 307b 	ldrb.w	r3, [r4, #123]	@ 0x7b
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d0e1      	beq.n	801046a <OS_TICK_Handle+0x62>
 80104a6:	3b01      	subs	r3, #1
 80104a8:	b2db      	uxtb	r3, r3
 80104aa:	f884 307b 	strb.w	r3, [r4, #123]	@ 0x7b
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d1db      	bne.n	801046a <OS_TICK_Handle+0x62>
 80104b2:	2301      	movs	r3, #1
 80104b4:	7123      	strb	r3, [r4, #4]
 80104b6:	e7d8      	b.n	801046a <OS_TICK_Handle+0x62>
 80104b8:	686b      	ldr	r3, [r5, #4]
 80104ba:	4798      	blx	r3
 80104bc:	682d      	ldr	r5, [r5, #0]
 80104be:	e7d5      	b.n	801046c <OS_TICK_Handle+0x64>
 80104c0:	bd70      	pop	{r4, r5, r6, pc}
 80104c2:	bf00      	nop
 80104c4:	20003088 	.word	0x20003088
 80104c8:	2000002c 	.word	0x2000002c
 80104cc:	20000028 	.word	0x20000028

080104d0 <OS_CheckTimer>:
 80104d0:	b570      	push	{r4, r5, r6, lr}
 80104d2:	4604      	mov	r4, r0
 80104d4:	2500      	movs	r5, #0
 80104d6:	4e12      	ldr	r6, [pc, #72]	@ (8010520 <OS_CheckTimer+0x50>)
 80104d8:	6a23      	ldr	r3, [r4, #32]
 80104da:	b90b      	cbnz	r3, 80104e0 <OS_CheckTimer+0x10>
 80104dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80104de:	e01c      	b.n	801051a <OS_CheckTimer+0x4a>
 80104e0:	6899      	ldr	r1, [r3, #8]
 80104e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80104e4:	1a8a      	subs	r2, r1, r2
 80104e6:	2a00      	cmp	r2, #0
 80104e8:	dc16      	bgt.n	8010518 <OS_CheckTimer+0x48>
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80104ee:	6222      	str	r2, [r4, #32]
 80104f0:	741d      	strb	r5, [r3, #16]
 80104f2:	609d      	str	r5, [r3, #8]
 80104f4:	f385 8811 	msr	BASEPRI, r5
 80104f8:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 80104fa:	b113      	cbz	r3, 8010502 <OS_CheckTimer+0x32>
 80104fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104fe:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010500:	4798      	blx	r3
 8010502:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	4798      	blx	r3
 8010508:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801050a:	b10b      	cbz	r3, 8010510 <OS_CheckTimer+0x40>
 801050c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801050e:	4798      	blx	r3
 8010510:	2380      	movs	r3, #128	@ 0x80
 8010512:	f383 8811 	msr	BASEPRI, r3
 8010516:	e7df      	b.n	80104d8 <OS_CheckTimer+0x8>
 8010518:	6321      	str	r1, [r4, #48]	@ 0x30
 801051a:	2300      	movs	r3, #0
 801051c:	6263      	str	r3, [r4, #36]	@ 0x24
 801051e:	bd70      	pop	{r4, r5, r6, pc}
 8010520:	20003088 	.word	0x20003088

08010524 <_InsertTimerInList>:
 8010524:	b570      	push	{r4, r5, r6, lr}
 8010526:	2380      	movs	r3, #128	@ 0x80
 8010528:	4605      	mov	r5, r0
 801052a:	f383 8811 	msr	BASEPRI, r3
 801052e:	4c1b      	ldr	r4, [pc, #108]	@ (801059c <_InsertTimerInList+0x78>)
 8010530:	6a26      	ldr	r6, [r4, #32]
 8010532:	b9fe      	cbnz	r6, 8010574 <_InsertTimerInList+0x50>
 8010534:	7863      	ldrb	r3, [r4, #1]
 8010536:	2b0f      	cmp	r3, #15
 8010538:	d902      	bls.n	8010540 <_InsertTimerInList+0x1c>
 801053a:	2099      	movs	r0, #153	@ 0x99
 801053c:	f7ff fb40 	bl	800fbc0 <OS_Error>
 8010540:	7863      	ldrb	r3, [r4, #1]
 8010542:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010546:	b90b      	cbnz	r3, 801054c <_InsertTimerInList+0x28>
 8010548:	f382 8811 	msr	BASEPRI, r2
 801054c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801054e:	68ab      	ldr	r3, [r5, #8]
 8010550:	441a      	add	r2, r3
 8010552:	2301      	movs	r3, #1
 8010554:	742b      	strb	r3, [r5, #16]
 8010556:	6a23      	ldr	r3, [r4, #32]
 8010558:	60aa      	str	r2, [r5, #8]
 801055a:	b993      	cbnz	r3, 8010582 <_InsertTimerInList+0x5e>
 801055c:	602b      	str	r3, [r5, #0]
 801055e:	4b10      	ldr	r3, [pc, #64]	@ (80105a0 <_InsertTimerInList+0x7c>)
 8010560:	6225      	str	r5, [r4, #32]
 8010562:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010564:	6a23      	ldr	r3, [r4, #32]
 8010566:	689a      	ldr	r2, [r3, #8]
 8010568:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801056a:	1ad3      	subs	r3, r2, r3
 801056c:	2b00      	cmp	r3, #0
 801056e:	bfb8      	it	lt
 8010570:	6322      	strlt	r2, [r4, #48]	@ 0x30
 8010572:	bd70      	pop	{r4, r5, r6, pc}
 8010574:	42ae      	cmp	r6, r5
 8010576:	d102      	bne.n	801057e <_InsertTimerInList+0x5a>
 8010578:	20ab      	movs	r0, #171	@ 0xab
 801057a:	f7ff fb21 	bl	800fbc0 <OS_Error>
 801057e:	6836      	ldr	r6, [r6, #0]
 8010580:	e7d7      	b.n	8010532 <_InsertTimerInList+0xe>
 8010582:	4808      	ldr	r0, [pc, #32]	@ (80105a4 <_InsertTimerInList+0x80>)
 8010584:	6899      	ldr	r1, [r3, #8]
 8010586:	1a51      	subs	r1, r2, r1
 8010588:	2900      	cmp	r1, #0
 801058a:	dd03      	ble.n	8010594 <_InsertTimerInList+0x70>
 801058c:	4618      	mov	r0, r3
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d1f7      	bne.n	8010584 <_InsertTimerInList+0x60>
 8010594:	602b      	str	r3, [r5, #0]
 8010596:	6005      	str	r5, [r0, #0]
 8010598:	e7e4      	b.n	8010564 <_InsertTimerInList+0x40>
 801059a:	bf00      	nop
 801059c:	20003088 	.word	0x20003088
 80105a0:	080104d1 	.word	0x080104d1
 80105a4:	200030a8 	.word	0x200030a8

080105a8 <OS_TIMER_Create>:
 80105a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ac:	4d29      	ldr	r5, [pc, #164]	@ (8010654 <OS_TIMER_Create+0xac>)
 80105ae:	4604      	mov	r4, r0
 80105b0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80105b2:	460f      	mov	r7, r1
 80105b4:	4616      	mov	r6, r2
 80105b6:	b143      	cbz	r3, 80105ca <OS_TIMER_Create+0x22>
 80105b8:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 80105bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105be:	4798      	blx	r3
 80105c0:	4633      	mov	r3, r6
 80105c2:	4601      	mov	r1, r0
 80105c4:	463a      	mov	r2, r7
 80105c6:	2066      	movs	r0, #102	@ 0x66
 80105c8:	47c0      	blx	r8
 80105ca:	f7ff fc9d 	bl	800ff08 <OS_GetCPUState>
 80105ce:	2801      	cmp	r0, #1
 80105d0:	d105      	bne.n	80105de <OS_TIMER_Create+0x36>
 80105d2:	f895 3077 	ldrb.w	r3, [r5, #119]	@ 0x77
 80105d6:	b913      	cbnz	r3, 80105de <OS_TIMER_Create+0x36>
 80105d8:	20a4      	movs	r0, #164	@ 0xa4
 80105da:	f7ff faf1 	bl	800fbc0 <OS_Error>
 80105de:	f000 faf7 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 80105e2:	2380      	movs	r3, #128	@ 0x80
 80105e4:	f383 8811 	msr	BASEPRI, r3
 80105e8:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80105ec:	f1b8 0f00 	cmp.w	r8, #0
 80105f0:	d126      	bne.n	8010640 <OS_TIMER_Create+0x98>
 80105f2:	786b      	ldrb	r3, [r5, #1]
 80105f4:	2b0f      	cmp	r3, #15
 80105f6:	d902      	bls.n	80105fe <OS_TIMER_Create+0x56>
 80105f8:	2099      	movs	r0, #153	@ 0x99
 80105fa:	f7ff fae1 	bl	800fbc0 <OS_Error>
 80105fe:	786b      	ldrb	r3, [r5, #1]
 8010600:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010604:	b90b      	cbnz	r3, 801060a <OS_TIMER_Create+0x62>
 8010606:	f382 8811 	msr	BASEPRI, r2
 801060a:	b916      	cbnz	r6, 8010612 <OS_TIMER_Create+0x6a>
 801060c:	20cd      	movs	r0, #205	@ 0xcd
 801060e:	f7ff fad7 	bl	800fbc0 <OS_Error>
 8010612:	f895 3078 	ldrb.w	r3, [r5, #120]	@ 0x78
 8010616:	b913      	cbnz	r3, 801061e <OS_TIMER_Create+0x76>
 8010618:	20a5      	movs	r0, #165	@ 0xa5
 801061a:	f7ff fad1 	bl	800fbc0 <OS_Error>
 801061e:	2214      	movs	r2, #20
 8010620:	2100      	movs	r1, #0
 8010622:	4620      	mov	r0, r4
 8010624:	f001 fd7d 	bl	8012122 <memset>
 8010628:	2333      	movs	r3, #51	@ 0x33
 801062a:	7463      	strb	r3, [r4, #17]
 801062c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801062e:	e9c4 6602 	strd	r6, r6, [r4, #8]
 8010632:	6067      	str	r7, [r4, #4]
 8010634:	b163      	cbz	r3, 8010650 <OS_TIMER_Create+0xa8>
 8010636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801063a:	2066      	movs	r0, #102	@ 0x66
 801063c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801063e:	4718      	bx	r3
 8010640:	45a0      	cmp	r8, r4
 8010642:	d102      	bne.n	801064a <OS_TIMER_Create+0xa2>
 8010644:	20ab      	movs	r0, #171	@ 0xab
 8010646:	f7ff fabb 	bl	800fbc0 <OS_Error>
 801064a:	f8d8 8000 	ldr.w	r8, [r8]
 801064e:	e7cd      	b.n	80105ec <OS_TIMER_Create+0x44>
 8010650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010654:	20003088 	.word	0x20003088

08010658 <OS_TIMER_GetStatus>:
 8010658:	b570      	push	{r4, r5, r6, lr}
 801065a:	4d12      	ldr	r5, [pc, #72]	@ (80106a4 <OS_TIMER_GetStatus+0x4c>)
 801065c:	4604      	mov	r4, r0
 801065e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8010660:	b12b      	cbz	r3, 801066e <OS_TIMER_GetStatus+0x16>
 8010662:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8010664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010666:	4798      	blx	r3
 8010668:	4601      	mov	r1, r0
 801066a:	20e6      	movs	r0, #230	@ 0xe6
 801066c:	47b0      	blx	r6
 801066e:	7c63      	ldrb	r3, [r4, #17]
 8010670:	2b33      	cmp	r3, #51	@ 0x33
 8010672:	d002      	beq.n	801067a <OS_TIMER_GetStatus+0x22>
 8010674:	2081      	movs	r0, #129	@ 0x81
 8010676:	f7ff faa3 	bl	800fbc0 <OS_Error>
 801067a:	f7ff fc45 	bl	800ff08 <OS_GetCPUState>
 801067e:	2801      	cmp	r0, #1
 8010680:	d105      	bne.n	801068e <OS_TIMER_GetStatus+0x36>
 8010682:	f895 3077 	ldrb.w	r3, [r5, #119]	@ 0x77
 8010686:	b913      	cbnz	r3, 801068e <OS_TIMER_GetStatus+0x36>
 8010688:	20a4      	movs	r0, #164	@ 0xa4
 801068a:	f7ff fa99 	bl	800fbc0 <OS_Error>
 801068e:	f000 fa9f 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 8010692:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8010694:	7c24      	ldrb	r4, [r4, #16]
 8010696:	b11b      	cbz	r3, 80106a0 <OS_TIMER_GetStatus+0x48>
 8010698:	4621      	mov	r1, r4
 801069a:	20e6      	movs	r0, #230	@ 0xe6
 801069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801069e:	4798      	blx	r3
 80106a0:	4620      	mov	r0, r4
 80106a2:	bd70      	pop	{r4, r5, r6, pc}
 80106a4:	20003088 	.word	0x20003088

080106a8 <OS_TIMER_Restart>:
 80106a8:	b570      	push	{r4, r5, r6, lr}
 80106aa:	4604      	mov	r4, r0
 80106ac:	4d22      	ldr	r5, [pc, #136]	@ (8010738 <OS_TIMER_Restart+0x90>)
 80106ae:	b900      	cbnz	r0, 80106b2 <OS_TIMER_Restart+0xa>
 80106b0:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80106b2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80106b4:	b133      	cbz	r3, 80106c4 <OS_TIMER_Restart+0x1c>
 80106b6:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80106b8:	4620      	mov	r0, r4
 80106ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106bc:	4798      	blx	r3
 80106be:	4601      	mov	r1, r0
 80106c0:	206a      	movs	r0, #106	@ 0x6a
 80106c2:	47b0      	blx	r6
 80106c4:	f7ff fc20 	bl	800ff08 <OS_GetCPUState>
 80106c8:	2801      	cmp	r0, #1
 80106ca:	d105      	bne.n	80106d8 <OS_TIMER_Restart+0x30>
 80106cc:	f895 3077 	ldrb.w	r3, [r5, #119]	@ 0x77
 80106d0:	b913      	cbnz	r3, 80106d8 <OS_TIMER_Restart+0x30>
 80106d2:	20a4      	movs	r0, #164	@ 0xa4
 80106d4:	f7ff fa74 	bl	800fbc0 <OS_Error>
 80106d8:	f000 fa7a 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 80106dc:	7c63      	ldrb	r3, [r4, #17]
 80106de:	2b33      	cmp	r3, #51	@ 0x33
 80106e0:	d002      	beq.n	80106e8 <OS_TIMER_Restart+0x40>
 80106e2:	2081      	movs	r0, #129	@ 0x81
 80106e4:	f7ff fa6c 	bl	800fbc0 <OS_Error>
 80106e8:	2380      	movs	r3, #128	@ 0x80
 80106ea:	f383 8811 	msr	BASEPRI, r3
 80106ee:	7c23      	ldrb	r3, [r4, #16]
 80106f0:	b133      	cbz	r3, 8010700 <OS_TIMER_Restart+0x58>
 80106f2:	6a2b      	ldr	r3, [r5, #32]
 80106f4:	4a11      	ldr	r2, [pc, #68]	@ (801073c <OS_TIMER_Restart+0x94>)
 80106f6:	b11b      	cbz	r3, 8010700 <OS_TIMER_Restart+0x58>
 80106f8:	42a3      	cmp	r3, r4
 80106fa:	d119      	bne.n	8010730 <OS_TIMER_Restart+0x88>
 80106fc:	6823      	ldr	r3, [r4, #0]
 80106fe:	6013      	str	r3, [r2, #0]
 8010700:	68e3      	ldr	r3, [r4, #12]
 8010702:	4620      	mov	r0, r4
 8010704:	60a3      	str	r3, [r4, #8]
 8010706:	f7ff ff0d 	bl	8010524 <_InsertTimerInList>
 801070a:	786b      	ldrb	r3, [r5, #1]
 801070c:	2b0f      	cmp	r3, #15
 801070e:	d902      	bls.n	8010716 <OS_TIMER_Restart+0x6e>
 8010710:	2099      	movs	r0, #153	@ 0x99
 8010712:	f7ff fa55 	bl	800fbc0 <OS_Error>
 8010716:	786b      	ldrb	r3, [r5, #1]
 8010718:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801071c:	b90b      	cbnz	r3, 8010722 <OS_TIMER_Restart+0x7a>
 801071e:	f382 8811 	msr	BASEPRI, r2
 8010722:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8010724:	b13b      	cbz	r3, 8010736 <OS_TIMER_Restart+0x8e>
 8010726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801072a:	206a      	movs	r0, #106	@ 0x6a
 801072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801072e:	4718      	bx	r3
 8010730:	461a      	mov	r2, r3
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	e7df      	b.n	80106f6 <OS_TIMER_Restart+0x4e>
 8010736:	bd70      	pop	{r4, r5, r6, pc}
 8010738:	20003088 	.word	0x20003088
 801073c:	200030a8 	.word	0x200030a8

08010740 <OS_TIMER_Stop>:
 8010740:	b570      	push	{r4, r5, r6, lr}
 8010742:	4c24      	ldr	r4, [pc, #144]	@ (80107d4 <OS_TIMER_Stop+0x94>)
 8010744:	4605      	mov	r5, r0
 8010746:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010748:	b12b      	cbz	r3, 8010756 <OS_TIMER_Stop+0x16>
 801074a:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 801074c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801074e:	4798      	blx	r3
 8010750:	4601      	mov	r1, r0
 8010752:	2069      	movs	r0, #105	@ 0x69
 8010754:	47b0      	blx	r6
 8010756:	f7ff fbd7 	bl	800ff08 <OS_GetCPUState>
 801075a:	2801      	cmp	r0, #1
 801075c:	d105      	bne.n	801076a <OS_TIMER_Stop+0x2a>
 801075e:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 8010762:	b913      	cbnz	r3, 801076a <OS_TIMER_Stop+0x2a>
 8010764:	20a4      	movs	r0, #164	@ 0xa4
 8010766:	f7ff fa2b 	bl	800fbc0 <OS_Error>
 801076a:	f000 fa31 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 801076e:	7c6b      	ldrb	r3, [r5, #17]
 8010770:	2b33      	cmp	r3, #51	@ 0x33
 8010772:	d002      	beq.n	801077a <OS_TIMER_Stop+0x3a>
 8010774:	2081      	movs	r0, #129	@ 0x81
 8010776:	f7ff fa23 	bl	800fbc0 <OS_Error>
 801077a:	2380      	movs	r3, #128	@ 0x80
 801077c:	f383 8811 	msr	BASEPRI, r3
 8010780:	7c2b      	ldrb	r3, [r5, #16]
 8010782:	b17b      	cbz	r3, 80107a4 <OS_TIMER_Stop+0x64>
 8010784:	2300      	movs	r3, #0
 8010786:	742b      	strb	r3, [r5, #16]
 8010788:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801078a:	68ab      	ldr	r3, [r5, #8]
 801078c:	1a9b      	subs	r3, r3, r2
 801078e:	60ab      	str	r3, [r5, #8]
 8010790:	4a11      	ldr	r2, [pc, #68]	@ (80107d8 <OS_TIMER_Stop+0x98>)
 8010792:	6a23      	ldr	r3, [r4, #32]
 8010794:	b11b      	cbz	r3, 801079e <OS_TIMER_Stop+0x5e>
 8010796:	42ab      	cmp	r3, r5
 8010798:	d117      	bne.n	80107ca <OS_TIMER_Stop+0x8a>
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	6013      	str	r3, [r2, #0]
 801079e:	6a23      	ldr	r3, [r4, #32]
 80107a0:	b903      	cbnz	r3, 80107a4 <OS_TIMER_Stop+0x64>
 80107a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80107a4:	7863      	ldrb	r3, [r4, #1]
 80107a6:	2b0f      	cmp	r3, #15
 80107a8:	d902      	bls.n	80107b0 <OS_TIMER_Stop+0x70>
 80107aa:	2099      	movs	r0, #153	@ 0x99
 80107ac:	f7ff fa08 	bl	800fbc0 <OS_Error>
 80107b0:	7863      	ldrb	r3, [r4, #1]
 80107b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80107b6:	b90b      	cbnz	r3, 80107bc <OS_TIMER_Stop+0x7c>
 80107b8:	f382 8811 	msr	BASEPRI, r2
 80107bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80107be:	b13b      	cbz	r3, 80107d0 <OS_TIMER_Stop+0x90>
 80107c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107c4:	2069      	movs	r0, #105	@ 0x69
 80107c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80107c8:	4718      	bx	r3
 80107ca:	461a      	mov	r2, r3
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	e7e1      	b.n	8010794 <OS_TIMER_Stop+0x54>
 80107d0:	bd70      	pop	{r4, r5, r6, pc}
 80107d2:	bf00      	nop
 80107d4:	20003088 	.word	0x20003088
 80107d8:	200030a8 	.word	0x200030a8

080107dc <_GetOffset>:
 80107dc:	1cca      	adds	r2, r1, #3
 80107de:	6901      	ldr	r1, [r0, #16]
 80107e0:	f022 0203 	bic.w	r2, r2, #3
 80107e4:	b530      	push	{r4, r5, lr}
 80107e6:	3204      	adds	r2, #4
 80107e8:	4604      	mov	r4, r0
 80107ea:	b301      	cbz	r1, 801082e <_GetOffset+0x52>
 80107ec:	6981      	ldr	r1, [r0, #24]
 80107ee:	6845      	ldr	r5, [r0, #4]
 80107f0:	586b      	ldr	r3, [r5, r1]
 80107f2:	3104      	adds	r1, #4
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	bfb8      	it	lt
 80107f8:	425b      	neglt	r3, r3
 80107fa:	3303      	adds	r3, #3
 80107fc:	f023 0303 	bic.w	r3, r3, #3
 8010800:	1858      	adds	r0, r3, r1
 8010802:	6963      	ldr	r3, [r4, #20]
 8010804:	4283      	cmp	r3, r0
 8010806:	d20c      	bcs.n	8010822 <_GetOffset+0x46>
 8010808:	68e1      	ldr	r1, [r4, #12]
 801080a:	1a09      	subs	r1, r1, r0
 801080c:	4291      	cmp	r1, r2
 801080e:	d20d      	bcs.n	801082c <_GetOffset+0x50>
 8010810:	4293      	cmp	r3, r2
 8010812:	d314      	bcc.n	801083e <_GetOffset+0x62>
 8010814:	2904      	cmp	r1, #4
 8010816:	f04f 0300 	mov.w	r3, #0
 801081a:	d900      	bls.n	801081e <_GetOffset+0x42>
 801081c:	502b      	str	r3, [r5, r0]
 801081e:	4618      	mov	r0, r3
 8010820:	e004      	b.n	801082c <_GetOffset+0x50>
 8010822:	1a1b      	subs	r3, r3, r0
 8010824:	4293      	cmp	r3, r2
 8010826:	bf38      	it	cc
 8010828:	f04f 30ff 	movcc.w	r0, #4294967295
 801082c:	bd30      	pop	{r4, r5, pc}
 801082e:	68c3      	ldr	r3, [r0, #12]
 8010830:	f04f 30ff 	mov.w	r0, #4294967295
 8010834:	4293      	cmp	r3, r2
 8010836:	bf28      	it	cs
 8010838:	2000      	movcs	r0, #0
 801083a:	6161      	str	r1, [r4, #20]
 801083c:	e7f6      	b.n	801082c <_GetOffset+0x50>
 801083e:	f04f 30ff 	mov.w	r0, #4294967295
 8010842:	e7f3      	b.n	801082c <_GetOffset+0x50>

08010844 <_CopyMessage>:
 8010844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010848:	461d      	mov	r5, r3
 801084a:	6183      	str	r3, [r0, #24]
 801084c:	6903      	ldr	r3, [r0, #16]
 801084e:	6847      	ldr	r7, [r0, #4]
 8010850:	3301      	adds	r3, #1
 8010852:	6103      	str	r3, [r0, #16]
 8010854:	4253      	negs	r3, r2
 8010856:	517b      	str	r3, [r7, r5]
 8010858:	69c3      	ldr	r3, [r0, #28]
 801085a:	f8df a04c 	ldr.w	sl, [pc, #76]	@ 80108a8 <_CopyMessage+0x64>
 801085e:	3301      	adds	r3, #1
 8010860:	61c3      	str	r3, [r0, #28]
 8010862:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8010866:	4604      	mov	r4, r0
 8010868:	2b0f      	cmp	r3, #15
 801086a:	4688      	mov	r8, r1
 801086c:	4616      	mov	r6, r2
 801086e:	eb07 0905 	add.w	r9, r7, r5
 8010872:	d902      	bls.n	801087a <_CopyMessage+0x36>
 8010874:	2099      	movs	r0, #153	@ 0x99
 8010876:	f7ff f9a3 	bl	800fbc0 <OS_Error>
 801087a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801087e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010882:	b90b      	cbnz	r3, 8010888 <_CopyMessage+0x44>
 8010884:	f382 8811 	msr	BASEPRI, r2
 8010888:	4632      	mov	r2, r6
 801088a:	4641      	mov	r1, r8
 801088c:	f109 0004 	add.w	r0, r9, #4
 8010890:	f001 fd5b 	bl	801234a <memcpy>
 8010894:	2380      	movs	r3, #128	@ 0x80
 8010896:	f383 8811 	msr	BASEPRI, r3
 801089a:	517e      	str	r6, [r7, r5]
 801089c:	69e3      	ldr	r3, [r4, #28]
 801089e:	3b01      	subs	r3, #1
 80108a0:	61e3      	str	r3, [r4, #28]
 80108a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108a6:	bf00      	nop
 80108a8:	20003088 	.word	0x20003088

080108ac <OS_QUEUE_Create>:
 80108ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108b0:	4617      	mov	r7, r2
 80108b2:	460e      	mov	r6, r1
 80108b4:	f011 0303 	ands.w	r3, r1, #3
 80108b8:	4c32      	ldr	r4, [pc, #200]	@ (8010984 <OS_QUEUE_Create+0xd8>)
 80108ba:	bf1c      	itt	ne
 80108bc:	1f17      	subne	r7, r2, #4
 80108be:	18ff      	addne	r7, r7, r3
 80108c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80108c2:	bf18      	it	ne
 80108c4:	3603      	addne	r6, #3
 80108c6:	4605      	mov	r5, r0
 80108c8:	bf18      	it	ne
 80108ca:	f026 0603 	bicne.w	r6, r6, #3
 80108ce:	b13b      	cbz	r3, 80108e0 <OS_QUEUE_Create+0x34>
 80108d0:	f8d3 8030 	ldr.w	r8, [r3, #48]	@ 0x30
 80108d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108d6:	4798      	blx	r3
 80108d8:	463a      	mov	r2, r7
 80108da:	4601      	mov	r1, r0
 80108dc:	20b1      	movs	r0, #177	@ 0xb1
 80108de:	47c0      	blx	r8
 80108e0:	f7ff fb12 	bl	800ff08 <OS_GetCPUState>
 80108e4:	2801      	cmp	r0, #1
 80108e6:	d105      	bne.n	80108f4 <OS_QUEUE_Create+0x48>
 80108e8:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 80108ec:	b913      	cbnz	r3, 80108f4 <OS_QUEUE_Create+0x48>
 80108ee:	20a4      	movs	r0, #164	@ 0xa4
 80108f0:	f7ff f966 	bl	800fbc0 <OS_Error>
 80108f4:	f000 f96c 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 80108f8:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
 80108fc:	b913      	cbnz	r3, 8010904 <OS_QUEUE_Create+0x58>
 80108fe:	20a5      	movs	r0, #165	@ 0xa5
 8010900:	f7ff f95e 	bl	800fbc0 <OS_Error>
 8010904:	2380      	movs	r3, #128	@ 0x80
 8010906:	f383 8811 	msr	BASEPRI, r3
 801090a:	f383 8811 	msr	BASEPRI, r3
 801090e:	f8d4 8050 	ldr.w	r8, [r4, #80]	@ 0x50
 8010912:	f1b8 0f00 	cmp.w	r8, #0
 8010916:	d12a      	bne.n	801096e <OS_QUEUE_Create+0xc2>
 8010918:	7863      	ldrb	r3, [r4, #1]
 801091a:	2b0f      	cmp	r3, #15
 801091c:	d902      	bls.n	8010924 <OS_QUEUE_Create+0x78>
 801091e:	2099      	movs	r0, #153	@ 0x99
 8010920:	f7ff f94e 	bl	800fbc0 <OS_Error>
 8010924:	7863      	ldrb	r3, [r4, #1]
 8010926:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801092a:	b90b      	cbnz	r3, 8010930 <OS_QUEUE_Create+0x84>
 801092c:	f382 8811 	msr	BASEPRI, r2
 8010930:	2224      	movs	r2, #36	@ 0x24
 8010932:	2100      	movs	r1, #0
 8010934:	4628      	mov	r0, r5
 8010936:	f001 fbf4 	bl	8012122 <memset>
 801093a:	2099      	movs	r0, #153	@ 0x99
 801093c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801093e:	60ef      	str	r7, [r5, #12]
 8010940:	60ab      	str	r3, [r5, #8]
 8010942:	7863      	ldrb	r3, [r4, #1]
 8010944:	606e      	str	r6, [r5, #4]
 8010946:	2b0f      	cmp	r3, #15
 8010948:	6525      	str	r5, [r4, #80]	@ 0x50
 801094a:	f885 0021 	strb.w	r0, [r5, #33]	@ 0x21
 801094e:	d901      	bls.n	8010954 <OS_QUEUE_Create+0xa8>
 8010950:	f7ff f936 	bl	800fbc0 <OS_Error>
 8010954:	7863      	ldrb	r3, [r4, #1]
 8010956:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801095a:	b90b      	cbnz	r3, 8010960 <OS_QUEUE_Create+0xb4>
 801095c:	f382 8811 	msr	BASEPRI, r2
 8010960:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010962:	b163      	cbz	r3, 801097e <OS_QUEUE_Create+0xd2>
 8010964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010968:	20b1      	movs	r0, #177	@ 0xb1
 801096a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801096c:	4718      	bx	r3
 801096e:	45a8      	cmp	r8, r5
 8010970:	d102      	bne.n	8010978 <OS_QUEUE_Create+0xcc>
 8010972:	20b1      	movs	r0, #177	@ 0xb1
 8010974:	f7ff f924 	bl	800fbc0 <OS_Error>
 8010978:	f8d8 8008 	ldr.w	r8, [r8, #8]
 801097c:	e7c9      	b.n	8010912 <OS_QUEUE_Create+0x66>
 801097e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010982:	bf00      	nop
 8010984:	20003088 	.word	0x20003088

08010988 <OS_QUEUE_GetPtr>:
 8010988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801098a:	4e26      	ldr	r6, [pc, #152]	@ (8010a24 <OS_QUEUE_GetPtr+0x9c>)
 801098c:	4605      	mov	r5, r0
 801098e:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8010990:	460f      	mov	r7, r1
 8010992:	b133      	cbz	r3, 80109a2 <OS_QUEUE_GetPtr+0x1a>
 8010994:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8010996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010998:	4798      	blx	r3
 801099a:	683a      	ldr	r2, [r7, #0]
 801099c:	4601      	mov	r1, r0
 801099e:	20b8      	movs	r0, #184	@ 0xb8
 80109a0:	47a0      	blx	r4
 80109a2:	f7ff fab1 	bl	800ff08 <OS_GetCPUState>
 80109a6:	2801      	cmp	r0, #1
 80109a8:	d105      	bne.n	80109b6 <OS_QUEUE_GetPtr+0x2e>
 80109aa:	f896 3077 	ldrb.w	r3, [r6, #119]	@ 0x77
 80109ae:	b913      	cbnz	r3, 80109b6 <OS_QUEUE_GetPtr+0x2e>
 80109b0:	20a4      	movs	r0, #164	@ 0xa4
 80109b2:	f7ff f905 	bl	800fbc0 <OS_Error>
 80109b6:	f000 f90b 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 80109ba:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80109be:	2b99      	cmp	r3, #153	@ 0x99
 80109c0:	d002      	beq.n	80109c8 <OS_QUEUE_GetPtr+0x40>
 80109c2:	2091      	movs	r0, #145	@ 0x91
 80109c4:	f7ff f8fc 	bl	800fbc0 <OS_Error>
 80109c8:	2380      	movs	r3, #128	@ 0x80
 80109ca:	f383 8811 	msr	BASEPRI, r3
 80109ce:	f895 3020 	ldrb.w	r3, [r5, #32]
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	d102      	bne.n	80109dc <OS_QUEUE_GetPtr+0x54>
 80109d6:	208f      	movs	r0, #143	@ 0x8f
 80109d8:	f7ff f8f2 	bl	800fbc0 <OS_Error>
 80109dc:	692c      	ldr	r4, [r5, #16]
 80109de:	b164      	cbz	r4, 80109fa <OS_QUEUE_GetPtr+0x72>
 80109e0:	6869      	ldr	r1, [r5, #4]
 80109e2:	696a      	ldr	r2, [r5, #20]
 80109e4:	588c      	ldr	r4, [r1, r2]
 80109e6:	188b      	adds	r3, r1, r2
 80109e8:	2c00      	cmp	r4, #0
 80109ea:	bfa3      	ittte	ge
 80109ec:	3304      	addge	r3, #4
 80109ee:	603b      	strge	r3, [r7, #0]
 80109f0:	2301      	movge	r3, #1
 80109f2:	2400      	movlt	r4, #0
 80109f4:	bfa8      	it	ge
 80109f6:	f885 3020 	strbge.w	r3, [r5, #32]
 80109fa:	7873      	ldrb	r3, [r6, #1]
 80109fc:	2b0f      	cmp	r3, #15
 80109fe:	d902      	bls.n	8010a06 <OS_QUEUE_GetPtr+0x7e>
 8010a00:	2099      	movs	r0, #153	@ 0x99
 8010a02:	f7ff f8dd 	bl	800fbc0 <OS_Error>
 8010a06:	7873      	ldrb	r3, [r6, #1]
 8010a08:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010a0c:	b90b      	cbnz	r3, 8010a12 <OS_QUEUE_GetPtr+0x8a>
 8010a0e:	f382 8811 	msr	BASEPRI, r2
 8010a12:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8010a14:	b11b      	cbz	r3, 8010a1e <OS_QUEUE_GetPtr+0x96>
 8010a16:	4621      	mov	r1, r4
 8010a18:	20b8      	movs	r0, #184	@ 0xb8
 8010a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a1c:	4798      	blx	r3
 8010a1e:	4620      	mov	r0, r4
 8010a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a22:	bf00      	nop
 8010a24:	20003088 	.word	0x20003088

08010a28 <OS_QUEUE_Purge>:
 8010a28:	b570      	push	{r4, r5, r6, lr}
 8010a2a:	4d30      	ldr	r5, [pc, #192]	@ (8010aec <OS_QUEUE_Purge+0xc4>)
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8010a30:	b12b      	cbz	r3, 8010a3e <OS_QUEUE_Purge+0x16>
 8010a32:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8010a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a36:	4798      	blx	r3
 8010a38:	4601      	mov	r1, r0
 8010a3a:	20bb      	movs	r0, #187	@ 0xbb
 8010a3c:	47b0      	blx	r6
 8010a3e:	f7ff fa63 	bl	800ff08 <OS_GetCPUState>
 8010a42:	2801      	cmp	r0, #1
 8010a44:	d105      	bne.n	8010a52 <OS_QUEUE_Purge+0x2a>
 8010a46:	f895 3077 	ldrb.w	r3, [r5, #119]	@ 0x77
 8010a4a:	b913      	cbnz	r3, 8010a52 <OS_QUEUE_Purge+0x2a>
 8010a4c:	20a4      	movs	r0, #164	@ 0xa4
 8010a4e:	f7ff f8b7 	bl	800fbc0 <OS_Error>
 8010a52:	f000 f8bd 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 8010a56:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8010a5a:	2b99      	cmp	r3, #153	@ 0x99
 8010a5c:	d002      	beq.n	8010a64 <OS_QUEUE_Purge+0x3c>
 8010a5e:	2091      	movs	r0, #145	@ 0x91
 8010a60:	f7ff f8ae 	bl	800fbc0 <OS_Error>
 8010a64:	2380      	movs	r3, #128	@ 0x80
 8010a66:	f383 8811 	msr	BASEPRI, r3
 8010a6a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8010a6e:	b913      	cbnz	r3, 8010a76 <OS_QUEUE_Purge+0x4e>
 8010a70:	2090      	movs	r0, #144	@ 0x90
 8010a72:	f7ff f8a5 	bl	800fbc0 <OS_Error>
 8010a76:	6963      	ldr	r3, [r4, #20]
 8010a78:	6860      	ldr	r0, [r4, #4]
 8010a7a:	6921      	ldr	r1, [r4, #16]
 8010a7c:	58c2      	ldr	r2, [r0, r3]
 8010a7e:	3304      	adds	r3, #4
 8010a80:	3203      	adds	r2, #3
 8010a82:	f022 0203 	bic.w	r2, r2, #3
 8010a86:	4413      	add	r3, r2
 8010a88:	68e2      	ldr	r2, [r4, #12]
 8010a8a:	3901      	subs	r1, #1
 8010a8c:	1ad2      	subs	r2, r2, r3
 8010a8e:	2a04      	cmp	r2, #4
 8010a90:	6121      	str	r1, [r4, #16]
 8010a92:	6163      	str	r3, [r4, #20]
 8010a94:	d814      	bhi.n	8010ac0 <OS_QUEUE_Purge+0x98>
 8010a96:	2300      	movs	r3, #0
 8010a98:	6163      	str	r3, [r4, #20]
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	f884 3020 	strb.w	r3, [r4, #32]
 8010aa0:	6823      	ldr	r3, [r4, #0]
 8010aa2:	b19b      	cbz	r3, 8010acc <OS_QUEUE_Purge+0xa4>
 8010aa4:	f000 f8fe 	bl	8010ca4 <OS_EnterRegionFunc>
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	f000 f961 	bl	8010d70 <OS_ClearWaitObj>
 8010aae:	f7ff fc79 	bl	80103a4 <OS_TASK_LeaveRegion>
 8010ab2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8010ab4:	b1c3      	cbz	r3, 8010ae8 <OS_QUEUE_Purge+0xc0>
 8010ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010aba:	20bb      	movs	r0, #187	@ 0xbb
 8010abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010abe:	4718      	bx	r3
 8010ac0:	2900      	cmp	r1, #0
 8010ac2:	d0ea      	beq.n	8010a9a <OS_QUEUE_Purge+0x72>
 8010ac4:	58c3      	ldr	r3, [r0, r3]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d0e5      	beq.n	8010a96 <OS_QUEUE_Purge+0x6e>
 8010aca:	e7e6      	b.n	8010a9a <OS_QUEUE_Purge+0x72>
 8010acc:	786b      	ldrb	r3, [r5, #1]
 8010ace:	2b0f      	cmp	r3, #15
 8010ad0:	d902      	bls.n	8010ad8 <OS_QUEUE_Purge+0xb0>
 8010ad2:	2099      	movs	r0, #153	@ 0x99
 8010ad4:	f7ff f874 	bl	800fbc0 <OS_Error>
 8010ad8:	786b      	ldrb	r3, [r5, #1]
 8010ada:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1e7      	bne.n	8010ab2 <OS_QUEUE_Purge+0x8a>
 8010ae2:	f382 8811 	msr	BASEPRI, r2
 8010ae6:	e7e4      	b.n	8010ab2 <OS_QUEUE_Purge+0x8a>
 8010ae8:	bd70      	pop	{r4, r5, r6, pc}
 8010aea:	bf00      	nop
 8010aec:	20003088 	.word	0x20003088

08010af0 <OS_QUEUE_Put>:
 8010af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af4:	4e2a      	ldr	r6, [pc, #168]	@ (8010ba0 <OS_QUEUE_Put+0xb0>)
 8010af6:	4605      	mov	r5, r0
 8010af8:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8010afa:	460f      	mov	r7, r1
 8010afc:	4614      	mov	r4, r2
 8010afe:	b143      	cbz	r3, 8010b12 <OS_QUEUE_Put+0x22>
 8010b00:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8010b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b06:	4798      	blx	r3
 8010b08:	4623      	mov	r3, r4
 8010b0a:	4601      	mov	r1, r0
 8010b0c:	463a      	mov	r2, r7
 8010b0e:	20b5      	movs	r0, #181	@ 0xb5
 8010b10:	47c0      	blx	r8
 8010b12:	f7ff f9f9 	bl	800ff08 <OS_GetCPUState>
 8010b16:	2801      	cmp	r0, #1
 8010b18:	d105      	bne.n	8010b26 <OS_QUEUE_Put+0x36>
 8010b1a:	f896 3077 	ldrb.w	r3, [r6, #119]	@ 0x77
 8010b1e:	b913      	cbnz	r3, 8010b26 <OS_QUEUE_Put+0x36>
 8010b20:	20a4      	movs	r0, #164	@ 0xa4
 8010b22:	f7ff f84d 	bl	800fbc0 <OS_Error>
 8010b26:	f000 f853 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 8010b2a:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8010b2e:	2b99      	cmp	r3, #153	@ 0x99
 8010b30:	d002      	beq.n	8010b38 <OS_QUEUE_Put+0x48>
 8010b32:	2091      	movs	r0, #145	@ 0x91
 8010b34:	f7ff f844 	bl	800fbc0 <OS_Error>
 8010b38:	b914      	cbnz	r4, 8010b40 <OS_QUEUE_Put+0x50>
 8010b3a:	2095      	movs	r0, #149	@ 0x95
 8010b3c:	f7ff f840 	bl	800fbc0 <OS_Error>
 8010b40:	f000 f8b0 	bl	8010ca4 <OS_EnterRegionFunc>
 8010b44:	2380      	movs	r3, #128	@ 0x80
 8010b46:	f383 8811 	msr	BASEPRI, r3
 8010b4a:	4621      	mov	r1, r4
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	f7ff fe45 	bl	80107dc <_GetOffset>
 8010b52:	1e03      	subs	r3, r0, #0
 8010b54:	db15      	blt.n	8010b82 <OS_QUEUE_Put+0x92>
 8010b56:	4622      	mov	r2, r4
 8010b58:	4639      	mov	r1, r7
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	f7ff fe72 	bl	8010844 <_CopyMessage>
 8010b60:	682c      	ldr	r4, [r5, #0]
 8010b62:	b17c      	cbz	r4, 8010b84 <OS_QUEUE_Put+0x94>
 8010b64:	4628      	mov	r0, r5
 8010b66:	f000 f903 	bl	8010d70 <OS_ClearWaitObj>
 8010b6a:	2400      	movs	r4, #0
 8010b6c:	f7ff fc1a 	bl	80103a4 <OS_TASK_LeaveRegion>
 8010b70:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8010b72:	b11b      	cbz	r3, 8010b7c <OS_QUEUE_Put+0x8c>
 8010b74:	4621      	mov	r1, r4
 8010b76:	20b5      	movs	r0, #181	@ 0xb5
 8010b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b7a:	4798      	blx	r3
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b82:	2401      	movs	r4, #1
 8010b84:	7873      	ldrb	r3, [r6, #1]
 8010b86:	2b0f      	cmp	r3, #15
 8010b88:	d902      	bls.n	8010b90 <OS_QUEUE_Put+0xa0>
 8010b8a:	2099      	movs	r0, #153	@ 0x99
 8010b8c:	f7ff f818 	bl	800fbc0 <OS_Error>
 8010b90:	7873      	ldrb	r3, [r6, #1]
 8010b92:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d1e8      	bne.n	8010b6c <OS_QUEUE_Put+0x7c>
 8010b9a:	f382 8811 	msr	BASEPRI, r2
 8010b9e:	e7e5      	b.n	8010b6c <OS_QUEUE_Put+0x7c>
 8010ba0:	20003088 	.word	0x20003088

08010ba4 <OS_AssertCPUInISRMode>:
 8010ba4:	b508      	push	{r3, lr}
 8010ba6:	f7ff f9af 	bl	800ff08 <OS_GetCPUState>
 8010baa:	2804      	cmp	r0, #4
 8010bac:	d80d      	bhi.n	8010bca <OS_AssertCPUInISRMode+0x26>
 8010bae:	e8df f000 	tbb	[pc, r0]
 8010bb2:	0e03      	.short	0x0e03
 8010bb4:	0a08      	.short	0x0a08
 8010bb6:	0a          	.byte	0x0a
 8010bb7:	00          	.byte	0x00
 8010bb8:	20a3      	movs	r0, #163	@ 0xa3
 8010bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010bbe:	f7fe bfff 	b.w	800fbc0 <OS_Error>
 8010bc2:	20a6      	movs	r0, #166	@ 0xa6
 8010bc4:	e7f9      	b.n	8010bba <OS_AssertCPUInISRMode+0x16>
 8010bc6:	20a7      	movs	r0, #167	@ 0xa7
 8010bc8:	e7f7      	b.n	8010bba <OS_AssertCPUInISRMode+0x16>
 8010bca:	20a8      	movs	r0, #168	@ 0xa8
 8010bcc:	e7f5      	b.n	8010bba <OS_AssertCPUInISRMode+0x16>
 8010bce:	bd08      	pop	{r3, pc}

08010bd0 <OS_AssertCPUNotInIllegalState>:
 8010bd0:	b508      	push	{r3, lr}
 8010bd2:	f7ff f999 	bl	800ff08 <OS_GetCPUState>
 8010bd6:	2804      	cmp	r0, #4
 8010bd8:	d80b      	bhi.n	8010bf2 <OS_AssertCPUNotInIllegalState+0x22>
 8010bda:	e8df f000 	tbb	[pc, r0]
 8010bde:	0c0c      	.short	0x0c0c
 8010be0:	0803      	.short	0x0803
 8010be2:	0c          	.byte	0x0c
 8010be3:	00          	.byte	0x00
 8010be4:	20a6      	movs	r0, #166	@ 0xa6
 8010be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010bea:	f7fe bfe9 	b.w	800fbc0 <OS_Error>
 8010bee:	20a7      	movs	r0, #167	@ 0xa7
 8010bf0:	e7f9      	b.n	8010be6 <OS_AssertCPUNotInIllegalState+0x16>
 8010bf2:	20a8      	movs	r0, #168	@ 0xa8
 8010bf4:	e7f7      	b.n	8010be6 <OS_AssertCPUNotInIllegalState+0x16>
 8010bf6:	bd08      	pop	{r3, pc}

08010bf8 <OS_Deactivated>:
 8010bf8:	b538      	push	{r3, r4, r5, lr}
 8010bfa:	4c0f      	ldr	r4, [pc, #60]	@ (8010c38 <OS_Deactivated+0x40>)
 8010bfc:	7823      	ldrb	r3, [r4, #0]
 8010bfe:	b2dd      	uxtb	r5, r3
 8010c00:	3301      	adds	r3, #1
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	7023      	strb	r3, [r4, #0]
 8010c06:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010c08:	b123      	cbz	r3, 8010c14 <OS_Deactivated+0x1c>
 8010c0a:	68a0      	ldr	r0, [r4, #8]
 8010c0c:	6a1b      	ldr	r3, [r3, #32]
 8010c0e:	f890 1050 	ldrb.w	r1, [r0, #80]	@ 0x50
 8010c12:	4798      	blx	r3
 8010c14:	4808      	ldr	r0, [pc, #32]	@ (8010c38 <OS_Deactivated+0x40>)
 8010c16:	f7f7 ff6e 	bl	8008af6 <OS_Switch>
 8010c1a:	7025      	strb	r5, [r4, #0]
 8010c1c:	7863      	ldrb	r3, [r4, #1]
 8010c1e:	2b0f      	cmp	r3, #15
 8010c20:	d902      	bls.n	8010c28 <OS_Deactivated+0x30>
 8010c22:	2099      	movs	r0, #153	@ 0x99
 8010c24:	f7fe ffcc 	bl	800fbc0 <OS_Error>
 8010c28:	7863      	ldrb	r3, [r4, #1]
 8010c2a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010c2e:	b90b      	cbnz	r3, 8010c34 <OS_Deactivated+0x3c>
 8010c30:	f382 8811 	msr	BASEPRI, r2
 8010c34:	bd38      	pop	{r3, r4, r5, pc}
 8010c36:	bf00      	nop
 8010c38:	20003088 	.word	0x20003088

08010c3c <OS_EnableProfiling>:
 8010c3c:	b510      	push	{r4, lr}
 8010c3e:	4c17      	ldr	r4, [pc, #92]	@ (8010c9c <OS_EnableProfiling+0x60>)
 8010c40:	7863      	ldrb	r3, [r4, #1]
 8010c42:	2b0f      	cmp	r3, #15
 8010c44:	d902      	bls.n	8010c4c <OS_EnableProfiling+0x10>
 8010c46:	2099      	movs	r0, #153	@ 0x99
 8010c48:	f7fe ffba 	bl	800fbc0 <OS_Error>
 8010c4c:	2380      	movs	r3, #128	@ 0x80
 8010c4e:	f383 8811 	msr	BASEPRI, r3
 8010c52:	7863      	ldrb	r3, [r4, #1]
 8010c54:	3301      	adds	r3, #1
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	7063      	strb	r3, [r4, #1]
 8010c5a:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8010c5e:	b92b      	cbnz	r3, 8010c6c <OS_EnableProfiling+0x30>
 8010c60:	2301      	movs	r3, #1
 8010c62:	f884 3079 	strb.w	r3, [r4, #121]	@ 0x79
 8010c66:	f7ff f9d7 	bl	8010018 <OS__TIME_GetCycles>
 8010c6a:	6720      	str	r0, [r4, #112]	@ 0x70
 8010c6c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8010ca0 <OS_EnableProfiling+0x64>)
 8010c70:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8010c74:	3308      	adds	r3, #8
 8010c76:	6013      	str	r3, [r2, #0]
 8010c78:	7863      	ldrb	r3, [r4, #1]
 8010c7a:	2b0f      	cmp	r3, #15
 8010c7c:	d902      	bls.n	8010c84 <OS_EnableProfiling+0x48>
 8010c7e:	2099      	movs	r0, #153	@ 0x99
 8010c80:	f7fe ff9e 	bl	800fbc0 <OS_Error>
 8010c84:	7863      	ldrb	r3, [r4, #1]
 8010c86:	3b01      	subs	r3, #1
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	7063      	strb	r3, [r4, #1]
 8010c8c:	7863      	ldrb	r3, [r4, #1]
 8010c8e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010c92:	b90b      	cbnz	r3, 8010c98 <OS_EnableProfiling+0x5c>
 8010c94:	f382 8811 	msr	BASEPRI, r2
 8010c98:	bd10      	pop	{r4, pc}
 8010c9a:	bf00      	nop
 8010c9c:	20003088 	.word	0x20003088
 8010ca0:	20003080 	.word	0x20003080

08010ca4 <OS_EnterRegionFunc>:
 8010ca4:	b510      	push	{r4, lr}
 8010ca6:	4c06      	ldr	r4, [pc, #24]	@ (8010cc0 <OS_EnterRegionFunc+0x1c>)
 8010ca8:	7823      	ldrb	r3, [r4, #0]
 8010caa:	2bff      	cmp	r3, #255	@ 0xff
 8010cac:	d102      	bne.n	8010cb4 <OS_EnterRegionFunc+0x10>
 8010cae:	209d      	movs	r0, #157	@ 0x9d
 8010cb0:	f7fe ff86 	bl	800fbc0 <OS_Error>
 8010cb4:	7823      	ldrb	r3, [r4, #0]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	7023      	strb	r3, [r4, #0]
 8010cbc:	bd10      	pop	{r4, pc}
 8010cbe:	bf00      	nop
 8010cc0:	20003088 	.word	0x20003088

08010cc4 <OS_RemoveTaskFromWaitList>:
 8010cc4:	6882      	ldr	r2, [r0, #8]
 8010cc6:	e9d2 3200 	ldrd	r3, r2, [r2]
 8010cca:	b103      	cbz	r3, 8010cce <OS_RemoveTaskFromWaitList+0xa>
 8010ccc:	605a      	str	r2, [r3, #4]
 8010cce:	6013      	str	r3, [r2, #0]
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	6083      	str	r3, [r0, #8]
 8010cd4:	4770      	bx	lr
	...

08010cd8 <OS_MakeTaskReady>:
 8010cd8:	b538      	push	{r3, r4, r5, lr}
 8010cda:	4c24      	ldr	r4, [pc, #144]	@ (8010d6c <OS_MakeTaskReady+0x94>)
 8010cdc:	4605      	mov	r5, r0
 8010cde:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010ce0:	b10b      	cbz	r3, 8010ce6 <OS_MakeTaskReady+0xe>
 8010ce2:	69db      	ldr	r3, [r3, #28]
 8010ce4:	4798      	blx	r3
 8010ce6:	68ab      	ldr	r3, [r5, #8]
 8010ce8:	b123      	cbz	r3, 8010cf4 <OS_MakeTaskReady+0x1c>
 8010cea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010cec:	4628      	mov	r0, r5
 8010cee:	60eb      	str	r3, [r5, #12]
 8010cf0:	f7ff ffe8 	bl	8010cc4 <OS_RemoveTaskFromWaitList>
 8010cf4:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8010cf8:	f003 0303 	and.w	r3, r3, #3
 8010cfc:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
 8010d00:	b9f3      	cbnz	r3, 8010d40 <OS_MakeTaskReady+0x68>
 8010d02:	69e2      	ldr	r2, [r4, #28]
 8010d04:	b9fa      	cbnz	r2, 8010d46 <OS_MakeTaskReady+0x6e>
 8010d06:	61e5      	str	r5, [r4, #28]
 8010d08:	7822      	ldrb	r2, [r4, #0]
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	b9ca      	cbnz	r2, 8010d42 <OS_MakeTaskReady+0x6a>
 8010d0e:	7023      	strb	r3, [r4, #0]
 8010d10:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010d12:	b123      	cbz	r3, 8010d1e <OS_MakeTaskReady+0x46>
 8010d14:	68a0      	ldr	r0, [r4, #8]
 8010d16:	6a1b      	ldr	r3, [r3, #32]
 8010d18:	f890 1050 	ldrb.w	r1, [r0, #80]	@ 0x50
 8010d1c:	4798      	blx	r3
 8010d1e:	4813      	ldr	r0, [pc, #76]	@ (8010d6c <OS_MakeTaskReady+0x94>)
 8010d20:	f7f7 fee9 	bl	8008af6 <OS_Switch>
 8010d24:	2300      	movs	r3, #0
 8010d26:	7023      	strb	r3, [r4, #0]
 8010d28:	7863      	ldrb	r3, [r4, #1]
 8010d2a:	2b0f      	cmp	r3, #15
 8010d2c:	d902      	bls.n	8010d34 <OS_MakeTaskReady+0x5c>
 8010d2e:	2099      	movs	r0, #153	@ 0x99
 8010d30:	f7fe ff46 	bl	800fbc0 <OS_Error>
 8010d34:	7863      	ldrb	r3, [r4, #1]
 8010d36:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010d3a:	b90b      	cbnz	r3, 8010d40 <OS_MakeTaskReady+0x68>
 8010d3c:	f382 8811 	msr	BASEPRI, r2
 8010d40:	bd38      	pop	{r3, r4, r5, pc}
 8010d42:	7163      	strb	r3, [r4, #5]
 8010d44:	e7f0      	b.n	8010d28 <OS_MakeTaskReady+0x50>
 8010d46:	6929      	ldr	r1, [r5, #16]
 8010d48:	6913      	ldr	r3, [r2, #16]
 8010d4a:	4299      	cmp	r1, r3
 8010d4c:	d8db      	bhi.n	8010d06 <OS_MakeTaskReady+0x2e>
 8010d4e:	4295      	cmp	r5, r2
 8010d50:	d0da      	beq.n	8010d08 <OS_MakeTaskReady+0x30>
 8010d52:	4299      	cmp	r1, r3
 8010d54:	d1f4      	bne.n	8010d40 <OS_MakeTaskReady+0x68>
 8010d56:	462b      	mov	r3, r5
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d0e4      	beq.n	8010d28 <OS_MakeTaskReady+0x50>
 8010d5e:	6918      	ldr	r0, [r3, #16]
 8010d60:	4281      	cmp	r1, r0
 8010d62:	d1e1      	bne.n	8010d28 <OS_MakeTaskReady+0x50>
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d1f7      	bne.n	8010d58 <OS_MakeTaskReady+0x80>
 8010d68:	e7cd      	b.n	8010d06 <OS_MakeTaskReady+0x2e>
 8010d6a:	bf00      	nop
 8010d6c:	20003088 	.word	0x20003088

08010d70 <OS_ClearWaitObj>:
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	4604      	mov	r4, r0
 8010d74:	2380      	movs	r3, #128	@ 0x80
 8010d76:	f383 8811 	msr	BASEPRI, r3
 8010d7a:	461d      	mov	r5, r3
 8010d7c:	6823      	ldr	r3, [r4, #0]
 8010d7e:	b96b      	cbnz	r3, 8010d9c <OS_ClearWaitObj+0x2c>
 8010d80:	4c0a      	ldr	r4, [pc, #40]	@ (8010dac <OS_ClearWaitObj+0x3c>)
 8010d82:	7863      	ldrb	r3, [r4, #1]
 8010d84:	2b0f      	cmp	r3, #15
 8010d86:	d902      	bls.n	8010d8e <OS_ClearWaitObj+0x1e>
 8010d88:	2099      	movs	r0, #153	@ 0x99
 8010d8a:	f7fe ff19 	bl	800fbc0 <OS_Error>
 8010d8e:	7863      	ldrb	r3, [r4, #1]
 8010d90:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010d94:	b90b      	cbnz	r3, 8010d9a <OS_ClearWaitObj+0x2a>
 8010d96:	f382 8811 	msr	BASEPRI, r2
 8010d9a:	bd38      	pop	{r3, r4, r5, pc}
 8010d9c:	6823      	ldr	r3, [r4, #0]
 8010d9e:	68d8      	ldr	r0, [r3, #12]
 8010da0:	f7ff ff9a 	bl	8010cd8 <OS_MakeTaskReady>
 8010da4:	f385 8811 	msr	BASEPRI, r5
 8010da8:	e7e8      	b.n	8010d7c <OS_ClearWaitObj+0xc>
 8010daa:	bf00      	nop
 8010dac:	20003088 	.word	0x20003088

08010db0 <OS_InsertTask>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	6903      	ldr	r3, [r0, #16]
 8010db4:	4604      	mov	r4, r0
 8010db6:	460d      	mov	r5, r1
 8010db8:	b913      	cbnz	r3, 8010dc0 <OS_InsertTask+0x10>
 8010dba:	20cb      	movs	r0, #203	@ 0xcb
 8010dbc:	f7fe ff00 	bl	800fbc0 <OS_Error>
 8010dc0:	f7ff ff70 	bl	8010ca4 <OS_EnterRegionFunc>
 8010dc4:	6922      	ldr	r2, [r4, #16]
 8010dc6:	b94d      	cbnz	r5, 8010ddc <OS_InsertTask+0x2c>
 8010dc8:	4d18      	ldr	r5, [pc, #96]	@ (8010e2c <OS_InsertTask+0x7c>)
 8010dca:	f855 3f18 	ldr.w	r3, [r5, #24]!
 8010dce:	b133      	cbz	r3, 8010dde <OS_InsertTask+0x2e>
 8010dd0:	6918      	ldr	r0, [r3, #16]
 8010dd2:	4290      	cmp	r0, r2
 8010dd4:	d903      	bls.n	8010dde <OS_InsertTask+0x2e>
 8010dd6:	461d      	mov	r5, r3
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	e7f8      	b.n	8010dce <OS_InsertTask+0x1e>
 8010ddc:	682b      	ldr	r3, [r5, #0]
 8010dde:	6023      	str	r3, [r4, #0]
 8010de0:	6225      	str	r5, [r4, #32]
 8010de2:	602c      	str	r4, [r5, #0]
 8010de4:	b143      	cbz	r3, 8010df8 <OS_InsertTask+0x48>
 8010de6:	621c      	str	r4, [r3, #32]
 8010de8:	691b      	ldr	r3, [r3, #16]
 8010dea:	4293      	cmp	r3, r2
 8010dec:	bf14      	ite	ne
 8010dee:	2300      	movne	r3, #0
 8010df0:	f894 3052 	ldrbeq.w	r3, [r4, #82]	@ 0x52
 8010df4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
 8010df8:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8010dfc:	b993      	cbnz	r3, 8010e24 <OS_InsertTask+0x74>
 8010dfe:	2380      	movs	r3, #128	@ 0x80
 8010e00:	f383 8811 	msr	BASEPRI, r3
 8010e04:	4620      	mov	r0, r4
 8010e06:	4c09      	ldr	r4, [pc, #36]	@ (8010e2c <OS_InsertTask+0x7c>)
 8010e08:	f7ff ff66 	bl	8010cd8 <OS_MakeTaskReady>
 8010e0c:	7863      	ldrb	r3, [r4, #1]
 8010e0e:	2b0f      	cmp	r3, #15
 8010e10:	d902      	bls.n	8010e18 <OS_InsertTask+0x68>
 8010e12:	2099      	movs	r0, #153	@ 0x99
 8010e14:	f7fe fed4 	bl	800fbc0 <OS_Error>
 8010e18:	7863      	ldrb	r3, [r4, #1]
 8010e1a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010e1e:	b90b      	cbnz	r3, 8010e24 <OS_InsertTask+0x74>
 8010e20:	f382 8811 	msr	BASEPRI, r2
 8010e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e28:	f7ff babc 	b.w	80103a4 <OS_TASK_LeaveRegion>
 8010e2c:	20003088 	.word	0x20003088

08010e30 <OS_SaveMainStack>:
 8010e30:	b570      	push	{r4, r5, r6, lr}
 8010e32:	f000 fe11 	bl	8011a58 <OS_STACK_GetSysStackBase>
 8010e36:	4d0b      	ldr	r5, [pc, #44]	@ (8010e64 <OS_SaveMainStack+0x34>)
 8010e38:	4604      	mov	r4, r0
 8010e3a:	68eb      	ldr	r3, [r5, #12]
 8010e3c:	685e      	ldr	r6, [r3, #4]
 8010e3e:	f000 fe0f 	bl	8011a60 <OS_STACK_GetSysStackSize>
 8010e42:	68eb      	ldr	r3, [r5, #12]
 8010e44:	1b80      	subs	r0, r0, r6
 8010e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e48:	4404      	add	r4, r0
 8010e4a:	42a3      	cmp	r3, r4
 8010e4c:	d202      	bcs.n	8010e54 <OS_SaveMainStack+0x24>
 8010e4e:	20fb      	movs	r0, #251	@ 0xfb
 8010e50:	f7fe feb6 	bl	800fbc0 <OS_Error>
 8010e54:	68eb      	ldr	r3, [r5, #12]
 8010e56:	4622      	mov	r2, r4
 8010e58:	4631      	mov	r1, r6
 8010e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e5e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8010e60:	f001 ba73 	b.w	801234a <memcpy>
 8010e64:	20003088 	.word	0x20003088

08010e68 <OS_TaskInit>:
 8010e68:	4b05      	ldr	r3, [pc, #20]	@ (8010e80 <OS_TaskInit+0x18>)
 8010e6a:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010e6c:	b119      	cbz	r1, 8010e76 <OS_TaskInit+0xe>
 8010e6e:	689a      	ldr	r2, [r3, #8]
 8010e70:	6451      	str	r1, [r2, #68]	@ 0x44
 8010e72:	2100      	movs	r1, #0
 8010e74:	6491      	str	r1, [r2, #72]	@ 0x48
 8010e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e78:	b103      	cbz	r3, 8010e7c <OS_TaskInit+0x14>
 8010e7a:	4718      	bx	r3
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	20003088 	.word	0x20003088

08010e84 <OS_TerminateError>:
 8010e84:	209b      	movs	r0, #155	@ 0x9b
 8010e86:	f7fe be9b 	b.w	800fbc0 <OS_Error>

08010e8a <OS_UnlinkTask>:
 8010e8a:	6a02      	ldr	r2, [r0, #32]
 8010e8c:	6803      	ldr	r3, [r0, #0]
 8010e8e:	6013      	str	r3, [r2, #0]
 8010e90:	b103      	cbz	r3, 8010e94 <OS_UnlinkTask+0xa>
 8010e92:	621a      	str	r2, [r3, #32]
 8010e94:	4770      	bx	lr
	...

08010e98 <OS_ChangeTask_STD>:
 8010e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e9c:	2500      	movs	r5, #0
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	4c85      	ldr	r4, [pc, #532]	@ (80110b8 <OS_ChangeTask_STD+0x220>)
 8010ea2:	7065      	strb	r5, [r4, #1]
 8010ea4:	7023      	strb	r3, [r4, #0]
 8010ea6:	2380      	movs	r3, #128	@ 0x80
 8010ea8:	f383 8811 	msr	BASEPRI, r3
 8010eac:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010eae:	b162      	cbz	r2, 8010eca <OS_ChangeTask_STD+0x32>
 8010eb0:	7863      	ldrb	r3, [r4, #1]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	7063      	strb	r3, [r4, #1]
 8010eb8:	4790      	blx	r2
 8010eba:	7863      	ldrb	r3, [r4, #1]
 8010ebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8010ec0:	3b01      	subs	r3, #1
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8010ec8:	7063      	strb	r3, [r4, #1]
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f383 8811 	msr	BASEPRI, r3
 8010ed0:	f000 fdc2 	bl	8011a58 <OS_STACK_GetSysStackBase>
 8010ed4:	7803      	ldrb	r3, [r0, #0]
 8010ed6:	2bcd      	cmp	r3, #205	@ 0xcd
 8010ed8:	d002      	beq.n	8010ee0 <OS_ChangeTask_STD+0x48>
 8010eda:	207d      	movs	r0, #125	@ 0x7d
 8010edc:	f7fe fe70 	bl	800fbc0 <OS_Error>
 8010ee0:	68a3      	ldr	r3, [r4, #8]
 8010ee2:	b133      	cbz	r3, 8010ef2 <OS_ChangeTask_STD+0x5a>
 8010ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	2bcd      	cmp	r3, #205	@ 0xcd
 8010eea:	d002      	beq.n	8010ef2 <OS_ChangeTask_STD+0x5a>
 8010eec:	2078      	movs	r0, #120	@ 0x78
 8010eee:	f7fe fe67 	bl	800fbc0 <OS_Error>
 8010ef2:	68a3      	ldr	r3, [r4, #8]
 8010ef4:	b153      	cbz	r3, 8010f0c <OS_ChangeTask_STD+0x74>
 8010ef6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010ef8:	b142      	cbz	r2, 8010f0c <OS_ChangeTask_STD+0x74>
 8010efa:	6858      	ldr	r0, [r3, #4]
 8010efc:	f103 0544 	add.w	r5, r3, #68	@ 0x44
 8010f00:	682b      	ldr	r3, [r5, #0]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	4798      	blx	r3
 8010f06:	686d      	ldr	r5, [r5, #4]
 8010f08:	2d00      	cmp	r5, #0
 8010f0a:	d1f9      	bne.n	8010f00 <OS_ChangeTask_STD+0x68>
 8010f0c:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d034      	beq.n	8010f7e <OS_ChangeTask_STD+0xe6>
 8010f14:	68a3      	ldr	r3, [r4, #8]
 8010f16:	f894 207b 	ldrb.w	r2, [r4, #123]	@ 0x7b
 8010f1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8010f1e:	7923      	ldrb	r3, [r4, #4]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d02c      	beq.n	8010f7e <OS_ChangeTask_STD+0xe6>
 8010f24:	2380      	movs	r3, #128	@ 0x80
 8010f26:	f383 8811 	msr	BASEPRI, r3
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	68a3      	ldr	r3, [r4, #8]
 8010f2e:	7122      	strb	r2, [r4, #4]
 8010f30:	f382 8811 	msr	BASEPRI, r2
 8010f34:	b303      	cbz	r3, 8010f78 <OS_ChangeTask_STD+0xe0>
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	b1f2      	cbz	r2, 8010f78 <OS_ChangeTask_STD+0xe0>
 8010f3a:	6918      	ldr	r0, [r3, #16]
 8010f3c:	6911      	ldr	r1, [r2, #16]
 8010f3e:	4288      	cmp	r0, r1
 8010f40:	d11a      	bne.n	8010f78 <OS_ChangeTask_STD+0xe0>
 8010f42:	4611      	mov	r1, r2
 8010f44:	6812      	ldr	r2, [r2, #0]
 8010f46:	b112      	cbz	r2, 8010f4e <OS_ChangeTask_STD+0xb6>
 8010f48:	6915      	ldr	r5, [r2, #16]
 8010f4a:	42a8      	cmp	r0, r5
 8010f4c:	d0f9      	beq.n	8010f42 <OS_ChangeTask_STD+0xaa>
 8010f4e:	2280      	movs	r2, #128	@ 0x80
 8010f50:	f382 8811 	msr	BASEPRI, r2
 8010f54:	69e2      	ldr	r2, [r4, #28]
 8010f56:	6a18      	ldr	r0, [r3, #32]
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	bf08      	it	eq
 8010f5e:	61e2      	streq	r2, [r4, #28]
 8010f60:	6002      	str	r2, [r0, #0]
 8010f62:	6210      	str	r0, [r2, #32]
 8010f64:	680a      	ldr	r2, [r1, #0]
 8010f66:	6219      	str	r1, [r3, #32]
 8010f68:	601a      	str	r2, [r3, #0]
 8010f6a:	b102      	cbz	r2, 8010f6e <OS_ChangeTask_STD+0xd6>
 8010f6c:	6213      	str	r3, [r2, #32]
 8010f6e:	600b      	str	r3, [r1, #0]
 8010f70:	f891 3052 	ldrb.w	r3, [r1, #82]	@ 0x52
 8010f74:	f881 3051 	strb.w	r3, [r1, #81]	@ 0x51
 8010f78:	2300      	movs	r3, #0
 8010f7a:	f383 8811 	msr	BASEPRI, r3
 8010f7e:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8010f82:	b1bb      	cbz	r3, 8010fb4 <OS_ChangeTask_STD+0x11c>
 8010f84:	07d9      	lsls	r1, r3, #31
 8010f86:	d406      	bmi.n	8010f96 <OS_ChangeTask_STD+0xfe>
 8010f88:	f7ff f846 	bl	8010018 <OS__TIME_GetCycles>
 8010f8c:	68a2      	ldr	r2, [r4, #8]
 8010f8e:	2a00      	cmp	r2, #0
 8010f90:	d14f      	bne.n	8011032 <OS_ChangeTask_STD+0x19a>
 8010f92:	6720      	str	r0, [r4, #112]	@ 0x70
 8010f94:	e00e      	b.n	8010fb4 <OS_ChangeTask_STD+0x11c>
 8010f96:	f7ff f88b 	bl	80100b0 <OS_TIME_GetTicks>
 8010f9a:	4b48      	ldr	r3, [pc, #288]	@ (80110bc <OS_ChangeTask_STD+0x224>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	1a1b      	subs	r3, r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	daf1      	bge.n	8010f88 <OS_ChangeTask_STD+0xf0>
 8010fa4:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8010fa8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010fac:	f884 3079 	strb.w	r3, [r4, #121]	@ 0x79
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d1e9      	bne.n	8010f88 <OS_ChangeTask_STD+0xf0>
 8010fb4:	68a3      	ldr	r3, [r4, #8]
 8010fb6:	b12b      	cbz	r3, 8010fc4 <OS_ChangeTask_STD+0x12c>
 8010fb8:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8010fbc:	b912      	cbnz	r2, 8010fc4 <OS_ChangeTask_STD+0x12c>
 8010fbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010fc0:	3201      	adds	r2, #1
 8010fc2:	635a      	str	r2, [r3, #52]	@ 0x34
 8010fc4:	69e3      	ldr	r3, [r4, #28]
 8010fc6:	b1b3      	cbz	r3, 8010ff6 <OS_ChangeTask_STD+0x15e>
 8010fc8:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8010fcc:	2700      	movs	r7, #0
 8010fce:	f388 8811 	msr	BASEPRI, r8
 8010fd2:	69e5      	ldr	r5, [r4, #28]
 8010fd4:	b195      	cbz	r5, 8010ffc <OS_ChangeTask_STD+0x164>
 8010fd6:	f895 6050 	ldrb.w	r6, [r5, #80]	@ 0x50
 8010fda:	b17e      	cbz	r6, 8010ffc <OS_ChangeTask_STD+0x164>
 8010fdc:	0772      	lsls	r2, r6, #29
 8010fde:	d533      	bpl.n	8011048 <OS_ChangeTask_STD+0x1b0>
 8010fe0:	68eb      	ldr	r3, [r5, #12]
 8010fe2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010fe4:	1a9a      	subs	r2, r3, r2
 8010fe6:	2a00      	cmp	r2, #0
 8010fe8:	dc29      	bgt.n	801103e <OS_ChangeTask_STD+0x1a6>
 8010fea:	4628      	mov	r0, r5
 8010fec:	f7ff fe74 	bl	8010cd8 <OS_MakeTaskReady>
 8010ff0:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8010ff4:	bb43      	cbnz	r3, 8011048 <OS_ChangeTask_STD+0x1b0>
 8010ff6:	2380      	movs	r3, #128	@ 0x80
 8010ff8:	f383 8811 	msr	BASEPRI, r3
 8010ffc:	2700      	movs	r7, #0
 8010ffe:	46b8      	mov	r8, r7
 8011000:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 80110b8 <OS_ChangeTask_STD+0x220>
 8011004:	7963      	ldrb	r3, [r4, #5]
 8011006:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801100a:	2b00      	cmp	r3, #0
 801100c:	d058      	beq.n	80110c0 <OS_ChangeTask_STD+0x228>
 801100e:	7167      	strb	r7, [r4, #5]
 8011010:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011012:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011016:	3b01      	subs	r3, #1
 8011018:	6323      	str	r3, [r4, #48]	@ 0x30
 801101a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801101c:	b10b      	cbz	r3, 8011022 <OS_ChangeTask_STD+0x18a>
 801101e:	4648      	mov	r0, r9
 8011020:	4798      	blx	r3
 8011022:	f388 8811 	msr	BASEPRI, r8
 8011026:	2680      	movs	r6, #128	@ 0x80
 8011028:	69a5      	ldr	r5, [r4, #24]
 801102a:	bb05      	cbnz	r5, 801106e <OS_ChangeTask_STD+0x1d6>
 801102c:	f386 8811 	msr	BASEPRI, r6
 8011030:	e7e8      	b.n	8011004 <OS_ChangeTask_STD+0x16c>
 8011032:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8011034:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8011036:	1a5b      	subs	r3, r3, r1
 8011038:	4403      	add	r3, r0
 801103a:	6393      	str	r3, [r2, #56]	@ 0x38
 801103c:	e7a9      	b.n	8010f92 <OS_ChangeTask_STD+0xfa>
 801103e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011040:	1a9a      	subs	r2, r3, r2
 8011042:	2a00      	cmp	r2, #0
 8011044:	bfb8      	it	lt
 8011046:	6323      	strlt	r3, [r4, #48]	@ 0x30
 8011048:	f006 06fb 	and.w	r6, r6, #251	@ 0xfb
 801104c:	2e10      	cmp	r6, #16
 801104e:	d109      	bne.n	8011064 <OS_ChangeTask_STD+0x1cc>
 8011050:	68ab      	ldr	r3, [r5, #8]
 8011052:	689b      	ldr	r3, [r3, #8]
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 801105a:	b91a      	cbnz	r2, 8011064 <OS_ChangeTask_STD+0x1cc>
 801105c:	691a      	ldr	r2, [r3, #16]
 801105e:	692b      	ldr	r3, [r5, #16]
 8011060:	429a      	cmp	r2, r3
 8011062:	d1c8      	bne.n	8010ff6 <OS_ChangeTask_STD+0x15e>
 8011064:	682b      	ldr	r3, [r5, #0]
 8011066:	61e3      	str	r3, [r4, #28]
 8011068:	f387 8811 	msr	BASEPRI, r7
 801106c:	e7af      	b.n	8010fce <OS_ChangeTask_STD+0x136>
 801106e:	f386 8811 	msr	BASEPRI, r6
 8011072:	69e3      	ldr	r3, [r4, #28]
 8011074:	b11b      	cbz	r3, 801107e <OS_ChangeTask_STD+0x1e6>
 8011076:	692a      	ldr	r2, [r5, #16]
 8011078:	691b      	ldr	r3, [r3, #16]
 801107a:	429a      	cmp	r2, r3
 801107c:	d3c2      	bcc.n	8011004 <OS_ChangeTask_STD+0x16c>
 801107e:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8011082:	075b      	lsls	r3, r3, #29
 8011084:	d50a      	bpl.n	801109c <OS_ChangeTask_STD+0x204>
 8011086:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011088:	68eb      	ldr	r3, [r5, #12]
 801108a:	1a9b      	subs	r3, r3, r2
 801108c:	2b00      	cmp	r3, #0
 801108e:	dd09      	ble.n	80110a4 <OS_ChangeTask_STD+0x20c>
 8011090:	68ea      	ldr	r2, [r5, #12]
 8011092:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011094:	1ad3      	subs	r3, r2, r3
 8011096:	2b00      	cmp	r3, #0
 8011098:	da00      	bge.n	801109c <OS_ChangeTask_STD+0x204>
 801109a:	6322      	str	r2, [r4, #48]	@ 0x30
 801109c:	f387 8811 	msr	BASEPRI, r7
 80110a0:	682d      	ldr	r5, [r5, #0]
 80110a2:	e7c2      	b.n	801102a <OS_ChangeTask_STD+0x192>
 80110a4:	4628      	mov	r0, r5
 80110a6:	f7ff fe17 	bl	8010cd8 <OS_MakeTaskReady>
 80110aa:	f386 8811 	msr	BASEPRI, r6
 80110ae:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d1ec      	bne.n	8011090 <OS_ChangeTask_STD+0x1f8>
 80110b6:	e7a5      	b.n	8011004 <OS_ChangeTask_STD+0x16c>
 80110b8:	20003088 	.word	0x20003088
 80110bc:	20003080 	.word	0x20003080
 80110c0:	6062      	str	r2, [r4, #4]
 80110c2:	69e5      	ldr	r5, [r4, #28]
 80110c4:	2d00      	cmp	r5, #0
 80110c6:	d041      	beq.n	801114c <OS_ChangeTask_STD+0x2b4>
 80110c8:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 80110cc:	b193      	cbz	r3, 80110f4 <OS_ChangeTask_STD+0x25c>
 80110ce:	68ab      	ldr	r3, [r5, #8]
 80110d0:	689b      	ldr	r3, [r3, #8]
 80110d2:	685e      	ldr	r6, [r3, #4]
 80110d4:	4630      	mov	r0, r6
 80110d6:	f7ff fed8 	bl	8010e8a <OS_UnlinkTask>
 80110da:	692b      	ldr	r3, [r5, #16]
 80110dc:	6133      	str	r3, [r6, #16]
 80110de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80110e0:	b10b      	cbz	r3, 80110e6 <OS_ChangeTask_STD+0x24e>
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	4798      	blx	r3
 80110e6:	2301      	movs	r3, #1
 80110e8:	4629      	mov	r1, r5
 80110ea:	4630      	mov	r0, r6
 80110ec:	7063      	strb	r3, [r4, #1]
 80110ee:	f7ff fe5f 	bl	8010db0 <OS_InsertTask>
 80110f2:	61e6      	str	r6, [r4, #28]
 80110f4:	69e3      	ldr	r3, [r4, #28]
 80110f6:	60a3      	str	r3, [r4, #8]
 80110f8:	b913      	cbnz	r3, 8011100 <OS_ChangeTask_STD+0x268>
 80110fa:	2080      	movs	r0, #128	@ 0x80
 80110fc:	f7fe fd60 	bl	800fbc0 <OS_Error>
 8011100:	68a3      	ldr	r3, [r4, #8]
 8011102:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8011106:	2b0f      	cmp	r3, #15
 8011108:	d002      	beq.n	8011110 <OS_ChangeTask_STD+0x278>
 801110a:	2080      	movs	r0, #128	@ 0x80
 801110c:	f7fe fd58 	bl	800fbc0 <OS_Error>
 8011110:	68a3      	ldr	r3, [r4, #8]
 8011112:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011114:	b142      	cbz	r2, 8011128 <OS_ChangeTask_STD+0x290>
 8011116:	6858      	ldr	r0, [r3, #4]
 8011118:	f103 0544 	add.w	r5, r3, #68	@ 0x44
 801111c:	682b      	ldr	r3, [r5, #0]
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	4798      	blx	r3
 8011122:	686d      	ldr	r5, [r5, #4]
 8011124:	2d00      	cmp	r5, #0
 8011126:	d1f9      	bne.n	801111c <OS_ChangeTask_STD+0x284>
 8011128:	68a0      	ldr	r0, [r4, #8]
 801112a:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 801112e:	f884 307b 	strb.w	r3, [r4, #123]	@ 0x7b
 8011132:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
 8011136:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011138:	b10b      	cbz	r3, 801113e <OS_ChangeTask_STD+0x2a6>
 801113a:	695b      	ldr	r3, [r3, #20]
 801113c:	4798      	blx	r3
 801113e:	68a2      	ldr	r2, [r4, #8]
 8011140:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8011142:	3301      	adds	r3, #1
 8011144:	6313      	str	r3, [r2, #48]	@ 0x30
 8011146:	4808      	ldr	r0, [pc, #32]	@ (8011168 <OS_ChangeTask_STD+0x2d0>)
 8011148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801114c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801114e:	b10b      	cbz	r3, 8011154 <OS_ChangeTask_STD+0x2bc>
 8011150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011152:	4798      	blx	r3
 8011154:	2300      	movs	r3, #0
 8011156:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
 801115a:	f884 307b 	strb.w	r3, [r4, #123]	@ 0x7b
 801115e:	60a3      	str	r3, [r4, #8]
 8011160:	7023      	strb	r3, [r4, #0]
 8011162:	f383 8811 	msr	BASEPRI, r3
 8011166:	e7ee      	b.n	8011146 <OS_ChangeTask_STD+0x2ae>
 8011168:	20003088 	.word	0x20003088

0801116c <OS_Init_STD>:
 801116c:	b538      	push	{r3, r4, r5, lr}
 801116e:	4b29      	ldr	r3, [pc, #164]	@ (8011214 <OS_Init_STD+0xa8>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	2b53      	cmp	r3, #83	@ 0x53
 8011176:	d1fd      	bne.n	8011174 <OS_Init_STD+0x8>
 8011178:	4b27      	ldr	r3, [pc, #156]	@ (8011218 <OS_Init_STD+0xac>)
 801117a:	799b      	ldrb	r3, [r3, #6]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d1fd      	bne.n	801117c <OS_Init_STD+0x10>
 8011180:	4b26      	ldr	r3, [pc, #152]	@ (801121c <OS_Init_STD+0xb0>)
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	f64c 2371 	movw	r3, #51825	@ 0xca71
 8011188:	429a      	cmp	r2, r3
 801118a:	d1fd      	bne.n	8011188 <OS_Init_STD+0x1c>
 801118c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011190:	2201      	movs	r2, #1
 8011192:	4c23      	ldr	r4, [pc, #140]	@ (8011220 <OS_Init_STD+0xb4>)
 8011194:	6323      	str	r3, [r4, #48]	@ 0x30
 8011196:	4b23      	ldr	r3, [pc, #140]	@ (8011224 <OS_Init_STD+0xb8>)
 8011198:	e9c3 2206 	strd	r2, r2, [r3, #24]
 801119c:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
 80111a0:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80111a4:	f894 3076 	ldrb.w	r3, [r4, #118]	@ 0x76
 80111a8:	b193      	cbz	r3, 80111d0 <OS_Init_STD+0x64>
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d10d      	bne.n	80111ca <OS_Init_STD+0x5e>
 80111ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80111b0:	b133      	cbz	r3, 80111c0 <OS_Init_STD+0x54>
 80111b2:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 80111b6:	b973      	cbnz	r3, 80111d6 <OS_Init_STD+0x6a>
 80111b8:	20a1      	movs	r0, #161	@ 0xa1
 80111ba:	f7fe fd01 	bl	800fbc0 <OS_Error>
 80111be:	e00a      	b.n	80111d6 <OS_Init_STD+0x6a>
 80111c0:	68a3      	ldr	r3, [r4, #8]
 80111c2:	b143      	cbz	r3, 80111d6 <OS_Init_STD+0x6a>
 80111c4:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 80111c8:	b92b      	cbnz	r3, 80111d6 <OS_Init_STD+0x6a>
 80111ca:	20e3      	movs	r0, #227	@ 0xe3
 80111cc:	f7fe fcf8 	bl	800fbc0 <OS_Error>
 80111d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1ed      	bne.n	80111b2 <OS_Init_STD+0x46>
 80111d6:	f7fe fe97 	bl	800ff08 <OS_GetCPUState>
 80111da:	2801      	cmp	r0, #1
 80111dc:	d102      	bne.n	80111e4 <OS_Init_STD+0x78>
 80111de:	20a0      	movs	r0, #160	@ 0xa0
 80111e0:	f7fe fcee 	bl	800fbc0 <OS_Error>
 80111e4:	f7ff fcf4 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 80111e8:	f000 fc44 	bl	8011a74 <OS_ARMv7M_Init>
 80111ec:	2301      	movs	r3, #1
 80111ee:	7023      	strb	r3, [r4, #0]
 80111f0:	f000 fc32 	bl	8011a58 <OS_STACK_GetSysStackBase>
 80111f4:	4605      	mov	r5, r0
 80111f6:	f000 fc3b 	bl	8011a70 <OS_STACK_GetSP>
 80111fa:	f1a0 0220 	sub.w	r2, r0, #32
 80111fe:	1b52      	subs	r2, r2, r5
 8011200:	d003      	beq.n	801120a <OS_Init_STD+0x9e>
 8011202:	21cd      	movs	r1, #205	@ 0xcd
 8011204:	4628      	mov	r0, r5
 8011206:	f000 ff8c 	bl	8012122 <memset>
 801120a:	2301      	movs	r3, #1
 801120c:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
 8011210:	bd38      	pop	{r3, r4, r5, pc}
 8011212:	bf00      	nop
 8011214:	08013e4c 	.word	0x08013e4c
 8011218:	08013e02 	.word	0x08013e02
 801121c:	08013e48 	.word	0x08013e48
 8011220:	20003088 	.word	0x20003088
 8011224:	20003108 	.word	0x20003108

08011228 <OS_IsRunning>:
 8011228:	b538      	push	{r3, r4, r5, lr}
 801122a:	4c0f      	ldr	r4, [pc, #60]	@ (8011268 <OS_IsRunning+0x40>)
 801122c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801122e:	b11b      	cbz	r3, 8011238 <OS_IsRunning+0x10>
 8011230:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 8011234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011236:	4798      	blx	r3
 8011238:	f7fe fe66 	bl	800ff08 <OS_GetCPUState>
 801123c:	2801      	cmp	r0, #1
 801123e:	d105      	bne.n	801124c <OS_IsRunning+0x24>
 8011240:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 8011244:	b913      	cbnz	r3, 801124c <OS_IsRunning+0x24>
 8011246:	20a4      	movs	r0, #164	@ 0xa4
 8011248:	f7fe fcba 	bl	800fbc0 <OS_Error>
 801124c:	f7ff fcc0 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 8011250:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011252:	f894 5076 	ldrb.w	r5, [r4, #118]	@ 0x76
 8011256:	b123      	cbz	r3, 8011262 <OS_IsRunning+0x3a>
 8011258:	4629      	mov	r1, r5
 801125a:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 801125e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011260:	4798      	blx	r3
 8011262:	4628      	mov	r0, r5
 8011264:	bd38      	pop	{r3, r4, r5, pc}
 8011266:	bf00      	nop
 8011268:	20003088 	.word	0x20003088

0801126c <OS__Start>:
 801126c:	b510      	push	{r4, lr}
 801126e:	4c0f      	ldr	r4, [pc, #60]	@ (80112ac <OS__Start+0x40>)
 8011270:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011272:	b11b      	cbz	r3, 801127c <OS__Start+0x10>
 8011274:	f240 1061 	movw	r0, #353	@ 0x161
 8011278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801127a:	4798      	blx	r3
 801127c:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
 8011280:	b913      	cbnz	r3, 8011288 <OS__Start+0x1c>
 8011282:	20a5      	movs	r0, #165	@ 0xa5
 8011284:	f7fe fc9c 	bl	800fbc0 <OS_Error>
 8011288:	2380      	movs	r3, #128	@ 0x80
 801128a:	f383 8811 	msr	BASEPRI, r3
 801128e:	f894 3076 	ldrb.w	r3, [r4, #118]	@ 0x76
 8011292:	b113      	cbz	r3, 801129a <OS__Start+0x2e>
 8011294:	20e4      	movs	r0, #228	@ 0xe4
 8011296:	f7fe fc93 	bl	800fbc0 <OS_Error>
 801129a:	2301      	movs	r3, #1
 801129c:	68e0      	ldr	r0, [r4, #12]
 801129e:	f884 3076 	strb.w	r3, [r4, #118]	@ 0x76
 80112a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112a6:	f7f7 bbfb 	b.w	8008aa0 <OS_StartASM>
 80112aa:	bf00      	nop
 80112ac:	20003088 	.word	0x20003088

080112b0 <OS_STAT_GetExecTime>:
 80112b0:	b570      	push	{r4, r5, r6, lr}
 80112b2:	4d26      	ldr	r5, [pc, #152]	@ (801134c <OS_STAT_GetExecTime+0x9c>)
 80112b4:	4604      	mov	r4, r0
 80112b6:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80112b8:	b133      	cbz	r3, 80112c8 <OS_STAT_GetExecTime+0x18>
 80112ba:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80112bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112be:	4798      	blx	r3
 80112c0:	4601      	mov	r1, r0
 80112c2:	f240 1027 	movw	r0, #295	@ 0x127
 80112c6:	47b0      	blx	r6
 80112c8:	f7fe fe1e 	bl	800ff08 <OS_GetCPUState>
 80112cc:	2801      	cmp	r0, #1
 80112ce:	d105      	bne.n	80112dc <OS_STAT_GetExecTime+0x2c>
 80112d0:	f895 3077 	ldrb.w	r3, [r5, #119]	@ 0x77
 80112d4:	b913      	cbnz	r3, 80112dc <OS_STAT_GetExecTime+0x2c>
 80112d6:	20a4      	movs	r0, #164	@ 0xa4
 80112d8:	f7fe fc72 	bl	800fbc0 <OS_Error>
 80112dc:	f7ff fc78 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 80112e0:	b93c      	cbnz	r4, 80112f2 <OS_STAT_GetExecTime+0x42>
 80112e2:	68ac      	ldr	r4, [r5, #8]
 80112e4:	b92c      	cbnz	r4, 80112f2 <OS_STAT_GetExecTime+0x42>
 80112e6:	2080      	movs	r0, #128	@ 0x80
 80112e8:	f7fe fc6a 	bl	800fbc0 <OS_Error>
 80112ec:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80112f0:	deff      	udf	#255	@ 0xff
 80112f2:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80112f6:	2b0f      	cmp	r3, #15
 80112f8:	d002      	beq.n	8011300 <OS_STAT_GetExecTime+0x50>
 80112fa:	2080      	movs	r0, #128	@ 0x80
 80112fc:	f7fe fc60 	bl	800fbc0 <OS_Error>
 8011300:	f7ff fcd0 	bl	8010ca4 <OS_EnterRegionFunc>
 8011304:	68ab      	ldr	r3, [r5, #8]
 8011306:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011308:	42a3      	cmp	r3, r4
 801130a:	d113      	bne.n	8011334 <OS_STAT_GetExecTime+0x84>
 801130c:	2380      	movs	r3, #128	@ 0x80
 801130e:	f383 8811 	msr	BASEPRI, r3
 8011312:	f7fe fe81 	bl	8010018 <OS__TIME_GetCycles>
 8011316:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8011318:	1af3      	subs	r3, r6, r3
 801131a:	181e      	adds	r6, r3, r0
 801131c:	786b      	ldrb	r3, [r5, #1]
 801131e:	2b0f      	cmp	r3, #15
 8011320:	d902      	bls.n	8011328 <OS_STAT_GetExecTime+0x78>
 8011322:	2099      	movs	r0, #153	@ 0x99
 8011324:	f7fe fc4c 	bl	800fbc0 <OS_Error>
 8011328:	786b      	ldrb	r3, [r5, #1]
 801132a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801132e:	b90b      	cbnz	r3, 8011334 <OS_STAT_GetExecTime+0x84>
 8011330:	f382 8811 	msr	BASEPRI, r2
 8011334:	f7ff f836 	bl	80103a4 <OS_TASK_LeaveRegion>
 8011338:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801133a:	b123      	cbz	r3, 8011346 <OS_STAT_GetExecTime+0x96>
 801133c:	4631      	mov	r1, r6
 801133e:	f240 1027 	movw	r0, #295	@ 0x127
 8011342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011344:	4798      	blx	r3
 8011346:	4630      	mov	r0, r6
 8011348:	bd70      	pop	{r4, r5, r6, pc}
 801134a:	bf00      	nop
 801134c:	20003088 	.word	0x20003088

08011350 <OS_INFO_GetCPU>:
 8011350:	b510      	push	{r4, lr}
 8011352:	4c0e      	ldr	r4, [pc, #56]	@ (801138c <OS_INFO_GetCPU+0x3c>)
 8011354:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011356:	b11b      	cbz	r3, 8011360 <OS_INFO_GetCPU+0x10>
 8011358:	f240 103b 	movw	r0, #315	@ 0x13b
 801135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801135e:	4798      	blx	r3
 8011360:	f7fe fdd2 	bl	800ff08 <OS_GetCPUState>
 8011364:	2801      	cmp	r0, #1
 8011366:	d105      	bne.n	8011374 <OS_INFO_GetCPU+0x24>
 8011368:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 801136c:	b913      	cbnz	r3, 8011374 <OS_INFO_GetCPU+0x24>
 801136e:	20a4      	movs	r0, #164	@ 0xa4
 8011370:	f7fe fc26 	bl	800fbc0 <OS_Error>
 8011374:	f7ff fc2c 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 8011378:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801137a:	b123      	cbz	r3, 8011386 <OS_INFO_GetCPU+0x36>
 801137c:	f240 103b 	movw	r0, #315	@ 0x13b
 8011380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011382:	4903      	ldr	r1, [pc, #12]	@ (8011390 <OS_INFO_GetCPU+0x40>)
 8011384:	4798      	blx	r3
 8011386:	4802      	ldr	r0, [pc, #8]	@ (8011390 <OS_INFO_GetCPU+0x40>)
 8011388:	bd10      	pop	{r4, pc}
 801138a:	bf00      	nop
 801138c:	20003088 	.word	0x20003088
 8011390:	08013e1a 	.word	0x08013e1a

08011394 <OS_INFO_GetLibName>:
 8011394:	b510      	push	{r4, lr}
 8011396:	4c0e      	ldr	r4, [pc, #56]	@ (80113d0 <OS_INFO_GetLibName+0x3c>)
 8011398:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801139a:	b11b      	cbz	r3, 80113a4 <OS_INFO_GetLibName+0x10>
 801139c:	f240 103d 	movw	r0, #317	@ 0x13d
 80113a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113a2:	4798      	blx	r3
 80113a4:	f7fe fdb0 	bl	800ff08 <OS_GetCPUState>
 80113a8:	2801      	cmp	r0, #1
 80113aa:	d105      	bne.n	80113b8 <OS_INFO_GetLibName+0x24>
 80113ac:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 80113b0:	b913      	cbnz	r3, 80113b8 <OS_INFO_GetLibName+0x24>
 80113b2:	20a4      	movs	r0, #164	@ 0xa4
 80113b4:	f7fe fc04 	bl	800fbc0 <OS_Error>
 80113b8:	f7ff fc0a 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 80113bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80113be:	b123      	cbz	r3, 80113ca <OS_INFO_GetLibName+0x36>
 80113c0:	f240 103d 	movw	r0, #317	@ 0x13d
 80113c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80113c6:	4903      	ldr	r1, [pc, #12]	@ (80113d4 <OS_INFO_GetLibName+0x40>)
 80113c8:	4798      	blx	r3
 80113ca:	4802      	ldr	r0, [pc, #8]	@ (80113d4 <OS_INFO_GetLibName+0x40>)
 80113cc:	bd10      	pop	{r4, pc}
 80113ce:	bf00      	nop
 80113d0:	20003088 	.word	0x20003088
 80113d4:	08013e2a 	.word	0x08013e2a

080113d8 <OS_INFO_GetVersion>:
 80113d8:	b510      	push	{r4, lr}
 80113da:	4c0f      	ldr	r4, [pc, #60]	@ (8011418 <OS_INFO_GetVersion+0x40>)
 80113dc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80113de:	b11b      	cbz	r3, 80113e8 <OS_INFO_GetVersion+0x10>
 80113e0:	f240 103f 	movw	r0, #319	@ 0x13f
 80113e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113e6:	4798      	blx	r3
 80113e8:	f7fe fd8e 	bl	800ff08 <OS_GetCPUState>
 80113ec:	2801      	cmp	r0, #1
 80113ee:	d105      	bne.n	80113fc <OS_INFO_GetVersion+0x24>
 80113f0:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 80113f4:	b913      	cbnz	r3, 80113fc <OS_INFO_GetVersion+0x24>
 80113f6:	20a4      	movs	r0, #164	@ 0xa4
 80113f8:	f7fe fbe2 	bl	800fbc0 <OS_Error>
 80113fc:	f7ff fbe8 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 8011400:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011402:	b12b      	cbz	r3, 8011410 <OS_INFO_GetVersion+0x38>
 8011404:	f64c 2171 	movw	r1, #51825	@ 0xca71
 8011408:	f240 103f 	movw	r0, #319	@ 0x13f
 801140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801140e:	4798      	blx	r3
 8011410:	f64c 2071 	movw	r0, #51825	@ 0xca71
 8011414:	bd10      	pop	{r4, pc}
 8011416:	bf00      	nop
 8011418:	20003088 	.word	0x20003088

0801141c <OS_STACK_GetTaskStackBase>:
 801141c:	b570      	push	{r4, r5, r6, lr}
 801141e:	4d18      	ldr	r5, [pc, #96]	@ (8011480 <OS_STACK_GetTaskStackBase+0x64>)
 8011420:	4604      	mov	r4, r0
 8011422:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8011424:	b133      	cbz	r3, 8011434 <OS_STACK_GetTaskStackBase+0x18>
 8011426:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8011428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801142a:	4798      	blx	r3
 801142c:	4601      	mov	r1, r0
 801142e:	f44f 70a1 	mov.w	r0, #322	@ 0x142
 8011432:	47b0      	blx	r6
 8011434:	f7fe fd68 	bl	800ff08 <OS_GetCPUState>
 8011438:	2801      	cmp	r0, #1
 801143a:	d105      	bne.n	8011448 <OS_STACK_GetTaskStackBase+0x2c>
 801143c:	f895 3077 	ldrb.w	r3, [r5, #119]	@ 0x77
 8011440:	b913      	cbnz	r3, 8011448 <OS_STACK_GetTaskStackBase+0x2c>
 8011442:	20a4      	movs	r0, #164	@ 0xa4
 8011444:	f7fe fbbc 	bl	800fbc0 <OS_Error>
 8011448:	f7ff fbc2 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 801144c:	b93c      	cbnz	r4, 801145e <OS_STACK_GetTaskStackBase+0x42>
 801144e:	68ac      	ldr	r4, [r5, #8]
 8011450:	b92c      	cbnz	r4, 801145e <OS_STACK_GetTaskStackBase+0x42>
 8011452:	2080      	movs	r0, #128	@ 0x80
 8011454:	f7fe fbb4 	bl	800fbc0 <OS_Error>
 8011458:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 801145c:	deff      	udf	#255	@ 0xff
 801145e:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 8011462:	2b0f      	cmp	r3, #15
 8011464:	d002      	beq.n	801146c <OS_STACK_GetTaskStackBase+0x50>
 8011466:	2080      	movs	r0, #128	@ 0x80
 8011468:	f7fe fbaa 	bl	800fbc0 <OS_Error>
 801146c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801146e:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 8011470:	b123      	cbz	r3, 801147c <OS_STACK_GetTaskStackBase+0x60>
 8011472:	4621      	mov	r1, r4
 8011474:	f44f 70a1 	mov.w	r0, #322	@ 0x142
 8011478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801147a:	4798      	blx	r3
 801147c:	4620      	mov	r0, r4
 801147e:	bd70      	pop	{r4, r5, r6, pc}
 8011480:	20003088 	.word	0x20003088

08011484 <OS_STACK_GetTaskStackSize>:
 8011484:	b570      	push	{r4, r5, r6, lr}
 8011486:	4d18      	ldr	r5, [pc, #96]	@ (80114e8 <OS_STACK_GetTaskStackSize+0x64>)
 8011488:	4604      	mov	r4, r0
 801148a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801148c:	b133      	cbz	r3, 801149c <OS_STACK_GetTaskStackSize+0x18>
 801148e:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8011490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011492:	4798      	blx	r3
 8011494:	4601      	mov	r1, r0
 8011496:	f240 1043 	movw	r0, #323	@ 0x143
 801149a:	47b0      	blx	r6
 801149c:	f7fe fd34 	bl	800ff08 <OS_GetCPUState>
 80114a0:	2801      	cmp	r0, #1
 80114a2:	d105      	bne.n	80114b0 <OS_STACK_GetTaskStackSize+0x2c>
 80114a4:	f895 3077 	ldrb.w	r3, [r5, #119]	@ 0x77
 80114a8:	b913      	cbnz	r3, 80114b0 <OS_STACK_GetTaskStackSize+0x2c>
 80114aa:	20a4      	movs	r0, #164	@ 0xa4
 80114ac:	f7fe fb88 	bl	800fbc0 <OS_Error>
 80114b0:	f7ff fb8e 	bl	8010bd0 <OS_AssertCPUNotInIllegalState>
 80114b4:	b93c      	cbnz	r4, 80114c6 <OS_STACK_GetTaskStackSize+0x42>
 80114b6:	68ac      	ldr	r4, [r5, #8]
 80114b8:	b92c      	cbnz	r4, 80114c6 <OS_STACK_GetTaskStackSize+0x42>
 80114ba:	2080      	movs	r0, #128	@ 0x80
 80114bc:	f7fe fb80 	bl	800fbc0 <OS_Error>
 80114c0:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80114c4:	deff      	udf	#255	@ 0xff
 80114c6:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80114ca:	2b0f      	cmp	r3, #15
 80114cc:	d002      	beq.n	80114d4 <OS_STACK_GetTaskStackSize+0x50>
 80114ce:	2080      	movs	r0, #128	@ 0x80
 80114d0:	f7fe fb76 	bl	800fbc0 <OS_Error>
 80114d4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80114d6:	6aa4      	ldr	r4, [r4, #40]	@ 0x28
 80114d8:	b123      	cbz	r3, 80114e4 <OS_STACK_GetTaskStackSize+0x60>
 80114da:	4621      	mov	r1, r4
 80114dc:	f240 1043 	movw	r0, #323	@ 0x143
 80114e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114e2:	4798      	blx	r3
 80114e4:	4620      	mov	r0, r4
 80114e6:	bd70      	pop	{r4, r5, r6, pc}
 80114e8:	20003088 	.word	0x20003088

080114ec <_OnTx>:
 80114ec:	b570      	push	{r4, r5, r6, lr}
 80114ee:	4b4e      	ldr	r3, [pc, #312]	@ (8011628 <_OnTx+0x13c>)
 80114f0:	781a      	ldrb	r2, [r3, #0]
 80114f2:	2a09      	cmp	r2, #9
 80114f4:	f200 8095 	bhi.w	8011622 <_OnTx+0x136>
 80114f8:	e8df f002 	tbb	[pc, r2]
 80114fc:	32231a05 	.word	0x32231a05
 8011500:	4b8f8b37 	.word	0x4b8f8b37
 8011504:	5e56      	.short	0x5e56
 8011506:	4a49      	ldr	r2, [pc, #292]	@ (801162c <_OnTx+0x140>)
 8011508:	8811      	ldrh	r1, [r2, #0]
 801150a:	4a49      	ldr	r2, [pc, #292]	@ (8011630 <_OnTx+0x144>)
 801150c:	b921      	cbnz	r1, 8011518 <_OnTx+0x2c>
 801150e:	4949      	ldr	r1, [pc, #292]	@ (8011634 <_OnTx+0x148>)
 8011510:	7809      	ldrb	r1, [r1, #0]
 8011512:	f001 00ff 	and.w	r0, r1, #255	@ 0xff
 8011516:	b139      	cbz	r1, 8011528 <_OnTx+0x3c>
 8011518:	2101      	movs	r1, #1
 801151a:	7011      	strb	r1, [r2, #0]
 801151c:	2200      	movs	r2, #0
 801151e:	208c      	movs	r0, #140	@ 0x8c
 8011520:	7019      	strb	r1, [r3, #0]
 8011522:	4b45      	ldr	r3, [pc, #276]	@ (8011638 <_OnTx+0x14c>)
 8011524:	801a      	strh	r2, [r3, #0]
 8011526:	bd70      	pop	{r4, r5, r6, pc}
 8011528:	7010      	strb	r0, [r2, #0]
 801152a:	f04f 30ff 	mov.w	r0, #4294967295
 801152e:	e7fa      	b.n	8011526 <_OnTx+0x3a>
 8011530:	4a3e      	ldr	r2, [pc, #248]	@ (801162c <_OnTx+0x140>)
 8011532:	8812      	ldrh	r2, [r2, #0]
 8011534:	b11a      	cbz	r2, 801153e <_OnTx+0x52>
 8011536:	2202      	movs	r2, #2
 8011538:	20ed      	movs	r0, #237	@ 0xed
 801153a:	701a      	strb	r2, [r3, #0]
 801153c:	e7f3      	b.n	8011526 <_OnTx+0x3a>
 801153e:	2207      	movs	r2, #7
 8011540:	e7fa      	b.n	8011538 <_OnTx+0x4c>
 8011542:	4a3a      	ldr	r2, [pc, #232]	@ (801162c <_OnTx+0x140>)
 8011544:	8810      	ldrh	r0, [r2, #0]
 8011546:	4a3d      	ldr	r2, [pc, #244]	@ (801163c <_OnTx+0x150>)
 8011548:	28ef      	cmp	r0, #239	@ 0xef
 801154a:	bf89      	itett	hi
 801154c:	2103      	movhi	r1, #3
 801154e:	2104      	movls	r1, #4
 8011550:	0a00      	lsrhi	r0, r0, #8
 8011552:	f040 00f0 	orrhi.w	r0, r0, #240	@ 0xf0
 8011556:	bf8c      	ite	hi
 8011558:	7019      	strbhi	r1, [r3, #0]
 801155a:	7019      	strbls	r1, [r3, #0]
 801155c:	7010      	strb	r0, [r2, #0]
 801155e:	e7e2      	b.n	8011526 <_OnTx+0x3a>
 8011560:	2204      	movs	r2, #4
 8011562:	701a      	strb	r2, [r3, #0]
 8011564:	4b31      	ldr	r3, [pc, #196]	@ (801162c <_OnTx+0x140>)
 8011566:	7818      	ldrb	r0, [r3, #0]
 8011568:	e7dd      	b.n	8011526 <_OnTx+0x3a>
 801156a:	4c33      	ldr	r4, [pc, #204]	@ (8011638 <_OnTx+0x14c>)
 801156c:	4934      	ldr	r1, [pc, #208]	@ (8011640 <_OnTx+0x154>)
 801156e:	8822      	ldrh	r2, [r4, #0]
 8011570:	4d32      	ldr	r5, [pc, #200]	@ (801163c <_OnTx+0x150>)
 8011572:	5c88      	ldrb	r0, [r1, r2]
 8011574:	7829      	ldrb	r1, [r5, #0]
 8011576:	3201      	adds	r2, #1
 8011578:	4401      	add	r1, r0
 801157a:	7029      	strb	r1, [r5, #0]
 801157c:	492b      	ldr	r1, [pc, #172]	@ (801162c <_OnTx+0x140>)
 801157e:	b292      	uxth	r2, r2
 8011580:	8022      	strh	r2, [r4, #0]
 8011582:	880c      	ldrh	r4, [r1, #0]
 8011584:	4294      	cmp	r4, r2
 8011586:	d1ce      	bne.n	8011526 <_OnTx+0x3a>
 8011588:	2205      	movs	r2, #5
 801158a:	701a      	strb	r2, [r3, #0]
 801158c:	2300      	movs	r3, #0
 801158e:	800b      	strh	r3, [r1, #0]
 8011590:	e7c9      	b.n	8011526 <_OnTx+0x3a>
 8011592:	2208      	movs	r2, #8
 8011594:	701a      	strb	r2, [r3, #0]
 8011596:	4a27      	ldr	r2, [pc, #156]	@ (8011634 <_OnTx+0x148>)
 8011598:	4928      	ldr	r1, [pc, #160]	@ (801163c <_OnTx+0x150>)
 801159a:	7813      	ldrb	r3, [r2, #0]
 801159c:	7810      	ldrb	r0, [r2, #0]
 801159e:	3301      	adds	r3, #1
 80115a0:	3001      	adds	r0, #1
 80115a2:	700b      	strb	r3, [r1, #0]
 80115a4:	b2c0      	uxtb	r0, r0
 80115a6:	e7be      	b.n	8011526 <_OnTx+0x3a>
 80115a8:	2209      	movs	r2, #9
 80115aa:	701a      	strb	r2, [r3, #0]
 80115ac:	4a23      	ldr	r2, [pc, #140]	@ (801163c <_OnTx+0x150>)
 80115ae:	2043      	movs	r0, #67	@ 0x43
 80115b0:	7813      	ldrb	r3, [r2, #0]
 80115b2:	3343      	adds	r3, #67	@ 0x43
 80115b4:	7013      	strb	r3, [r2, #0]
 80115b6:	e7b6      	b.n	8011526 <_OnTx+0x3a>
 80115b8:	491f      	ldr	r1, [pc, #124]	@ (8011638 <_OnTx+0x14c>)
 80115ba:	4822      	ldr	r0, [pc, #136]	@ (8011644 <_OnTx+0x158>)
 80115bc:	880a      	ldrh	r2, [r1, #0]
 80115be:	6800      	ldr	r0, [r0, #0]
 80115c0:	5c84      	ldrb	r4, [r0, r2]
 80115c2:	3201      	adds	r2, #1
 80115c4:	b292      	uxth	r2, r2
 80115c6:	800a      	strh	r2, [r1, #0]
 80115c8:	491a      	ldr	r1, [pc, #104]	@ (8011634 <_OnTx+0x148>)
 80115ca:	7808      	ldrb	r0, [r1, #0]
 80115cc:	4282      	cmp	r2, r0
 80115ce:	d11a      	bne.n	8011606 <_OnTx+0x11a>
 80115d0:	2205      	movs	r2, #5
 80115d2:	701a      	strb	r2, [r3, #0]
 80115d4:	2380      	movs	r3, #128	@ 0x80
 80115d6:	f383 8811 	msr	BASEPRI, r3
 80115da:	2600      	movs	r6, #0
 80115dc:	4d1a      	ldr	r5, [pc, #104]	@ (8011648 <_OnTx+0x15c>)
 80115de:	700e      	strb	r6, [r1, #0]
 80115e0:	682b      	ldr	r3, [r5, #0]
 80115e2:	b11b      	cbz	r3, 80115ec <_OnTx+0x100>
 80115e4:	6828      	ldr	r0, [r5, #0]
 80115e6:	f7ff fb77 	bl	8010cd8 <OS_MakeTaskReady>
 80115ea:	602e      	str	r6, [r5, #0]
 80115ec:	4d17      	ldr	r5, [pc, #92]	@ (801164c <_OnTx+0x160>)
 80115ee:	786b      	ldrb	r3, [r5, #1]
 80115f0:	2b0f      	cmp	r3, #15
 80115f2:	d902      	bls.n	80115fa <_OnTx+0x10e>
 80115f4:	2099      	movs	r0, #153	@ 0x99
 80115f6:	f7fe fae3 	bl	800fbc0 <OS_Error>
 80115fa:	786b      	ldrb	r3, [r5, #1]
 80115fc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8011600:	b90b      	cbnz	r3, 8011606 <_OnTx+0x11a>
 8011602:	f382 8811 	msr	BASEPRI, r2
 8011606:	4a0d      	ldr	r2, [pc, #52]	@ (801163c <_OnTx+0x150>)
 8011608:	4620      	mov	r0, r4
 801160a:	7813      	ldrb	r3, [r2, #0]
 801160c:	4423      	add	r3, r4
 801160e:	7013      	strb	r3, [r2, #0]
 8011610:	e789      	b.n	8011526 <_OnTx+0x3a>
 8011612:	2206      	movs	r2, #6
 8011614:	701a      	strb	r2, [r3, #0]
 8011616:	4b09      	ldr	r3, [pc, #36]	@ (801163c <_OnTx+0x150>)
 8011618:	e7a5      	b.n	8011566 <_OnTx+0x7a>
 801161a:	2200      	movs	r2, #0
 801161c:	208d      	movs	r0, #141	@ 0x8d
 801161e:	701a      	strb	r2, [r3, #0]
 8011620:	e781      	b.n	8011526 <_OnTx+0x3a>
 8011622:	2000      	movs	r0, #0
 8011624:	e77f      	b.n	8011526 <_OnTx+0x3a>
 8011626:	bf00      	nop
 8011628:	2000314c 	.word	0x2000314c
 801162c:	2000314a 	.word	0x2000314a
 8011630:	20003149 	.word	0x20003149
 8011634:	20003148 	.word	0x20003148
 8011638:	2000314e 	.word	0x2000314e
 801163c:	2000313c 	.word	0x2000313c
 8011640:	20003158 	.word	0x20003158
 8011644:	20003144 	.word	0x20003144
 8011648:	20003138 	.word	0x20003138
 801164c:	20003088 	.word	0x20003088

08011650 <_StartSend>:
 8011650:	2380      	movs	r3, #128	@ 0x80
 8011652:	b510      	push	{r4, lr}
 8011654:	f383 8811 	msr	BASEPRI, r3
 8011658:	4b0b      	ldr	r3, [pc, #44]	@ (8011688 <_StartSend+0x38>)
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	b933      	cbnz	r3, 801166c <_StartSend+0x1c>
 801165e:	f7ff ff45 	bl	80114ec <_OnTx>
 8011662:	2800      	cmp	r0, #0
 8011664:	db02      	blt.n	801166c <_StartSend+0x1c>
 8011666:	b2c0      	uxtb	r0, r0
 8011668:	f7fe fc1c 	bl	800fea4 <OS_COM_Send1>
 801166c:	4c07      	ldr	r4, [pc, #28]	@ (801168c <_StartSend+0x3c>)
 801166e:	7863      	ldrb	r3, [r4, #1]
 8011670:	2b0f      	cmp	r3, #15
 8011672:	d902      	bls.n	801167a <_StartSend+0x2a>
 8011674:	2099      	movs	r0, #153	@ 0x99
 8011676:	f7fe faa3 	bl	800fbc0 <OS_Error>
 801167a:	7863      	ldrb	r3, [r4, #1]
 801167c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8011680:	b90b      	cbnz	r3, 8011686 <_StartSend+0x36>
 8011682:	f382 8811 	msr	BASEPRI, r2
 8011686:	bd10      	pop	{r4, pc}
 8011688:	20003149 	.word	0x20003149
 801168c:	20003088 	.word	0x20003088

08011690 <OS_COM_ClearTxActive>:
 8011690:	2300      	movs	r3, #0
 8011692:	4a04      	ldr	r2, [pc, #16]	@ (80116a4 <OS_COM_ClearTxActive+0x14>)
 8011694:	7013      	strb	r3, [r2, #0]
 8011696:	4a04      	ldr	r2, [pc, #16]	@ (80116a8 <OS_COM_ClearTxActive+0x18>)
 8011698:	7013      	strb	r3, [r2, #0]
 801169a:	4a04      	ldr	r2, [pc, #16]	@ (80116ac <OS_COM_ClearTxActive+0x1c>)
 801169c:	6013      	str	r3, [r2, #0]
 801169e:	4a04      	ldr	r2, [pc, #16]	@ (80116b0 <OS_COM_ClearTxActive+0x20>)
 80116a0:	7013      	strb	r3, [r2, #0]
 80116a2:	4770      	bx	lr
 80116a4:	20003149 	.word	0x20003149
 80116a8:	20003148 	.word	0x20003148
 80116ac:	20003138 	.word	0x20003138
 80116b0:	2000314c 	.word	0x2000314c

080116b4 <OS_COM_GetInU8>:
 80116b4:	4a03      	ldr	r2, [pc, #12]	@ (80116c4 <OS_COM_GetInU8+0x10>)
 80116b6:	7813      	ldrb	r3, [r2, #0]
 80116b8:	1c59      	adds	r1, r3, #1
 80116ba:	7011      	strb	r1, [r2, #0]
 80116bc:	4a02      	ldr	r2, [pc, #8]	@ (80116c8 <OS_COM_GetInU8+0x14>)
 80116be:	5cd0      	ldrb	r0, [r2, r3]
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop
 80116c4:	20003140 	.word	0x20003140
 80116c8:	20003150 	.word	0x20003150

080116cc <OS_COM_GetInU16>:
 80116cc:	b510      	push	{r4, lr}
 80116ce:	f7ff fff1 	bl	80116b4 <OS_COM_GetInU8>
 80116d2:	4604      	mov	r4, r0
 80116d4:	f7ff ffee 	bl	80116b4 <OS_COM_GetInU8>
 80116d8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80116dc:	b280      	uxth	r0, r0
 80116de:	bd10      	pop	{r4, pc}

080116e0 <OS_COM_GetInU32>:
 80116e0:	b510      	push	{r4, lr}
 80116e2:	f7ff fff3 	bl	80116cc <OS_COM_GetInU16>
 80116e6:	4604      	mov	r4, r0
 80116e8:	f7ff fff0 	bl	80116cc <OS_COM_GetInU16>
 80116ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80116f0:	bd10      	pop	{r4, pc}

080116f2 <OS_COM_GetNextChar>:
 80116f2:	f7ff befb 	b.w	80114ec <_OnTx>
	...

080116f8 <OS_COM_StoreInU8>:
 80116f8:	4a04      	ldr	r2, [pc, #16]	@ (801170c <OS_COM_StoreInU8+0x14>)
 80116fa:	7813      	ldrb	r3, [r2, #0]
 80116fc:	2b07      	cmp	r3, #7
 80116fe:	bf9f      	itttt	ls
 8011700:	4903      	ldrls	r1, [pc, #12]	@ (8011710 <OS_COM_StoreInU8+0x18>)
 8011702:	54c8      	strbls	r0, [r1, r3]
 8011704:	3301      	addls	r3, #1
 8011706:	7013      	strbls	r3, [r2, #0]
 8011708:	4770      	bx	lr
 801170a:	bf00      	nop
 801170c:	2000313d 	.word	0x2000313d
 8011710:	20003150 	.word	0x20003150

08011714 <OS_COM_StoreOutU8>:
 8011714:	4a04      	ldr	r2, [pc, #16]	@ (8011728 <OS_COM_StoreOutU8+0x14>)
 8011716:	8813      	ldrh	r3, [r2, #0]
 8011718:	2bc7      	cmp	r3, #199	@ 0xc7
 801171a:	bf9f      	itttt	ls
 801171c:	4903      	ldrls	r1, [pc, #12]	@ (801172c <OS_COM_StoreOutU8+0x18>)
 801171e:	54c8      	strbls	r0, [r1, r3]
 8011720:	3301      	addls	r3, #1
 8011722:	8013      	strhls	r3, [r2, #0]
 8011724:	4770      	bx	lr
 8011726:	bf00      	nop
 8011728:	2000314a 	.word	0x2000314a
 801172c:	20003158 	.word	0x20003158

08011730 <_StoreOutString.constprop.0>:
 8011730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011732:	4f10      	ldr	r7, [pc, #64]	@ (8011774 <_StoreOutString.constprop.0+0x44>)
 8011734:	4605      	mov	r5, r0
 8011736:	883b      	ldrh	r3, [r7, #0]
 8011738:	b1c8      	cbz	r0, 801176e <_StoreOutString.constprop.0+0x3e>
 801173a:	f1c3 03c7 	rsb	r3, r3, #199	@ 0xc7
 801173e:	2b1e      	cmp	r3, #30
 8011740:	bf28      	it	cs
 8011742:	231e      	movcs	r3, #30
 8011744:	2400      	movs	r4, #0
 8011746:	42a3      	cmp	r3, r4
 8011748:	d001      	beq.n	801174e <_StoreOutString.constprop.0+0x1e>
 801174a:	5d2a      	ldrb	r2, [r5, r4]
 801174c:	b96a      	cbnz	r2, 801176a <_StoreOutString.constprop.0+0x3a>
 801174e:	4620      	mov	r0, r4
 8011750:	f7ff ffe0 	bl	8011714 <OS_COM_StoreOutU8>
 8011754:	b144      	cbz	r4, 8011768 <_StoreOutString.constprop.0+0x38>
 8011756:	883e      	ldrh	r6, [r7, #0]
 8011758:	4807      	ldr	r0, [pc, #28]	@ (8011778 <_StoreOutString.constprop.0+0x48>)
 801175a:	4622      	mov	r2, r4
 801175c:	4430      	add	r0, r6
 801175e:	4629      	mov	r1, r5
 8011760:	4426      	add	r6, r4
 8011762:	f000 fdf2 	bl	801234a <memcpy>
 8011766:	803e      	strh	r6, [r7, #0]
 8011768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801176a:	3401      	adds	r4, #1
 801176c:	e7eb      	b.n	8011746 <_StoreOutString.constprop.0+0x16>
 801176e:	4604      	mov	r4, r0
 8011770:	e7ed      	b.n	801174e <_StoreOutString.constprop.0+0x1e>
 8011772:	bf00      	nop
 8011774:	2000314a 	.word	0x2000314a
 8011778:	20003158 	.word	0x20003158

0801177c <OS_COM_StoreOutU16>:
 801177c:	b510      	push	{r4, lr}
 801177e:	4604      	mov	r4, r0
 8011780:	0a00      	lsrs	r0, r0, #8
 8011782:	f7ff ffc7 	bl	8011714 <OS_COM_StoreOutU8>
 8011786:	4620      	mov	r0, r4
 8011788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801178c:	f7ff bfc2 	b.w	8011714 <OS_COM_StoreOutU8>

08011790 <OS_COM_StoreOutU32>:
 8011790:	b510      	push	{r4, lr}
 8011792:	4604      	mov	r4, r0
 8011794:	0c00      	lsrs	r0, r0, #16
 8011796:	f7ff fff1 	bl	801177c <OS_COM_StoreOutU16>
 801179a:	4620      	mov	r0, r4
 801179c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117a0:	f7ff bfec 	b.w	801177c <OS_COM_StoreOutU16>

080117a4 <_EvaPacket>:
 80117a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117a6:	f7ff ff85 	bl	80116b4 <OS_COM_GetInU8>
 80117aa:	2843      	cmp	r0, #67	@ 0x43
 80117ac:	d108      	bne.n	80117c0 <_EvaPacket+0x1c>
 80117ae:	f7ff ff81 	bl	80116b4 <OS_COM_GetInU8>
 80117b2:	4b71      	ldr	r3, [pc, #452]	@ (8011978 <_EvaPacket+0x1d4>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	b90b      	cbnz	r3, 80117bc <_EvaPacket+0x18>
 80117b8:	2000      	movs	r0, #0
 80117ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117bc:	4798      	blx	r3
 80117be:	e7fb      	b.n	80117b8 <_EvaPacket+0x14>
 80117c0:	4d6e      	ldr	r5, [pc, #440]	@ (801197c <_EvaPacket+0x1d8>)
 80117c2:	882b      	ldrh	r3, [r5, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1f7      	bne.n	80117b8 <_EvaPacket+0x14>
 80117c8:	f7ff ffa4 	bl	8011714 <OS_COM_StoreOutU8>
 80117cc:	2873      	cmp	r0, #115	@ 0x73
 80117ce:	d01d      	beq.n	801180c <_EvaPacket+0x68>
 80117d0:	d807      	bhi.n	80117e2 <_EvaPacket+0x3e>
 80117d2:	2863      	cmp	r0, #99	@ 0x63
 80117d4:	f000 80b8 	beq.w	8011948 <_EvaPacket+0x1a4>
 80117d8:	286c      	cmp	r0, #108	@ 0x6c
 80117da:	f000 80a8 	beq.w	801192e <_EvaPacket+0x18a>
 80117de:	8828      	ldrh	r0, [r5, #0]
 80117e0:	e7eb      	b.n	80117ba <_EvaPacket+0x16>
 80117e2:	2874      	cmp	r0, #116	@ 0x74
 80117e4:	d1fb      	bne.n	80117de <_EvaPacket+0x3a>
 80117e6:	f7ff ff7b 	bl	80116e0 <OS_COM_GetInU32>
 80117ea:	4604      	mov	r4, r0
 80117ec:	4f64      	ldr	r7, [pc, #400]	@ (8011980 <_EvaPacket+0x1dc>)
 80117ee:	f890 6050 	ldrb.w	r6, [r0, #80]	@ 0x50
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	429c      	cmp	r4, r3
 80117f6:	d048      	beq.n	801188a <_EvaPacket+0xe6>
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d144      	bne.n	8011886 <_EvaPacket+0xe2>
 80117fc:	f244 104e 	movw	r0, #16718	@ 0x414e
 8011800:	f7ff ffbc 	bl	801177c <OS_COM_StoreOutU16>
 8011804:	2054      	movs	r0, #84	@ 0x54
 8011806:	f7ff ff85 	bl	8011714 <OS_COM_StoreOutU8>
 801180a:	e7e8      	b.n	80117de <_EvaPacket+0x3a>
 801180c:	4c5c      	ldr	r4, [pc, #368]	@ (8011980 <_EvaPacket+0x1dc>)
 801180e:	f7ff fa15 	bl	8010c3c <OS_EnableProfiling>
 8011812:	f7fe fc5f 	bl	80100d4 <OS_TIME_GetTicks32>
 8011816:	f7ff ffbb 	bl	8011790 <OS_COM_StoreOutU32>
 801181a:	69e0      	ldr	r0, [r4, #28]
 801181c:	f7ff ffb8 	bl	8011790 <OS_COM_StoreOutU32>
 8011820:	68a0      	ldr	r0, [r4, #8]
 8011822:	f7ff ffb5 	bl	8011790 <OS_COM_StoreOutU32>
 8011826:	f64c 2071 	movw	r0, #51825	@ 0xca71
 801182a:	f7ff ffa7 	bl	801177c <OS_COM_StoreOutU16>
 801182e:	2001      	movs	r0, #1
 8011830:	f7ff ff70 	bl	8011714 <OS_COM_StoreOutU8>
 8011834:	f7ff fd8c 	bl	8011350 <OS_INFO_GetCPU>
 8011838:	f7ff ff7a 	bl	8011730 <_StoreOutString.constprop.0>
 801183c:	f7ff fdaa 	bl	8011394 <OS_INFO_GetLibName>
 8011840:	f7ff ff76 	bl	8011730 <_StoreOutString.constprop.0>
 8011844:	f8b4 0074 	ldrh.w	r0, [r4, #116]	@ 0x74
 8011848:	28ff      	cmp	r0, #255	@ 0xff
 801184a:	d919      	bls.n	8011880 <_EvaPacket+0xdc>
 801184c:	20fc      	movs	r0, #252	@ 0xfc
 801184e:	f7ff ff61 	bl	8011714 <OS_COM_StoreOutU8>
 8011852:	f8b4 0074 	ldrh.w	r0, [r4, #116]	@ 0x74
 8011856:	f7ff ff91 	bl	801177c <OS_COM_StoreOutU16>
 801185a:	f000 f8fd 	bl	8011a58 <OS_STACK_GetSysStackBase>
 801185e:	f7ff ff97 	bl	8011790 <OS_COM_StoreOutU32>
 8011862:	f000 f8fd 	bl	8011a60 <OS_STACK_GetSysStackSize>
 8011866:	f5b0 4f7f 	cmp.w	r0, #65280	@ 0xff00
 801186a:	4604      	mov	r4, r0
 801186c:	d304      	bcc.n	8011878 <_EvaPacket+0xd4>
 801186e:	0c00      	lsrs	r0, r0, #16
 8011870:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 8011874:	f7ff ff82 	bl	801177c <OS_COM_StoreOutU16>
 8011878:	4620      	mov	r0, r4
 801187a:	f7ff ff7f 	bl	801177c <OS_COM_StoreOutU16>
 801187e:	e7ae      	b.n	80117de <_EvaPacket+0x3a>
 8011880:	f7ff ff48 	bl	8011714 <OS_COM_StoreOutU8>
 8011884:	e7e9      	b.n	801185a <_EvaPacket+0xb6>
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	e7b4      	b.n	80117f4 <_EvaPacket+0x50>
 801188a:	f7fe fbc5 	bl	8010018 <OS__TIME_GetCycles>
 801188e:	f7ff ff7f 	bl	8011790 <OS_COM_StoreOutU32>
 8011892:	b936      	cbnz	r6, 80118a2 <_EvaPacket+0xfe>
 8011894:	68be      	ldr	r6, [r7, #8]
 8011896:	42a6      	cmp	r6, r4
 8011898:	f04f 36ff 	mov.w	r6, #4294967295
 801189c:	bf18      	it	ne
 801189e:	2600      	movne	r6, #0
 80118a0:	b2f6      	uxtb	r6, r6
 80118a2:	4620      	mov	r0, r4
 80118a4:	f7fe fd16 	bl	80102d4 <OS_TASK_GetName>
 80118a8:	f7ff ff42 	bl	8011730 <_StoreOutString.constprop.0>
 80118ac:	6927      	ldr	r7, [r4, #16]
 80118ae:	2fff      	cmp	r7, #255	@ 0xff
 80118b0:	d937      	bls.n	8011922 <_EvaPacket+0x17e>
 80118b2:	2000      	movs	r0, #0
 80118b4:	f7ff ff2e 	bl	8011714 <OS_COM_StoreOutU8>
 80118b8:	4638      	mov	r0, r7
 80118ba:	f7ff ff69 	bl	8011790 <OS_COM_StoreOutU32>
 80118be:	4630      	mov	r0, r6
 80118c0:	f7ff ff28 	bl	8011714 <OS_COM_StoreOutU8>
 80118c4:	68a0      	ldr	r0, [r4, #8]
 80118c6:	bb80      	cbnz	r0, 801192a <_EvaPacket+0x186>
 80118c8:	f7ff ff62 	bl	8011790 <OS_COM_StoreOutU32>
 80118cc:	68e0      	ldr	r0, [r4, #12]
 80118ce:	f7ff ff5f 	bl	8011790 <OS_COM_StoreOutU32>
 80118d2:	4620      	mov	r0, r4
 80118d4:	f7ff fda2 	bl	801141c <OS_STACK_GetTaskStackBase>
 80118d8:	f7ff ff5a 	bl	8011790 <OS_COM_StoreOutU32>
 80118dc:	4620      	mov	r0, r4
 80118de:	f7ff fce7 	bl	80112b0 <OS_STAT_GetExecTime>
 80118e2:	f7ff ff55 	bl	8011790 <OS_COM_StoreOutU32>
 80118e6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80118e8:	f7ff ff52 	bl	8011790 <OS_COM_StoreOutU32>
 80118ec:	4620      	mov	r0, r4
 80118ee:	f7ff fdc9 	bl	8011484 <OS_STACK_GetTaskStackSize>
 80118f2:	f5b0 4f7f 	cmp.w	r0, #65280	@ 0xff00
 80118f6:	4606      	mov	r6, r0
 80118f8:	d304      	bcc.n	8011904 <_EvaPacket+0x160>
 80118fa:	0c00      	lsrs	r0, r0, #16
 80118fc:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 8011900:	f7ff ff3c 	bl	801177c <OS_COM_StoreOutU16>
 8011904:	4630      	mov	r0, r6
 8011906:	f7ff ff39 	bl	801177c <OS_COM_StoreOutU16>
 801190a:	4620      	mov	r0, r4
 801190c:	f7fe fd14 	bl	8010338 <OS_TASK_GetTimeSliceRem>
 8011910:	f7ff ff00 	bl	8011714 <OS_COM_StoreOutU8>
 8011914:	f894 0052 	ldrb.w	r0, [r4, #82]	@ 0x52
 8011918:	f7ff fefc 	bl	8011714 <OS_COM_StoreOutU8>
 801191c:	f7fe fbc8 	bl	80100b0 <OS_TIME_GetTicks>
 8011920:	e7ab      	b.n	801187a <_EvaPacket+0xd6>
 8011922:	4638      	mov	r0, r7
 8011924:	f7ff fef6 	bl	8011714 <OS_COM_StoreOutU8>
 8011928:	e7c9      	b.n	80118be <_EvaPacket+0x11a>
 801192a:	6880      	ldr	r0, [r0, #8]
 801192c:	e7cc      	b.n	80118c8 <_EvaPacket+0x124>
 801192e:	2074      	movs	r0, #116	@ 0x74
 8011930:	f7ff fef0 	bl	8011714 <OS_COM_StoreOutU8>
 8011934:	4b12      	ldr	r3, [pc, #72]	@ (8011980 <_EvaPacket+0x1dc>)
 8011936:	699c      	ldr	r4, [r3, #24]
 8011938:	2c00      	cmp	r4, #0
 801193a:	f43f af50 	beq.w	80117de <_EvaPacket+0x3a>
 801193e:	4620      	mov	r0, r4
 8011940:	f7ff ff26 	bl	8011790 <OS_COM_StoreOutU32>
 8011944:	6824      	ldr	r4, [r4, #0]
 8011946:	e7f7      	b.n	8011938 <_EvaPacket+0x194>
 8011948:	f7ff feca 	bl	80116e0 <OS_COM_GetInU32>
 801194c:	4604      	mov	r4, r0
 801194e:	f7ff febd 	bl	80116cc <OS_COM_GetInU16>
 8011952:	4603      	mov	r3, r0
 8011954:	f020 0003 	bic.w	r0, r0, #3
 8011958:	b280      	uxth	r0, r0
 801195a:	f3c3 038f 	ubfx	r3, r3, #2, #16
 801195e:	6822      	ldr	r2, [r4, #0]
 8011960:	f1b2 3fcd 	cmp.w	r2, #3452816845	@ 0xcdcdcdcd
 8011964:	d104      	bne.n	8011970 <_EvaPacket+0x1cc>
 8011966:	3b01      	subs	r3, #1
 8011968:	b29b      	uxth	r3, r3
 801196a:	3404      	adds	r4, #4
 801196c:	2b00      	cmp	r3, #0
 801196e:	d1f6      	bne.n	801195e <_EvaPacket+0x1ba>
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	b29b      	uxth	r3, r3
 8011974:	1ac0      	subs	r0, r0, r3
 8011976:	e780      	b.n	801187a <_EvaPacket+0xd6>
 8011978:	20003220 	.word	0x20003220
 801197c:	2000314a 	.word	0x2000314a
 8011980:	20003088 	.word	0x20003088

08011984 <OS_COM_OnRx>:
 8011984:	b570      	push	{r4, r5, r6, lr}
 8011986:	4e27      	ldr	r6, [pc, #156]	@ (8011a24 <OS_COM_OnRx+0xa0>)
 8011988:	4604      	mov	r4, r0
 801198a:	7833      	ldrb	r3, [r6, #0]
 801198c:	b113      	cbz	r3, 8011994 <OS_COM_OnRx+0x10>
 801198e:	20b4      	movs	r0, #180	@ 0xb4
 8011990:	f7fe f916 	bl	800fbc0 <OS_Error>
 8011994:	2301      	movs	r3, #1
 8011996:	4d24      	ldr	r5, [pc, #144]	@ (8011a28 <OS_COM_OnRx+0xa4>)
 8011998:	7033      	strb	r3, [r6, #0]
 801199a:	782a      	ldrb	r2, [r5, #0]
 801199c:	2a05      	cmp	r2, #5
 801199e:	d80c      	bhi.n	80119ba <OS_COM_OnRx+0x36>
 80119a0:	e8df f002 	tbb	[pc, r2]
 80119a4:	1c130e03 	.word	0x1c130e03
 80119a8:	342c      	.short	0x342c
 80119aa:	2ced      	cmp	r4, #237	@ 0xed
 80119ac:	d105      	bne.n	80119ba <OS_COM_OnRx+0x36>
 80119ae:	702b      	strb	r3, [r5, #0]
 80119b0:	2300      	movs	r3, #0
 80119b2:	4a1e      	ldr	r2, [pc, #120]	@ (8011a2c <OS_COM_OnRx+0xa8>)
 80119b4:	7013      	strb	r3, [r2, #0]
 80119b6:	4a1e      	ldr	r2, [pc, #120]	@ (8011a30 <OS_COM_OnRx+0xac>)
 80119b8:	7013      	strb	r3, [r2, #0]
 80119ba:	2300      	movs	r3, #0
 80119bc:	7033      	strb	r3, [r6, #0]
 80119be:	bd70      	pop	{r4, r5, r6, pc}
 80119c0:	2c8c      	cmp	r4, #140	@ 0x8c
 80119c2:	d12c      	bne.n	8011a1e <OS_COM_OnRx+0x9a>
 80119c4:	2302      	movs	r3, #2
 80119c6:	702b      	strb	r3, [r5, #0]
 80119c8:	e7f7      	b.n	80119ba <OS_COM_OnRx+0x36>
 80119ca:	1e63      	subs	r3, r4, #1
 80119cc:	2b07      	cmp	r3, #7
 80119ce:	d826      	bhi.n	8011a1e <OS_COM_OnRx+0x9a>
 80119d0:	4b18      	ldr	r3, [pc, #96]	@ (8011a34 <OS_COM_OnRx+0xb0>)
 80119d2:	701c      	strb	r4, [r3, #0]
 80119d4:	4b18      	ldr	r3, [pc, #96]	@ (8011a38 <OS_COM_OnRx+0xb4>)
 80119d6:	701c      	strb	r4, [r3, #0]
 80119d8:	2303      	movs	r3, #3
 80119da:	e7f4      	b.n	80119c6 <OS_COM_OnRx+0x42>
 80119dc:	4620      	mov	r0, r4
 80119de:	f7ff fe8b 	bl	80116f8 <OS_COM_StoreInU8>
 80119e2:	4a15      	ldr	r2, [pc, #84]	@ (8011a38 <OS_COM_OnRx+0xb4>)
 80119e4:	7813      	ldrb	r3, [r2, #0]
 80119e6:	4418      	add	r0, r3
 80119e8:	7010      	strb	r0, [r2, #0]
 80119ea:	4a12      	ldr	r2, [pc, #72]	@ (8011a34 <OS_COM_OnRx+0xb0>)
 80119ec:	7813      	ldrb	r3, [r2, #0]
 80119ee:	3b01      	subs	r3, #1
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	7013      	strb	r3, [r2, #0]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d1e0      	bne.n	80119ba <OS_COM_OnRx+0x36>
 80119f8:	2304      	movs	r3, #4
 80119fa:	e7e4      	b.n	80119c6 <OS_COM_OnRx+0x42>
 80119fc:	4a0e      	ldr	r2, [pc, #56]	@ (8011a38 <OS_COM_OnRx+0xb4>)
 80119fe:	7813      	ldrb	r3, [r2, #0]
 8011a00:	4423      	add	r3, r4
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	7013      	strb	r3, [r2, #0]
 8011a06:	b953      	cbnz	r3, 8011a1e <OS_COM_OnRx+0x9a>
 8011a08:	2305      	movs	r3, #5
 8011a0a:	e7dc      	b.n	80119c6 <OS_COM_OnRx+0x42>
 8011a0c:	2c8d      	cmp	r4, #141	@ 0x8d
 8011a0e:	d106      	bne.n	8011a1e <OS_COM_OnRx+0x9a>
 8011a10:	f7ff fec8 	bl	80117a4 <_EvaPacket>
 8011a14:	b118      	cbz	r0, 8011a1e <OS_COM_OnRx+0x9a>
 8011a16:	4b09      	ldr	r3, [pc, #36]	@ (8011a3c <OS_COM_OnRx+0xb8>)
 8011a18:	8018      	strh	r0, [r3, #0]
 8011a1a:	f7ff fe19 	bl	8011650 <_StartSend>
 8011a1e:	2300      	movs	r3, #0
 8011a20:	e7d1      	b.n	80119c6 <OS_COM_OnRx+0x42>
 8011a22:	bf00      	nop
 8011a24:	2000313f 	.word	0x2000313f
 8011a28:	20003141 	.word	0x20003141
 8011a2c:	2000313d 	.word	0x2000313d
 8011a30:	20003140 	.word	0x20003140
 8011a34:	2000314d 	.word	0x2000314d
 8011a38:	2000313e 	.word	0x2000313e
 8011a3c:	2000314a 	.word	0x2000314a

08011a40 <OS_COM_OnTx>:
 8011a40:	b508      	push	{r3, lr}
 8011a42:	f7ff fd53 	bl	80114ec <_OnTx>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	db04      	blt.n	8011a54 <OS_COM_OnTx+0x14>
 8011a4a:	b2c0      	uxtb	r0, r0
 8011a4c:	f7fe fa2a 	bl	800fea4 <OS_COM_Send1>
 8011a50:	2000      	movs	r0, #0
 8011a52:	bd08      	pop	{r3, pc}
 8011a54:	2001      	movs	r0, #1
 8011a56:	e7fc      	b.n	8011a52 <OS_COM_OnTx+0x12>

08011a58 <OS_STACK_GetSysStackBase>:
 8011a58:	4800      	ldr	r0, [pc, #0]	@ (8011a5c <OS_STACK_GetSysStackBase+0x4>)
 8011a5a:	4770      	bx	lr
 8011a5c:	20003570 	.word	0x20003570

08011a60 <OS_STACK_GetSysStackSize>:
 8011a60:	4b01      	ldr	r3, [pc, #4]	@ (8011a68 <OS_STACK_GetSysStackSize+0x8>)
 8011a62:	4802      	ldr	r0, [pc, #8]	@ (8011a6c <OS_STACK_GetSysStackSize+0xc>)
 8011a64:	1ac0      	subs	r0, r0, r3
 8011a66:	4770      	bx	lr
 8011a68:	20003570 	.word	0x20003570
 8011a6c:	20003970 	.word	0x20003970

08011a70 <OS_STACK_GetSP>:
 8011a70:	4668      	mov	r0, sp
 8011a72:	4770      	bx	lr

08011a74 <OS_ARMv7M_Init>:
 8011a74:	b508      	push	{r3, lr}
 8011a76:	f3ef 8110 	mrs	r1, PRIMASK
 8011a7a:	b672      	cpsid	i
 8011a7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011a80:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8011a84:	f442 027f 	orr.w	r2, r2, #16711680	@ 0xff0000
 8011a88:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
 8011a92:	f381 8810 	msr	PRIMASK, r1
 8011a96:	f640 4127 	movw	r1, #3111	@ 0xc27
 8011a9a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8011a9e:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8011aa2:	428a      	cmp	r2, r1
 8011aa4:	d10c      	bne.n	8011ac0 <OS_ARMv7M_Init+0x4c>
 8011aa6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8011aaa:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8011aae:	d107      	bne.n	8011ac0 <OS_ARMv7M_Init+0x4c>
 8011ab0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8011ab4:	f013 0f0e 	tst.w	r3, #14
 8011ab8:	d102      	bne.n	8011ac0 <OS_ARMv7M_Init+0x4c>
 8011aba:	20fe      	movs	r0, #254	@ 0xfe
 8011abc:	f7fe f880 	bl	800fbc0 <OS_Error>
 8011ac0:	f3ef 8314 	mrs	r3, CONTROL
 8011ac4:	079b      	lsls	r3, r3, #30
 8011ac6:	d504      	bpl.n	8011ad2 <OS_ARMv7M_Init+0x5e>
 8011ac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011acc:	20a7      	movs	r0, #167	@ 0xa7
 8011ace:	f7fe b877 	b.w	800fbc0 <OS_Error>
 8011ad2:	bd08      	pop	{r3, pc}

08011ad4 <atoi>:
 8011ad4:	220a      	movs	r2, #10
 8011ad6:	2100      	movs	r1, #0
 8011ad8:	f000 b952 	b.w	8011d80 <strtol>

08011adc <malloc>:
 8011adc:	4b02      	ldr	r3, [pc, #8]	@ (8011ae8 <malloc+0xc>)
 8011ade:	4601      	mov	r1, r0
 8011ae0:	6818      	ldr	r0, [r3, #0]
 8011ae2:	f000 b825 	b.w	8011b30 <_malloc_r>
 8011ae6:	bf00      	nop
 8011ae8:	2000003c 	.word	0x2000003c

08011aec <sbrk_aligned>:
 8011aec:	b570      	push	{r4, r5, r6, lr}
 8011aee:	4e0f      	ldr	r6, [pc, #60]	@ (8011b2c <sbrk_aligned+0x40>)
 8011af0:	460c      	mov	r4, r1
 8011af2:	6831      	ldr	r1, [r6, #0]
 8011af4:	4605      	mov	r5, r0
 8011af6:	b911      	cbnz	r1, 8011afe <sbrk_aligned+0x12>
 8011af8:	f000 fbd0 	bl	801229c <_sbrk_r>
 8011afc:	6030      	str	r0, [r6, #0]
 8011afe:	4621      	mov	r1, r4
 8011b00:	4628      	mov	r0, r5
 8011b02:	f000 fbcb 	bl	801229c <_sbrk_r>
 8011b06:	1c43      	adds	r3, r0, #1
 8011b08:	d103      	bne.n	8011b12 <sbrk_aligned+0x26>
 8011b0a:	f04f 34ff 	mov.w	r4, #4294967295
 8011b0e:	4620      	mov	r0, r4
 8011b10:	bd70      	pop	{r4, r5, r6, pc}
 8011b12:	1cc4      	adds	r4, r0, #3
 8011b14:	f024 0403 	bic.w	r4, r4, #3
 8011b18:	42a0      	cmp	r0, r4
 8011b1a:	d0f8      	beq.n	8011b0e <sbrk_aligned+0x22>
 8011b1c:	1a21      	subs	r1, r4, r0
 8011b1e:	4628      	mov	r0, r5
 8011b20:	f000 fbbc 	bl	801229c <_sbrk_r>
 8011b24:	3001      	adds	r0, #1
 8011b26:	d1f2      	bne.n	8011b0e <sbrk_aligned+0x22>
 8011b28:	e7ef      	b.n	8011b0a <sbrk_aligned+0x1e>
 8011b2a:	bf00      	nop
 8011b2c:	20003224 	.word	0x20003224

08011b30 <_malloc_r>:
 8011b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b34:	1ccd      	adds	r5, r1, #3
 8011b36:	f025 0503 	bic.w	r5, r5, #3
 8011b3a:	3508      	adds	r5, #8
 8011b3c:	2d0c      	cmp	r5, #12
 8011b3e:	bf38      	it	cc
 8011b40:	250c      	movcc	r5, #12
 8011b42:	2d00      	cmp	r5, #0
 8011b44:	4606      	mov	r6, r0
 8011b46:	db01      	blt.n	8011b4c <_malloc_r+0x1c>
 8011b48:	42a9      	cmp	r1, r5
 8011b4a:	d904      	bls.n	8011b56 <_malloc_r+0x26>
 8011b4c:	230c      	movs	r3, #12
 8011b4e:	6033      	str	r3, [r6, #0]
 8011b50:	2000      	movs	r0, #0
 8011b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011c2c <_malloc_r+0xfc>
 8011b5a:	f7fd fdf7 	bl	800f74c <__malloc_lock>
 8011b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8011b62:	461c      	mov	r4, r3
 8011b64:	bb44      	cbnz	r4, 8011bb8 <_malloc_r+0x88>
 8011b66:	4629      	mov	r1, r5
 8011b68:	4630      	mov	r0, r6
 8011b6a:	f7ff ffbf 	bl	8011aec <sbrk_aligned>
 8011b6e:	1c43      	adds	r3, r0, #1
 8011b70:	4604      	mov	r4, r0
 8011b72:	d158      	bne.n	8011c26 <_malloc_r+0xf6>
 8011b74:	f8d8 4000 	ldr.w	r4, [r8]
 8011b78:	4627      	mov	r7, r4
 8011b7a:	2f00      	cmp	r7, #0
 8011b7c:	d143      	bne.n	8011c06 <_malloc_r+0xd6>
 8011b7e:	2c00      	cmp	r4, #0
 8011b80:	d04b      	beq.n	8011c1a <_malloc_r+0xea>
 8011b82:	6823      	ldr	r3, [r4, #0]
 8011b84:	4639      	mov	r1, r7
 8011b86:	4630      	mov	r0, r6
 8011b88:	eb04 0903 	add.w	r9, r4, r3
 8011b8c:	f000 fb86 	bl	801229c <_sbrk_r>
 8011b90:	4581      	cmp	r9, r0
 8011b92:	d142      	bne.n	8011c1a <_malloc_r+0xea>
 8011b94:	6821      	ldr	r1, [r4, #0]
 8011b96:	4630      	mov	r0, r6
 8011b98:	1a6d      	subs	r5, r5, r1
 8011b9a:	4629      	mov	r1, r5
 8011b9c:	f7ff ffa6 	bl	8011aec <sbrk_aligned>
 8011ba0:	3001      	adds	r0, #1
 8011ba2:	d03a      	beq.n	8011c1a <_malloc_r+0xea>
 8011ba4:	6823      	ldr	r3, [r4, #0]
 8011ba6:	442b      	add	r3, r5
 8011ba8:	6023      	str	r3, [r4, #0]
 8011baa:	f8d8 3000 	ldr.w	r3, [r8]
 8011bae:	685a      	ldr	r2, [r3, #4]
 8011bb0:	bb62      	cbnz	r2, 8011c0c <_malloc_r+0xdc>
 8011bb2:	f8c8 7000 	str.w	r7, [r8]
 8011bb6:	e00f      	b.n	8011bd8 <_malloc_r+0xa8>
 8011bb8:	6822      	ldr	r2, [r4, #0]
 8011bba:	1b52      	subs	r2, r2, r5
 8011bbc:	d420      	bmi.n	8011c00 <_malloc_r+0xd0>
 8011bbe:	2a0b      	cmp	r2, #11
 8011bc0:	d917      	bls.n	8011bf2 <_malloc_r+0xc2>
 8011bc2:	1961      	adds	r1, r4, r5
 8011bc4:	42a3      	cmp	r3, r4
 8011bc6:	6025      	str	r5, [r4, #0]
 8011bc8:	bf18      	it	ne
 8011bca:	6059      	strne	r1, [r3, #4]
 8011bcc:	6863      	ldr	r3, [r4, #4]
 8011bce:	bf08      	it	eq
 8011bd0:	f8c8 1000 	streq.w	r1, [r8]
 8011bd4:	5162      	str	r2, [r4, r5]
 8011bd6:	604b      	str	r3, [r1, #4]
 8011bd8:	4630      	mov	r0, r6
 8011bda:	f7fd fdc1 	bl	800f760 <__malloc_unlock>
 8011bde:	f104 000b 	add.w	r0, r4, #11
 8011be2:	1d23      	adds	r3, r4, #4
 8011be4:	f020 0007 	bic.w	r0, r0, #7
 8011be8:	1ac2      	subs	r2, r0, r3
 8011bea:	bf1c      	itt	ne
 8011bec:	1a1b      	subne	r3, r3, r0
 8011bee:	50a3      	strne	r3, [r4, r2]
 8011bf0:	e7af      	b.n	8011b52 <_malloc_r+0x22>
 8011bf2:	6862      	ldr	r2, [r4, #4]
 8011bf4:	42a3      	cmp	r3, r4
 8011bf6:	bf0c      	ite	eq
 8011bf8:	f8c8 2000 	streq.w	r2, [r8]
 8011bfc:	605a      	strne	r2, [r3, #4]
 8011bfe:	e7eb      	b.n	8011bd8 <_malloc_r+0xa8>
 8011c00:	4623      	mov	r3, r4
 8011c02:	6864      	ldr	r4, [r4, #4]
 8011c04:	e7ae      	b.n	8011b64 <_malloc_r+0x34>
 8011c06:	463c      	mov	r4, r7
 8011c08:	687f      	ldr	r7, [r7, #4]
 8011c0a:	e7b6      	b.n	8011b7a <_malloc_r+0x4a>
 8011c0c:	461a      	mov	r2, r3
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	42a3      	cmp	r3, r4
 8011c12:	d1fb      	bne.n	8011c0c <_malloc_r+0xdc>
 8011c14:	2300      	movs	r3, #0
 8011c16:	6053      	str	r3, [r2, #4]
 8011c18:	e7de      	b.n	8011bd8 <_malloc_r+0xa8>
 8011c1a:	230c      	movs	r3, #12
 8011c1c:	4630      	mov	r0, r6
 8011c1e:	6033      	str	r3, [r6, #0]
 8011c20:	f7fd fd9e 	bl	800f760 <__malloc_unlock>
 8011c24:	e794      	b.n	8011b50 <_malloc_r+0x20>
 8011c26:	6005      	str	r5, [r0, #0]
 8011c28:	e7d6      	b.n	8011bd8 <_malloc_r+0xa8>
 8011c2a:	bf00      	nop
 8011c2c:	20003228 	.word	0x20003228

08011c30 <_realloc_r>:
 8011c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c34:	4680      	mov	r8, r0
 8011c36:	4615      	mov	r5, r2
 8011c38:	460c      	mov	r4, r1
 8011c3a:	b921      	cbnz	r1, 8011c46 <_realloc_r+0x16>
 8011c3c:	4611      	mov	r1, r2
 8011c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c42:	f7ff bf75 	b.w	8011b30 <_malloc_r>
 8011c46:	b92a      	cbnz	r2, 8011c54 <_realloc_r+0x24>
 8011c48:	f000 fbac 	bl	80123a4 <_free_r>
 8011c4c:	2400      	movs	r4, #0
 8011c4e:	4620      	mov	r0, r4
 8011c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c54:	f000 fbee 	bl	8012434 <_malloc_usable_size_r>
 8011c58:	4285      	cmp	r5, r0
 8011c5a:	4606      	mov	r6, r0
 8011c5c:	d802      	bhi.n	8011c64 <_realloc_r+0x34>
 8011c5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011c62:	d8f4      	bhi.n	8011c4e <_realloc_r+0x1e>
 8011c64:	4629      	mov	r1, r5
 8011c66:	4640      	mov	r0, r8
 8011c68:	f7ff ff62 	bl	8011b30 <_malloc_r>
 8011c6c:	4607      	mov	r7, r0
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	d0ec      	beq.n	8011c4c <_realloc_r+0x1c>
 8011c72:	42b5      	cmp	r5, r6
 8011c74:	462a      	mov	r2, r5
 8011c76:	4621      	mov	r1, r4
 8011c78:	bf28      	it	cs
 8011c7a:	4632      	movcs	r2, r6
 8011c7c:	f000 fb65 	bl	801234a <memcpy>
 8011c80:	4621      	mov	r1, r4
 8011c82:	4640      	mov	r0, r8
 8011c84:	f000 fb8e 	bl	80123a4 <_free_r>
 8011c88:	463c      	mov	r4, r7
 8011c8a:	e7e0      	b.n	8011c4e <_realloc_r+0x1e>

08011c8c <_strtol_l.constprop.0>:
 8011c8c:	2b24      	cmp	r3, #36	@ 0x24
 8011c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c92:	4686      	mov	lr, r0
 8011c94:	4690      	mov	r8, r2
 8011c96:	d801      	bhi.n	8011c9c <_strtol_l.constprop.0+0x10>
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	d106      	bne.n	8011caa <_strtol_l.constprop.0+0x1e>
 8011c9c:	f000 fb20 	bl	80122e0 <__errno>
 8011ca0:	2316      	movs	r3, #22
 8011ca2:	6003      	str	r3, [r0, #0]
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011caa:	460d      	mov	r5, r1
 8011cac:	4833      	ldr	r0, [pc, #204]	@ (8011d7c <_strtol_l.constprop.0+0xf0>)
 8011cae:	462a      	mov	r2, r5
 8011cb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011cb4:	5d06      	ldrb	r6, [r0, r4]
 8011cb6:	f016 0608 	ands.w	r6, r6, #8
 8011cba:	d1f8      	bne.n	8011cae <_strtol_l.constprop.0+0x22>
 8011cbc:	2c2d      	cmp	r4, #45	@ 0x2d
 8011cbe:	d12d      	bne.n	8011d1c <_strtol_l.constprop.0+0x90>
 8011cc0:	2601      	movs	r6, #1
 8011cc2:	782c      	ldrb	r4, [r5, #0]
 8011cc4:	1c95      	adds	r5, r2, #2
 8011cc6:	f033 0210 	bics.w	r2, r3, #16
 8011cca:	d109      	bne.n	8011ce0 <_strtol_l.constprop.0+0x54>
 8011ccc:	2c30      	cmp	r4, #48	@ 0x30
 8011cce:	d12a      	bne.n	8011d26 <_strtol_l.constprop.0+0x9a>
 8011cd0:	782a      	ldrb	r2, [r5, #0]
 8011cd2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011cd6:	2a58      	cmp	r2, #88	@ 0x58
 8011cd8:	d125      	bne.n	8011d26 <_strtol_l.constprop.0+0x9a>
 8011cda:	2310      	movs	r3, #16
 8011cdc:	786c      	ldrb	r4, [r5, #1]
 8011cde:	3502      	adds	r5, #2
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011ce6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011cea:	fbbc f9f3 	udiv	r9, ip, r3
 8011cee:	4610      	mov	r0, r2
 8011cf0:	fb03 ca19 	mls	sl, r3, r9, ip
 8011cf4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011cf8:	2f09      	cmp	r7, #9
 8011cfa:	d81b      	bhi.n	8011d34 <_strtol_l.constprop.0+0xa8>
 8011cfc:	463c      	mov	r4, r7
 8011cfe:	42a3      	cmp	r3, r4
 8011d00:	dd27      	ble.n	8011d52 <_strtol_l.constprop.0+0xc6>
 8011d02:	1c57      	adds	r7, r2, #1
 8011d04:	d007      	beq.n	8011d16 <_strtol_l.constprop.0+0x8a>
 8011d06:	4581      	cmp	r9, r0
 8011d08:	d320      	bcc.n	8011d4c <_strtol_l.constprop.0+0xc0>
 8011d0a:	d101      	bne.n	8011d10 <_strtol_l.constprop.0+0x84>
 8011d0c:	45a2      	cmp	sl, r4
 8011d0e:	db1d      	blt.n	8011d4c <_strtol_l.constprop.0+0xc0>
 8011d10:	2201      	movs	r2, #1
 8011d12:	fb00 4003 	mla	r0, r0, r3, r4
 8011d16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d1a:	e7eb      	b.n	8011cf4 <_strtol_l.constprop.0+0x68>
 8011d1c:	2c2b      	cmp	r4, #43	@ 0x2b
 8011d1e:	bf04      	itt	eq
 8011d20:	782c      	ldrbeq	r4, [r5, #0]
 8011d22:	1c95      	addeq	r5, r2, #2
 8011d24:	e7cf      	b.n	8011cc6 <_strtol_l.constprop.0+0x3a>
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d1da      	bne.n	8011ce0 <_strtol_l.constprop.0+0x54>
 8011d2a:	2c30      	cmp	r4, #48	@ 0x30
 8011d2c:	bf0c      	ite	eq
 8011d2e:	2308      	moveq	r3, #8
 8011d30:	230a      	movne	r3, #10
 8011d32:	e7d5      	b.n	8011ce0 <_strtol_l.constprop.0+0x54>
 8011d34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011d38:	2f19      	cmp	r7, #25
 8011d3a:	d801      	bhi.n	8011d40 <_strtol_l.constprop.0+0xb4>
 8011d3c:	3c37      	subs	r4, #55	@ 0x37
 8011d3e:	e7de      	b.n	8011cfe <_strtol_l.constprop.0+0x72>
 8011d40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011d44:	2f19      	cmp	r7, #25
 8011d46:	d804      	bhi.n	8011d52 <_strtol_l.constprop.0+0xc6>
 8011d48:	3c57      	subs	r4, #87	@ 0x57
 8011d4a:	e7d8      	b.n	8011cfe <_strtol_l.constprop.0+0x72>
 8011d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d50:	e7e1      	b.n	8011d16 <_strtol_l.constprop.0+0x8a>
 8011d52:	1c53      	adds	r3, r2, #1
 8011d54:	d108      	bne.n	8011d68 <_strtol_l.constprop.0+0xdc>
 8011d56:	2322      	movs	r3, #34	@ 0x22
 8011d58:	4660      	mov	r0, ip
 8011d5a:	f8ce 3000 	str.w	r3, [lr]
 8011d5e:	f1b8 0f00 	cmp.w	r8, #0
 8011d62:	d0a0      	beq.n	8011ca6 <_strtol_l.constprop.0+0x1a>
 8011d64:	1e69      	subs	r1, r5, #1
 8011d66:	e006      	b.n	8011d76 <_strtol_l.constprop.0+0xea>
 8011d68:	b106      	cbz	r6, 8011d6c <_strtol_l.constprop.0+0xe0>
 8011d6a:	4240      	negs	r0, r0
 8011d6c:	f1b8 0f00 	cmp.w	r8, #0
 8011d70:	d099      	beq.n	8011ca6 <_strtol_l.constprop.0+0x1a>
 8011d72:	2a00      	cmp	r2, #0
 8011d74:	d1f6      	bne.n	8011d64 <_strtol_l.constprop.0+0xd8>
 8011d76:	f8c8 1000 	str.w	r1, [r8]
 8011d7a:	e794      	b.n	8011ca6 <_strtol_l.constprop.0+0x1a>
 8011d7c:	08013e51 	.word	0x08013e51

08011d80 <strtol>:
 8011d80:	4613      	mov	r3, r2
 8011d82:	460a      	mov	r2, r1
 8011d84:	4601      	mov	r1, r0
 8011d86:	4802      	ldr	r0, [pc, #8]	@ (8011d90 <strtol+0x10>)
 8011d88:	6800      	ldr	r0, [r0, #0]
 8011d8a:	f7ff bf7f 	b.w	8011c8c <_strtol_l.constprop.0>
 8011d8e:	bf00      	nop
 8011d90:	2000003c 	.word	0x2000003c

08011d94 <_strtoul_l.constprop.0>:
 8011d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d98:	4686      	mov	lr, r0
 8011d9a:	460d      	mov	r5, r1
 8011d9c:	4e33      	ldr	r6, [pc, #204]	@ (8011e6c <_strtoul_l.constprop.0+0xd8>)
 8011d9e:	4628      	mov	r0, r5
 8011da0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011da4:	5d37      	ldrb	r7, [r6, r4]
 8011da6:	f017 0708 	ands.w	r7, r7, #8
 8011daa:	d1f8      	bne.n	8011d9e <_strtoul_l.constprop.0+0xa>
 8011dac:	2c2d      	cmp	r4, #45	@ 0x2d
 8011dae:	d12f      	bne.n	8011e10 <_strtoul_l.constprop.0+0x7c>
 8011db0:	2701      	movs	r7, #1
 8011db2:	782c      	ldrb	r4, [r5, #0]
 8011db4:	1c85      	adds	r5, r0, #2
 8011db6:	f033 0010 	bics.w	r0, r3, #16
 8011dba:	d109      	bne.n	8011dd0 <_strtoul_l.constprop.0+0x3c>
 8011dbc:	2c30      	cmp	r4, #48	@ 0x30
 8011dbe:	d12c      	bne.n	8011e1a <_strtoul_l.constprop.0+0x86>
 8011dc0:	7828      	ldrb	r0, [r5, #0]
 8011dc2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011dc6:	2858      	cmp	r0, #88	@ 0x58
 8011dc8:	d127      	bne.n	8011e1a <_strtoul_l.constprop.0+0x86>
 8011dca:	2310      	movs	r3, #16
 8011dcc:	786c      	ldrb	r4, [r5, #1]
 8011dce:	3502      	adds	r5, #2
 8011dd0:	f04f 38ff 	mov.w	r8, #4294967295
 8011dd4:	fbb8 f8f3 	udiv	r8, r8, r3
 8011dd8:	2600      	movs	r6, #0
 8011dda:	fb03 f908 	mul.w	r9, r3, r8
 8011dde:	4630      	mov	r0, r6
 8011de0:	ea6f 0909 	mvn.w	r9, r9
 8011de4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011de8:	f1bc 0f09 	cmp.w	ip, #9
 8011dec:	d81c      	bhi.n	8011e28 <_strtoul_l.constprop.0+0x94>
 8011dee:	4664      	mov	r4, ip
 8011df0:	42a3      	cmp	r3, r4
 8011df2:	dd2a      	ble.n	8011e4a <_strtoul_l.constprop.0+0xb6>
 8011df4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011df8:	d007      	beq.n	8011e0a <_strtoul_l.constprop.0+0x76>
 8011dfa:	4580      	cmp	r8, r0
 8011dfc:	d322      	bcc.n	8011e44 <_strtoul_l.constprop.0+0xb0>
 8011dfe:	d101      	bne.n	8011e04 <_strtoul_l.constprop.0+0x70>
 8011e00:	45a1      	cmp	r9, r4
 8011e02:	db1f      	blt.n	8011e44 <_strtoul_l.constprop.0+0xb0>
 8011e04:	2601      	movs	r6, #1
 8011e06:	fb00 4003 	mla	r0, r0, r3, r4
 8011e0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e0e:	e7e9      	b.n	8011de4 <_strtoul_l.constprop.0+0x50>
 8011e10:	2c2b      	cmp	r4, #43	@ 0x2b
 8011e12:	bf04      	itt	eq
 8011e14:	782c      	ldrbeq	r4, [r5, #0]
 8011e16:	1c85      	addeq	r5, r0, #2
 8011e18:	e7cd      	b.n	8011db6 <_strtoul_l.constprop.0+0x22>
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d1d8      	bne.n	8011dd0 <_strtoul_l.constprop.0+0x3c>
 8011e1e:	2c30      	cmp	r4, #48	@ 0x30
 8011e20:	bf0c      	ite	eq
 8011e22:	2308      	moveq	r3, #8
 8011e24:	230a      	movne	r3, #10
 8011e26:	e7d3      	b.n	8011dd0 <_strtoul_l.constprop.0+0x3c>
 8011e28:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011e2c:	f1bc 0f19 	cmp.w	ip, #25
 8011e30:	d801      	bhi.n	8011e36 <_strtoul_l.constprop.0+0xa2>
 8011e32:	3c37      	subs	r4, #55	@ 0x37
 8011e34:	e7dc      	b.n	8011df0 <_strtoul_l.constprop.0+0x5c>
 8011e36:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011e3a:	f1bc 0f19 	cmp.w	ip, #25
 8011e3e:	d804      	bhi.n	8011e4a <_strtoul_l.constprop.0+0xb6>
 8011e40:	3c57      	subs	r4, #87	@ 0x57
 8011e42:	e7d5      	b.n	8011df0 <_strtoul_l.constprop.0+0x5c>
 8011e44:	f04f 36ff 	mov.w	r6, #4294967295
 8011e48:	e7df      	b.n	8011e0a <_strtoul_l.constprop.0+0x76>
 8011e4a:	1c73      	adds	r3, r6, #1
 8011e4c:	d106      	bne.n	8011e5c <_strtoul_l.constprop.0+0xc8>
 8011e4e:	2322      	movs	r3, #34	@ 0x22
 8011e50:	4630      	mov	r0, r6
 8011e52:	f8ce 3000 	str.w	r3, [lr]
 8011e56:	b932      	cbnz	r2, 8011e66 <_strtoul_l.constprop.0+0xd2>
 8011e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e5c:	b107      	cbz	r7, 8011e60 <_strtoul_l.constprop.0+0xcc>
 8011e5e:	4240      	negs	r0, r0
 8011e60:	2a00      	cmp	r2, #0
 8011e62:	d0f9      	beq.n	8011e58 <_strtoul_l.constprop.0+0xc4>
 8011e64:	b106      	cbz	r6, 8011e68 <_strtoul_l.constprop.0+0xd4>
 8011e66:	1e69      	subs	r1, r5, #1
 8011e68:	6011      	str	r1, [r2, #0]
 8011e6a:	e7f5      	b.n	8011e58 <_strtoul_l.constprop.0+0xc4>
 8011e6c:	08013e51 	.word	0x08013e51

08011e70 <strtoul>:
 8011e70:	4613      	mov	r3, r2
 8011e72:	460a      	mov	r2, r1
 8011e74:	4601      	mov	r1, r0
 8011e76:	4802      	ldr	r0, [pc, #8]	@ (8011e80 <strtoul+0x10>)
 8011e78:	6800      	ldr	r0, [r0, #0]
 8011e7a:	f7ff bf8b 	b.w	8011d94 <_strtoul_l.constprop.0>
 8011e7e:	bf00      	nop
 8011e80:	2000003c 	.word	0x2000003c

08011e84 <std>:
 8011e84:	2300      	movs	r3, #0
 8011e86:	b510      	push	{r4, lr}
 8011e88:	4604      	mov	r4, r0
 8011e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8011e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e92:	6083      	str	r3, [r0, #8]
 8011e94:	8181      	strh	r1, [r0, #12]
 8011e96:	6643      	str	r3, [r0, #100]	@ 0x64
 8011e98:	81c2      	strh	r2, [r0, #14]
 8011e9a:	6183      	str	r3, [r0, #24]
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	2208      	movs	r2, #8
 8011ea0:	305c      	adds	r0, #92	@ 0x5c
 8011ea2:	f000 f93e 	bl	8012122 <memset>
 8011ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8011edc <std+0x58>)
 8011ea8:	6224      	str	r4, [r4, #32]
 8011eaa:	6263      	str	r3, [r4, #36]	@ 0x24
 8011eac:	4b0c      	ldr	r3, [pc, #48]	@ (8011ee0 <std+0x5c>)
 8011eae:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8011ee4 <std+0x60>)
 8011eb2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8011ee8 <std+0x64>)
 8011eb6:	6323      	str	r3, [r4, #48]	@ 0x30
 8011eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8011eec <std+0x68>)
 8011eba:	429c      	cmp	r4, r3
 8011ebc:	d006      	beq.n	8011ecc <std+0x48>
 8011ebe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011ec2:	4294      	cmp	r4, r2
 8011ec4:	d002      	beq.n	8011ecc <std+0x48>
 8011ec6:	33d0      	adds	r3, #208	@ 0xd0
 8011ec8:	429c      	cmp	r4, r3
 8011eca:	d105      	bne.n	8011ed8 <std+0x54>
 8011ecc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ed4:	f000 ba2e 	b.w	8012334 <__retarget_lock_init_recursive>
 8011ed8:	bd10      	pop	{r4, pc}
 8011eda:	bf00      	nop
 8011edc:	08012049 	.word	0x08012049
 8011ee0:	0801206b 	.word	0x0801206b
 8011ee4:	080120a3 	.word	0x080120a3
 8011ee8:	080120c7 	.word	0x080120c7
 8011eec:	2000322c 	.word	0x2000322c

08011ef0 <stdio_exit_handler>:
 8011ef0:	4a02      	ldr	r2, [pc, #8]	@ (8011efc <stdio_exit_handler+0xc>)
 8011ef2:	4903      	ldr	r1, [pc, #12]	@ (8011f00 <stdio_exit_handler+0x10>)
 8011ef4:	4803      	ldr	r0, [pc, #12]	@ (8011f04 <stdio_exit_handler+0x14>)
 8011ef6:	f000 b869 	b.w	8011fcc <_fwalk_sglue>
 8011efa:	bf00      	nop
 8011efc:	20000030 	.word	0x20000030
 8011f00:	08012b19 	.word	0x08012b19
 8011f04:	20000040 	.word	0x20000040

08011f08 <cleanup_stdio>:
 8011f08:	6841      	ldr	r1, [r0, #4]
 8011f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8011f3c <cleanup_stdio+0x34>)
 8011f0c:	b510      	push	{r4, lr}
 8011f0e:	4299      	cmp	r1, r3
 8011f10:	4604      	mov	r4, r0
 8011f12:	d001      	beq.n	8011f18 <cleanup_stdio+0x10>
 8011f14:	f000 fe00 	bl	8012b18 <_fflush_r>
 8011f18:	68a1      	ldr	r1, [r4, #8]
 8011f1a:	4b09      	ldr	r3, [pc, #36]	@ (8011f40 <cleanup_stdio+0x38>)
 8011f1c:	4299      	cmp	r1, r3
 8011f1e:	d002      	beq.n	8011f26 <cleanup_stdio+0x1e>
 8011f20:	4620      	mov	r0, r4
 8011f22:	f000 fdf9 	bl	8012b18 <_fflush_r>
 8011f26:	68e1      	ldr	r1, [r4, #12]
 8011f28:	4b06      	ldr	r3, [pc, #24]	@ (8011f44 <cleanup_stdio+0x3c>)
 8011f2a:	4299      	cmp	r1, r3
 8011f2c:	d004      	beq.n	8011f38 <cleanup_stdio+0x30>
 8011f2e:	4620      	mov	r0, r4
 8011f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f34:	f000 bdf0 	b.w	8012b18 <_fflush_r>
 8011f38:	bd10      	pop	{r4, pc}
 8011f3a:	bf00      	nop
 8011f3c:	2000322c 	.word	0x2000322c
 8011f40:	20003294 	.word	0x20003294
 8011f44:	200032fc 	.word	0x200032fc

08011f48 <global_stdio_init.part.0>:
 8011f48:	b510      	push	{r4, lr}
 8011f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8011f78 <global_stdio_init.part.0+0x30>)
 8011f4c:	4c0b      	ldr	r4, [pc, #44]	@ (8011f7c <global_stdio_init.part.0+0x34>)
 8011f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8011f80 <global_stdio_init.part.0+0x38>)
 8011f50:	4620      	mov	r0, r4
 8011f52:	601a      	str	r2, [r3, #0]
 8011f54:	2104      	movs	r1, #4
 8011f56:	2200      	movs	r2, #0
 8011f58:	f7ff ff94 	bl	8011e84 <std>
 8011f5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011f60:	2201      	movs	r2, #1
 8011f62:	2109      	movs	r1, #9
 8011f64:	f7ff ff8e 	bl	8011e84 <std>
 8011f68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011f6c:	2202      	movs	r2, #2
 8011f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f72:	2112      	movs	r1, #18
 8011f74:	f7ff bf86 	b.w	8011e84 <std>
 8011f78:	20003364 	.word	0x20003364
 8011f7c:	2000322c 	.word	0x2000322c
 8011f80:	08011ef1 	.word	0x08011ef1

08011f84 <__sfp_lock_acquire>:
 8011f84:	4801      	ldr	r0, [pc, #4]	@ (8011f8c <__sfp_lock_acquire+0x8>)
 8011f86:	f000 b9d6 	b.w	8012336 <__retarget_lock_acquire_recursive>
 8011f8a:	bf00      	nop
 8011f8c:	2000336c 	.word	0x2000336c

08011f90 <__sfp_lock_release>:
 8011f90:	4801      	ldr	r0, [pc, #4]	@ (8011f98 <__sfp_lock_release+0x8>)
 8011f92:	f000 b9d1 	b.w	8012338 <__retarget_lock_release_recursive>
 8011f96:	bf00      	nop
 8011f98:	2000336c 	.word	0x2000336c

08011f9c <__sinit>:
 8011f9c:	b510      	push	{r4, lr}
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	f7ff fff0 	bl	8011f84 <__sfp_lock_acquire>
 8011fa4:	6a23      	ldr	r3, [r4, #32]
 8011fa6:	b11b      	cbz	r3, 8011fb0 <__sinit+0x14>
 8011fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fac:	f7ff bff0 	b.w	8011f90 <__sfp_lock_release>
 8011fb0:	4b04      	ldr	r3, [pc, #16]	@ (8011fc4 <__sinit+0x28>)
 8011fb2:	6223      	str	r3, [r4, #32]
 8011fb4:	4b04      	ldr	r3, [pc, #16]	@ (8011fc8 <__sinit+0x2c>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d1f5      	bne.n	8011fa8 <__sinit+0xc>
 8011fbc:	f7ff ffc4 	bl	8011f48 <global_stdio_init.part.0>
 8011fc0:	e7f2      	b.n	8011fa8 <__sinit+0xc>
 8011fc2:	bf00      	nop
 8011fc4:	08011f09 	.word	0x08011f09
 8011fc8:	20003364 	.word	0x20003364

08011fcc <_fwalk_sglue>:
 8011fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fd0:	4607      	mov	r7, r0
 8011fd2:	4688      	mov	r8, r1
 8011fd4:	4614      	mov	r4, r2
 8011fd6:	2600      	movs	r6, #0
 8011fd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011fdc:	f1b9 0901 	subs.w	r9, r9, #1
 8011fe0:	d505      	bpl.n	8011fee <_fwalk_sglue+0x22>
 8011fe2:	6824      	ldr	r4, [r4, #0]
 8011fe4:	2c00      	cmp	r4, #0
 8011fe6:	d1f7      	bne.n	8011fd8 <_fwalk_sglue+0xc>
 8011fe8:	4630      	mov	r0, r6
 8011fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fee:	89ab      	ldrh	r3, [r5, #12]
 8011ff0:	2b01      	cmp	r3, #1
 8011ff2:	d907      	bls.n	8012004 <_fwalk_sglue+0x38>
 8011ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	d003      	beq.n	8012004 <_fwalk_sglue+0x38>
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	4638      	mov	r0, r7
 8012000:	47c0      	blx	r8
 8012002:	4306      	orrs	r6, r0
 8012004:	3568      	adds	r5, #104	@ 0x68
 8012006:	e7e9      	b.n	8011fdc <_fwalk_sglue+0x10>

08012008 <siprintf>:
 8012008:	b40e      	push	{r1, r2, r3}
 801200a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801200e:	b500      	push	{lr}
 8012010:	b09c      	sub	sp, #112	@ 0x70
 8012012:	ab1d      	add	r3, sp, #116	@ 0x74
 8012014:	9002      	str	r0, [sp, #8]
 8012016:	9006      	str	r0, [sp, #24]
 8012018:	9107      	str	r1, [sp, #28]
 801201a:	9104      	str	r1, [sp, #16]
 801201c:	4808      	ldr	r0, [pc, #32]	@ (8012040 <siprintf+0x38>)
 801201e:	4909      	ldr	r1, [pc, #36]	@ (8012044 <siprintf+0x3c>)
 8012020:	f853 2b04 	ldr.w	r2, [r3], #4
 8012024:	9105      	str	r1, [sp, #20]
 8012026:	6800      	ldr	r0, [r0, #0]
 8012028:	a902      	add	r1, sp, #8
 801202a:	9301      	str	r3, [sp, #4]
 801202c:	f000 fa66 	bl	80124fc <_svfiprintf_r>
 8012030:	2200      	movs	r2, #0
 8012032:	9b02      	ldr	r3, [sp, #8]
 8012034:	701a      	strb	r2, [r3, #0]
 8012036:	b01c      	add	sp, #112	@ 0x70
 8012038:	f85d eb04 	ldr.w	lr, [sp], #4
 801203c:	b003      	add	sp, #12
 801203e:	4770      	bx	lr
 8012040:	2000003c 	.word	0x2000003c
 8012044:	ffff0208 	.word	0xffff0208

08012048 <__sread>:
 8012048:	b510      	push	{r4, lr}
 801204a:	460c      	mov	r4, r1
 801204c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012050:	f000 f912 	bl	8012278 <_read_r>
 8012054:	2800      	cmp	r0, #0
 8012056:	bfab      	itete	ge
 8012058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801205a:	89a3      	ldrhlt	r3, [r4, #12]
 801205c:	181b      	addge	r3, r3, r0
 801205e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012062:	bfac      	ite	ge
 8012064:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012066:	81a3      	strhlt	r3, [r4, #12]
 8012068:	bd10      	pop	{r4, pc}

0801206a <__swrite>:
 801206a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801206e:	461f      	mov	r7, r3
 8012070:	898b      	ldrh	r3, [r1, #12]
 8012072:	4605      	mov	r5, r0
 8012074:	05db      	lsls	r3, r3, #23
 8012076:	460c      	mov	r4, r1
 8012078:	4616      	mov	r6, r2
 801207a:	d505      	bpl.n	8012088 <__swrite+0x1e>
 801207c:	2302      	movs	r3, #2
 801207e:	2200      	movs	r2, #0
 8012080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012084:	f000 f8e6 	bl	8012254 <_lseek_r>
 8012088:	89a3      	ldrh	r3, [r4, #12]
 801208a:	4632      	mov	r2, r6
 801208c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012090:	81a3      	strh	r3, [r4, #12]
 8012092:	4628      	mov	r0, r5
 8012094:	463b      	mov	r3, r7
 8012096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801209a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801209e:	f000 b90d 	b.w	80122bc <_write_r>

080120a2 <__sseek>:
 80120a2:	b510      	push	{r4, lr}
 80120a4:	460c      	mov	r4, r1
 80120a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120aa:	f000 f8d3 	bl	8012254 <_lseek_r>
 80120ae:	1c43      	adds	r3, r0, #1
 80120b0:	89a3      	ldrh	r3, [r4, #12]
 80120b2:	bf15      	itete	ne
 80120b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80120b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80120ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80120be:	81a3      	strheq	r3, [r4, #12]
 80120c0:	bf18      	it	ne
 80120c2:	81a3      	strhne	r3, [r4, #12]
 80120c4:	bd10      	pop	{r4, pc}

080120c6 <__sclose>:
 80120c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ca:	f000 b8b3 	b.w	8012234 <_close_r>

080120ce <memcmp>:
 80120ce:	b510      	push	{r4, lr}
 80120d0:	3901      	subs	r1, #1
 80120d2:	4402      	add	r2, r0
 80120d4:	4290      	cmp	r0, r2
 80120d6:	d101      	bne.n	80120dc <memcmp+0xe>
 80120d8:	2000      	movs	r0, #0
 80120da:	e005      	b.n	80120e8 <memcmp+0x1a>
 80120dc:	7803      	ldrb	r3, [r0, #0]
 80120de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80120e2:	42a3      	cmp	r3, r4
 80120e4:	d001      	beq.n	80120ea <memcmp+0x1c>
 80120e6:	1b18      	subs	r0, r3, r4
 80120e8:	bd10      	pop	{r4, pc}
 80120ea:	3001      	adds	r0, #1
 80120ec:	e7f2      	b.n	80120d4 <memcmp+0x6>

080120ee <memmove>:
 80120ee:	4288      	cmp	r0, r1
 80120f0:	b510      	push	{r4, lr}
 80120f2:	eb01 0402 	add.w	r4, r1, r2
 80120f6:	d902      	bls.n	80120fe <memmove+0x10>
 80120f8:	4284      	cmp	r4, r0
 80120fa:	4623      	mov	r3, r4
 80120fc:	d807      	bhi.n	801210e <memmove+0x20>
 80120fe:	1e43      	subs	r3, r0, #1
 8012100:	42a1      	cmp	r1, r4
 8012102:	d008      	beq.n	8012116 <memmove+0x28>
 8012104:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012108:	f803 2f01 	strb.w	r2, [r3, #1]!
 801210c:	e7f8      	b.n	8012100 <memmove+0x12>
 801210e:	4601      	mov	r1, r0
 8012110:	4402      	add	r2, r0
 8012112:	428a      	cmp	r2, r1
 8012114:	d100      	bne.n	8012118 <memmove+0x2a>
 8012116:	bd10      	pop	{r4, pc}
 8012118:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801211c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012120:	e7f7      	b.n	8012112 <memmove+0x24>

08012122 <memset>:
 8012122:	4603      	mov	r3, r0
 8012124:	4402      	add	r2, r0
 8012126:	4293      	cmp	r3, r2
 8012128:	d100      	bne.n	801212c <memset+0xa>
 801212a:	4770      	bx	lr
 801212c:	f803 1b01 	strb.w	r1, [r3], #1
 8012130:	e7f9      	b.n	8012126 <memset+0x4>

08012132 <strcat>:
 8012132:	4602      	mov	r2, r0
 8012134:	b510      	push	{r4, lr}
 8012136:	7814      	ldrb	r4, [r2, #0]
 8012138:	4613      	mov	r3, r2
 801213a:	3201      	adds	r2, #1
 801213c:	2c00      	cmp	r4, #0
 801213e:	d1fa      	bne.n	8012136 <strcat+0x4>
 8012140:	3b01      	subs	r3, #1
 8012142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012146:	f803 2f01 	strb.w	r2, [r3, #1]!
 801214a:	2a00      	cmp	r2, #0
 801214c:	d1f9      	bne.n	8012142 <strcat+0x10>
 801214e:	bd10      	pop	{r4, pc}

08012150 <strtok>:
 8012150:	4b16      	ldr	r3, [pc, #88]	@ (80121ac <strtok+0x5c>)
 8012152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012156:	681f      	ldr	r7, [r3, #0]
 8012158:	4605      	mov	r5, r0
 801215a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801215c:	460e      	mov	r6, r1
 801215e:	b9ec      	cbnz	r4, 801219c <strtok+0x4c>
 8012160:	2050      	movs	r0, #80	@ 0x50
 8012162:	f7ff fcbb 	bl	8011adc <malloc>
 8012166:	4602      	mov	r2, r0
 8012168:	6478      	str	r0, [r7, #68]	@ 0x44
 801216a:	b920      	cbnz	r0, 8012176 <strtok+0x26>
 801216c:	215b      	movs	r1, #91	@ 0x5b
 801216e:	4b10      	ldr	r3, [pc, #64]	@ (80121b0 <strtok+0x60>)
 8012170:	4810      	ldr	r0, [pc, #64]	@ (80121b4 <strtok+0x64>)
 8012172:	f000 f8f9 	bl	8012368 <__assert_func>
 8012176:	e9c0 4400 	strd	r4, r4, [r0]
 801217a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801217e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012182:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8012186:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801218a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801218e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8012192:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8012196:	6184      	str	r4, [r0, #24]
 8012198:	7704      	strb	r4, [r0, #28]
 801219a:	6244      	str	r4, [r0, #36]	@ 0x24
 801219c:	4631      	mov	r1, r6
 801219e:	4628      	mov	r0, r5
 80121a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80121a2:	2301      	movs	r3, #1
 80121a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121a8:	f000 b806 	b.w	80121b8 <__strtok_r>
 80121ac:	2000003c 	.word	0x2000003c
 80121b0:	08013f51 	.word	0x08013f51
 80121b4:	08013f68 	.word	0x08013f68

080121b8 <__strtok_r>:
 80121b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121ba:	4604      	mov	r4, r0
 80121bc:	b908      	cbnz	r0, 80121c2 <__strtok_r+0xa>
 80121be:	6814      	ldr	r4, [r2, #0]
 80121c0:	b144      	cbz	r4, 80121d4 <__strtok_r+0x1c>
 80121c2:	460f      	mov	r7, r1
 80121c4:	4620      	mov	r0, r4
 80121c6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80121ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80121ce:	b91e      	cbnz	r6, 80121d8 <__strtok_r+0x20>
 80121d0:	b965      	cbnz	r5, 80121ec <__strtok_r+0x34>
 80121d2:	6015      	str	r5, [r2, #0]
 80121d4:	2000      	movs	r0, #0
 80121d6:	e005      	b.n	80121e4 <__strtok_r+0x2c>
 80121d8:	42b5      	cmp	r5, r6
 80121da:	d1f6      	bne.n	80121ca <__strtok_r+0x12>
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d1f0      	bne.n	80121c2 <__strtok_r+0xa>
 80121e0:	6014      	str	r4, [r2, #0]
 80121e2:	7003      	strb	r3, [r0, #0]
 80121e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121e6:	461c      	mov	r4, r3
 80121e8:	e00c      	b.n	8012204 <__strtok_r+0x4c>
 80121ea:	b915      	cbnz	r5, 80121f2 <__strtok_r+0x3a>
 80121ec:	460e      	mov	r6, r1
 80121ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 80121f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80121f6:	42ab      	cmp	r3, r5
 80121f8:	d1f7      	bne.n	80121ea <__strtok_r+0x32>
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d0f3      	beq.n	80121e6 <__strtok_r+0x2e>
 80121fe:	2300      	movs	r3, #0
 8012200:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012204:	6014      	str	r4, [r2, #0]
 8012206:	e7ed      	b.n	80121e4 <__strtok_r+0x2c>

08012208 <strstr>:
 8012208:	780a      	ldrb	r2, [r1, #0]
 801220a:	b570      	push	{r4, r5, r6, lr}
 801220c:	b96a      	cbnz	r2, 801222a <strstr+0x22>
 801220e:	bd70      	pop	{r4, r5, r6, pc}
 8012210:	429a      	cmp	r2, r3
 8012212:	d109      	bne.n	8012228 <strstr+0x20>
 8012214:	460c      	mov	r4, r1
 8012216:	4605      	mov	r5, r0
 8012218:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801221c:	2b00      	cmp	r3, #0
 801221e:	d0f6      	beq.n	801220e <strstr+0x6>
 8012220:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012224:	429e      	cmp	r6, r3
 8012226:	d0f7      	beq.n	8012218 <strstr+0x10>
 8012228:	3001      	adds	r0, #1
 801222a:	7803      	ldrb	r3, [r0, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d1ef      	bne.n	8012210 <strstr+0x8>
 8012230:	4618      	mov	r0, r3
 8012232:	e7ec      	b.n	801220e <strstr+0x6>

08012234 <_close_r>:
 8012234:	b538      	push	{r3, r4, r5, lr}
 8012236:	2300      	movs	r3, #0
 8012238:	4d05      	ldr	r5, [pc, #20]	@ (8012250 <_close_r+0x1c>)
 801223a:	4604      	mov	r4, r0
 801223c:	4608      	mov	r0, r1
 801223e:	602b      	str	r3, [r5, #0]
 8012240:	f7f9 ff31 	bl	800c0a6 <_close>
 8012244:	1c43      	adds	r3, r0, #1
 8012246:	d102      	bne.n	801224e <_close_r+0x1a>
 8012248:	682b      	ldr	r3, [r5, #0]
 801224a:	b103      	cbz	r3, 801224e <_close_r+0x1a>
 801224c:	6023      	str	r3, [r4, #0]
 801224e:	bd38      	pop	{r3, r4, r5, pc}
 8012250:	20003368 	.word	0x20003368

08012254 <_lseek_r>:
 8012254:	b538      	push	{r3, r4, r5, lr}
 8012256:	4604      	mov	r4, r0
 8012258:	4608      	mov	r0, r1
 801225a:	4611      	mov	r1, r2
 801225c:	2200      	movs	r2, #0
 801225e:	4d05      	ldr	r5, [pc, #20]	@ (8012274 <_lseek_r+0x20>)
 8012260:	602a      	str	r2, [r5, #0]
 8012262:	461a      	mov	r2, r3
 8012264:	f7f9 ff43 	bl	800c0ee <_lseek>
 8012268:	1c43      	adds	r3, r0, #1
 801226a:	d102      	bne.n	8012272 <_lseek_r+0x1e>
 801226c:	682b      	ldr	r3, [r5, #0]
 801226e:	b103      	cbz	r3, 8012272 <_lseek_r+0x1e>
 8012270:	6023      	str	r3, [r4, #0]
 8012272:	bd38      	pop	{r3, r4, r5, pc}
 8012274:	20003368 	.word	0x20003368

08012278 <_read_r>:
 8012278:	b538      	push	{r3, r4, r5, lr}
 801227a:	4604      	mov	r4, r0
 801227c:	4608      	mov	r0, r1
 801227e:	4611      	mov	r1, r2
 8012280:	2200      	movs	r2, #0
 8012282:	4d05      	ldr	r5, [pc, #20]	@ (8012298 <_read_r+0x20>)
 8012284:	602a      	str	r2, [r5, #0]
 8012286:	461a      	mov	r2, r3
 8012288:	f7f9 fed4 	bl	800c034 <_read>
 801228c:	1c43      	adds	r3, r0, #1
 801228e:	d102      	bne.n	8012296 <_read_r+0x1e>
 8012290:	682b      	ldr	r3, [r5, #0]
 8012292:	b103      	cbz	r3, 8012296 <_read_r+0x1e>
 8012294:	6023      	str	r3, [r4, #0]
 8012296:	bd38      	pop	{r3, r4, r5, pc}
 8012298:	20003368 	.word	0x20003368

0801229c <_sbrk_r>:
 801229c:	b538      	push	{r3, r4, r5, lr}
 801229e:	2300      	movs	r3, #0
 80122a0:	4d05      	ldr	r5, [pc, #20]	@ (80122b8 <_sbrk_r+0x1c>)
 80122a2:	4604      	mov	r4, r0
 80122a4:	4608      	mov	r0, r1
 80122a6:	602b      	str	r3, [r5, #0]
 80122a8:	f7f9 ff2e 	bl	800c108 <_sbrk>
 80122ac:	1c43      	adds	r3, r0, #1
 80122ae:	d102      	bne.n	80122b6 <_sbrk_r+0x1a>
 80122b0:	682b      	ldr	r3, [r5, #0]
 80122b2:	b103      	cbz	r3, 80122b6 <_sbrk_r+0x1a>
 80122b4:	6023      	str	r3, [r4, #0]
 80122b6:	bd38      	pop	{r3, r4, r5, pc}
 80122b8:	20003368 	.word	0x20003368

080122bc <_write_r>:
 80122bc:	b538      	push	{r3, r4, r5, lr}
 80122be:	4604      	mov	r4, r0
 80122c0:	4608      	mov	r0, r1
 80122c2:	4611      	mov	r1, r2
 80122c4:	2200      	movs	r2, #0
 80122c6:	4d05      	ldr	r5, [pc, #20]	@ (80122dc <_write_r+0x20>)
 80122c8:	602a      	str	r2, [r5, #0]
 80122ca:	461a      	mov	r2, r3
 80122cc:	f7f9 fecf 	bl	800c06e <_write>
 80122d0:	1c43      	adds	r3, r0, #1
 80122d2:	d102      	bne.n	80122da <_write_r+0x1e>
 80122d4:	682b      	ldr	r3, [r5, #0]
 80122d6:	b103      	cbz	r3, 80122da <_write_r+0x1e>
 80122d8:	6023      	str	r3, [r4, #0]
 80122da:	bd38      	pop	{r3, r4, r5, pc}
 80122dc:	20003368 	.word	0x20003368

080122e0 <__errno>:
 80122e0:	4b01      	ldr	r3, [pc, #4]	@ (80122e8 <__errno+0x8>)
 80122e2:	6818      	ldr	r0, [r3, #0]
 80122e4:	4770      	bx	lr
 80122e6:	bf00      	nop
 80122e8:	2000003c 	.word	0x2000003c

080122ec <__libc_init_array>:
 80122ec:	b570      	push	{r4, r5, r6, lr}
 80122ee:	2600      	movs	r6, #0
 80122f0:	4d0c      	ldr	r5, [pc, #48]	@ (8012324 <__libc_init_array+0x38>)
 80122f2:	4c0d      	ldr	r4, [pc, #52]	@ (8012328 <__libc_init_array+0x3c>)
 80122f4:	1b64      	subs	r4, r4, r5
 80122f6:	10a4      	asrs	r4, r4, #2
 80122f8:	42a6      	cmp	r6, r4
 80122fa:	d109      	bne.n	8012310 <__libc_init_array+0x24>
 80122fc:	f000 fef6 	bl	80130ec <_init>
 8012300:	2600      	movs	r6, #0
 8012302:	4d0a      	ldr	r5, [pc, #40]	@ (801232c <__libc_init_array+0x40>)
 8012304:	4c0a      	ldr	r4, [pc, #40]	@ (8012330 <__libc_init_array+0x44>)
 8012306:	1b64      	subs	r4, r4, r5
 8012308:	10a4      	asrs	r4, r4, #2
 801230a:	42a6      	cmp	r6, r4
 801230c:	d105      	bne.n	801231a <__libc_init_array+0x2e>
 801230e:	bd70      	pop	{r4, r5, r6, pc}
 8012310:	f855 3b04 	ldr.w	r3, [r5], #4
 8012314:	4798      	blx	r3
 8012316:	3601      	adds	r6, #1
 8012318:	e7ee      	b.n	80122f8 <__libc_init_array+0xc>
 801231a:	f855 3b04 	ldr.w	r3, [r5], #4
 801231e:	4798      	blx	r3
 8012320:	3601      	adds	r6, #1
 8012322:	e7f2      	b.n	801230a <__libc_init_array+0x1e>
 8012324:	0801403c 	.word	0x0801403c
 8012328:	0801403c 	.word	0x0801403c
 801232c:	0801403c 	.word	0x0801403c
 8012330:	08014040 	.word	0x08014040

08012334 <__retarget_lock_init_recursive>:
 8012334:	4770      	bx	lr

08012336 <__retarget_lock_acquire_recursive>:
 8012336:	4770      	bx	lr

08012338 <__retarget_lock_release_recursive>:
 8012338:	4770      	bx	lr

0801233a <strcpy>:
 801233a:	4603      	mov	r3, r0
 801233c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012340:	f803 2b01 	strb.w	r2, [r3], #1
 8012344:	2a00      	cmp	r2, #0
 8012346:	d1f9      	bne.n	801233c <strcpy+0x2>
 8012348:	4770      	bx	lr

0801234a <memcpy>:
 801234a:	440a      	add	r2, r1
 801234c:	4291      	cmp	r1, r2
 801234e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012352:	d100      	bne.n	8012356 <memcpy+0xc>
 8012354:	4770      	bx	lr
 8012356:	b510      	push	{r4, lr}
 8012358:	f811 4b01 	ldrb.w	r4, [r1], #1
 801235c:	4291      	cmp	r1, r2
 801235e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012362:	d1f9      	bne.n	8012358 <memcpy+0xe>
 8012364:	bd10      	pop	{r4, pc}
	...

08012368 <__assert_func>:
 8012368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801236a:	4614      	mov	r4, r2
 801236c:	461a      	mov	r2, r3
 801236e:	4b09      	ldr	r3, [pc, #36]	@ (8012394 <__assert_func+0x2c>)
 8012370:	4605      	mov	r5, r0
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	68d8      	ldr	r0, [r3, #12]
 8012376:	b954      	cbnz	r4, 801238e <__assert_func+0x26>
 8012378:	4b07      	ldr	r3, [pc, #28]	@ (8012398 <__assert_func+0x30>)
 801237a:	461c      	mov	r4, r3
 801237c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012380:	9100      	str	r1, [sp, #0]
 8012382:	462b      	mov	r3, r5
 8012384:	4905      	ldr	r1, [pc, #20]	@ (801239c <__assert_func+0x34>)
 8012386:	f000 fbef 	bl	8012b68 <fiprintf>
 801238a:	f000 fc0d 	bl	8012ba8 <abort>
 801238e:	4b04      	ldr	r3, [pc, #16]	@ (80123a0 <__assert_func+0x38>)
 8012390:	e7f4      	b.n	801237c <__assert_func+0x14>
 8012392:	bf00      	nop
 8012394:	2000003c 	.word	0x2000003c
 8012398:	08013ffd 	.word	0x08013ffd
 801239c:	08013fcf 	.word	0x08013fcf
 80123a0:	08013fc2 	.word	0x08013fc2

080123a4 <_free_r>:
 80123a4:	b538      	push	{r3, r4, r5, lr}
 80123a6:	4605      	mov	r5, r0
 80123a8:	2900      	cmp	r1, #0
 80123aa:	d040      	beq.n	801242e <_free_r+0x8a>
 80123ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123b0:	1f0c      	subs	r4, r1, #4
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	bfb8      	it	lt
 80123b6:	18e4      	addlt	r4, r4, r3
 80123b8:	f7fd f9c8 	bl	800f74c <__malloc_lock>
 80123bc:	4a1c      	ldr	r2, [pc, #112]	@ (8012430 <_free_r+0x8c>)
 80123be:	6813      	ldr	r3, [r2, #0]
 80123c0:	b933      	cbnz	r3, 80123d0 <_free_r+0x2c>
 80123c2:	6063      	str	r3, [r4, #4]
 80123c4:	6014      	str	r4, [r2, #0]
 80123c6:	4628      	mov	r0, r5
 80123c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123cc:	f7fd b9c8 	b.w	800f760 <__malloc_unlock>
 80123d0:	42a3      	cmp	r3, r4
 80123d2:	d908      	bls.n	80123e6 <_free_r+0x42>
 80123d4:	6820      	ldr	r0, [r4, #0]
 80123d6:	1821      	adds	r1, r4, r0
 80123d8:	428b      	cmp	r3, r1
 80123da:	bf01      	itttt	eq
 80123dc:	6819      	ldreq	r1, [r3, #0]
 80123de:	685b      	ldreq	r3, [r3, #4]
 80123e0:	1809      	addeq	r1, r1, r0
 80123e2:	6021      	streq	r1, [r4, #0]
 80123e4:	e7ed      	b.n	80123c2 <_free_r+0x1e>
 80123e6:	461a      	mov	r2, r3
 80123e8:	685b      	ldr	r3, [r3, #4]
 80123ea:	b10b      	cbz	r3, 80123f0 <_free_r+0x4c>
 80123ec:	42a3      	cmp	r3, r4
 80123ee:	d9fa      	bls.n	80123e6 <_free_r+0x42>
 80123f0:	6811      	ldr	r1, [r2, #0]
 80123f2:	1850      	adds	r0, r2, r1
 80123f4:	42a0      	cmp	r0, r4
 80123f6:	d10b      	bne.n	8012410 <_free_r+0x6c>
 80123f8:	6820      	ldr	r0, [r4, #0]
 80123fa:	4401      	add	r1, r0
 80123fc:	1850      	adds	r0, r2, r1
 80123fe:	4283      	cmp	r3, r0
 8012400:	6011      	str	r1, [r2, #0]
 8012402:	d1e0      	bne.n	80123c6 <_free_r+0x22>
 8012404:	6818      	ldr	r0, [r3, #0]
 8012406:	685b      	ldr	r3, [r3, #4]
 8012408:	4408      	add	r0, r1
 801240a:	6010      	str	r0, [r2, #0]
 801240c:	6053      	str	r3, [r2, #4]
 801240e:	e7da      	b.n	80123c6 <_free_r+0x22>
 8012410:	d902      	bls.n	8012418 <_free_r+0x74>
 8012412:	230c      	movs	r3, #12
 8012414:	602b      	str	r3, [r5, #0]
 8012416:	e7d6      	b.n	80123c6 <_free_r+0x22>
 8012418:	6820      	ldr	r0, [r4, #0]
 801241a:	1821      	adds	r1, r4, r0
 801241c:	428b      	cmp	r3, r1
 801241e:	bf01      	itttt	eq
 8012420:	6819      	ldreq	r1, [r3, #0]
 8012422:	685b      	ldreq	r3, [r3, #4]
 8012424:	1809      	addeq	r1, r1, r0
 8012426:	6021      	streq	r1, [r4, #0]
 8012428:	6063      	str	r3, [r4, #4]
 801242a:	6054      	str	r4, [r2, #4]
 801242c:	e7cb      	b.n	80123c6 <_free_r+0x22>
 801242e:	bd38      	pop	{r3, r4, r5, pc}
 8012430:	20003228 	.word	0x20003228

08012434 <_malloc_usable_size_r>:
 8012434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012438:	1f18      	subs	r0, r3, #4
 801243a:	2b00      	cmp	r3, #0
 801243c:	bfbc      	itt	lt
 801243e:	580b      	ldrlt	r3, [r1, r0]
 8012440:	18c0      	addlt	r0, r0, r3
 8012442:	4770      	bx	lr

08012444 <__ssputs_r>:
 8012444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012448:	461f      	mov	r7, r3
 801244a:	688e      	ldr	r6, [r1, #8]
 801244c:	4682      	mov	sl, r0
 801244e:	42be      	cmp	r6, r7
 8012450:	460c      	mov	r4, r1
 8012452:	4690      	mov	r8, r2
 8012454:	680b      	ldr	r3, [r1, #0]
 8012456:	d82d      	bhi.n	80124b4 <__ssputs_r+0x70>
 8012458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801245c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012460:	d026      	beq.n	80124b0 <__ssputs_r+0x6c>
 8012462:	6965      	ldr	r5, [r4, #20]
 8012464:	6909      	ldr	r1, [r1, #16]
 8012466:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801246a:	eba3 0901 	sub.w	r9, r3, r1
 801246e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012472:	1c7b      	adds	r3, r7, #1
 8012474:	444b      	add	r3, r9
 8012476:	106d      	asrs	r5, r5, #1
 8012478:	429d      	cmp	r5, r3
 801247a:	bf38      	it	cc
 801247c:	461d      	movcc	r5, r3
 801247e:	0553      	lsls	r3, r2, #21
 8012480:	d527      	bpl.n	80124d2 <__ssputs_r+0x8e>
 8012482:	4629      	mov	r1, r5
 8012484:	f7ff fb54 	bl	8011b30 <_malloc_r>
 8012488:	4606      	mov	r6, r0
 801248a:	b360      	cbz	r0, 80124e6 <__ssputs_r+0xa2>
 801248c:	464a      	mov	r2, r9
 801248e:	6921      	ldr	r1, [r4, #16]
 8012490:	f7ff ff5b 	bl	801234a <memcpy>
 8012494:	89a3      	ldrh	r3, [r4, #12]
 8012496:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801249a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801249e:	81a3      	strh	r3, [r4, #12]
 80124a0:	6126      	str	r6, [r4, #16]
 80124a2:	444e      	add	r6, r9
 80124a4:	6026      	str	r6, [r4, #0]
 80124a6:	463e      	mov	r6, r7
 80124a8:	6165      	str	r5, [r4, #20]
 80124aa:	eba5 0509 	sub.w	r5, r5, r9
 80124ae:	60a5      	str	r5, [r4, #8]
 80124b0:	42be      	cmp	r6, r7
 80124b2:	d900      	bls.n	80124b6 <__ssputs_r+0x72>
 80124b4:	463e      	mov	r6, r7
 80124b6:	4632      	mov	r2, r6
 80124b8:	4641      	mov	r1, r8
 80124ba:	6820      	ldr	r0, [r4, #0]
 80124bc:	f7ff fe17 	bl	80120ee <memmove>
 80124c0:	2000      	movs	r0, #0
 80124c2:	68a3      	ldr	r3, [r4, #8]
 80124c4:	1b9b      	subs	r3, r3, r6
 80124c6:	60a3      	str	r3, [r4, #8]
 80124c8:	6823      	ldr	r3, [r4, #0]
 80124ca:	4433      	add	r3, r6
 80124cc:	6023      	str	r3, [r4, #0]
 80124ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124d2:	462a      	mov	r2, r5
 80124d4:	f7ff fbac 	bl	8011c30 <_realloc_r>
 80124d8:	4606      	mov	r6, r0
 80124da:	2800      	cmp	r0, #0
 80124dc:	d1e0      	bne.n	80124a0 <__ssputs_r+0x5c>
 80124de:	4650      	mov	r0, sl
 80124e0:	6921      	ldr	r1, [r4, #16]
 80124e2:	f7ff ff5f 	bl	80123a4 <_free_r>
 80124e6:	230c      	movs	r3, #12
 80124e8:	f8ca 3000 	str.w	r3, [sl]
 80124ec:	89a3      	ldrh	r3, [r4, #12]
 80124ee:	f04f 30ff 	mov.w	r0, #4294967295
 80124f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124f6:	81a3      	strh	r3, [r4, #12]
 80124f8:	e7e9      	b.n	80124ce <__ssputs_r+0x8a>
	...

080124fc <_svfiprintf_r>:
 80124fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012500:	4698      	mov	r8, r3
 8012502:	898b      	ldrh	r3, [r1, #12]
 8012504:	4607      	mov	r7, r0
 8012506:	061b      	lsls	r3, r3, #24
 8012508:	460d      	mov	r5, r1
 801250a:	4614      	mov	r4, r2
 801250c:	b09d      	sub	sp, #116	@ 0x74
 801250e:	d510      	bpl.n	8012532 <_svfiprintf_r+0x36>
 8012510:	690b      	ldr	r3, [r1, #16]
 8012512:	b973      	cbnz	r3, 8012532 <_svfiprintf_r+0x36>
 8012514:	2140      	movs	r1, #64	@ 0x40
 8012516:	f7ff fb0b 	bl	8011b30 <_malloc_r>
 801251a:	6028      	str	r0, [r5, #0]
 801251c:	6128      	str	r0, [r5, #16]
 801251e:	b930      	cbnz	r0, 801252e <_svfiprintf_r+0x32>
 8012520:	230c      	movs	r3, #12
 8012522:	603b      	str	r3, [r7, #0]
 8012524:	f04f 30ff 	mov.w	r0, #4294967295
 8012528:	b01d      	add	sp, #116	@ 0x74
 801252a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801252e:	2340      	movs	r3, #64	@ 0x40
 8012530:	616b      	str	r3, [r5, #20]
 8012532:	2300      	movs	r3, #0
 8012534:	9309      	str	r3, [sp, #36]	@ 0x24
 8012536:	2320      	movs	r3, #32
 8012538:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801253c:	2330      	movs	r3, #48	@ 0x30
 801253e:	f04f 0901 	mov.w	r9, #1
 8012542:	f8cd 800c 	str.w	r8, [sp, #12]
 8012546:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80126e0 <_svfiprintf_r+0x1e4>
 801254a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801254e:	4623      	mov	r3, r4
 8012550:	469a      	mov	sl, r3
 8012552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012556:	b10a      	cbz	r2, 801255c <_svfiprintf_r+0x60>
 8012558:	2a25      	cmp	r2, #37	@ 0x25
 801255a:	d1f9      	bne.n	8012550 <_svfiprintf_r+0x54>
 801255c:	ebba 0b04 	subs.w	fp, sl, r4
 8012560:	d00b      	beq.n	801257a <_svfiprintf_r+0x7e>
 8012562:	465b      	mov	r3, fp
 8012564:	4622      	mov	r2, r4
 8012566:	4629      	mov	r1, r5
 8012568:	4638      	mov	r0, r7
 801256a:	f7ff ff6b 	bl	8012444 <__ssputs_r>
 801256e:	3001      	adds	r0, #1
 8012570:	f000 80a7 	beq.w	80126c2 <_svfiprintf_r+0x1c6>
 8012574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012576:	445a      	add	r2, fp
 8012578:	9209      	str	r2, [sp, #36]	@ 0x24
 801257a:	f89a 3000 	ldrb.w	r3, [sl]
 801257e:	2b00      	cmp	r3, #0
 8012580:	f000 809f 	beq.w	80126c2 <_svfiprintf_r+0x1c6>
 8012584:	2300      	movs	r3, #0
 8012586:	f04f 32ff 	mov.w	r2, #4294967295
 801258a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801258e:	f10a 0a01 	add.w	sl, sl, #1
 8012592:	9304      	str	r3, [sp, #16]
 8012594:	9307      	str	r3, [sp, #28]
 8012596:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801259a:	931a      	str	r3, [sp, #104]	@ 0x68
 801259c:	4654      	mov	r4, sl
 801259e:	2205      	movs	r2, #5
 80125a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125a4:	484e      	ldr	r0, [pc, #312]	@ (80126e0 <_svfiprintf_r+0x1e4>)
 80125a6:	f000 faf1 	bl	8012b8c <memchr>
 80125aa:	9a04      	ldr	r2, [sp, #16]
 80125ac:	b9d8      	cbnz	r0, 80125e6 <_svfiprintf_r+0xea>
 80125ae:	06d0      	lsls	r0, r2, #27
 80125b0:	bf44      	itt	mi
 80125b2:	2320      	movmi	r3, #32
 80125b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125b8:	0711      	lsls	r1, r2, #28
 80125ba:	bf44      	itt	mi
 80125bc:	232b      	movmi	r3, #43	@ 0x2b
 80125be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125c2:	f89a 3000 	ldrb.w	r3, [sl]
 80125c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80125c8:	d015      	beq.n	80125f6 <_svfiprintf_r+0xfa>
 80125ca:	4654      	mov	r4, sl
 80125cc:	2000      	movs	r0, #0
 80125ce:	f04f 0c0a 	mov.w	ip, #10
 80125d2:	9a07      	ldr	r2, [sp, #28]
 80125d4:	4621      	mov	r1, r4
 80125d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125da:	3b30      	subs	r3, #48	@ 0x30
 80125dc:	2b09      	cmp	r3, #9
 80125de:	d94b      	bls.n	8012678 <_svfiprintf_r+0x17c>
 80125e0:	b1b0      	cbz	r0, 8012610 <_svfiprintf_r+0x114>
 80125e2:	9207      	str	r2, [sp, #28]
 80125e4:	e014      	b.n	8012610 <_svfiprintf_r+0x114>
 80125e6:	eba0 0308 	sub.w	r3, r0, r8
 80125ea:	fa09 f303 	lsl.w	r3, r9, r3
 80125ee:	4313      	orrs	r3, r2
 80125f0:	46a2      	mov	sl, r4
 80125f2:	9304      	str	r3, [sp, #16]
 80125f4:	e7d2      	b.n	801259c <_svfiprintf_r+0xa0>
 80125f6:	9b03      	ldr	r3, [sp, #12]
 80125f8:	1d19      	adds	r1, r3, #4
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	9103      	str	r1, [sp, #12]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	bfbb      	ittet	lt
 8012602:	425b      	neglt	r3, r3
 8012604:	f042 0202 	orrlt.w	r2, r2, #2
 8012608:	9307      	strge	r3, [sp, #28]
 801260a:	9307      	strlt	r3, [sp, #28]
 801260c:	bfb8      	it	lt
 801260e:	9204      	strlt	r2, [sp, #16]
 8012610:	7823      	ldrb	r3, [r4, #0]
 8012612:	2b2e      	cmp	r3, #46	@ 0x2e
 8012614:	d10a      	bne.n	801262c <_svfiprintf_r+0x130>
 8012616:	7863      	ldrb	r3, [r4, #1]
 8012618:	2b2a      	cmp	r3, #42	@ 0x2a
 801261a:	d132      	bne.n	8012682 <_svfiprintf_r+0x186>
 801261c:	9b03      	ldr	r3, [sp, #12]
 801261e:	3402      	adds	r4, #2
 8012620:	1d1a      	adds	r2, r3, #4
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	9203      	str	r2, [sp, #12]
 8012626:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801262a:	9305      	str	r3, [sp, #20]
 801262c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80126e4 <_svfiprintf_r+0x1e8>
 8012630:	2203      	movs	r2, #3
 8012632:	4650      	mov	r0, sl
 8012634:	7821      	ldrb	r1, [r4, #0]
 8012636:	f000 faa9 	bl	8012b8c <memchr>
 801263a:	b138      	cbz	r0, 801264c <_svfiprintf_r+0x150>
 801263c:	2240      	movs	r2, #64	@ 0x40
 801263e:	9b04      	ldr	r3, [sp, #16]
 8012640:	eba0 000a 	sub.w	r0, r0, sl
 8012644:	4082      	lsls	r2, r0
 8012646:	4313      	orrs	r3, r2
 8012648:	3401      	adds	r4, #1
 801264a:	9304      	str	r3, [sp, #16]
 801264c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012650:	2206      	movs	r2, #6
 8012652:	4825      	ldr	r0, [pc, #148]	@ (80126e8 <_svfiprintf_r+0x1ec>)
 8012654:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012658:	f000 fa98 	bl	8012b8c <memchr>
 801265c:	2800      	cmp	r0, #0
 801265e:	d036      	beq.n	80126ce <_svfiprintf_r+0x1d2>
 8012660:	4b22      	ldr	r3, [pc, #136]	@ (80126ec <_svfiprintf_r+0x1f0>)
 8012662:	bb1b      	cbnz	r3, 80126ac <_svfiprintf_r+0x1b0>
 8012664:	9b03      	ldr	r3, [sp, #12]
 8012666:	3307      	adds	r3, #7
 8012668:	f023 0307 	bic.w	r3, r3, #7
 801266c:	3308      	adds	r3, #8
 801266e:	9303      	str	r3, [sp, #12]
 8012670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012672:	4433      	add	r3, r6
 8012674:	9309      	str	r3, [sp, #36]	@ 0x24
 8012676:	e76a      	b.n	801254e <_svfiprintf_r+0x52>
 8012678:	460c      	mov	r4, r1
 801267a:	2001      	movs	r0, #1
 801267c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012680:	e7a8      	b.n	80125d4 <_svfiprintf_r+0xd8>
 8012682:	2300      	movs	r3, #0
 8012684:	f04f 0c0a 	mov.w	ip, #10
 8012688:	4619      	mov	r1, r3
 801268a:	3401      	adds	r4, #1
 801268c:	9305      	str	r3, [sp, #20]
 801268e:	4620      	mov	r0, r4
 8012690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012694:	3a30      	subs	r2, #48	@ 0x30
 8012696:	2a09      	cmp	r2, #9
 8012698:	d903      	bls.n	80126a2 <_svfiprintf_r+0x1a6>
 801269a:	2b00      	cmp	r3, #0
 801269c:	d0c6      	beq.n	801262c <_svfiprintf_r+0x130>
 801269e:	9105      	str	r1, [sp, #20]
 80126a0:	e7c4      	b.n	801262c <_svfiprintf_r+0x130>
 80126a2:	4604      	mov	r4, r0
 80126a4:	2301      	movs	r3, #1
 80126a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80126aa:	e7f0      	b.n	801268e <_svfiprintf_r+0x192>
 80126ac:	ab03      	add	r3, sp, #12
 80126ae:	9300      	str	r3, [sp, #0]
 80126b0:	462a      	mov	r2, r5
 80126b2:	4638      	mov	r0, r7
 80126b4:	4b0e      	ldr	r3, [pc, #56]	@ (80126f0 <_svfiprintf_r+0x1f4>)
 80126b6:	a904      	add	r1, sp, #16
 80126b8:	f3af 8000 	nop.w
 80126bc:	1c42      	adds	r2, r0, #1
 80126be:	4606      	mov	r6, r0
 80126c0:	d1d6      	bne.n	8012670 <_svfiprintf_r+0x174>
 80126c2:	89ab      	ldrh	r3, [r5, #12]
 80126c4:	065b      	lsls	r3, r3, #25
 80126c6:	f53f af2d 	bmi.w	8012524 <_svfiprintf_r+0x28>
 80126ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126cc:	e72c      	b.n	8012528 <_svfiprintf_r+0x2c>
 80126ce:	ab03      	add	r3, sp, #12
 80126d0:	9300      	str	r3, [sp, #0]
 80126d2:	462a      	mov	r2, r5
 80126d4:	4638      	mov	r0, r7
 80126d6:	4b06      	ldr	r3, [pc, #24]	@ (80126f0 <_svfiprintf_r+0x1f4>)
 80126d8:	a904      	add	r1, sp, #16
 80126da:	f000 f87d 	bl	80127d8 <_printf_i>
 80126de:	e7ed      	b.n	80126bc <_svfiprintf_r+0x1c0>
 80126e0:	08013ffe 	.word	0x08013ffe
 80126e4:	08014004 	.word	0x08014004
 80126e8:	08014008 	.word	0x08014008
 80126ec:	00000000 	.word	0x00000000
 80126f0:	08012445 	.word	0x08012445

080126f4 <_printf_common>:
 80126f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126f8:	4616      	mov	r6, r2
 80126fa:	4698      	mov	r8, r3
 80126fc:	688a      	ldr	r2, [r1, #8]
 80126fe:	690b      	ldr	r3, [r1, #16]
 8012700:	4607      	mov	r7, r0
 8012702:	4293      	cmp	r3, r2
 8012704:	bfb8      	it	lt
 8012706:	4613      	movlt	r3, r2
 8012708:	6033      	str	r3, [r6, #0]
 801270a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801270e:	460c      	mov	r4, r1
 8012710:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012714:	b10a      	cbz	r2, 801271a <_printf_common+0x26>
 8012716:	3301      	adds	r3, #1
 8012718:	6033      	str	r3, [r6, #0]
 801271a:	6823      	ldr	r3, [r4, #0]
 801271c:	0699      	lsls	r1, r3, #26
 801271e:	bf42      	ittt	mi
 8012720:	6833      	ldrmi	r3, [r6, #0]
 8012722:	3302      	addmi	r3, #2
 8012724:	6033      	strmi	r3, [r6, #0]
 8012726:	6825      	ldr	r5, [r4, #0]
 8012728:	f015 0506 	ands.w	r5, r5, #6
 801272c:	d106      	bne.n	801273c <_printf_common+0x48>
 801272e:	f104 0a19 	add.w	sl, r4, #25
 8012732:	68e3      	ldr	r3, [r4, #12]
 8012734:	6832      	ldr	r2, [r6, #0]
 8012736:	1a9b      	subs	r3, r3, r2
 8012738:	42ab      	cmp	r3, r5
 801273a:	dc2b      	bgt.n	8012794 <_printf_common+0xa0>
 801273c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012740:	6822      	ldr	r2, [r4, #0]
 8012742:	3b00      	subs	r3, #0
 8012744:	bf18      	it	ne
 8012746:	2301      	movne	r3, #1
 8012748:	0692      	lsls	r2, r2, #26
 801274a:	d430      	bmi.n	80127ae <_printf_common+0xba>
 801274c:	4641      	mov	r1, r8
 801274e:	4638      	mov	r0, r7
 8012750:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012754:	47c8      	blx	r9
 8012756:	3001      	adds	r0, #1
 8012758:	d023      	beq.n	80127a2 <_printf_common+0xae>
 801275a:	6823      	ldr	r3, [r4, #0]
 801275c:	6922      	ldr	r2, [r4, #16]
 801275e:	f003 0306 	and.w	r3, r3, #6
 8012762:	2b04      	cmp	r3, #4
 8012764:	bf14      	ite	ne
 8012766:	2500      	movne	r5, #0
 8012768:	6833      	ldreq	r3, [r6, #0]
 801276a:	f04f 0600 	mov.w	r6, #0
 801276e:	bf08      	it	eq
 8012770:	68e5      	ldreq	r5, [r4, #12]
 8012772:	f104 041a 	add.w	r4, r4, #26
 8012776:	bf08      	it	eq
 8012778:	1aed      	subeq	r5, r5, r3
 801277a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801277e:	bf08      	it	eq
 8012780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012784:	4293      	cmp	r3, r2
 8012786:	bfc4      	itt	gt
 8012788:	1a9b      	subgt	r3, r3, r2
 801278a:	18ed      	addgt	r5, r5, r3
 801278c:	42b5      	cmp	r5, r6
 801278e:	d11a      	bne.n	80127c6 <_printf_common+0xd2>
 8012790:	2000      	movs	r0, #0
 8012792:	e008      	b.n	80127a6 <_printf_common+0xb2>
 8012794:	2301      	movs	r3, #1
 8012796:	4652      	mov	r2, sl
 8012798:	4641      	mov	r1, r8
 801279a:	4638      	mov	r0, r7
 801279c:	47c8      	blx	r9
 801279e:	3001      	adds	r0, #1
 80127a0:	d103      	bne.n	80127aa <_printf_common+0xb6>
 80127a2:	f04f 30ff 	mov.w	r0, #4294967295
 80127a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127aa:	3501      	adds	r5, #1
 80127ac:	e7c1      	b.n	8012732 <_printf_common+0x3e>
 80127ae:	2030      	movs	r0, #48	@ 0x30
 80127b0:	18e1      	adds	r1, r4, r3
 80127b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80127b6:	1c5a      	adds	r2, r3, #1
 80127b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80127bc:	4422      	add	r2, r4
 80127be:	3302      	adds	r3, #2
 80127c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80127c4:	e7c2      	b.n	801274c <_printf_common+0x58>
 80127c6:	2301      	movs	r3, #1
 80127c8:	4622      	mov	r2, r4
 80127ca:	4641      	mov	r1, r8
 80127cc:	4638      	mov	r0, r7
 80127ce:	47c8      	blx	r9
 80127d0:	3001      	adds	r0, #1
 80127d2:	d0e6      	beq.n	80127a2 <_printf_common+0xae>
 80127d4:	3601      	adds	r6, #1
 80127d6:	e7d9      	b.n	801278c <_printf_common+0x98>

080127d8 <_printf_i>:
 80127d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80127dc:	7e0f      	ldrb	r7, [r1, #24]
 80127de:	4691      	mov	r9, r2
 80127e0:	2f78      	cmp	r7, #120	@ 0x78
 80127e2:	4680      	mov	r8, r0
 80127e4:	460c      	mov	r4, r1
 80127e6:	469a      	mov	sl, r3
 80127e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80127ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80127ee:	d807      	bhi.n	8012800 <_printf_i+0x28>
 80127f0:	2f62      	cmp	r7, #98	@ 0x62
 80127f2:	d80a      	bhi.n	801280a <_printf_i+0x32>
 80127f4:	2f00      	cmp	r7, #0
 80127f6:	f000 80d3 	beq.w	80129a0 <_printf_i+0x1c8>
 80127fa:	2f58      	cmp	r7, #88	@ 0x58
 80127fc:	f000 80ba 	beq.w	8012974 <_printf_i+0x19c>
 8012800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012808:	e03a      	b.n	8012880 <_printf_i+0xa8>
 801280a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801280e:	2b15      	cmp	r3, #21
 8012810:	d8f6      	bhi.n	8012800 <_printf_i+0x28>
 8012812:	a101      	add	r1, pc, #4	@ (adr r1, 8012818 <_printf_i+0x40>)
 8012814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012818:	08012871 	.word	0x08012871
 801281c:	08012885 	.word	0x08012885
 8012820:	08012801 	.word	0x08012801
 8012824:	08012801 	.word	0x08012801
 8012828:	08012801 	.word	0x08012801
 801282c:	08012801 	.word	0x08012801
 8012830:	08012885 	.word	0x08012885
 8012834:	08012801 	.word	0x08012801
 8012838:	08012801 	.word	0x08012801
 801283c:	08012801 	.word	0x08012801
 8012840:	08012801 	.word	0x08012801
 8012844:	08012987 	.word	0x08012987
 8012848:	080128af 	.word	0x080128af
 801284c:	08012941 	.word	0x08012941
 8012850:	08012801 	.word	0x08012801
 8012854:	08012801 	.word	0x08012801
 8012858:	080129a9 	.word	0x080129a9
 801285c:	08012801 	.word	0x08012801
 8012860:	080128af 	.word	0x080128af
 8012864:	08012801 	.word	0x08012801
 8012868:	08012801 	.word	0x08012801
 801286c:	08012949 	.word	0x08012949
 8012870:	6833      	ldr	r3, [r6, #0]
 8012872:	1d1a      	adds	r2, r3, #4
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	6032      	str	r2, [r6, #0]
 8012878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801287c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012880:	2301      	movs	r3, #1
 8012882:	e09e      	b.n	80129c2 <_printf_i+0x1ea>
 8012884:	6833      	ldr	r3, [r6, #0]
 8012886:	6820      	ldr	r0, [r4, #0]
 8012888:	1d19      	adds	r1, r3, #4
 801288a:	6031      	str	r1, [r6, #0]
 801288c:	0606      	lsls	r6, r0, #24
 801288e:	d501      	bpl.n	8012894 <_printf_i+0xbc>
 8012890:	681d      	ldr	r5, [r3, #0]
 8012892:	e003      	b.n	801289c <_printf_i+0xc4>
 8012894:	0645      	lsls	r5, r0, #25
 8012896:	d5fb      	bpl.n	8012890 <_printf_i+0xb8>
 8012898:	f9b3 5000 	ldrsh.w	r5, [r3]
 801289c:	2d00      	cmp	r5, #0
 801289e:	da03      	bge.n	80128a8 <_printf_i+0xd0>
 80128a0:	232d      	movs	r3, #45	@ 0x2d
 80128a2:	426d      	negs	r5, r5
 80128a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80128a8:	230a      	movs	r3, #10
 80128aa:	4859      	ldr	r0, [pc, #356]	@ (8012a10 <_printf_i+0x238>)
 80128ac:	e011      	b.n	80128d2 <_printf_i+0xfa>
 80128ae:	6821      	ldr	r1, [r4, #0]
 80128b0:	6833      	ldr	r3, [r6, #0]
 80128b2:	0608      	lsls	r0, r1, #24
 80128b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80128b8:	d402      	bmi.n	80128c0 <_printf_i+0xe8>
 80128ba:	0649      	lsls	r1, r1, #25
 80128bc:	bf48      	it	mi
 80128be:	b2ad      	uxthmi	r5, r5
 80128c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80128c2:	6033      	str	r3, [r6, #0]
 80128c4:	bf14      	ite	ne
 80128c6:	230a      	movne	r3, #10
 80128c8:	2308      	moveq	r3, #8
 80128ca:	4851      	ldr	r0, [pc, #324]	@ (8012a10 <_printf_i+0x238>)
 80128cc:	2100      	movs	r1, #0
 80128ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80128d2:	6866      	ldr	r6, [r4, #4]
 80128d4:	2e00      	cmp	r6, #0
 80128d6:	bfa8      	it	ge
 80128d8:	6821      	ldrge	r1, [r4, #0]
 80128da:	60a6      	str	r6, [r4, #8]
 80128dc:	bfa4      	itt	ge
 80128de:	f021 0104 	bicge.w	r1, r1, #4
 80128e2:	6021      	strge	r1, [r4, #0]
 80128e4:	b90d      	cbnz	r5, 80128ea <_printf_i+0x112>
 80128e6:	2e00      	cmp	r6, #0
 80128e8:	d04b      	beq.n	8012982 <_printf_i+0x1aa>
 80128ea:	4616      	mov	r6, r2
 80128ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80128f0:	fb03 5711 	mls	r7, r3, r1, r5
 80128f4:	5dc7      	ldrb	r7, [r0, r7]
 80128f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80128fa:	462f      	mov	r7, r5
 80128fc:	42bb      	cmp	r3, r7
 80128fe:	460d      	mov	r5, r1
 8012900:	d9f4      	bls.n	80128ec <_printf_i+0x114>
 8012902:	2b08      	cmp	r3, #8
 8012904:	d10b      	bne.n	801291e <_printf_i+0x146>
 8012906:	6823      	ldr	r3, [r4, #0]
 8012908:	07df      	lsls	r7, r3, #31
 801290a:	d508      	bpl.n	801291e <_printf_i+0x146>
 801290c:	6923      	ldr	r3, [r4, #16]
 801290e:	6861      	ldr	r1, [r4, #4]
 8012910:	4299      	cmp	r1, r3
 8012912:	bfde      	ittt	le
 8012914:	2330      	movle	r3, #48	@ 0x30
 8012916:	f806 3c01 	strble.w	r3, [r6, #-1]
 801291a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801291e:	1b92      	subs	r2, r2, r6
 8012920:	6122      	str	r2, [r4, #16]
 8012922:	464b      	mov	r3, r9
 8012924:	4621      	mov	r1, r4
 8012926:	4640      	mov	r0, r8
 8012928:	f8cd a000 	str.w	sl, [sp]
 801292c:	aa03      	add	r2, sp, #12
 801292e:	f7ff fee1 	bl	80126f4 <_printf_common>
 8012932:	3001      	adds	r0, #1
 8012934:	d14a      	bne.n	80129cc <_printf_i+0x1f4>
 8012936:	f04f 30ff 	mov.w	r0, #4294967295
 801293a:	b004      	add	sp, #16
 801293c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012940:	6823      	ldr	r3, [r4, #0]
 8012942:	f043 0320 	orr.w	r3, r3, #32
 8012946:	6023      	str	r3, [r4, #0]
 8012948:	2778      	movs	r7, #120	@ 0x78
 801294a:	4832      	ldr	r0, [pc, #200]	@ (8012a14 <_printf_i+0x23c>)
 801294c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012950:	6823      	ldr	r3, [r4, #0]
 8012952:	6831      	ldr	r1, [r6, #0]
 8012954:	061f      	lsls	r7, r3, #24
 8012956:	f851 5b04 	ldr.w	r5, [r1], #4
 801295a:	d402      	bmi.n	8012962 <_printf_i+0x18a>
 801295c:	065f      	lsls	r7, r3, #25
 801295e:	bf48      	it	mi
 8012960:	b2ad      	uxthmi	r5, r5
 8012962:	6031      	str	r1, [r6, #0]
 8012964:	07d9      	lsls	r1, r3, #31
 8012966:	bf44      	itt	mi
 8012968:	f043 0320 	orrmi.w	r3, r3, #32
 801296c:	6023      	strmi	r3, [r4, #0]
 801296e:	b11d      	cbz	r5, 8012978 <_printf_i+0x1a0>
 8012970:	2310      	movs	r3, #16
 8012972:	e7ab      	b.n	80128cc <_printf_i+0xf4>
 8012974:	4826      	ldr	r0, [pc, #152]	@ (8012a10 <_printf_i+0x238>)
 8012976:	e7e9      	b.n	801294c <_printf_i+0x174>
 8012978:	6823      	ldr	r3, [r4, #0]
 801297a:	f023 0320 	bic.w	r3, r3, #32
 801297e:	6023      	str	r3, [r4, #0]
 8012980:	e7f6      	b.n	8012970 <_printf_i+0x198>
 8012982:	4616      	mov	r6, r2
 8012984:	e7bd      	b.n	8012902 <_printf_i+0x12a>
 8012986:	6833      	ldr	r3, [r6, #0]
 8012988:	6825      	ldr	r5, [r4, #0]
 801298a:	1d18      	adds	r0, r3, #4
 801298c:	6961      	ldr	r1, [r4, #20]
 801298e:	6030      	str	r0, [r6, #0]
 8012990:	062e      	lsls	r6, r5, #24
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	d501      	bpl.n	801299a <_printf_i+0x1c2>
 8012996:	6019      	str	r1, [r3, #0]
 8012998:	e002      	b.n	80129a0 <_printf_i+0x1c8>
 801299a:	0668      	lsls	r0, r5, #25
 801299c:	d5fb      	bpl.n	8012996 <_printf_i+0x1be>
 801299e:	8019      	strh	r1, [r3, #0]
 80129a0:	2300      	movs	r3, #0
 80129a2:	4616      	mov	r6, r2
 80129a4:	6123      	str	r3, [r4, #16]
 80129a6:	e7bc      	b.n	8012922 <_printf_i+0x14a>
 80129a8:	6833      	ldr	r3, [r6, #0]
 80129aa:	2100      	movs	r1, #0
 80129ac:	1d1a      	adds	r2, r3, #4
 80129ae:	6032      	str	r2, [r6, #0]
 80129b0:	681e      	ldr	r6, [r3, #0]
 80129b2:	6862      	ldr	r2, [r4, #4]
 80129b4:	4630      	mov	r0, r6
 80129b6:	f000 f8e9 	bl	8012b8c <memchr>
 80129ba:	b108      	cbz	r0, 80129c0 <_printf_i+0x1e8>
 80129bc:	1b80      	subs	r0, r0, r6
 80129be:	6060      	str	r0, [r4, #4]
 80129c0:	6863      	ldr	r3, [r4, #4]
 80129c2:	6123      	str	r3, [r4, #16]
 80129c4:	2300      	movs	r3, #0
 80129c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80129ca:	e7aa      	b.n	8012922 <_printf_i+0x14a>
 80129cc:	4632      	mov	r2, r6
 80129ce:	4649      	mov	r1, r9
 80129d0:	4640      	mov	r0, r8
 80129d2:	6923      	ldr	r3, [r4, #16]
 80129d4:	47d0      	blx	sl
 80129d6:	3001      	adds	r0, #1
 80129d8:	d0ad      	beq.n	8012936 <_printf_i+0x15e>
 80129da:	6823      	ldr	r3, [r4, #0]
 80129dc:	079b      	lsls	r3, r3, #30
 80129de:	d413      	bmi.n	8012a08 <_printf_i+0x230>
 80129e0:	68e0      	ldr	r0, [r4, #12]
 80129e2:	9b03      	ldr	r3, [sp, #12]
 80129e4:	4298      	cmp	r0, r3
 80129e6:	bfb8      	it	lt
 80129e8:	4618      	movlt	r0, r3
 80129ea:	e7a6      	b.n	801293a <_printf_i+0x162>
 80129ec:	2301      	movs	r3, #1
 80129ee:	4632      	mov	r2, r6
 80129f0:	4649      	mov	r1, r9
 80129f2:	4640      	mov	r0, r8
 80129f4:	47d0      	blx	sl
 80129f6:	3001      	adds	r0, #1
 80129f8:	d09d      	beq.n	8012936 <_printf_i+0x15e>
 80129fa:	3501      	adds	r5, #1
 80129fc:	68e3      	ldr	r3, [r4, #12]
 80129fe:	9903      	ldr	r1, [sp, #12]
 8012a00:	1a5b      	subs	r3, r3, r1
 8012a02:	42ab      	cmp	r3, r5
 8012a04:	dcf2      	bgt.n	80129ec <_printf_i+0x214>
 8012a06:	e7eb      	b.n	80129e0 <_printf_i+0x208>
 8012a08:	2500      	movs	r5, #0
 8012a0a:	f104 0619 	add.w	r6, r4, #25
 8012a0e:	e7f5      	b.n	80129fc <_printf_i+0x224>
 8012a10:	0801400f 	.word	0x0801400f
 8012a14:	08014020 	.word	0x08014020

08012a18 <__sflush_r>:
 8012a18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a1e:	0716      	lsls	r6, r2, #28
 8012a20:	4605      	mov	r5, r0
 8012a22:	460c      	mov	r4, r1
 8012a24:	d454      	bmi.n	8012ad0 <__sflush_r+0xb8>
 8012a26:	684b      	ldr	r3, [r1, #4]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	dc02      	bgt.n	8012a32 <__sflush_r+0x1a>
 8012a2c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	dd48      	ble.n	8012ac4 <__sflush_r+0xac>
 8012a32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012a34:	2e00      	cmp	r6, #0
 8012a36:	d045      	beq.n	8012ac4 <__sflush_r+0xac>
 8012a38:	2300      	movs	r3, #0
 8012a3a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012a3e:	682f      	ldr	r7, [r5, #0]
 8012a40:	6a21      	ldr	r1, [r4, #32]
 8012a42:	602b      	str	r3, [r5, #0]
 8012a44:	d030      	beq.n	8012aa8 <__sflush_r+0x90>
 8012a46:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012a48:	89a3      	ldrh	r3, [r4, #12]
 8012a4a:	0759      	lsls	r1, r3, #29
 8012a4c:	d505      	bpl.n	8012a5a <__sflush_r+0x42>
 8012a4e:	6863      	ldr	r3, [r4, #4]
 8012a50:	1ad2      	subs	r2, r2, r3
 8012a52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012a54:	b10b      	cbz	r3, 8012a5a <__sflush_r+0x42>
 8012a56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012a58:	1ad2      	subs	r2, r2, r3
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012a60:	6a21      	ldr	r1, [r4, #32]
 8012a62:	47b0      	blx	r6
 8012a64:	1c43      	adds	r3, r0, #1
 8012a66:	89a3      	ldrh	r3, [r4, #12]
 8012a68:	d106      	bne.n	8012a78 <__sflush_r+0x60>
 8012a6a:	6829      	ldr	r1, [r5, #0]
 8012a6c:	291d      	cmp	r1, #29
 8012a6e:	d82b      	bhi.n	8012ac8 <__sflush_r+0xb0>
 8012a70:	4a28      	ldr	r2, [pc, #160]	@ (8012b14 <__sflush_r+0xfc>)
 8012a72:	410a      	asrs	r2, r1
 8012a74:	07d6      	lsls	r6, r2, #31
 8012a76:	d427      	bmi.n	8012ac8 <__sflush_r+0xb0>
 8012a78:	2200      	movs	r2, #0
 8012a7a:	6062      	str	r2, [r4, #4]
 8012a7c:	6922      	ldr	r2, [r4, #16]
 8012a7e:	04d9      	lsls	r1, r3, #19
 8012a80:	6022      	str	r2, [r4, #0]
 8012a82:	d504      	bpl.n	8012a8e <__sflush_r+0x76>
 8012a84:	1c42      	adds	r2, r0, #1
 8012a86:	d101      	bne.n	8012a8c <__sflush_r+0x74>
 8012a88:	682b      	ldr	r3, [r5, #0]
 8012a8a:	b903      	cbnz	r3, 8012a8e <__sflush_r+0x76>
 8012a8c:	6560      	str	r0, [r4, #84]	@ 0x54
 8012a8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a90:	602f      	str	r7, [r5, #0]
 8012a92:	b1b9      	cbz	r1, 8012ac4 <__sflush_r+0xac>
 8012a94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a98:	4299      	cmp	r1, r3
 8012a9a:	d002      	beq.n	8012aa2 <__sflush_r+0x8a>
 8012a9c:	4628      	mov	r0, r5
 8012a9e:	f7ff fc81 	bl	80123a4 <_free_r>
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	6363      	str	r3, [r4, #52]	@ 0x34
 8012aa6:	e00d      	b.n	8012ac4 <__sflush_r+0xac>
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	4628      	mov	r0, r5
 8012aac:	47b0      	blx	r6
 8012aae:	4602      	mov	r2, r0
 8012ab0:	1c50      	adds	r0, r2, #1
 8012ab2:	d1c9      	bne.n	8012a48 <__sflush_r+0x30>
 8012ab4:	682b      	ldr	r3, [r5, #0]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d0c6      	beq.n	8012a48 <__sflush_r+0x30>
 8012aba:	2b1d      	cmp	r3, #29
 8012abc:	d001      	beq.n	8012ac2 <__sflush_r+0xaa>
 8012abe:	2b16      	cmp	r3, #22
 8012ac0:	d11d      	bne.n	8012afe <__sflush_r+0xe6>
 8012ac2:	602f      	str	r7, [r5, #0]
 8012ac4:	2000      	movs	r0, #0
 8012ac6:	e021      	b.n	8012b0c <__sflush_r+0xf4>
 8012ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012acc:	b21b      	sxth	r3, r3
 8012ace:	e01a      	b.n	8012b06 <__sflush_r+0xee>
 8012ad0:	690f      	ldr	r7, [r1, #16]
 8012ad2:	2f00      	cmp	r7, #0
 8012ad4:	d0f6      	beq.n	8012ac4 <__sflush_r+0xac>
 8012ad6:	0793      	lsls	r3, r2, #30
 8012ad8:	bf18      	it	ne
 8012ada:	2300      	movne	r3, #0
 8012adc:	680e      	ldr	r6, [r1, #0]
 8012ade:	bf08      	it	eq
 8012ae0:	694b      	ldreq	r3, [r1, #20]
 8012ae2:	1bf6      	subs	r6, r6, r7
 8012ae4:	600f      	str	r7, [r1, #0]
 8012ae6:	608b      	str	r3, [r1, #8]
 8012ae8:	2e00      	cmp	r6, #0
 8012aea:	ddeb      	ble.n	8012ac4 <__sflush_r+0xac>
 8012aec:	4633      	mov	r3, r6
 8012aee:	463a      	mov	r2, r7
 8012af0:	4628      	mov	r0, r5
 8012af2:	6a21      	ldr	r1, [r4, #32]
 8012af4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8012af8:	47e0      	blx	ip
 8012afa:	2800      	cmp	r0, #0
 8012afc:	dc07      	bgt.n	8012b0e <__sflush_r+0xf6>
 8012afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b06:	f04f 30ff 	mov.w	r0, #4294967295
 8012b0a:	81a3      	strh	r3, [r4, #12]
 8012b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b0e:	4407      	add	r7, r0
 8012b10:	1a36      	subs	r6, r6, r0
 8012b12:	e7e9      	b.n	8012ae8 <__sflush_r+0xd0>
 8012b14:	dfbffffe 	.word	0xdfbffffe

08012b18 <_fflush_r>:
 8012b18:	b538      	push	{r3, r4, r5, lr}
 8012b1a:	690b      	ldr	r3, [r1, #16]
 8012b1c:	4605      	mov	r5, r0
 8012b1e:	460c      	mov	r4, r1
 8012b20:	b913      	cbnz	r3, 8012b28 <_fflush_r+0x10>
 8012b22:	2500      	movs	r5, #0
 8012b24:	4628      	mov	r0, r5
 8012b26:	bd38      	pop	{r3, r4, r5, pc}
 8012b28:	b118      	cbz	r0, 8012b32 <_fflush_r+0x1a>
 8012b2a:	6a03      	ldr	r3, [r0, #32]
 8012b2c:	b90b      	cbnz	r3, 8012b32 <_fflush_r+0x1a>
 8012b2e:	f7ff fa35 	bl	8011f9c <__sinit>
 8012b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d0f3      	beq.n	8012b22 <_fflush_r+0xa>
 8012b3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012b3c:	07d0      	lsls	r0, r2, #31
 8012b3e:	d404      	bmi.n	8012b4a <_fflush_r+0x32>
 8012b40:	0599      	lsls	r1, r3, #22
 8012b42:	d402      	bmi.n	8012b4a <_fflush_r+0x32>
 8012b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b46:	f7ff fbf6 	bl	8012336 <__retarget_lock_acquire_recursive>
 8012b4a:	4628      	mov	r0, r5
 8012b4c:	4621      	mov	r1, r4
 8012b4e:	f7ff ff63 	bl	8012a18 <__sflush_r>
 8012b52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b54:	4605      	mov	r5, r0
 8012b56:	07da      	lsls	r2, r3, #31
 8012b58:	d4e4      	bmi.n	8012b24 <_fflush_r+0xc>
 8012b5a:	89a3      	ldrh	r3, [r4, #12]
 8012b5c:	059b      	lsls	r3, r3, #22
 8012b5e:	d4e1      	bmi.n	8012b24 <_fflush_r+0xc>
 8012b60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b62:	f7ff fbe9 	bl	8012338 <__retarget_lock_release_recursive>
 8012b66:	e7dd      	b.n	8012b24 <_fflush_r+0xc>

08012b68 <fiprintf>:
 8012b68:	b40e      	push	{r1, r2, r3}
 8012b6a:	b503      	push	{r0, r1, lr}
 8012b6c:	4601      	mov	r1, r0
 8012b6e:	ab03      	add	r3, sp, #12
 8012b70:	4805      	ldr	r0, [pc, #20]	@ (8012b88 <fiprintf+0x20>)
 8012b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b76:	6800      	ldr	r0, [r0, #0]
 8012b78:	9301      	str	r3, [sp, #4]
 8012b7a:	f000 f843 	bl	8012c04 <_vfiprintf_r>
 8012b7e:	b002      	add	sp, #8
 8012b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b84:	b003      	add	sp, #12
 8012b86:	4770      	bx	lr
 8012b88:	2000003c 	.word	0x2000003c

08012b8c <memchr>:
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	b510      	push	{r4, lr}
 8012b90:	b2c9      	uxtb	r1, r1
 8012b92:	4402      	add	r2, r0
 8012b94:	4293      	cmp	r3, r2
 8012b96:	4618      	mov	r0, r3
 8012b98:	d101      	bne.n	8012b9e <memchr+0x12>
 8012b9a:	2000      	movs	r0, #0
 8012b9c:	e003      	b.n	8012ba6 <memchr+0x1a>
 8012b9e:	7804      	ldrb	r4, [r0, #0]
 8012ba0:	3301      	adds	r3, #1
 8012ba2:	428c      	cmp	r4, r1
 8012ba4:	d1f6      	bne.n	8012b94 <memchr+0x8>
 8012ba6:	bd10      	pop	{r4, pc}

08012ba8 <abort>:
 8012ba8:	2006      	movs	r0, #6
 8012baa:	b508      	push	{r3, lr}
 8012bac:	f000 f9fe 	bl	8012fac <raise>
 8012bb0:	2001      	movs	r0, #1
 8012bb2:	f7f9 fa34 	bl	800c01e <_exit>

08012bb6 <__sfputc_r>:
 8012bb6:	6893      	ldr	r3, [r2, #8]
 8012bb8:	b410      	push	{r4}
 8012bba:	3b01      	subs	r3, #1
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	6093      	str	r3, [r2, #8]
 8012bc0:	da07      	bge.n	8012bd2 <__sfputc_r+0x1c>
 8012bc2:	6994      	ldr	r4, [r2, #24]
 8012bc4:	42a3      	cmp	r3, r4
 8012bc6:	db01      	blt.n	8012bcc <__sfputc_r+0x16>
 8012bc8:	290a      	cmp	r1, #10
 8012bca:	d102      	bne.n	8012bd2 <__sfputc_r+0x1c>
 8012bcc:	bc10      	pop	{r4}
 8012bce:	f000 b931 	b.w	8012e34 <__swbuf_r>
 8012bd2:	6813      	ldr	r3, [r2, #0]
 8012bd4:	1c58      	adds	r0, r3, #1
 8012bd6:	6010      	str	r0, [r2, #0]
 8012bd8:	7019      	strb	r1, [r3, #0]
 8012bda:	4608      	mov	r0, r1
 8012bdc:	bc10      	pop	{r4}
 8012bde:	4770      	bx	lr

08012be0 <__sfputs_r>:
 8012be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012be2:	4606      	mov	r6, r0
 8012be4:	460f      	mov	r7, r1
 8012be6:	4614      	mov	r4, r2
 8012be8:	18d5      	adds	r5, r2, r3
 8012bea:	42ac      	cmp	r4, r5
 8012bec:	d101      	bne.n	8012bf2 <__sfputs_r+0x12>
 8012bee:	2000      	movs	r0, #0
 8012bf0:	e007      	b.n	8012c02 <__sfputs_r+0x22>
 8012bf2:	463a      	mov	r2, r7
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bfa:	f7ff ffdc 	bl	8012bb6 <__sfputc_r>
 8012bfe:	1c43      	adds	r3, r0, #1
 8012c00:	d1f3      	bne.n	8012bea <__sfputs_r+0xa>
 8012c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c04 <_vfiprintf_r>:
 8012c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c08:	460d      	mov	r5, r1
 8012c0a:	4614      	mov	r4, r2
 8012c0c:	4698      	mov	r8, r3
 8012c0e:	4606      	mov	r6, r0
 8012c10:	b09d      	sub	sp, #116	@ 0x74
 8012c12:	b118      	cbz	r0, 8012c1c <_vfiprintf_r+0x18>
 8012c14:	6a03      	ldr	r3, [r0, #32]
 8012c16:	b90b      	cbnz	r3, 8012c1c <_vfiprintf_r+0x18>
 8012c18:	f7ff f9c0 	bl	8011f9c <__sinit>
 8012c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c1e:	07d9      	lsls	r1, r3, #31
 8012c20:	d405      	bmi.n	8012c2e <_vfiprintf_r+0x2a>
 8012c22:	89ab      	ldrh	r3, [r5, #12]
 8012c24:	059a      	lsls	r2, r3, #22
 8012c26:	d402      	bmi.n	8012c2e <_vfiprintf_r+0x2a>
 8012c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c2a:	f7ff fb84 	bl	8012336 <__retarget_lock_acquire_recursive>
 8012c2e:	89ab      	ldrh	r3, [r5, #12]
 8012c30:	071b      	lsls	r3, r3, #28
 8012c32:	d501      	bpl.n	8012c38 <_vfiprintf_r+0x34>
 8012c34:	692b      	ldr	r3, [r5, #16]
 8012c36:	b99b      	cbnz	r3, 8012c60 <_vfiprintf_r+0x5c>
 8012c38:	4629      	mov	r1, r5
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	f000 f938 	bl	8012eb0 <__swsetup_r>
 8012c40:	b170      	cbz	r0, 8012c60 <_vfiprintf_r+0x5c>
 8012c42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c44:	07dc      	lsls	r4, r3, #31
 8012c46:	d504      	bpl.n	8012c52 <_vfiprintf_r+0x4e>
 8012c48:	f04f 30ff 	mov.w	r0, #4294967295
 8012c4c:	b01d      	add	sp, #116	@ 0x74
 8012c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c52:	89ab      	ldrh	r3, [r5, #12]
 8012c54:	0598      	lsls	r0, r3, #22
 8012c56:	d4f7      	bmi.n	8012c48 <_vfiprintf_r+0x44>
 8012c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c5a:	f7ff fb6d 	bl	8012338 <__retarget_lock_release_recursive>
 8012c5e:	e7f3      	b.n	8012c48 <_vfiprintf_r+0x44>
 8012c60:	2300      	movs	r3, #0
 8012c62:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c64:	2320      	movs	r3, #32
 8012c66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c6a:	2330      	movs	r3, #48	@ 0x30
 8012c6c:	f04f 0901 	mov.w	r9, #1
 8012c70:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c74:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8012e20 <_vfiprintf_r+0x21c>
 8012c78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c7c:	4623      	mov	r3, r4
 8012c7e:	469a      	mov	sl, r3
 8012c80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c84:	b10a      	cbz	r2, 8012c8a <_vfiprintf_r+0x86>
 8012c86:	2a25      	cmp	r2, #37	@ 0x25
 8012c88:	d1f9      	bne.n	8012c7e <_vfiprintf_r+0x7a>
 8012c8a:	ebba 0b04 	subs.w	fp, sl, r4
 8012c8e:	d00b      	beq.n	8012ca8 <_vfiprintf_r+0xa4>
 8012c90:	465b      	mov	r3, fp
 8012c92:	4622      	mov	r2, r4
 8012c94:	4629      	mov	r1, r5
 8012c96:	4630      	mov	r0, r6
 8012c98:	f7ff ffa2 	bl	8012be0 <__sfputs_r>
 8012c9c:	3001      	adds	r0, #1
 8012c9e:	f000 80a7 	beq.w	8012df0 <_vfiprintf_r+0x1ec>
 8012ca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ca4:	445a      	add	r2, fp
 8012ca6:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	f000 809f 	beq.w	8012df0 <_vfiprintf_r+0x1ec>
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8012cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cbc:	f10a 0a01 	add.w	sl, sl, #1
 8012cc0:	9304      	str	r3, [sp, #16]
 8012cc2:	9307      	str	r3, [sp, #28]
 8012cc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012cc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8012cca:	4654      	mov	r4, sl
 8012ccc:	2205      	movs	r2, #5
 8012cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cd2:	4853      	ldr	r0, [pc, #332]	@ (8012e20 <_vfiprintf_r+0x21c>)
 8012cd4:	f7ff ff5a 	bl	8012b8c <memchr>
 8012cd8:	9a04      	ldr	r2, [sp, #16]
 8012cda:	b9d8      	cbnz	r0, 8012d14 <_vfiprintf_r+0x110>
 8012cdc:	06d1      	lsls	r1, r2, #27
 8012cde:	bf44      	itt	mi
 8012ce0:	2320      	movmi	r3, #32
 8012ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ce6:	0713      	lsls	r3, r2, #28
 8012ce8:	bf44      	itt	mi
 8012cea:	232b      	movmi	r3, #43	@ 0x2b
 8012cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8012cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cf6:	d015      	beq.n	8012d24 <_vfiprintf_r+0x120>
 8012cf8:	4654      	mov	r4, sl
 8012cfa:	2000      	movs	r0, #0
 8012cfc:	f04f 0c0a 	mov.w	ip, #10
 8012d00:	9a07      	ldr	r2, [sp, #28]
 8012d02:	4621      	mov	r1, r4
 8012d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d08:	3b30      	subs	r3, #48	@ 0x30
 8012d0a:	2b09      	cmp	r3, #9
 8012d0c:	d94b      	bls.n	8012da6 <_vfiprintf_r+0x1a2>
 8012d0e:	b1b0      	cbz	r0, 8012d3e <_vfiprintf_r+0x13a>
 8012d10:	9207      	str	r2, [sp, #28]
 8012d12:	e014      	b.n	8012d3e <_vfiprintf_r+0x13a>
 8012d14:	eba0 0308 	sub.w	r3, r0, r8
 8012d18:	fa09 f303 	lsl.w	r3, r9, r3
 8012d1c:	4313      	orrs	r3, r2
 8012d1e:	46a2      	mov	sl, r4
 8012d20:	9304      	str	r3, [sp, #16]
 8012d22:	e7d2      	b.n	8012cca <_vfiprintf_r+0xc6>
 8012d24:	9b03      	ldr	r3, [sp, #12]
 8012d26:	1d19      	adds	r1, r3, #4
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	9103      	str	r1, [sp, #12]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	bfbb      	ittet	lt
 8012d30:	425b      	neglt	r3, r3
 8012d32:	f042 0202 	orrlt.w	r2, r2, #2
 8012d36:	9307      	strge	r3, [sp, #28]
 8012d38:	9307      	strlt	r3, [sp, #28]
 8012d3a:	bfb8      	it	lt
 8012d3c:	9204      	strlt	r2, [sp, #16]
 8012d3e:	7823      	ldrb	r3, [r4, #0]
 8012d40:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d42:	d10a      	bne.n	8012d5a <_vfiprintf_r+0x156>
 8012d44:	7863      	ldrb	r3, [r4, #1]
 8012d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d48:	d132      	bne.n	8012db0 <_vfiprintf_r+0x1ac>
 8012d4a:	9b03      	ldr	r3, [sp, #12]
 8012d4c:	3402      	adds	r4, #2
 8012d4e:	1d1a      	adds	r2, r3, #4
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	9203      	str	r2, [sp, #12]
 8012d54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d58:	9305      	str	r3, [sp, #20]
 8012d5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8012e24 <_vfiprintf_r+0x220>
 8012d5e:	2203      	movs	r2, #3
 8012d60:	4650      	mov	r0, sl
 8012d62:	7821      	ldrb	r1, [r4, #0]
 8012d64:	f7ff ff12 	bl	8012b8c <memchr>
 8012d68:	b138      	cbz	r0, 8012d7a <_vfiprintf_r+0x176>
 8012d6a:	2240      	movs	r2, #64	@ 0x40
 8012d6c:	9b04      	ldr	r3, [sp, #16]
 8012d6e:	eba0 000a 	sub.w	r0, r0, sl
 8012d72:	4082      	lsls	r2, r0
 8012d74:	4313      	orrs	r3, r2
 8012d76:	3401      	adds	r4, #1
 8012d78:	9304      	str	r3, [sp, #16]
 8012d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d7e:	2206      	movs	r2, #6
 8012d80:	4829      	ldr	r0, [pc, #164]	@ (8012e28 <_vfiprintf_r+0x224>)
 8012d82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d86:	f7ff ff01 	bl	8012b8c <memchr>
 8012d8a:	2800      	cmp	r0, #0
 8012d8c:	d03f      	beq.n	8012e0e <_vfiprintf_r+0x20a>
 8012d8e:	4b27      	ldr	r3, [pc, #156]	@ (8012e2c <_vfiprintf_r+0x228>)
 8012d90:	bb1b      	cbnz	r3, 8012dda <_vfiprintf_r+0x1d6>
 8012d92:	9b03      	ldr	r3, [sp, #12]
 8012d94:	3307      	adds	r3, #7
 8012d96:	f023 0307 	bic.w	r3, r3, #7
 8012d9a:	3308      	adds	r3, #8
 8012d9c:	9303      	str	r3, [sp, #12]
 8012d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012da0:	443b      	add	r3, r7
 8012da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012da4:	e76a      	b.n	8012c7c <_vfiprintf_r+0x78>
 8012da6:	460c      	mov	r4, r1
 8012da8:	2001      	movs	r0, #1
 8012daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8012dae:	e7a8      	b.n	8012d02 <_vfiprintf_r+0xfe>
 8012db0:	2300      	movs	r3, #0
 8012db2:	f04f 0c0a 	mov.w	ip, #10
 8012db6:	4619      	mov	r1, r3
 8012db8:	3401      	adds	r4, #1
 8012dba:	9305      	str	r3, [sp, #20]
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dc2:	3a30      	subs	r2, #48	@ 0x30
 8012dc4:	2a09      	cmp	r2, #9
 8012dc6:	d903      	bls.n	8012dd0 <_vfiprintf_r+0x1cc>
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d0c6      	beq.n	8012d5a <_vfiprintf_r+0x156>
 8012dcc:	9105      	str	r1, [sp, #20]
 8012dce:	e7c4      	b.n	8012d5a <_vfiprintf_r+0x156>
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dd8:	e7f0      	b.n	8012dbc <_vfiprintf_r+0x1b8>
 8012dda:	ab03      	add	r3, sp, #12
 8012ddc:	9300      	str	r3, [sp, #0]
 8012dde:	462a      	mov	r2, r5
 8012de0:	4630      	mov	r0, r6
 8012de2:	4b13      	ldr	r3, [pc, #76]	@ (8012e30 <_vfiprintf_r+0x22c>)
 8012de4:	a904      	add	r1, sp, #16
 8012de6:	f3af 8000 	nop.w
 8012dea:	4607      	mov	r7, r0
 8012dec:	1c78      	adds	r0, r7, #1
 8012dee:	d1d6      	bne.n	8012d9e <_vfiprintf_r+0x19a>
 8012df0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012df2:	07d9      	lsls	r1, r3, #31
 8012df4:	d405      	bmi.n	8012e02 <_vfiprintf_r+0x1fe>
 8012df6:	89ab      	ldrh	r3, [r5, #12]
 8012df8:	059a      	lsls	r2, r3, #22
 8012dfa:	d402      	bmi.n	8012e02 <_vfiprintf_r+0x1fe>
 8012dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012dfe:	f7ff fa9b 	bl	8012338 <__retarget_lock_release_recursive>
 8012e02:	89ab      	ldrh	r3, [r5, #12]
 8012e04:	065b      	lsls	r3, r3, #25
 8012e06:	f53f af1f 	bmi.w	8012c48 <_vfiprintf_r+0x44>
 8012e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e0c:	e71e      	b.n	8012c4c <_vfiprintf_r+0x48>
 8012e0e:	ab03      	add	r3, sp, #12
 8012e10:	9300      	str	r3, [sp, #0]
 8012e12:	462a      	mov	r2, r5
 8012e14:	4630      	mov	r0, r6
 8012e16:	4b06      	ldr	r3, [pc, #24]	@ (8012e30 <_vfiprintf_r+0x22c>)
 8012e18:	a904      	add	r1, sp, #16
 8012e1a:	f7ff fcdd 	bl	80127d8 <_printf_i>
 8012e1e:	e7e4      	b.n	8012dea <_vfiprintf_r+0x1e6>
 8012e20:	08013ffe 	.word	0x08013ffe
 8012e24:	08014004 	.word	0x08014004
 8012e28:	08014008 	.word	0x08014008
 8012e2c:	00000000 	.word	0x00000000
 8012e30:	08012be1 	.word	0x08012be1

08012e34 <__swbuf_r>:
 8012e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e36:	460e      	mov	r6, r1
 8012e38:	4614      	mov	r4, r2
 8012e3a:	4605      	mov	r5, r0
 8012e3c:	b118      	cbz	r0, 8012e46 <__swbuf_r+0x12>
 8012e3e:	6a03      	ldr	r3, [r0, #32]
 8012e40:	b90b      	cbnz	r3, 8012e46 <__swbuf_r+0x12>
 8012e42:	f7ff f8ab 	bl	8011f9c <__sinit>
 8012e46:	69a3      	ldr	r3, [r4, #24]
 8012e48:	60a3      	str	r3, [r4, #8]
 8012e4a:	89a3      	ldrh	r3, [r4, #12]
 8012e4c:	071a      	lsls	r2, r3, #28
 8012e4e:	d501      	bpl.n	8012e54 <__swbuf_r+0x20>
 8012e50:	6923      	ldr	r3, [r4, #16]
 8012e52:	b943      	cbnz	r3, 8012e66 <__swbuf_r+0x32>
 8012e54:	4621      	mov	r1, r4
 8012e56:	4628      	mov	r0, r5
 8012e58:	f000 f82a 	bl	8012eb0 <__swsetup_r>
 8012e5c:	b118      	cbz	r0, 8012e66 <__swbuf_r+0x32>
 8012e5e:	f04f 37ff 	mov.w	r7, #4294967295
 8012e62:	4638      	mov	r0, r7
 8012e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e66:	6823      	ldr	r3, [r4, #0]
 8012e68:	6922      	ldr	r2, [r4, #16]
 8012e6a:	b2f6      	uxtb	r6, r6
 8012e6c:	1a98      	subs	r0, r3, r2
 8012e6e:	6963      	ldr	r3, [r4, #20]
 8012e70:	4637      	mov	r7, r6
 8012e72:	4283      	cmp	r3, r0
 8012e74:	dc05      	bgt.n	8012e82 <__swbuf_r+0x4e>
 8012e76:	4621      	mov	r1, r4
 8012e78:	4628      	mov	r0, r5
 8012e7a:	f7ff fe4d 	bl	8012b18 <_fflush_r>
 8012e7e:	2800      	cmp	r0, #0
 8012e80:	d1ed      	bne.n	8012e5e <__swbuf_r+0x2a>
 8012e82:	68a3      	ldr	r3, [r4, #8]
 8012e84:	3b01      	subs	r3, #1
 8012e86:	60a3      	str	r3, [r4, #8]
 8012e88:	6823      	ldr	r3, [r4, #0]
 8012e8a:	1c5a      	adds	r2, r3, #1
 8012e8c:	6022      	str	r2, [r4, #0]
 8012e8e:	701e      	strb	r6, [r3, #0]
 8012e90:	6962      	ldr	r2, [r4, #20]
 8012e92:	1c43      	adds	r3, r0, #1
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d004      	beq.n	8012ea2 <__swbuf_r+0x6e>
 8012e98:	89a3      	ldrh	r3, [r4, #12]
 8012e9a:	07db      	lsls	r3, r3, #31
 8012e9c:	d5e1      	bpl.n	8012e62 <__swbuf_r+0x2e>
 8012e9e:	2e0a      	cmp	r6, #10
 8012ea0:	d1df      	bne.n	8012e62 <__swbuf_r+0x2e>
 8012ea2:	4621      	mov	r1, r4
 8012ea4:	4628      	mov	r0, r5
 8012ea6:	f7ff fe37 	bl	8012b18 <_fflush_r>
 8012eaa:	2800      	cmp	r0, #0
 8012eac:	d0d9      	beq.n	8012e62 <__swbuf_r+0x2e>
 8012eae:	e7d6      	b.n	8012e5e <__swbuf_r+0x2a>

08012eb0 <__swsetup_r>:
 8012eb0:	b538      	push	{r3, r4, r5, lr}
 8012eb2:	4b29      	ldr	r3, [pc, #164]	@ (8012f58 <__swsetup_r+0xa8>)
 8012eb4:	4605      	mov	r5, r0
 8012eb6:	6818      	ldr	r0, [r3, #0]
 8012eb8:	460c      	mov	r4, r1
 8012eba:	b118      	cbz	r0, 8012ec4 <__swsetup_r+0x14>
 8012ebc:	6a03      	ldr	r3, [r0, #32]
 8012ebe:	b90b      	cbnz	r3, 8012ec4 <__swsetup_r+0x14>
 8012ec0:	f7ff f86c 	bl	8011f9c <__sinit>
 8012ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ec8:	0719      	lsls	r1, r3, #28
 8012eca:	d422      	bmi.n	8012f12 <__swsetup_r+0x62>
 8012ecc:	06da      	lsls	r2, r3, #27
 8012ece:	d407      	bmi.n	8012ee0 <__swsetup_r+0x30>
 8012ed0:	2209      	movs	r2, #9
 8012ed2:	602a      	str	r2, [r5, #0]
 8012ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8012edc:	81a3      	strh	r3, [r4, #12]
 8012ede:	e033      	b.n	8012f48 <__swsetup_r+0x98>
 8012ee0:	0758      	lsls	r0, r3, #29
 8012ee2:	d512      	bpl.n	8012f0a <__swsetup_r+0x5a>
 8012ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012ee6:	b141      	cbz	r1, 8012efa <__swsetup_r+0x4a>
 8012ee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012eec:	4299      	cmp	r1, r3
 8012eee:	d002      	beq.n	8012ef6 <__swsetup_r+0x46>
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	f7ff fa57 	bl	80123a4 <_free_r>
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8012efa:	89a3      	ldrh	r3, [r4, #12]
 8012efc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012f00:	81a3      	strh	r3, [r4, #12]
 8012f02:	2300      	movs	r3, #0
 8012f04:	6063      	str	r3, [r4, #4]
 8012f06:	6923      	ldr	r3, [r4, #16]
 8012f08:	6023      	str	r3, [r4, #0]
 8012f0a:	89a3      	ldrh	r3, [r4, #12]
 8012f0c:	f043 0308 	orr.w	r3, r3, #8
 8012f10:	81a3      	strh	r3, [r4, #12]
 8012f12:	6923      	ldr	r3, [r4, #16]
 8012f14:	b94b      	cbnz	r3, 8012f2a <__swsetup_r+0x7a>
 8012f16:	89a3      	ldrh	r3, [r4, #12]
 8012f18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f20:	d003      	beq.n	8012f2a <__swsetup_r+0x7a>
 8012f22:	4621      	mov	r1, r4
 8012f24:	4628      	mov	r0, r5
 8012f26:	f000 f882 	bl	801302e <__smakebuf_r>
 8012f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f2e:	f013 0201 	ands.w	r2, r3, #1
 8012f32:	d00a      	beq.n	8012f4a <__swsetup_r+0x9a>
 8012f34:	2200      	movs	r2, #0
 8012f36:	60a2      	str	r2, [r4, #8]
 8012f38:	6962      	ldr	r2, [r4, #20]
 8012f3a:	4252      	negs	r2, r2
 8012f3c:	61a2      	str	r2, [r4, #24]
 8012f3e:	6922      	ldr	r2, [r4, #16]
 8012f40:	b942      	cbnz	r2, 8012f54 <__swsetup_r+0xa4>
 8012f42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012f46:	d1c5      	bne.n	8012ed4 <__swsetup_r+0x24>
 8012f48:	bd38      	pop	{r3, r4, r5, pc}
 8012f4a:	0799      	lsls	r1, r3, #30
 8012f4c:	bf58      	it	pl
 8012f4e:	6962      	ldrpl	r2, [r4, #20]
 8012f50:	60a2      	str	r2, [r4, #8]
 8012f52:	e7f4      	b.n	8012f3e <__swsetup_r+0x8e>
 8012f54:	2000      	movs	r0, #0
 8012f56:	e7f7      	b.n	8012f48 <__swsetup_r+0x98>
 8012f58:	2000003c 	.word	0x2000003c

08012f5c <_raise_r>:
 8012f5c:	291f      	cmp	r1, #31
 8012f5e:	b538      	push	{r3, r4, r5, lr}
 8012f60:	4605      	mov	r5, r0
 8012f62:	460c      	mov	r4, r1
 8012f64:	d904      	bls.n	8012f70 <_raise_r+0x14>
 8012f66:	2316      	movs	r3, #22
 8012f68:	6003      	str	r3, [r0, #0]
 8012f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8012f6e:	bd38      	pop	{r3, r4, r5, pc}
 8012f70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012f72:	b112      	cbz	r2, 8012f7a <_raise_r+0x1e>
 8012f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f78:	b94b      	cbnz	r3, 8012f8e <_raise_r+0x32>
 8012f7a:	4628      	mov	r0, r5
 8012f7c:	f000 f830 	bl	8012fe0 <_getpid_r>
 8012f80:	4622      	mov	r2, r4
 8012f82:	4601      	mov	r1, r0
 8012f84:	4628      	mov	r0, r5
 8012f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f8a:	f000 b817 	b.w	8012fbc <_kill_r>
 8012f8e:	2b01      	cmp	r3, #1
 8012f90:	d00a      	beq.n	8012fa8 <_raise_r+0x4c>
 8012f92:	1c59      	adds	r1, r3, #1
 8012f94:	d103      	bne.n	8012f9e <_raise_r+0x42>
 8012f96:	2316      	movs	r3, #22
 8012f98:	6003      	str	r3, [r0, #0]
 8012f9a:	2001      	movs	r0, #1
 8012f9c:	e7e7      	b.n	8012f6e <_raise_r+0x12>
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012fa6:	4798      	blx	r3
 8012fa8:	2000      	movs	r0, #0
 8012faa:	e7e0      	b.n	8012f6e <_raise_r+0x12>

08012fac <raise>:
 8012fac:	4b02      	ldr	r3, [pc, #8]	@ (8012fb8 <raise+0xc>)
 8012fae:	4601      	mov	r1, r0
 8012fb0:	6818      	ldr	r0, [r3, #0]
 8012fb2:	f7ff bfd3 	b.w	8012f5c <_raise_r>
 8012fb6:	bf00      	nop
 8012fb8:	2000003c 	.word	0x2000003c

08012fbc <_kill_r>:
 8012fbc:	b538      	push	{r3, r4, r5, lr}
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	4d06      	ldr	r5, [pc, #24]	@ (8012fdc <_kill_r+0x20>)
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	4608      	mov	r0, r1
 8012fc6:	4611      	mov	r1, r2
 8012fc8:	602b      	str	r3, [r5, #0]
 8012fca:	f7f9 f818 	bl	800bffe <_kill>
 8012fce:	1c43      	adds	r3, r0, #1
 8012fd0:	d102      	bne.n	8012fd8 <_kill_r+0x1c>
 8012fd2:	682b      	ldr	r3, [r5, #0]
 8012fd4:	b103      	cbz	r3, 8012fd8 <_kill_r+0x1c>
 8012fd6:	6023      	str	r3, [r4, #0]
 8012fd8:	bd38      	pop	{r3, r4, r5, pc}
 8012fda:	bf00      	nop
 8012fdc:	20003368 	.word	0x20003368

08012fe0 <_getpid_r>:
 8012fe0:	f7f9 b806 	b.w	800bff0 <_getpid>

08012fe4 <__swhatbuf_r>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	460c      	mov	r4, r1
 8012fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fec:	4615      	mov	r5, r2
 8012fee:	2900      	cmp	r1, #0
 8012ff0:	461e      	mov	r6, r3
 8012ff2:	b096      	sub	sp, #88	@ 0x58
 8012ff4:	da0c      	bge.n	8013010 <__swhatbuf_r+0x2c>
 8012ff6:	89a3      	ldrh	r3, [r4, #12]
 8012ff8:	2100      	movs	r1, #0
 8012ffa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012ffe:	bf14      	ite	ne
 8013000:	2340      	movne	r3, #64	@ 0x40
 8013002:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013006:	2000      	movs	r0, #0
 8013008:	6031      	str	r1, [r6, #0]
 801300a:	602b      	str	r3, [r5, #0]
 801300c:	b016      	add	sp, #88	@ 0x58
 801300e:	bd70      	pop	{r4, r5, r6, pc}
 8013010:	466a      	mov	r2, sp
 8013012:	f000 f849 	bl	80130a8 <_fstat_r>
 8013016:	2800      	cmp	r0, #0
 8013018:	dbed      	blt.n	8012ff6 <__swhatbuf_r+0x12>
 801301a:	9901      	ldr	r1, [sp, #4]
 801301c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013020:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013024:	4259      	negs	r1, r3
 8013026:	4159      	adcs	r1, r3
 8013028:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801302c:	e7eb      	b.n	8013006 <__swhatbuf_r+0x22>

0801302e <__smakebuf_r>:
 801302e:	898b      	ldrh	r3, [r1, #12]
 8013030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013032:	079d      	lsls	r5, r3, #30
 8013034:	4606      	mov	r6, r0
 8013036:	460c      	mov	r4, r1
 8013038:	d507      	bpl.n	801304a <__smakebuf_r+0x1c>
 801303a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801303e:	6023      	str	r3, [r4, #0]
 8013040:	6123      	str	r3, [r4, #16]
 8013042:	2301      	movs	r3, #1
 8013044:	6163      	str	r3, [r4, #20]
 8013046:	b003      	add	sp, #12
 8013048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801304a:	466a      	mov	r2, sp
 801304c:	ab01      	add	r3, sp, #4
 801304e:	f7ff ffc9 	bl	8012fe4 <__swhatbuf_r>
 8013052:	9f00      	ldr	r7, [sp, #0]
 8013054:	4605      	mov	r5, r0
 8013056:	4639      	mov	r1, r7
 8013058:	4630      	mov	r0, r6
 801305a:	f7fe fd69 	bl	8011b30 <_malloc_r>
 801305e:	b948      	cbnz	r0, 8013074 <__smakebuf_r+0x46>
 8013060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013064:	059a      	lsls	r2, r3, #22
 8013066:	d4ee      	bmi.n	8013046 <__smakebuf_r+0x18>
 8013068:	f023 0303 	bic.w	r3, r3, #3
 801306c:	f043 0302 	orr.w	r3, r3, #2
 8013070:	81a3      	strh	r3, [r4, #12]
 8013072:	e7e2      	b.n	801303a <__smakebuf_r+0xc>
 8013074:	89a3      	ldrh	r3, [r4, #12]
 8013076:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801307a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801307e:	81a3      	strh	r3, [r4, #12]
 8013080:	9b01      	ldr	r3, [sp, #4]
 8013082:	6020      	str	r0, [r4, #0]
 8013084:	b15b      	cbz	r3, 801309e <__smakebuf_r+0x70>
 8013086:	4630      	mov	r0, r6
 8013088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801308c:	f000 f81e 	bl	80130cc <_isatty_r>
 8013090:	b128      	cbz	r0, 801309e <__smakebuf_r+0x70>
 8013092:	89a3      	ldrh	r3, [r4, #12]
 8013094:	f023 0303 	bic.w	r3, r3, #3
 8013098:	f043 0301 	orr.w	r3, r3, #1
 801309c:	81a3      	strh	r3, [r4, #12]
 801309e:	89a3      	ldrh	r3, [r4, #12]
 80130a0:	431d      	orrs	r5, r3
 80130a2:	81a5      	strh	r5, [r4, #12]
 80130a4:	e7cf      	b.n	8013046 <__smakebuf_r+0x18>
	...

080130a8 <_fstat_r>:
 80130a8:	b538      	push	{r3, r4, r5, lr}
 80130aa:	2300      	movs	r3, #0
 80130ac:	4d06      	ldr	r5, [pc, #24]	@ (80130c8 <_fstat_r+0x20>)
 80130ae:	4604      	mov	r4, r0
 80130b0:	4608      	mov	r0, r1
 80130b2:	4611      	mov	r1, r2
 80130b4:	602b      	str	r3, [r5, #0]
 80130b6:	f7f9 f801 	bl	800c0bc <_fstat>
 80130ba:	1c43      	adds	r3, r0, #1
 80130bc:	d102      	bne.n	80130c4 <_fstat_r+0x1c>
 80130be:	682b      	ldr	r3, [r5, #0]
 80130c0:	b103      	cbz	r3, 80130c4 <_fstat_r+0x1c>
 80130c2:	6023      	str	r3, [r4, #0]
 80130c4:	bd38      	pop	{r3, r4, r5, pc}
 80130c6:	bf00      	nop
 80130c8:	20003368 	.word	0x20003368

080130cc <_isatty_r>:
 80130cc:	b538      	push	{r3, r4, r5, lr}
 80130ce:	2300      	movs	r3, #0
 80130d0:	4d05      	ldr	r5, [pc, #20]	@ (80130e8 <_isatty_r+0x1c>)
 80130d2:	4604      	mov	r4, r0
 80130d4:	4608      	mov	r0, r1
 80130d6:	602b      	str	r3, [r5, #0]
 80130d8:	f7f8 ffff 	bl	800c0da <_isatty>
 80130dc:	1c43      	adds	r3, r0, #1
 80130de:	d102      	bne.n	80130e6 <_isatty_r+0x1a>
 80130e0:	682b      	ldr	r3, [r5, #0]
 80130e2:	b103      	cbz	r3, 80130e6 <_isatty_r+0x1a>
 80130e4:	6023      	str	r3, [r4, #0]
 80130e6:	bd38      	pop	{r3, r4, r5, pc}
 80130e8:	20003368 	.word	0x20003368

080130ec <_init>:
 80130ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ee:	bf00      	nop
 80130f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130f2:	bc08      	pop	{r3}
 80130f4:	469e      	mov	lr, r3
 80130f6:	4770      	bx	lr

080130f8 <_fini>:
 80130f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130fa:	bf00      	nop
 80130fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130fe:	bc08      	pop	{r3}
 8013100:	469e      	mov	lr, r3
 8013102:	4770      	bx	lr
