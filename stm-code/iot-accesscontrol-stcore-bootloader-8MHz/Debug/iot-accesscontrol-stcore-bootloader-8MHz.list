
iot-accesscontrol-stcore-bootloader-8MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004440  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08004624  08004624  00005624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c0c  08004c0c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c0c  08004c0c  00005c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c14  08004c14  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c14  08004c14  00005c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c18  08004c18  00005c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004c1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000060  08004c78  00006060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08004c78  00006288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0bf  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002083  00000000  00000000  00011144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  000131c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000846  00000000  00000000  00013c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019937  00000000  00000000  0001449e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e699  00000000  00000000  0002ddd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093602  00000000  00000000  0003c46e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfa70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003028  00000000  00000000  000cfab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000d2adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000060 	.word	0x20000060
 8000200:	00000000 	.word	0x00000000
 8000204:	0800460c 	.word	0x0800460c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000064 	.word	0x20000064
 8000220:	0800460c 	.word	0x0800460c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_frsub>:
 8000234:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000238:	e002      	b.n	8000240 <__addsf3>
 800023a:	bf00      	nop

0800023c <__aeabi_fsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000240 <__addsf3>:
 8000240:	0042      	lsls	r2, r0, #1
 8000242:	bf1f      	itttt	ne
 8000244:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000248:	ea92 0f03 	teqne	r2, r3
 800024c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000250:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000254:	d06a      	beq.n	800032c <__addsf3+0xec>
 8000256:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800025a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025e:	bfc1      	itttt	gt
 8000260:	18d2      	addgt	r2, r2, r3
 8000262:	4041      	eorgt	r1, r0
 8000264:	4048      	eorgt	r0, r1
 8000266:	4041      	eorgt	r1, r0
 8000268:	bfb8      	it	lt
 800026a:	425b      	neglt	r3, r3
 800026c:	2b19      	cmp	r3, #25
 800026e:	bf88      	it	hi
 8000270:	4770      	bxhi	lr
 8000272:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000276:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800027a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4240      	negne	r0, r0
 8000282:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000286:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800028a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800028e:	bf18      	it	ne
 8000290:	4249      	negne	r1, r1
 8000292:	ea92 0f03 	teq	r2, r3
 8000296:	d03f      	beq.n	8000318 <__addsf3+0xd8>
 8000298:	f1a2 0201 	sub.w	r2, r2, #1
 800029c:	fa41 fc03 	asr.w	ip, r1, r3
 80002a0:	eb10 000c 	adds.w	r0, r0, ip
 80002a4:	f1c3 0320 	rsb	r3, r3, #32
 80002a8:	fa01 f103 	lsl.w	r1, r1, r3
 80002ac:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b0:	d502      	bpl.n	80002b8 <__addsf3+0x78>
 80002b2:	4249      	negs	r1, r1
 80002b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80002bc:	d313      	bcc.n	80002e6 <__addsf3+0xa6>
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80002c2:	d306      	bcc.n	80002d2 <__addsf3+0x92>
 80002c4:	0840      	lsrs	r0, r0, #1
 80002c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ca:	f102 0201 	add.w	r2, r2, #1
 80002ce:	2afe      	cmp	r2, #254	@ 0xfe
 80002d0:	d251      	bcs.n	8000376 <__addsf3+0x136>
 80002d2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80002d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002da:	bf08      	it	eq
 80002dc:	f020 0001 	biceq.w	r0, r0, #1
 80002e0:	ea40 0003 	orr.w	r0, r0, r3
 80002e4:	4770      	bx	lr
 80002e6:	0049      	lsls	r1, r1, #1
 80002e8:	eb40 0000 	adc.w	r0, r0, r0
 80002ec:	3a01      	subs	r2, #1
 80002ee:	bf28      	it	cs
 80002f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80002f4:	d2ed      	bcs.n	80002d2 <__addsf3+0x92>
 80002f6:	fab0 fc80 	clz	ip, r0
 80002fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000302:	fa00 f00c 	lsl.w	r0, r0, ip
 8000306:	bfaa      	itet	ge
 8000308:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800030c:	4252      	neglt	r2, r2
 800030e:	4318      	orrge	r0, r3
 8000310:	bfbc      	itt	lt
 8000312:	40d0      	lsrlt	r0, r2
 8000314:	4318      	orrlt	r0, r3
 8000316:	4770      	bx	lr
 8000318:	f092 0f00 	teq	r2, #0
 800031c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000320:	bf06      	itte	eq
 8000322:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000326:	3201      	addeq	r2, #1
 8000328:	3b01      	subne	r3, #1
 800032a:	e7b5      	b.n	8000298 <__addsf3+0x58>
 800032c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000330:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000334:	bf18      	it	ne
 8000336:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800033a:	d021      	beq.n	8000380 <__addsf3+0x140>
 800033c:	ea92 0f03 	teq	r2, r3
 8000340:	d004      	beq.n	800034c <__addsf3+0x10c>
 8000342:	f092 0f00 	teq	r2, #0
 8000346:	bf08      	it	eq
 8000348:	4608      	moveq	r0, r1
 800034a:	4770      	bx	lr
 800034c:	ea90 0f01 	teq	r0, r1
 8000350:	bf1c      	itt	ne
 8000352:	2000      	movne	r0, #0
 8000354:	4770      	bxne	lr
 8000356:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800035a:	d104      	bne.n	8000366 <__addsf3+0x126>
 800035c:	0040      	lsls	r0, r0, #1
 800035e:	bf28      	it	cs
 8000360:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000364:	4770      	bx	lr
 8000366:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800036a:	bf3c      	itt	cc
 800036c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000370:	4770      	bxcc	lr
 8000372:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000376:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800037a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800037e:	4770      	bx	lr
 8000380:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000384:	bf16      	itet	ne
 8000386:	4608      	movne	r0, r1
 8000388:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800038c:	4601      	movne	r1, r0
 800038e:	0242      	lsls	r2, r0, #9
 8000390:	bf06      	itte	eq
 8000392:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000396:	ea90 0f01 	teqeq	r0, r1
 800039a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_ui2f>:
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e004      	b.n	80003b0 <__aeabi_i2f+0x8>
 80003a6:	bf00      	nop

080003a8 <__aeabi_i2f>:
 80003a8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80003ac:	bf48      	it	mi
 80003ae:	4240      	negmi	r0, r0
 80003b0:	ea5f 0c00 	movs.w	ip, r0
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80003bc:	4601      	mov	r1, r0
 80003be:	f04f 0000 	mov.w	r0, #0
 80003c2:	e01c      	b.n	80003fe <__aeabi_l2f+0x2a>

080003c4 <__aeabi_ul2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f04f 0300 	mov.w	r3, #0
 80003d0:	e00a      	b.n	80003e8 <__aeabi_l2f+0x14>
 80003d2:	bf00      	nop

080003d4 <__aeabi_l2f>:
 80003d4:	ea50 0201 	orrs.w	r2, r0, r1
 80003d8:	bf08      	it	eq
 80003da:	4770      	bxeq	lr
 80003dc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80003e0:	d502      	bpl.n	80003e8 <__aeabi_l2f+0x14>
 80003e2:	4240      	negs	r0, r0
 80003e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e8:	ea5f 0c01 	movs.w	ip, r1
 80003ec:	bf02      	ittt	eq
 80003ee:	4684      	moveq	ip, r0
 80003f0:	4601      	moveq	r1, r0
 80003f2:	2000      	moveq	r0, #0
 80003f4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80003f8:	bf08      	it	eq
 80003fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80003fe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000402:	fabc f28c 	clz	r2, ip
 8000406:	3a08      	subs	r2, #8
 8000408:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800040c:	db10      	blt.n	8000430 <__aeabi_l2f+0x5c>
 800040e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000412:	4463      	add	r3, ip
 8000414:	fa00 fc02 	lsl.w	ip, r0, r2
 8000418:	f1c2 0220 	rsb	r2, r2, #32
 800041c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000420:	fa20 f202 	lsr.w	r2, r0, r2
 8000424:	eb43 0002 	adc.w	r0, r3, r2
 8000428:	bf08      	it	eq
 800042a:	f020 0001 	biceq.w	r0, r0, #1
 800042e:	4770      	bx	lr
 8000430:	f102 0220 	add.w	r2, r2, #32
 8000434:	fa01 fc02 	lsl.w	ip, r1, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000440:	fa21 f202 	lsr.w	r2, r1, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044e:	4770      	bx	lr

08000450 <__aeabi_fmul>:
 8000450:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000458:	bf1e      	ittt	ne
 800045a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045e:	ea92 0f0c 	teqne	r2, ip
 8000462:	ea93 0f0c 	teqne	r3, ip
 8000466:	d06f      	beq.n	8000548 <__aeabi_fmul+0xf8>
 8000468:	441a      	add	r2, r3
 800046a:	ea80 0c01 	eor.w	ip, r0, r1
 800046e:	0240      	lsls	r0, r0, #9
 8000470:	bf18      	it	ne
 8000472:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000476:	d01e      	beq.n	80004b6 <__aeabi_fmul+0x66>
 8000478:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800047c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000480:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000484:	fba0 3101 	umull	r3, r1, r0, r1
 8000488:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800048c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000490:	bf3e      	ittt	cc
 8000492:	0049      	lslcc	r1, r1, #1
 8000494:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000498:	005b      	lslcc	r3, r3, #1
 800049a:	ea40 0001 	orr.w	r0, r0, r1
 800049e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80004a2:	2afd      	cmp	r2, #253	@ 0xfd
 80004a4:	d81d      	bhi.n	80004e2 <__aeabi_fmul+0x92>
 80004a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80004aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ae:	bf08      	it	eq
 80004b0:	f020 0001 	biceq.w	r0, r0, #1
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80004be:	bf08      	it	eq
 80004c0:	0249      	lsleq	r1, r1, #9
 80004c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ca:	3a7f      	subs	r2, #127	@ 0x7f
 80004cc:	bfc2      	ittt	gt
 80004ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80004d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d6:	4770      	bxgt	lr
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004dc:	f04f 0300 	mov.w	r3, #0
 80004e0:	3a01      	subs	r2, #1
 80004e2:	dc5d      	bgt.n	80005a0 <__aeabi_fmul+0x150>
 80004e4:	f112 0f19 	cmn.w	r2, #25
 80004e8:	bfdc      	itt	le
 80004ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80004ee:	4770      	bxle	lr
 80004f0:	f1c2 0200 	rsb	r2, r2, #0
 80004f4:	0041      	lsls	r1, r0, #1
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	f1c2 0220 	rsb	r2, r2, #32
 80004fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000502:	ea5f 0031 	movs.w	r0, r1, rrx
 8000506:	f140 0000 	adc.w	r0, r0, #0
 800050a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050e:	bf08      	it	eq
 8000510:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000514:	4770      	bx	lr
 8000516:	f092 0f00 	teq	r2, #0
 800051a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800051e:	bf02      	ittt	eq
 8000520:	0040      	lsleq	r0, r0, #1
 8000522:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000526:	3a01      	subeq	r2, #1
 8000528:	d0f9      	beq.n	800051e <__aeabi_fmul+0xce>
 800052a:	ea40 000c 	orr.w	r0, r0, ip
 800052e:	f093 0f00 	teq	r3, #0
 8000532:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000536:	bf02      	ittt	eq
 8000538:	0049      	lsleq	r1, r1, #1
 800053a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800053e:	3b01      	subeq	r3, #1
 8000540:	d0f9      	beq.n	8000536 <__aeabi_fmul+0xe6>
 8000542:	ea41 010c 	orr.w	r1, r1, ip
 8000546:	e78f      	b.n	8000468 <__aeabi_fmul+0x18>
 8000548:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800054c:	ea92 0f0c 	teq	r2, ip
 8000550:	bf18      	it	ne
 8000552:	ea93 0f0c 	teqne	r3, ip
 8000556:	d00a      	beq.n	800056e <__aeabi_fmul+0x11e>
 8000558:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800055c:	bf18      	it	ne
 800055e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000562:	d1d8      	bne.n	8000516 <__aeabi_fmul+0xc6>
 8000564:	ea80 0001 	eor.w	r0, r0, r1
 8000568:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800056c:	4770      	bx	lr
 800056e:	f090 0f00 	teq	r0, #0
 8000572:	bf17      	itett	ne
 8000574:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000578:	4608      	moveq	r0, r1
 800057a:	f091 0f00 	teqne	r1, #0
 800057e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000582:	d014      	beq.n	80005ae <__aeabi_fmul+0x15e>
 8000584:	ea92 0f0c 	teq	r2, ip
 8000588:	d101      	bne.n	800058e <__aeabi_fmul+0x13e>
 800058a:	0242      	lsls	r2, r0, #9
 800058c:	d10f      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800058e:	ea93 0f0c 	teq	r3, ip
 8000592:	d103      	bne.n	800059c <__aeabi_fmul+0x14c>
 8000594:	024b      	lsls	r3, r1, #9
 8000596:	bf18      	it	ne
 8000598:	4608      	movne	r0, r1
 800059a:	d108      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800059c:	ea80 0001 	eor.w	r0, r0, r1
 80005a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80005a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80005a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005ac:	4770      	bx	lr
 80005ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80005b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80005b6:	4770      	bx	lr

080005b8 <__aeabi_fdiv>:
 80005b8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005c0:	bf1e      	ittt	ne
 80005c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c6:	ea92 0f0c 	teqne	r2, ip
 80005ca:	ea93 0f0c 	teqne	r3, ip
 80005ce:	d069      	beq.n	80006a4 <__aeabi_fdiv+0xec>
 80005d0:	eba2 0203 	sub.w	r2, r2, r3
 80005d4:	ea80 0c01 	eor.w	ip, r0, r1
 80005d8:	0249      	lsls	r1, r1, #9
 80005da:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005de:	d037      	beq.n	8000650 <__aeabi_fdiv+0x98>
 80005e0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005ec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80005f0:	428b      	cmp	r3, r1
 80005f2:	bf38      	it	cc
 80005f4:	005b      	lslcc	r3, r3, #1
 80005f6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80005fa:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80005fe:	428b      	cmp	r3, r1
 8000600:	bf24      	itt	cs
 8000602:	1a5b      	subcs	r3, r3, r1
 8000604:	ea40 000c 	orrcs.w	r0, r0, ip
 8000608:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800060c:	bf24      	itt	cs
 800060e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000612:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000616:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800061a:	bf24      	itt	cs
 800061c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000624:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000628:	bf24      	itt	cs
 800062a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	bf18      	it	ne
 8000636:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800063a:	d1e0      	bne.n	80005fe <__aeabi_fdiv+0x46>
 800063c:	2afd      	cmp	r2, #253	@ 0xfd
 800063e:	f63f af50 	bhi.w	80004e2 <__aeabi_fmul+0x92>
 8000642:	428b      	cmp	r3, r1
 8000644:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000648:	bf08      	it	eq
 800064a:	f020 0001 	biceq.w	r0, r0, #1
 800064e:	4770      	bx	lr
 8000650:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000654:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000658:	327f      	adds	r2, #127	@ 0x7f
 800065a:	bfc2      	ittt	gt
 800065c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000660:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000664:	4770      	bxgt	lr
 8000666:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	3a01      	subs	r2, #1
 8000670:	e737      	b.n	80004e2 <__aeabi_fmul+0x92>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800067a:	bf02      	ittt	eq
 800067c:	0040      	lsleq	r0, r0, #1
 800067e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000682:	3a01      	subeq	r2, #1
 8000684:	d0f9      	beq.n	800067a <__aeabi_fdiv+0xc2>
 8000686:	ea40 000c 	orr.w	r0, r0, ip
 800068a:	f093 0f00 	teq	r3, #0
 800068e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000692:	bf02      	ittt	eq
 8000694:	0049      	lsleq	r1, r1, #1
 8000696:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800069a:	3b01      	subeq	r3, #1
 800069c:	d0f9      	beq.n	8000692 <__aeabi_fdiv+0xda>
 800069e:	ea41 010c 	orr.w	r1, r1, ip
 80006a2:	e795      	b.n	80005d0 <__aeabi_fdiv+0x18>
 80006a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a8:	ea92 0f0c 	teq	r2, ip
 80006ac:	d108      	bne.n	80006c0 <__aeabi_fdiv+0x108>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	f47f af7d 	bne.w	80005ae <__aeabi_fmul+0x15e>
 80006b4:	ea93 0f0c 	teq	r3, ip
 80006b8:	f47f af70 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006bc:	4608      	mov	r0, r1
 80006be:	e776      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006c0:	ea93 0f0c 	teq	r3, ip
 80006c4:	d104      	bne.n	80006d0 <__aeabi_fdiv+0x118>
 80006c6:	024b      	lsls	r3, r1, #9
 80006c8:	f43f af4c 	beq.w	8000564 <__aeabi_fmul+0x114>
 80006cc:	4608      	mov	r0, r1
 80006ce:	e76e      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006d0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80006d4:	bf18      	it	ne
 80006d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80006da:	d1ca      	bne.n	8000672 <__aeabi_fdiv+0xba>
 80006dc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80006e0:	f47f af5c 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006e4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80006e8:	f47f af3c 	bne.w	8000564 <__aeabi_fmul+0x114>
 80006ec:	e75f      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2iz>:
 80006f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006f8:	d30f      	bcc.n	800071a <__aeabi_f2iz+0x2a>
 80006fa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80006fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000702:	d90d      	bls.n	8000720 <__aeabi_f2iz+0x30>
 8000704:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000708:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800070c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	bf18      	it	ne
 8000716:	4240      	negne	r0, r0
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2iz+0x3a>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d105      	bne.n	8000736 <__aeabi_f2iz+0x46>
 800072a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800072e:	bf08      	it	eq
 8000730:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000734:	4770      	bx	lr
 8000736:	f04f 0000 	mov.w	r0, #0
 800073a:	4770      	bx	lr

0800073c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000750:	4b2e      	ldr	r3, [pc, #184]	@ (800080c <MX_GPIO_Init+0xd0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a2d      	ldr	r2, [pc, #180]	@ (800080c <MX_GPIO_Init+0xd0>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <MX_GPIO_Init+0xd0>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0310 	and.w	r3, r3, #16
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000768:	4b28      	ldr	r3, [pc, #160]	@ (800080c <MX_GPIO_Init+0xd0>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a27      	ldr	r2, [pc, #156]	@ (800080c <MX_GPIO_Init+0xd0>)
 800076e:	f043 0320 	orr.w	r3, r3, #32
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b25      	ldr	r3, [pc, #148]	@ (800080c <MX_GPIO_Init+0xd0>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0320 	and.w	r3, r3, #32
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	4b22      	ldr	r3, [pc, #136]	@ (800080c <MX_GPIO_Init+0xd0>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a21      	ldr	r2, [pc, #132]	@ (800080c <MX_GPIO_Init+0xd0>)
 8000786:	f043 0308 	orr.w	r3, r3, #8
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <MX_GPIO_Init+0xd0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_GPIO_Init+0xd0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a1b      	ldr	r2, [pc, #108]	@ (800080c <MX_GPIO_Init+0xd0>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b19      	ldr	r3, [pc, #100]	@ (800080c <MX_GPIO_Init+0xd0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_RGB_1_GPIO_Port, GPIO_RGB_1_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b6:	4816      	ldr	r0, [pc, #88]	@ (8000810 <MX_GPIO_Init+0xd4>)
 80007b8:	f001 fa5e 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RGB_2_Pin|GPIO_RGB_3_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80007c2:	4814      	ldr	r0, [pc, #80]	@ (8000814 <MX_GPIO_Init+0xd8>)
 80007c4:	f001 fa58 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_RGB_1_Pin;
 80007c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_RGB_1_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4619      	mov	r1, r3
 80007e0:	480b      	ldr	r0, [pc, #44]	@ (8000810 <MX_GPIO_Init+0xd4>)
 80007e2:	f001 f8b5 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_RGB_2_Pin|GPIO_RGB_3_Pin;
 80007e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_GPIO_Init+0xd8>)
 8000800:	f001 f8a6 	bl	8001950 <HAL_GPIO_Init>

}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40021000 	.word	0x40021000
 8000810:	40011000 	.word	0x40011000
 8000814:	40010c00 	.word	0x40010c00

08000818 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_I2C1_Init+0x50>)
 800081e:	4a13      	ldr	r2, [pc, #76]	@ (800086c <MX_I2C1_Init+0x54>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000824:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x58>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000836:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800083a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000856:	f001 fa27 	bl	8001ca8 <HAL_I2C_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 fbd0 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000007c 	.word	0x2000007c
 800086c:	40005400 	.word	0x40005400
 8000870:	000186a0 	.word	0x000186a0

08000874 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a15      	ldr	r2, [pc, #84]	@ (80008e4 <HAL_I2C_MspInit+0x70>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d123      	bne.n	80008dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <HAL_I2C_MspInit+0x74>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <HAL_I2C_MspInit+0x74>)
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <HAL_I2C_MspInit+0x74>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0308 	and.w	r3, r3, #8
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ac:	23c0      	movs	r3, #192	@ 0xc0
 80008ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b0:	2312      	movs	r3, #18
 80008b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4619      	mov	r1, r3
 80008be:	480b      	ldr	r0, [pc, #44]	@ (80008ec <HAL_I2C_MspInit+0x78>)
 80008c0:	f001 f846 	bl	8001950 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <HAL_I2C_MspInit+0x74>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	4a07      	ldr	r2, [pc, #28]	@ (80008e8 <HAL_I2C_MspInit+0x74>)
 80008ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008ce:	61d3      	str	r3, [r2, #28]
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <HAL_I2C_MspInit+0x74>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40005400 	.word	0x40005400
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40010c00 	.word	0x40010c00

080008f0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db0c      	blt.n	800091c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f003 021f 	and.w	r2, r3, #31
 8000908:	4907      	ldr	r1, [pc, #28]	@ (8000928 <__NVIC_ClearPendingIRQ+0x38>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	095b      	lsrs	r3, r3, #5
 8000910:	2001      	movs	r0, #1
 8000912:	fa00 f202 	lsl.w	r2, r0, r2
 8000916:	3360      	adds	r3, #96	@ 0x60
 8000918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000930:	f3bf 8f4f 	dsb	sy
}
 8000934:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <__NVIC_SystemReset+0x24>)
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800093e:	4904      	ldr	r1, [pc, #16]	@ (8000950 <__NVIC_SystemReset+0x24>)
 8000940:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <__NVIC_SystemReset+0x28>)
 8000942:	4313      	orrs	r3, r2
 8000944:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000946:	f3bf 8f4f 	dsb	sy
}
 800094a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <__NVIC_SystemReset+0x20>
 8000950:	e000ed00 	.word	0xe000ed00
 8000954:	05fa0004 	.word	0x05fa0004

08000958 <usb_debug_print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void usb_debug_print(char* msg, uint8_t state)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3,(const uint8_t*)(msg), strlen((const char*)(msg)), 500);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff fc5d 	bl	8000224 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	4803      	ldr	r0, [pc, #12]	@ (8000984 <usb_debug_print+0x2c>)
 8000976:	f003 f819 	bl	80039ac <HAL_UART_Transmit>

	return;
 800097a:	bf00      	nop
}
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000d4 	.word	0x200000d4

08000988 <ee2_read_byte>:

HAL_StatusTypeDef ee2_read_byte(uint8_t chipAddr, uint8_t* byte, uint16_t addr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af04      	add	r7, sp, #16
 800098e:	4603      	mov	r3, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	4613      	mov	r3, r2
 8000996:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
	uint16_t i = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	81bb      	strh	r3, [r7, #12]

	while(status != HAL_OK && i < 1000){
 80009a0:	e019      	b.n	80009d6 <ee2_read_byte+0x4e>
		status = HAL_I2C_Mem_Read(&hi2c1, chipAddr, addr, 2, byte, 1, 500);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	b299      	uxth	r1, r3
 80009a6:	88ba      	ldrh	r2, [r7, #4]
 80009a8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009ac:	9302      	str	r3, [sp, #8]
 80009ae:	2301      	movs	r3, #1
 80009b0:	9301      	str	r3, [sp, #4]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2302      	movs	r3, #2
 80009b8:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <ee2_read_byte+0x68>)
 80009ba:	f001 fbb3 	bl	8002124 <HAL_I2C_Mem_Read>
 80009be:	4603      	mov	r3, r0
 80009c0:	73fb      	strb	r3, [r7, #15]
		if(status != HAL_OK){
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <ee2_read_byte+0x48>
			usb_debug_print("ee2_readByte: HAL_I2C_Mem_Read: status != HAL_OK\r\n", 0);
 80009c8:	2100      	movs	r1, #0
 80009ca:	480a      	ldr	r0, [pc, #40]	@ (80009f4 <ee2_read_byte+0x6c>)
 80009cc:	f7ff ffc4 	bl	8000958 <usb_debug_print>
		}
		i++;
 80009d0:	89bb      	ldrh	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	81bb      	strh	r3, [r7, #12]
	while(status != HAL_OK && i < 1000){
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <ee2_read_byte+0x5c>
 80009dc:	89bb      	ldrh	r3, [r7, #12]
 80009de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009e2:	d3de      	bcc.n	80009a2 <ee2_read_byte+0x1a>
//		HAL_IWDG_Refresh(&hiwdg);
	}

    return status;
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000007c 	.word	0x2000007c
 80009f4:	08004624 	.word	0x08004624

080009f8 <ee2_write_byte>:

HAL_StatusTypeDef ee2_write_byte(uint8_t chipAddr, uint8_t byte, uint16_t addr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af04      	add	r7, sp, #16
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	460b      	mov	r3, r1
 8000a04:	71bb      	strb	r3, [r7, #6]
 8000a06:	4613      	mov	r3, r2
 8000a08:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
	uint16_t i = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	81bb      	strh	r3, [r7, #12]

	while(status != HAL_OK && i < 200){
 8000a12:	e02b      	b.n	8000a6c <ee2_write_byte+0x74>
		status = HAL_I2C_IsDeviceReady(&hi2c1, chipAddr, 0x00000001, 500);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	b299      	uxth	r1, r3
 8000a18:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4819      	ldr	r0, [pc, #100]	@ (8000a84 <ee2_write_byte+0x8c>)
 8000a20:	f001 fde8 	bl	80025f4 <HAL_I2C_IsDeviceReady>
 8000a24:	4603      	mov	r3, r0
 8000a26:	73fb      	strb	r3, [r7, #15]

		if(status == HAL_OK){
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d11b      	bne.n	8000a66 <ee2_write_byte+0x6e>
			status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
			status = HAL_I2C_Mem_Write(&hi2c1, chipAddr, addr, 2, &byte, 1, 500);  // write the data to the EEPROM
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	b299      	uxth	r1, r3
 8000a36:	88ba      	ldrh	r2, [r7, #4]
 8000a38:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000a3c:	9302      	str	r3, [sp, #8]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	1dbb      	adds	r3, r7, #6
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2302      	movs	r3, #2
 8000a48:	480e      	ldr	r0, [pc, #56]	@ (8000a84 <ee2_write_byte+0x8c>)
 8000a4a:	f001 fa71 	bl	8001f30 <HAL_I2C_Mem_Write>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	73fb      	strb	r3, [r7, #15]
			if(status != HAL_OK){
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <ee2_write_byte+0x68>
				usb_debug_print("ee2_writeByte:  HAL_I2C_Mem_Write: status != HAL_OK\r\n", 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480b      	ldr	r0, [pc, #44]	@ (8000a88 <ee2_write_byte+0x90>)
 8000a5c:	f7ff ff7c 	bl	8000958 <usb_debug_print>
			}
			HAL_Delay(5);   // delay for writing data
 8000a60:	2005      	movs	r0, #5
 8000a62:	f000 fc6d 	bl	8001340 <HAL_Delay>
		}

		i++;
 8000a66:	89bb      	ldrh	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	81bb      	strh	r3, [r7, #12]
	while(status != HAL_OK && i < 200){
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <ee2_write_byte+0x80>
 8000a72:	89bb      	ldrh	r3, [r7, #12]
 8000a74:	2bc7      	cmp	r3, #199	@ 0xc7
 8000a76:	d9cd      	bls.n	8000a14 <ee2_write_byte+0x1c>
//		HAL_IWDG_Refresh(&hiwdg);
	}

    return status;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000007c 	.word	0x2000007c
 8000a88:	08004658 	.word	0x08004658

08000a8c <internal_flash_write_WORD>:

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! use INTERNAL FLASH as Internal EEPROM
HAL_StatusTypeDef internal_flash_write_WORD(uint32_t Flash_Address, uint32_t data){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef internal_flash_ret = HAL_ERROR;
 8000a96:	2101      	movs	r1, #1
 8000a98:	73f9      	strb	r1, [r7, #15]
	internal_flash_ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, (uint64_t)data);
 8000a9a:	6839      	ldr	r1, [r7, #0]
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	460a      	mov	r2, r1
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f000 fd53 	bl	8001550 <HAL_FLASH_Program>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]

    return internal_flash_ret;
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <internal_flash_read_HALFWORD>:

uint16_t internal_flash_read_HALFWORD(uint32_t Flash_Address){
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	__IO uint32_t read_data = *(__IO uint32_t *)Flash_Address;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60fb      	str	r3, [r7, #12]

	return (uint16_t)read_data;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	b29b      	uxth	r3, r3
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad8:	f000 fbd0 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000adc:	f000 f81c 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae0:	f7ff fe2c 	bl	800073c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ae4:	f7ff fe98 	bl	8000818 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000ae8:	f000 fb2c 	bl	8001144 <MX_USART3_UART_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8000aec:	b662      	cpsie	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN 2 */
//  __HAL_AFIO_REMAP_SWJ_NOJTAG(); // FYI : fix inp_2 problem
  __enable_irq();

//  HAL_Delay(5);
  usb_debug_print("\r\n##################################### START BOOTLOADER 57600 #####################################\r\n", 0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	4807      	ldr	r0, [pc, #28]	@ (8000b10 <main+0x3c>)
 8000af4:	f7ff ff30 	bl	8000958 <usb_debug_print>
//  strcat(buf, "\"\r\n");
//  usb_debug_print(buf, 0);
////
//  ee2_write_byte(EE2_1_CHIP_ADDR, cm_reset_flag, EE2_Loc_Reset_Status);
////
  update_firmware();
 8000af8:	f000 f854 	bl	8000ba4 <update_firmware>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  usb_debug_print(">> BootLoader failed >>\r\n", 0);
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <main+0x40>)
 8000b00:	f7ff ff2a 	bl	8000958 <usb_debug_print>
	  HAL_Delay(1000);
 8000b04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b08:	f000 fc1a 	bl	8001340 <HAL_Delay>
	  usb_debug_print(">> BootLoader failed >>\r\n", 0);
 8000b0c:	bf00      	nop
 8000b0e:	e7f5      	b.n	8000afc <main+0x28>
 8000b10:	0800473c 	.word	0x0800473c
 8000b14:	080047a4 	.word	0x080047a4

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b090      	sub	sp, #64	@ 0x40
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	2228      	movs	r2, #40	@ 0x28
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 f8e0 	bl	8003cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b56:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 fac3 	bl	80030ec <HAL_RCC_OscConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b6c:	f000 fa4a 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b70:	230f      	movs	r3, #15
 8000b72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b74:	2302      	movs	r3, #2
 8000b76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2102      	movs	r1, #2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fd30 	bl	80035f0 <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b96:	f000 fa35 	bl	8001004 <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3740      	adds	r7, #64	@ 0x40
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <update_firmware>:

/* USER CODE BEGIN 4 */
void update_firmware()
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b0ab      	sub	sp, #172	@ 0xac
 8000ba8:	af00      	add	r7, sp, #0
//	ee2_writeByte(EE2_1_CHIP_ADDR, FOTA_START, EE2_Loc_FOTA_STATUS);
	/* ***************************** CHECK METADATA FROM External EEPROM ***************************** */
	uint8_t byte = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	HAL_StatusTypeDef status = ee2_read_byte(EE2_1_CHIP_ADDR, &byte, EE2_Loc_FOTA_STATUS);
 8000bb0:	f107 037f 	add.w	r3, r7, #127	@ 0x7f
 8000bb4:	2214      	movs	r2, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	20ac      	movs	r0, #172	@ 0xac
 8000bba:	f7ff fee5 	bl	8000988 <ee2_read_byte>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97


	uint8_t byte1 = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	uint8_t byte2 = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	uint8_t byte3 = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	uint8_t byte4 = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

	HAL_StatusTypeDef s1 = ee2_read_byte(EE2_1_CHIP_ADDR, &byte1, EE2_Loc_FOTA_App_SIZE_BYTE3);
 8000bdc:	f107 037e 	add.w	r3, r7, #126	@ 0x7e
 8000be0:	221c      	movs	r2, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	20ac      	movs	r0, #172	@ 0xac
 8000be6:	f7ff fecf 	bl	8000988 <ee2_read_byte>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
	HAL_StatusTypeDef s2 = ee2_read_byte(EE2_1_CHIP_ADDR, &byte2, EE2_Loc_FOTA_App_SIZE_BYTE2);
 8000bf0:	f107 037d 	add.w	r3, r7, #125	@ 0x7d
 8000bf4:	221b      	movs	r2, #27
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	20ac      	movs	r0, #172	@ 0xac
 8000bfa:	f7ff fec5 	bl	8000988 <ee2_read_byte>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
	HAL_StatusTypeDef s3 = ee2_read_byte(EE2_1_CHIP_ADDR, &byte3, EE2_Loc_FOTA_App_SIZE_BYTE1);
 8000c04:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c08:	221a      	movs	r2, #26
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	20ac      	movs	r0, #172	@ 0xac
 8000c0e:	f7ff febb 	bl	8000988 <ee2_read_byte>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
	HAL_StatusTypeDef s4 = ee2_read_byte(EE2_1_CHIP_ADDR, &byte4, EE2_Loc_FOTA_App_SIZE_BYTE0);
 8000c18:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 8000c1c:	2219      	movs	r2, #25
 8000c1e:	4619      	mov	r1, r3
 8000c20:	20ac      	movs	r0, #172	@ 0xac
 8000c22:	f7ff feb1 	bl	8000988 <ee2_read_byte>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

	unsigned int appSize = (uint32_t)byte1 << 24 | (uint32_t)byte2 << 16 | (uint32_t)byte3 << 8 | (uint32_t)byte4 << 0;
 8000c2c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000c30:	061a      	lsls	r2, r3, #24
 8000c32:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	4313      	orrs	r3, r2
 8000c42:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 8000c46:	4313      	orrs	r3, r2
 8000c48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	/* ************************************************************************************************ */

	uint8_t fail = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	if(status == HAL_OK && byte == FOTA_START && s1 == HAL_OK && s2 == HAL_OK && s3 == HAL_OK && s4 == HAL_OK){
 8000c52:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8141 	bne.w	8000ede <update_firmware+0x33a>
 8000c5c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	f040 813c 	bne.w	8000ede <update_firmware+0x33a>
 8000c66:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8137 	bne.w	8000ede <update_firmware+0x33a>
 8000c70:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f040 8132 	bne.w	8000ede <update_firmware+0x33a>
 8000c7a:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 812d 	bne.w	8000ede <update_firmware+0x33a>
 8000c84:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f040 8128 	bne.w	8000ede <update_firmware+0x33a>
		HAL_StatusTypeDef ret = HAL_FLASH_Unlock();
 8000c8e:	f000 fccf 	bl	8001630 <HAL_FLASH_Unlock>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		if(ret != HAL_OK){
 8000c98:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d007      	beq.n	8000cb0 <update_firmware+0x10c>
			usb_debug_print("############################ HAL_FLASH_Unlock >> FAILED! Please try again later...\r\n", 0);
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4895      	ldr	r0, [pc, #596]	@ (8000ef8 <update_firmware+0x354>)
 8000ca4:	f7ff fe58 	bl	8000958 <usb_debug_print>
			jump_to_app(0);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 f94d 	bl	8000f48 <jump_to_app>
	if(status == HAL_OK && byte == FOTA_START && s1 == HAL_OK && s2 == HAL_OK && s3 == HAL_OK && s4 == HAL_OK){
 8000cae:	e11e      	b.n	8000eee <update_firmware+0x34a>
		}
		else{
			usb_debug_print("	*****	HAL_FLASH_Unlock >> OK	*****	\r\n", 0);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4892      	ldr	r0, [pc, #584]	@ (8000efc <update_firmware+0x358>)
 8000cb4:	f7ff fe50 	bl	8000958 <usb_debug_print>

			usb_debug_print("	*****	Erasing Flash Memory...	*****	\r\n", 0);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4891      	ldr	r0, [pc, #580]	@ (8000f00 <update_firmware+0x35c>)
 8000cbc:	f7ff fe4c 	bl	8000958 <usb_debug_print>
			//Erase the Flash
			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t SectorError;

			EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
			EraseInitStruct.PageAddress   = ETX_APP_START_ADDRESS;
 8000cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8000f04 <update_firmware+0x360>)
 8000cc6:	673b      	str	r3, [r7, #112]	@ 0x70
			EraseInitStruct.NbPages       = 110;                     // from 0x08008800 to 0x08040000 (2k Pages)
 8000cc8:	236e      	movs	r3, #110	@ 0x6e
 8000cca:	677b      	str	r3, [r7, #116]	@ 0x74

			ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000ccc:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8000cd0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fd92 	bl	8001800 <HAL_FLASHEx_Erase>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
			if( ret != HAL_OK ){
 8000ce2:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <update_firmware+0x156>
				usb_debug_print("	*****	Erasing Flash FAILED!	*****	\r\n", 0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	4886      	ldr	r0, [pc, #536]	@ (8000f08 <update_firmware+0x364>)
 8000cee:	f7ff fe33 	bl	8000958 <usb_debug_print>
				jump_to_app(0);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 f928 	bl	8000f48 <jump_to_app>
 8000cf8:	e003      	b.n	8000d02 <update_firmware+0x15e>
			}
			else {
				usb_debug_print("	*****	Erasing Flash Done!	*****	\r\n", 0);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4883      	ldr	r0, [pc, #524]	@ (8000f0c <update_firmware+0x368>)
 8000cfe:	f7ff fe2b 	bl	8000958 <usb_debug_print>
			}

			char buf[100];
			sprintf(buf, ">> Application size: %d\r\n", appSize);
 8000d02:	463b      	mov	r3, r7
 8000d04:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000d08:	4981      	ldr	r1, [pc, #516]	@ (8000f10 <update_firmware+0x36c>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 ffce 	bl	8003cac <siprintf>
			usb_debug_print(buf, 0);
 8000d10:	463b      	mov	r3, r7
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe1f 	bl	8000958 <usb_debug_print>

			int flash_write_progress = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			int percent = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			int former_percent = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

			for (int var = 0; var < appSize; var += 4) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000d32:	e08a      	b.n	8000e4a <update_firmware+0x2a6>

				uint32_t four_bytes = internal_flash_read_HALFWORD(IE2_Loc_FOTA_ROW_START + ( var + 3 )) << 24
 8000d34:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000d38:	4b76      	ldr	r3, [pc, #472]	@ (8000f14 <update_firmware+0x370>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff febb 	bl	8000ab8 <internal_flash_read_HALFWORD>
 8000d42:	4603      	mov	r3, r0
 8000d44:	061c      	lsls	r4, r3, #24
									| internal_flash_read_HALFWORD(IE2_Loc_FOTA_ROW_START + ( var + 2 )) << 16
 8000d46:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000d4a:	4b73      	ldr	r3, [pc, #460]	@ (8000f18 <update_firmware+0x374>)
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff feb2 	bl	8000ab8 <internal_flash_read_HALFWORD>
 8000d54:	4603      	mov	r3, r0
 8000d56:	041b      	lsls	r3, r3, #16
 8000d58:	431c      	orrs	r4, r3
									| internal_flash_read_HALFWORD(IE2_Loc_FOTA_ROW_START + ( var + 1 )) << 8
 8000d5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000d5e:	4b6f      	ldr	r3, [pc, #444]	@ (8000f1c <update_firmware+0x378>)
 8000d60:	4413      	add	r3, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fea8 	bl	8000ab8 <internal_flash_read_HALFWORD>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	431c      	orrs	r4, r3
									| internal_flash_read_HALFWORD(IE2_Loc_FOTA_ROW_START + ( var + 0 )) << 0;
 8000d6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000d72:	4b6b      	ldr	r3, [pc, #428]	@ (8000f20 <update_firmware+0x37c>)
 8000d74:	4413      	add	r3, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fe9e 	bl	8000ab8 <internal_flash_read_HALFWORD>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4323      	orrs	r3, r4
				uint32_t four_bytes = internal_flash_read_HALFWORD(IE2_Loc_FOTA_ROW_START + ( var + 3 )) << 24
 8000d80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

				ret = internal_flash_write_WORD(ETX_APP_START_ADDRESS + var, four_bytes);
 8000d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d88:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000d8c:	f503 4308 	add.w	r3, r3, #34816	@ 0x8800
 8000d90:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fe79 	bl	8000a8c <internal_flash_write_WORD>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

				flash_write_progress++;
 8000da0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000da4:	3301      	adds	r3, #1
 8000da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

				percent = (((float)flash_write_progress) / appSize) * 100;
 8000daa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000dae:	f7ff fafb 	bl	80003a8 <__aeabi_i2f>
 8000db2:	4604      	mov	r4, r0
 8000db4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000db8:	f7ff faf2 	bl	80003a0 <__aeabi_ui2f>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f7ff fbf9 	bl	80005b8 <__aeabi_fdiv>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4956      	ldr	r1, [pc, #344]	@ (8000f24 <update_firmware+0x380>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fb40 	bl	8000450 <__aeabi_fmul>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fc8c 	bl	80006f0 <__aeabi_f2iz>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				if( percent % 5 == 0 && percent != former_percent){
 8000dde:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000de2:	4b51      	ldr	r3, [pc, #324]	@ (8000f28 <update_firmware+0x384>)
 8000de4:	fb83 2301 	smull	r2, r3, r3, r1
 8000de8:	105a      	asrs	r2, r3, #1
 8000dea:	17cb      	asrs	r3, r1, #31
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	1aca      	subs	r2, r1, r3
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	d116      	bne.n	8000e28 <update_firmware+0x284>
 8000dfa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000dfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d010      	beq.n	8000e28 <update_firmware+0x284>
					former_percent = percent;
 8000e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
					sprintf(buf, ">> Flash Writing Progress >> %d%% \r\n", (percent * 4));
 8000e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e12:	009a      	lsls	r2, r3, #2
 8000e14:	463b      	mov	r3, r7
 8000e16:	4945      	ldr	r1, [pc, #276]	@ (8000f2c <update_firmware+0x388>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 ff47 	bl	8003cac <siprintf>
					usb_debug_print(buf, 0);
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fd98 	bl	8000958 <usb_debug_print>
				}

				if(ret != HAL_OK){
 8000e28:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d007      	beq.n	8000e40 <update_firmware+0x29c>
					usb_debug_print(">> FLASH_WRITE_NOT_OK!\r\n", 0);
 8000e30:	2100      	movs	r1, #0
 8000e32:	483f      	ldr	r0, [pc, #252]	@ (8000f30 <update_firmware+0x38c>)
 8000e34:	f7ff fd90 	bl	8000958 <usb_debug_print>
					fail = 1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					break;
 8000e3e:	e00b      	b.n	8000e58 <update_firmware+0x2b4>
			for (int var = 0; var < appSize; var += 4) {
 8000e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e44:	3304      	adds	r3, #4
 8000e46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e4e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000e52:	429a      	cmp	r2, r3
 8000e54:	f63f af6e 	bhi.w	8000d34 <update_firmware+0x190>
				}
			}

			ret = HAL_FLASH_Lock();
 8000e58:	f000 fc10 	bl	800167c <HAL_FLASH_Lock>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

			if(ret != HAL_OK){
 8000e62:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <update_firmware+0x2ce>
				fail = 2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8000e70:	e003      	b.n	8000e7a <update_firmware+0x2d6>
			}
			else{
				usb_debug_print("	*****	HAL_FLASH_Lock => OK	*****	\r\n", 0);
 8000e72:	2100      	movs	r1, #0
 8000e74:	482f      	ldr	r0, [pc, #188]	@ (8000f34 <update_firmware+0x390>)
 8000e76:	f7ff fd6f 	bl	8000958 <usb_debug_print>
			}

			if(fail == 0){
 8000e7a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d111      	bne.n	8000ea6 <update_firmware+0x302>
				ee2_write_byte(EE2_1_CHIP_ADDR, FOTA_STOP, EE2_Loc_FOTA_STATUS);
 8000e82:	2214      	movs	r2, #20
 8000e84:	2100      	movs	r1, #0
 8000e86:	20ac      	movs	r0, #172	@ 0xac
 8000e88:	f7ff fdb6 	bl	80009f8 <ee2_write_byte>
				ee2_write_byte(EE2_1_CHIP_ADDR, FOTA_DONE, EE2_Loc_Reset_Code_Address);
 8000e8c:	2227      	movs	r2, #39	@ 0x27
 8000e8e:	2102      	movs	r1, #2
 8000e90:	20ac      	movs	r0, #172	@ 0xac
 8000e92:	f7ff fdb1 	bl	80009f8 <ee2_write_byte>
				usb_debug_print("############################ Programming FLASH finished successfully...\r\n", 0);
 8000e96:	2100      	movs	r1, #0
 8000e98:	4827      	ldr	r0, [pc, #156]	@ (8000f38 <update_firmware+0x394>)
 8000e9a:	f7ff fd5d 	bl	8000958 <usb_debug_print>
				jump_to_app(1);
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f000 f852 	bl	8000f48 <jump_to_app>
	if(status == HAL_OK && byte == FOTA_START && s1 == HAL_OK && s2 == HAL_OK && s3 == HAL_OK && s4 == HAL_OK){
 8000ea4:	e023      	b.n	8000eee <update_firmware+0x34a>
			}
			else if(fail == 1){
 8000ea6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d109      	bne.n	8000ec2 <update_firmware+0x31e>
//				ee2_write_byte(EE2_1_CHIP_ADDR, FOTA_STOP, EE2_Loc_FOTA_STATUS);
				usb_debug_print("############################ Programming FLASH FAILED! Error occurred in writing into the FLASH Memory\r\n", 0);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4822      	ldr	r0, [pc, #136]	@ (8000f3c <update_firmware+0x398>)
 8000eb2:	f7ff fd51 	bl	8000958 <usb_debug_print>
//				jump_to_app(0);
				HAL_Delay(1000);
 8000eb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eba:	f000 fa41 	bl	8001340 <HAL_Delay>
				NVIC_SystemReset();
 8000ebe:	f7ff fd35 	bl	800092c <__NVIC_SystemReset>
			}
			else if(fail == 2){
 8000ec2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d111      	bne.n	8000eee <update_firmware+0x34a>
//				ee2_write_byte(EE2_1_CHIP_ADDR, FOTA_STOP, EE2_Loc_FOTA_STATUS);
				usb_debug_print("############################ Programming FLASH FAILED! Error occurred in Locking the FLASH Memory\r\n", 0);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	481c      	ldr	r0, [pc, #112]	@ (8000f40 <update_firmware+0x39c>)
 8000ece:	f7ff fd43 	bl	8000958 <usb_debug_print>
//				jump_to_app(0);
				HAL_Delay(1000);
 8000ed2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ed6:	f000 fa33 	bl	8001340 <HAL_Delay>
				NVIC_SystemReset();
 8000eda:	f7ff fd27 	bl	800092c <__NVIC_SystemReset>
			}
		}

	}
	else{
		usb_debug_print("############################ BOOTLOADER >> No New Program to write!\r\n", 0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4818      	ldr	r0, [pc, #96]	@ (8000f44 <update_firmware+0x3a0>)
 8000ee2:	f7ff fd39 	bl	8000958 <usb_debug_print>
		jump_to_app(0);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f82e 	bl	8000f48 <jump_to_app>
	}

	return;
 8000eec:	e000      	b.n	8000ef0 <update_firmware+0x34c>
	if(status == HAL_OK && byte == FOTA_START && s1 == HAL_OK && s2 == HAL_OK && s3 == HAL_OK && s4 == HAL_OK){
 8000eee:	bf00      	nop
	return;
 8000ef0:	bf00      	nop
}
 8000ef2:	37ac      	adds	r7, #172	@ 0xac
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	080047c0 	.word	0x080047c0
 8000efc:	08004818 	.word	0x08004818
 8000f00:	08004840 	.word	0x08004840
 8000f04:	08008800 	.word	0x08008800
 8000f08:	08004868 	.word	0x08004868
 8000f0c:	08004890 	.word	0x08004890
 8000f10:	080048b4 	.word	0x080048b4
 8000f14:	08040403 	.word	0x08040403
 8000f18:	08040402 	.word	0x08040402
 8000f1c:	08040401 	.word	0x08040401
 8000f20:	08040400 	.word	0x08040400
 8000f24:	42c80000 	.word	0x42c80000
 8000f28:	66666667 	.word	0x66666667
 8000f2c:	080048d0 	.word	0x080048d0
 8000f30:	080048f8 	.word	0x080048f8
 8000f34:	08004914 	.word	0x08004914
 8000f38:	0800493c 	.word	0x0800493c
 8000f3c:	08004988 	.word	0x08004988
 8000f40:	080049f4 	.word	0x080049f4
 8000f44:	08004a58 	.word	0x08004a58

08000f48 <jump_to_app>:

static void jump_to_app(uint8_t flag)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0a0      	sub	sp, #128	@ 0x80
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	if(flag){
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d004      	beq.n	8000f62 <jump_to_app+0x1a>
		usb_debug_print("############################ Jumping to NEW Application\r\n", 0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4824      	ldr	r0, [pc, #144]	@ (8000fec <jump_to_app+0xa4>)
 8000f5c:	f7ff fcfc 	bl	8000958 <usb_debug_print>
 8000f60:	e003      	b.n	8000f6a <jump_to_app+0x22>
	}
	else{
		usb_debug_print("############################ Jumping to Application\r\n", 0);
 8000f62:	2100      	movs	r1, #0
 8000f64:	4822      	ldr	r0, [pc, #136]	@ (8000ff0 <jump_to_app+0xa8>)
 8000f66:	f7ff fcf7 	bl	8000958 <usb_debug_print>
	}
	char jump_address[100];
	sprintf(jump_address, "############################ JUMP ADDRESS >> %08lX\r\n", (long unsigned int)ETX_APP_START_ADDRESS);
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <jump_to_app+0xac>)
 8000f70:	4921      	ldr	r1, [pc, #132]	@ (8000ff8 <jump_to_app+0xb0>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fe9a 	bl	8003cac <siprintf>
	usb_debug_print(jump_address, 0);
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fcea 	bl	8000958 <usb_debug_print>
	usb_debug_print("##################################### ENDOF BOOTLOADER #####################################\r\n", 0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	481d      	ldr	r0, [pc, #116]	@ (8000ffc <jump_to_app+0xb4>)
 8000f88:	f7ff fce6 	bl	8000958 <usb_debug_print>
////	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
//
//	app_reset_handler();    //call the app reset handler

//////////////////////////	CORRECT	////////////////////////////////////
	HAL_RCC_DeInit();
 8000f8c:	f002 f814 	bl	8002fb8 <HAL_RCC_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop

	__disable_irq();

	for (int i = 0; i < (sizeof(NVIC->ICPR) / sizeof(NVIC->ICPR[0])); i++) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000f98:	e007      	b.n	8000faa <jump_to_app+0x62>
		NVIC_ClearPendingIRQ(i);
 8000f9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fca6 	bl	80008f0 <__NVIC_ClearPendingIRQ>
	for (int i = 0; i < (sizeof(NVIC->ICPR) / sizeof(NVIC->ICPR[0])); i++) {
 8000fa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000faa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fac:	2b07      	cmp	r3, #7
 8000fae:	d9f4      	bls.n	8000f9a <jump_to_app+0x52>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fb6:	f383 8814 	msr	CONTROL, r3
}
 8000fba:	bf00      	nop

	__set_CONTROL(0x00);

	typedef void (*jump_app)(void);

	volatile uint32_t *_vectable = (volatile uint32_t *)(__IO uint32_t*)(ETX_APP_START_ADDRESS);  // point _vectable to the start of the application at 0x08005000
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <jump_to_app+0xac>)
 8000fbe:	67bb      	str	r3, [r7, #120]	@ 0x78

	jump_app app_jump = (jump_app) *(_vectable + 1);   // get the address of the application's reset handler by loading the 2nd entry in the table
 8000fc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	677b      	str	r3, [r7, #116]	@ 0x74

	SCB->VTOR = *_vectable;   // point VTOR to the start of the application's vector table
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <jump_to_app+0xb8>)
 8000fca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6093      	str	r3, [r2, #8]

	__set_MSP(*_vectable);   // setup the initial stack pointer using the RAM address contained at the start of the vector table
 8000fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	673b      	str	r3, [r7, #112]	@ 0x70
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000fd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fd8:	f383 8808 	msr	MSP, r3
}
 8000fdc:	bf00      	nop

	app_jump();   // call the application's reset handler
 8000fde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fe0:	4798      	blx	r3


}
 8000fe2:	bf00      	nop
 8000fe4:	3780      	adds	r7, #128	@ 0x80
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	08004aa0 	.word	0x08004aa0
 8000ff0:	08004adc 	.word	0x08004adc
 8000ff4:	08008800 	.word	0x08008800
 8000ff8:	08004b14 	.word	0x08004b14
 8000ffc:	08004b4c 	.word	0x08004b4c
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_MspInit+0x5c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a14      	ldr	r2, [pc, #80]	@ (800106c <HAL_MspInit+0x5c>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6193      	str	r3, [r2, #24]
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_MspInit+0x5c>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_MspInit+0x5c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <HAL_MspInit+0x5c>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <HAL_MspInit+0x5c>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_MspInit+0x60>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_MspInit+0x60>)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <NMI_Handler+0x4>

0800107c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <MemManage_Handler+0x4>

0800108c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <UsageFault_Handler+0x4>

0800109c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 f920 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f002 fdfe 	bl	8003cfc <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20010000 	.word	0x20010000
 800112c:	00000400 	.word	0x00000400
 8001130:	200000d0 	.word	0x200000d0
 8001134:	20000288 	.word	0x20000288

08001138 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <MX_USART3_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <MX_USART3_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <MX_USART3_UART_Init+0x4c>)
 8001150:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001154:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <MX_USART3_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <MX_USART3_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <MX_USART3_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_USART3_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <MX_USART3_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <MX_USART3_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_USART3_UART_Init+0x4c>)
 800117c:	f002 fbc6 	bl	800390c <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f7ff ff3d 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000d4 	.word	0x200000d4
 8001194:	40004800 	.word	0x40004800

08001198 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001224 <HAL_UART_MspInit+0x8c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d131      	bne.n	800121c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <HAL_UART_MspInit+0x90>)
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001228 <HAL_UART_MspInit+0x90>)
 80011be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c2:	61d3      	str	r3, [r2, #28]
 80011c4:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <HAL_UART_MspInit+0x90>)
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_UART_MspInit+0x90>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a14      	ldr	r2, [pc, #80]	@ (8001228 <HAL_UART_MspInit+0x90>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_UART_MspInit+0x90>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	480b      	ldr	r0, [pc, #44]	@ (800122c <HAL_UART_MspInit+0x94>)
 80011fe:	f000 fba7 	bl	8001950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001202:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <HAL_UART_MspInit+0x94>)
 8001218:	f000 fb9a 	bl	8001950 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40004800 	.word	0x40004800
 8001228:	40021000 	.word	0x40021000
 800122c:	40010c00 	.word	0x40010c00

08001230 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001230:	f7ff ff82 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001234:	480b      	ldr	r0, [pc, #44]	@ (8001264 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001236:	490c      	ldr	r1, [pc, #48]	@ (8001268 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001238:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <LoopFillZerobss+0x16>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a09      	ldr	r2, [pc, #36]	@ (8001270 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800124c:	4c09      	ldr	r4, [pc, #36]	@ (8001274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125a:	f002 fd55 	bl	8003d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125e:	f7ff fc39 	bl	8000ad4 <main>
  bx lr
 8001262:	4770      	bx	lr
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800126c:	08004c1c 	.word	0x08004c1c
  ldr r2, =_sbss
 8001270:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001274:	20000288 	.word	0x20000288

08001278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC1_2_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <HAL_Init+0x28>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_Init+0x28>)
 8001286:	f043 0310 	orr.w	r3, r3, #16
 800128a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 f92b 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	200f      	movs	r0, #15
 8001294:	f000 f808 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff feba 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40022000 	.word	0x40022000

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f935 	bl	8001536 <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 f90b 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000008 	.word	0x20000008
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <HAL_IncTick+0x1c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <HAL_IncTick+0x20>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a03      	ldr	r2, [pc, #12]	@ (8001328 <HAL_IncTick+0x20>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000008 	.word	0x20000008
 8001328:	2000011c 	.word	0x2000011c

0800132c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b02      	ldr	r3, [pc, #8]	@ (800133c <HAL_GetTick+0x10>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	2000011c 	.word	0x2000011c

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff fff0 	bl	800132c <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <HAL_Delay+0x44>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffe0 	bl	800132c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008

08001388 <__NVIC_SetPriorityGrouping>:
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_SetPriority>:
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	@ (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	@ (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	@ 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff90 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff49 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff5e 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff90 	bl	8001440 <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5f 	bl	80013ec <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffb0 	bl	80014a4 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800156a:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <HAL_FLASH_Program+0xd8>)
 800156c:	7e1b      	ldrb	r3, [r3, #24]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_FLASH_Program+0x26>
 8001572:	2302      	movs	r3, #2
 8001574:	e054      	b.n	8001620 <HAL_FLASH_Program+0xd0>
 8001576:	4b2c      	ldr	r3, [pc, #176]	@ (8001628 <HAL_FLASH_Program+0xd8>)
 8001578:	2201      	movs	r2, #1
 800157a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800157c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001580:	f000 f8a8 	bl	80016d4 <FLASH_WaitForLastOperation>
 8001584:	4603      	mov	r3, r0
 8001586:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d144      	bne.n	8001618 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d102      	bne.n	800159a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001594:	2301      	movs	r3, #1
 8001596:	757b      	strb	r3, [r7, #21]
 8001598:	e007      	b.n	80015aa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d102      	bne.n	80015a6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80015a0:	2302      	movs	r3, #2
 80015a2:	757b      	strb	r3, [r7, #21]
 80015a4:	e001      	b.n	80015aa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80015a6:	2304      	movs	r3, #4
 80015a8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	75bb      	strb	r3, [r7, #22]
 80015ae:	e02d      	b.n	800160c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80015b0:	7dbb      	ldrb	r3, [r7, #22]
 80015b2:	005a      	lsls	r2, r3, #1
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	eb02 0c03 	add.w	ip, r2, r3
 80015ba:	7dbb      	ldrb	r3, [r7, #22]
 80015bc:	0119      	lsls	r1, r3, #4
 80015be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015c2:	f1c1 0620 	rsb	r6, r1, #32
 80015c6:	f1a1 0020 	sub.w	r0, r1, #32
 80015ca:	fa22 f401 	lsr.w	r4, r2, r1
 80015ce:	fa03 f606 	lsl.w	r6, r3, r6
 80015d2:	4334      	orrs	r4, r6
 80015d4:	fa23 f000 	lsr.w	r0, r3, r0
 80015d8:	4304      	orrs	r4, r0
 80015da:	fa23 f501 	lsr.w	r5, r3, r1
 80015de:	b2a3      	uxth	r3, r4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4660      	mov	r0, ip
 80015e4:	f000 f85a 	bl	800169c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80015e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015ec:	f000 f872 	bl	80016d4 <FLASH_WaitForLastOperation>
 80015f0:	4603      	mov	r3, r0
 80015f2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <HAL_FLASH_Program+0xdc>)
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	4a0c      	ldr	r2, [pc, #48]	@ (800162c <HAL_FLASH_Program+0xdc>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d107      	bne.n	8001616 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001606:	7dbb      	ldrb	r3, [r7, #22]
 8001608:	3301      	adds	r3, #1
 800160a:	75bb      	strb	r3, [r7, #22]
 800160c:	7dba      	ldrb	r2, [r7, #22]
 800160e:	7d7b      	ldrb	r3, [r7, #21]
 8001610:	429a      	cmp	r2, r3
 8001612:	d3cd      	bcc.n	80015b0 <HAL_FLASH_Program+0x60>
 8001614:	e000      	b.n	8001618 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001616:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <HAL_FLASH_Program+0xd8>)
 800161a:	2200      	movs	r2, #0
 800161c:	761a      	strb	r2, [r3, #24]

  return status;
 800161e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001620:	4618      	mov	r0, r3
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001628:	20000120 	.word	0x20000120
 800162c:	40022000 	.word	0x40022000

08001630 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800163a:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <HAL_FLASH_Unlock+0x40>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00d      	beq.n	8001662 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_FLASH_Unlock+0x40>)
 8001648:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <HAL_FLASH_Unlock+0x44>)
 800164a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_FLASH_Unlock+0x40>)
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <HAL_FLASH_Unlock+0x48>)
 8001650:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <HAL_FLASH_Unlock+0x40>)
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001662:	79fb      	ldrb	r3, [r7, #7]
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000
 8001674:	45670123 	.word	0x45670123
 8001678:	cdef89ab 	.word	0xcdef89ab

0800167c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_FLASH_Lock+0x1c>)
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <HAL_FLASH_Lock+0x1c>)
 8001686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800168a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40022000 	.word	0x40022000

0800169c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <FLASH_Program_HalfWord+0x30>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <FLASH_Program_HalfWord+0x34>)
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <FLASH_Program_HalfWord+0x34>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	887a      	ldrh	r2, [r7, #2]
 80016be:	801a      	strh	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000120 	.word	0x20000120
 80016d0:	40022000 	.word	0x40022000

080016d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff fe26 	bl	800132c <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80016e2:	e010      	b.n	8001706 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ea:	d00c      	beq.n	8001706 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <FLASH_WaitForLastOperation+0x2e>
 80016f2:	f7ff fe1b 	bl	800132c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d201      	bcs.n	8001706 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e025      	b.n	8001752 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <FLASH_WaitForLastOperation+0x88>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1e8      	bne.n	80016e4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <FLASH_WaitForLastOperation+0x88>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <FLASH_WaitForLastOperation+0x88>)
 8001720:	2220      	movs	r2, #32
 8001722:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001724:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <FLASH_WaitForLastOperation+0x88>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10b      	bne.n	8001748 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001730:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <FLASH_WaitForLastOperation+0x88>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800173c:	4b07      	ldr	r3, [pc, #28]	@ (800175c <FLASH_WaitForLastOperation+0x88>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001748:	f000 f80a 	bl	8001760 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40022000 	.word	0x40022000

08001760 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800176a:	4b23      	ldr	r3, [pc, #140]	@ (80017f8 <FLASH_SetErrorCode+0x98>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001776:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <FLASH_SetErrorCode+0x9c>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	4a1f      	ldr	r2, [pc, #124]	@ (80017fc <FLASH_SetErrorCode+0x9c>)
 8001780:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f043 0310 	orr.w	r3, r3, #16
 8001788:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800178a:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <FLASH_SetErrorCode+0x98>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001796:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <FLASH_SetErrorCode+0x9c>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <FLASH_SetErrorCode+0x9c>)
 80017a0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <FLASH_SetErrorCode+0x98>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <FLASH_SetErrorCode+0x9c>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	4a0f      	ldr	r2, [pc, #60]	@ (80017fc <FLASH_SetErrorCode+0x9c>)
 80017c0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80017c2:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <FLASH_SetErrorCode+0x98>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a0c      	ldr	r2, [pc, #48]	@ (80017f8 <FLASH_SetErrorCode+0x98>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f240 1201 	movw	r2, #257	@ 0x101
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d106      	bne.n	80017e6 <FLASH_SetErrorCode+0x86>
 80017d8:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <FLASH_SetErrorCode+0x98>)
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	4a06      	ldr	r2, [pc, #24]	@ (80017f8 <FLASH_SetErrorCode+0x98>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	61d3      	str	r3, [r2, #28]
}  
 80017e4:	e002      	b.n	80017ec <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80017e6:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <FLASH_SetErrorCode+0x98>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	60d3      	str	r3, [r2, #12]
}  
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000
 80017fc:	20000120 	.word	0x20000120

08001800 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001812:	4b2f      	ldr	r3, [pc, #188]	@ (80018d0 <HAL_FLASHEx_Erase+0xd0>)
 8001814:	7e1b      	ldrb	r3, [r3, #24]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_FLASHEx_Erase+0x1e>
 800181a:	2302      	movs	r3, #2
 800181c:	e053      	b.n	80018c6 <HAL_FLASHEx_Erase+0xc6>
 800181e:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <HAL_FLASHEx_Erase+0xd0>)
 8001820:	2201      	movs	r2, #1
 8001822:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d116      	bne.n	800185a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800182c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001830:	f7ff ff50 	bl	80016d4 <FLASH_WaitForLastOperation>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d141      	bne.n	80018be <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800183a:	2001      	movs	r0, #1
 800183c:	f000 f84c 	bl	80018d8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001840:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001844:	f7ff ff46 	bl	80016d4 <FLASH_WaitForLastOperation>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800184c:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <HAL_FLASHEx_Erase+0xd4>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	4a20      	ldr	r2, [pc, #128]	@ (80018d4 <HAL_FLASHEx_Erase+0xd4>)
 8001852:	f023 0304 	bic.w	r3, r3, #4
 8001856:	6113      	str	r3, [r2, #16]
 8001858:	e031      	b.n	80018be <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800185a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800185e:	f7ff ff39 	bl	80016d4 <FLASH_WaitForLastOperation>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d12a      	bne.n	80018be <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f04f 32ff 	mov.w	r2, #4294967295
 800186e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	e019      	b.n	80018ac <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001878:	68b8      	ldr	r0, [r7, #8]
 800187a:	f000 f849 	bl	8001910 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800187e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001882:	f7ff ff27 	bl	80016d4 <FLASH_WaitForLastOperation>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_FLASHEx_Erase+0xd4>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	4a11      	ldr	r2, [pc, #68]	@ (80018d4 <HAL_FLASHEx_Erase+0xd4>)
 8001890:	f023 0302 	bic.w	r3, r3, #2
 8001894:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	601a      	str	r2, [r3, #0]
            break;
 80018a2:	e00c      	b.n	80018be <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018aa:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	02da      	lsls	r2, r3, #11
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4413      	add	r3, r2
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3dc      	bcc.n	8001878 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018be:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <HAL_FLASHEx_Erase+0xd0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	761a      	strb	r2, [r3, #24]

  return status;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000120 	.word	0x20000120
 80018d4:	40022000 	.word	0x40022000

080018d8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018e0:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <FLASH_MassErase+0x30>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <FLASH_MassErase+0x34>)
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	4a08      	ldr	r2, [pc, #32]	@ (800190c <FLASH_MassErase+0x34>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <FLASH_MassErase+0x34>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	4a05      	ldr	r2, [pc, #20]	@ (800190c <FLASH_MassErase+0x34>)
 80018f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018fc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	20000120 	.word	0x20000120
 800190c:	40022000 	.word	0x40022000

08001910 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <FLASH_PageErase+0x38>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <FLASH_PageErase+0x3c>)
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <FLASH_PageErase+0x3c>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800192a:	4a08      	ldr	r2, [pc, #32]	@ (800194c <FLASH_PageErase+0x3c>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <FLASH_PageErase+0x3c>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4a05      	ldr	r2, [pc, #20]	@ (800194c <FLASH_PageErase+0x3c>)
 8001936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800193a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000120 	.word	0x20000120
 800194c:	40022000 	.word	0x40022000

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b08b      	sub	sp, #44	@ 0x2c
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001962:	e179      	b.n	8001c58 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001964:	2201      	movs	r2, #1
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	429a      	cmp	r2, r3
 800197e:	f040 8168 	bne.w	8001c52 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a96      	ldr	r2, [pc, #600]	@ (8001be0 <HAL_GPIO_Init+0x290>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d05e      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 800198c:	4a94      	ldr	r2, [pc, #592]	@ (8001be0 <HAL_GPIO_Init+0x290>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d875      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 8001992:	4a94      	ldr	r2, [pc, #592]	@ (8001be4 <HAL_GPIO_Init+0x294>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d058      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 8001998:	4a92      	ldr	r2, [pc, #584]	@ (8001be4 <HAL_GPIO_Init+0x294>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d86f      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 800199e:	4a92      	ldr	r2, [pc, #584]	@ (8001be8 <HAL_GPIO_Init+0x298>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d052      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 80019a4:	4a90      	ldr	r2, [pc, #576]	@ (8001be8 <HAL_GPIO_Init+0x298>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d869      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019aa:	4a90      	ldr	r2, [pc, #576]	@ (8001bec <HAL_GPIO_Init+0x29c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d04c      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 80019b0:	4a8e      	ldr	r2, [pc, #568]	@ (8001bec <HAL_GPIO_Init+0x29c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d863      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019b6:	4a8e      	ldr	r2, [pc, #568]	@ (8001bf0 <HAL_GPIO_Init+0x2a0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d046      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 80019bc:	4a8c      	ldr	r2, [pc, #560]	@ (8001bf0 <HAL_GPIO_Init+0x2a0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d85d      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019c2:	2b12      	cmp	r3, #18
 80019c4:	d82a      	bhi.n	8001a1c <HAL_GPIO_Init+0xcc>
 80019c6:	2b12      	cmp	r3, #18
 80019c8:	d859      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019ca:	a201      	add	r2, pc, #4	@ (adr r2, 80019d0 <HAL_GPIO_Init+0x80>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	08001a4b 	.word	0x08001a4b
 80019d4:	08001a25 	.word	0x08001a25
 80019d8:	08001a37 	.word	0x08001a37
 80019dc:	08001a79 	.word	0x08001a79
 80019e0:	08001a7f 	.word	0x08001a7f
 80019e4:	08001a7f 	.word	0x08001a7f
 80019e8:	08001a7f 	.word	0x08001a7f
 80019ec:	08001a7f 	.word	0x08001a7f
 80019f0:	08001a7f 	.word	0x08001a7f
 80019f4:	08001a7f 	.word	0x08001a7f
 80019f8:	08001a7f 	.word	0x08001a7f
 80019fc:	08001a7f 	.word	0x08001a7f
 8001a00:	08001a7f 	.word	0x08001a7f
 8001a04:	08001a7f 	.word	0x08001a7f
 8001a08:	08001a7f 	.word	0x08001a7f
 8001a0c:	08001a7f 	.word	0x08001a7f
 8001a10:	08001a7f 	.word	0x08001a7f
 8001a14:	08001a2d 	.word	0x08001a2d
 8001a18:	08001a41 	.word	0x08001a41
 8001a1c:	4a75      	ldr	r2, [pc, #468]	@ (8001bf4 <HAL_GPIO_Init+0x2a4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a22:	e02c      	b.n	8001a7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e029      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	3304      	adds	r3, #4
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e024      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e01f      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	330c      	adds	r3, #12
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e01a      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a52:	2304      	movs	r3, #4
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e013      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a60:	2308      	movs	r3, #8
 8001a62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	611a      	str	r2, [r3, #16]
          break;
 8001a6a:	e009      	b.n	8001a80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	615a      	str	r2, [r3, #20]
          break;
 8001a76:	e003      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
          break;
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          break;
 8001a7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2bff      	cmp	r3, #255	@ 0xff
 8001a84:	d801      	bhi.n	8001a8a <HAL_GPIO_Init+0x13a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	e001      	b.n	8001a8e <HAL_GPIO_Init+0x13e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2bff      	cmp	r3, #255	@ 0xff
 8001a94:	d802      	bhi.n	8001a9c <HAL_GPIO_Init+0x14c>
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0x152>
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	3b08      	subs	r3, #8
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	210f      	movs	r1, #15
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	6a39      	ldr	r1, [r7, #32]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80c1 	beq.w	8001c52 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	@ (8001bf8 <HAL_GPIO_Init+0x2a8>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	@ (8001bf8 <HAL_GPIO_Init+0x2a8>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b46      	ldr	r3, [pc, #280]	@ (8001bf8 <HAL_GPIO_Init+0x2a8>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae8:	4a44      	ldr	r2, [pc, #272]	@ (8001bfc <HAL_GPIO_Init+0x2ac>)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c00 <HAL_GPIO_Init+0x2b0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d01f      	beq.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3b      	ldr	r2, [pc, #236]	@ (8001c04 <HAL_GPIO_Init+0x2b4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d019      	beq.n	8001b50 <HAL_GPIO_Init+0x200>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c08 <HAL_GPIO_Init+0x2b8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_GPIO_Init+0x1fc>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a39      	ldr	r2, [pc, #228]	@ (8001c0c <HAL_GPIO_Init+0x2bc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00d      	beq.n	8001b48 <HAL_GPIO_Init+0x1f8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a38      	ldr	r2, [pc, #224]	@ (8001c10 <HAL_GPIO_Init+0x2c0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d007      	beq.n	8001b44 <HAL_GPIO_Init+0x1f4>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a37      	ldr	r2, [pc, #220]	@ (8001c14 <HAL_GPIO_Init+0x2c4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d101      	bne.n	8001b40 <HAL_GPIO_Init+0x1f0>
 8001b3c:	2305      	movs	r3, #5
 8001b3e:	e00a      	b.n	8001b56 <HAL_GPIO_Init+0x206>
 8001b40:	2306      	movs	r3, #6
 8001b42:	e008      	b.n	8001b56 <HAL_GPIO_Init+0x206>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e006      	b.n	8001b56 <HAL_GPIO_Init+0x206>
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e004      	b.n	8001b56 <HAL_GPIO_Init+0x206>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e002      	b.n	8001b56 <HAL_GPIO_Init+0x206>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_GPIO_Init+0x206>
 8001b54:	2300      	movs	r3, #0
 8001b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b58:	f002 0203 	and.w	r2, r2, #3
 8001b5c:	0092      	lsls	r2, r2, #2
 8001b5e:	4093      	lsls	r3, r2
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b66:	4925      	ldr	r1, [pc, #148]	@ (8001bfc <HAL_GPIO_Init+0x2ac>)
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b80:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4924      	ldr	r1, [pc, #144]	@ (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b8e:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4920      	ldr	r1, [pc, #128]	@ (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	491a      	ldr	r1, [pc, #104]	@ (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60cb      	str	r3, [r1, #12]
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb6:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4916      	ldr	r1, [pc, #88]	@ (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d025      	beq.n	8001c1c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4910      	ldr	r1, [pc, #64]	@ (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
 8001bdc:	e025      	b.n	8001c2a <HAL_GPIO_Init+0x2da>
 8001bde:	bf00      	nop
 8001be0:	10320000 	.word	0x10320000
 8001be4:	10310000 	.word	0x10310000
 8001be8:	10220000 	.word	0x10220000
 8001bec:	10210000 	.word	0x10210000
 8001bf0:	10120000 	.word	0x10120000
 8001bf4:	10110000 	.word	0x10110000
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	40010800 	.word	0x40010800
 8001c04:	40010c00 	.word	0x40010c00
 8001c08:	40011000 	.word	0x40011000
 8001c0c:	40011400 	.word	0x40011400
 8001c10:	40011800 	.word	0x40011800
 8001c14:	40011c00 	.word	0x40011c00
 8001c18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c1c:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <HAL_GPIO_Init+0x324>)
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4913      	ldr	r1, [pc, #76]	@ (8001c74 <HAL_GPIO_Init+0x324>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c36:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <HAL_GPIO_Init+0x324>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	490e      	ldr	r1, [pc, #56]	@ (8001c74 <HAL_GPIO_Init+0x324>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <HAL_GPIO_Init+0x324>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	4909      	ldr	r1, [pc, #36]	@ (8001c74 <HAL_GPIO_Init+0x324>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	3301      	adds	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f47f ae7e 	bne.w	8001964 <HAL_GPIO_Init+0x14>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	372c      	adds	r7, #44	@ 0x2c
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c94:	e003      	b.n	8001c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	041a      	lsls	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e12b      	b.n	8001f12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fdd0 	bl	8000874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	@ 0x24
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d0c:	f001 fdb8 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8001d10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4a81      	ldr	r2, [pc, #516]	@ (8001f1c <HAL_I2C_Init+0x274>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d807      	bhi.n	8001d2c <HAL_I2C_Init+0x84>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4a80      	ldr	r2, [pc, #512]	@ (8001f20 <HAL_I2C_Init+0x278>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	bf94      	ite	ls
 8001d24:	2301      	movls	r3, #1
 8001d26:	2300      	movhi	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	e006      	b.n	8001d3a <HAL_I2C_Init+0x92>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4a7d      	ldr	r2, [pc, #500]	@ (8001f24 <HAL_I2C_Init+0x27c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	bf94      	ite	ls
 8001d34:	2301      	movls	r3, #1
 8001d36:	2300      	movhi	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0e7      	b.n	8001f12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4a78      	ldr	r2, [pc, #480]	@ (8001f28 <HAL_I2C_Init+0x280>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0c9b      	lsrs	r3, r3, #18
 8001d4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a6a      	ldr	r2, [pc, #424]	@ (8001f1c <HAL_I2C_Init+0x274>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d802      	bhi.n	8001d7c <HAL_I2C_Init+0xd4>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	e009      	b.n	8001d90 <HAL_I2C_Init+0xe8>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	4a69      	ldr	r2, [pc, #420]	@ (8001f2c <HAL_I2C_Init+0x284>)
 8001d88:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8c:	099b      	lsrs	r3, r3, #6
 8001d8e:	3301      	adds	r3, #1
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	430b      	orrs	r3, r1
 8001d96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001da2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	495c      	ldr	r1, [pc, #368]	@ (8001f1c <HAL_I2C_Init+0x274>)
 8001dac:	428b      	cmp	r3, r1
 8001dae:	d819      	bhi.n	8001de4 <HAL_I2C_Init+0x13c>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1e59      	subs	r1, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dbe:	1c59      	adds	r1, r3, #1
 8001dc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001dc4:	400b      	ands	r3, r1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00a      	beq.n	8001de0 <HAL_I2C_Init+0x138>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1e59      	subs	r1, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd8:	3301      	adds	r3, #1
 8001dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dde:	e051      	b.n	8001e84 <HAL_I2C_Init+0x1dc>
 8001de0:	2304      	movs	r3, #4
 8001de2:	e04f      	b.n	8001e84 <HAL_I2C_Init+0x1dc>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d111      	bne.n	8001e10 <HAL_I2C_Init+0x168>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1e58      	subs	r0, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	440b      	add	r3, r1
 8001dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	e012      	b.n	8001e36 <HAL_I2C_Init+0x18e>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e58      	subs	r0, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	0099      	lsls	r1, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Init+0x196>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e022      	b.n	8001e84 <HAL_I2C_Init+0x1dc>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10e      	bne.n	8001e64 <HAL_I2C_Init+0x1bc>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1e58      	subs	r0, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6859      	ldr	r1, [r3, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	440b      	add	r3, r1
 8001e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e62:	e00f      	b.n	8001e84 <HAL_I2C_Init+0x1dc>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1e58      	subs	r0, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	0099      	lsls	r1, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	6809      	ldr	r1, [r1, #0]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001eb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6911      	ldr	r1, [r2, #16]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68d2      	ldr	r2, [r2, #12]
 8001ebe:	4311      	orrs	r1, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	000186a0 	.word	0x000186a0
 8001f20:	001e847f 	.word	0x001e847f
 8001f24:	003d08ff 	.word	0x003d08ff
 8001f28:	431bde83 	.word	0x431bde83
 8001f2c:	10624dd3 	.word	0x10624dd3

08001f30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	817b      	strh	r3, [r7, #10]
 8001f42:	460b      	mov	r3, r1
 8001f44:	813b      	strh	r3, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f4a:	f7ff f9ef 	bl	800132c <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	f040 80d9 	bne.w	8002110 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2319      	movs	r3, #25
 8001f64:	2201      	movs	r2, #1
 8001f66:	496d      	ldr	r1, [pc, #436]	@ (800211c <HAL_I2C_Mem_Write+0x1ec>)
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fdef 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
 8001f76:	e0cc      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_I2C_Mem_Write+0x56>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e0c5      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d007      	beq.n	8001fac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2221      	movs	r2, #33	@ 0x21
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2240      	movs	r2, #64	@ 0x40
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a3a      	ldr	r2, [r7, #32]
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a4d      	ldr	r2, [pc, #308]	@ (8002120 <HAL_I2C_Mem_Write+0x1f0>)
 8001fec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fee:	88f8      	ldrh	r0, [r7, #6]
 8001ff0:	893a      	ldrh	r2, [r7, #8]
 8001ff2:	8979      	ldrh	r1, [r7, #10]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fc26 	bl	8002850 <I2C_RequestMemoryWrite>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d052      	beq.n	80020b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e081      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 feb4 	bl	8002d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00d      	beq.n	800203a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	2b04      	cmp	r3, #4
 8002024:	d107      	bne.n	8002036 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06b      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203e:	781a      	ldrb	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b04      	cmp	r3, #4
 8002076:	d11b      	bne.n	80020b0 <HAL_I2C_Mem_Write+0x180>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	d017      	beq.n	80020b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1aa      	bne.n	800200e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fea7 	bl	8002e10 <I2C_WaitOnBTFFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00d      	beq.n	80020e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d107      	bne.n	80020e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e016      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	e000      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002110:	2302      	movs	r3, #2
  }
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	00100002 	.word	0x00100002
 8002120:	ffff0000 	.word	0xffff0000

08002124 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08c      	sub	sp, #48	@ 0x30
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	461a      	mov	r2, r3
 8002132:	4603      	mov	r3, r0
 8002134:	817b      	strh	r3, [r7, #10]
 8002136:	460b      	mov	r3, r1
 8002138:	813b      	strh	r3, [r7, #8]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002142:	f7ff f8f3 	bl	800132c <HAL_GetTick>
 8002146:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b20      	cmp	r3, #32
 8002152:	f040 8244 	bne.w	80025de <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2319      	movs	r3, #25
 800215c:	2201      	movs	r2, #1
 800215e:	4982      	ldr	r1, [pc, #520]	@ (8002368 <HAL_I2C_Mem_Read+0x244>)
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fcf3 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
 800216e:	e237      	b.n	80025e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_I2C_Mem_Read+0x5a>
 800217a:	2302      	movs	r3, #2
 800217c:	e230      	b.n	80025e0 <HAL_I2C_Mem_Read+0x4bc>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d007      	beq.n	80021a4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2222      	movs	r2, #34	@ 0x22
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2240      	movs	r2, #64	@ 0x40
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80021d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a62      	ldr	r2, [pc, #392]	@ (800236c <HAL_I2C_Mem_Read+0x248>)
 80021e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021e6:	88f8      	ldrh	r0, [r7, #6]
 80021e8:	893a      	ldrh	r2, [r7, #8]
 80021ea:	8979      	ldrh	r1, [r7, #10]
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4603      	mov	r3, r0
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fbc0 	bl	800297c <I2C_RequestMemoryRead>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e1ec      	b.n	80025e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220a:	2b00      	cmp	r3, #0
 800220c:	d113      	bne.n	8002236 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e1c0      	b.n	80025b8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800223a:	2b01      	cmp	r3, #1
 800223c:	d11e      	bne.n	800227c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800224c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800224e:	b672      	cpsid	i
}
 8002250:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002276:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002278:	b662      	cpsie	i
}
 800227a:	e035      	b.n	80022e8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002280:	2b02      	cmp	r3, #2
 8002282:	d11e      	bne.n	80022c2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002292:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022be:	b662      	cpsie	i
}
 80022c0:	e012      	b.n	80022e8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022d0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80022e8:	e166      	b.n	80025b8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	f200 811f 	bhi.w	8002532 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d123      	bne.n	8002344 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fdcd 	bl	8002ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e167      	b.n	80025e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002342:	e139      	b.n	80025b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002348:	2b02      	cmp	r3, #2
 800234a:	d152      	bne.n	80023f2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002352:	2200      	movs	r2, #0
 8002354:	4906      	ldr	r1, [pc, #24]	@ (8002370 <HAL_I2C_Mem_Read+0x24c>)
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 fbf8 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e13c      	b.n	80025e0 <HAL_I2C_Mem_Read+0x4bc>
 8002366:	bf00      	nop
 8002368:	00100002 	.word	0x00100002
 800236c:	ffff0000 	.word	0xffff0000
 8002370:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023ba:	b662      	cpsie	i
}
 80023bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023f0:	e0e2      	b.n	80025b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f8:	2200      	movs	r2, #0
 80023fa:	497b      	ldr	r1, [pc, #492]	@ (80025e8 <HAL_I2C_Mem_Read+0x4c4>)
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fba5 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0e9      	b.n	80025e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800241a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800241c:	b672      	cpsid	i
}
 800241e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002452:	4b66      	ldr	r3, [pc, #408]	@ (80025ec <HAL_I2C_Mem_Read+0x4c8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	08db      	lsrs	r3, r3, #3
 8002458:	4a65      	ldr	r2, [pc, #404]	@ (80025f0 <HAL_I2C_Mem_Read+0x4cc>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	0a1a      	lsrs	r2, r3, #8
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00da      	lsls	r2, r3, #3
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	3b01      	subs	r3, #1
 8002470:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d118      	bne.n	80024aa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f043 0220 	orr.w	r2, r3, #32
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800249a:	b662      	cpsie	i
}
 800249c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e09a      	b.n	80025e0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d1d9      	bne.n	800246c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024fa:	b662      	cpsie	i
}
 80024fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002530:	e042      	b.n	80025b8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002534:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fcb2 	bl	8002ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e04c      	b.n	80025e0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b04      	cmp	r3, #4
 8002584:	d118      	bne.n	80025b8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f47f ae94 	bne.w	80022ea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80025de:	2302      	movs	r3, #2
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3728      	adds	r7, #40	@ 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	00010004 	.word	0x00010004
 80025ec:	20000000 	.word	0x20000000
 80025f0:	14f8b589 	.word	0x14f8b589

080025f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	@ 0x28
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	460b      	mov	r3, r1
 8002602:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7fe fe92 	bl	800132c <HAL_GetTick>
 8002608:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b20      	cmp	r3, #32
 8002618:	f040 8111 	bne.w	800283e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2319      	movs	r3, #25
 8002622:	2201      	movs	r2, #1
 8002624:	4988      	ldr	r1, [pc, #544]	@ (8002848 <HAL_I2C_IsDeviceReady+0x254>)
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fa90 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002632:	2302      	movs	r3, #2
 8002634:	e104      	b.n	8002840 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_I2C_IsDeviceReady+0x50>
 8002640:	2302      	movs	r3, #2
 8002642:	e0fd      	b.n	8002840 <HAL_I2C_IsDeviceReady+0x24c>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d007      	beq.n	800266a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002678:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2224      	movs	r2, #36	@ 0x24
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a70      	ldr	r2, [pc, #448]	@ (800284c <HAL_I2C_IsDeviceReady+0x258>)
 800268c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800269c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fa4e 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026c4:	d103      	bne.n	80026ce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026cc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0b6      	b.n	8002840 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026e0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fe23 	bl	800132c <HAL_GetTick>
 80026e6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800270c:	bf0c      	ite	eq
 800270e:	2301      	moveq	r3, #1
 8002710:	2300      	movne	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002716:	e025      	b.n	8002764 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002718:	f7fe fe08 	bl	800132c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d302      	bcc.n	800272e <HAL_I2C_IsDeviceReady+0x13a>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d103      	bne.n	8002736 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	22a0      	movs	r2, #160	@ 0xa0
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b02      	cmp	r3, #2
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2ba0      	cmp	r3, #160	@ 0xa0
 800276e:	d005      	beq.n	800277c <HAL_I2C_IsDeviceReady+0x188>
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <HAL_I2C_IsDeviceReady+0x188>
 8002776:	7dbb      	ldrb	r3, [r7, #22]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0cd      	beq.n	8002718 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d129      	bne.n	80027e6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2319      	movs	r3, #25
 80027be:	2201      	movs	r2, #1
 80027c0:	4921      	ldr	r1, [pc, #132]	@ (8002848 <HAL_I2C_IsDeviceReady+0x254>)
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f9c2 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e036      	b.n	8002840 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e02c      	b.n	8002840 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027fe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2319      	movs	r3, #25
 8002806:	2201      	movs	r2, #1
 8002808:	490f      	ldr	r1, [pc, #60]	@ (8002848 <HAL_I2C_IsDeviceReady+0x254>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f99e 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e012      	b.n	8002840 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	3301      	adds	r3, #1
 800281e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	f4ff af32 	bcc.w	800268e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	00100002 	.word	0x00100002
 800284c:	ffff0000 	.word	0xffff0000

08002850 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	4608      	mov	r0, r1
 800285a:	4611      	mov	r1, r2
 800285c:	461a      	mov	r2, r3
 800285e:	4603      	mov	r3, r0
 8002860:	817b      	strh	r3, [r7, #10]
 8002862:	460b      	mov	r3, r1
 8002864:	813b      	strh	r3, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2200      	movs	r2, #0
 8002882:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f960 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a0:	d103      	bne.n	80028aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e05f      	b.n	800296e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	6a3a      	ldr	r2, [r7, #32]
 80028c2:	492d      	ldr	r1, [pc, #180]	@ (8002978 <I2C_RequestMemoryWrite+0x128>)
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f9bb 	bl	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e04c      	b.n	800296e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fa46 	bl	8002d80 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d107      	bne.n	8002912 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002910:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e02b      	b.n	800296e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	611a      	str	r2, [r3, #16]
 8002926:	e021      	b.n	800296c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002928:	893b      	ldrh	r3, [r7, #8]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29b      	uxth	r3, r3
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fa20 	bl	8002d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	2b04      	cmp	r3, #4
 800294c:	d107      	bne.n	800295e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e005      	b.n	800296e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002962:	893b      	ldrh	r3, [r7, #8]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	00010002 	.word	0x00010002

0800297c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	4608      	mov	r0, r1
 8002986:	4611      	mov	r1, r2
 8002988:	461a      	mov	r2, r3
 800298a:	4603      	mov	r3, r0
 800298c:	817b      	strh	r3, [r7, #10]
 800298e:	460b      	mov	r3, r1
 8002990:	813b      	strh	r3, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	2200      	movs	r2, #0
 80029be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f8c2 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029dc:	d103      	bne.n	80029e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0aa      	b.n	8002b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ea:	897b      	ldrh	r3, [r7, #10]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	6a3a      	ldr	r2, [r7, #32]
 80029fe:	4952      	ldr	r1, [pc, #328]	@ (8002b48 <I2C_RequestMemoryRead+0x1cc>)
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f91d 	bl	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e097      	b.n	8002b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a28:	6a39      	ldr	r1, [r7, #32]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f9a8 	bl	8002d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d107      	bne.n	8002a4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e076      	b.n	8002b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a58:	893b      	ldrh	r3, [r7, #8]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	611a      	str	r2, [r3, #16]
 8002a62:	e021      	b.n	8002aa8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a64:	893b      	ldrh	r3, [r7, #8]
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a74:	6a39      	ldr	r1, [r7, #32]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f982 	bl	8002d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00d      	beq.n	8002a9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d107      	bne.n	8002a9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e050      	b.n	8002b40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a9e:	893b      	ldrh	r3, [r7, #8]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aaa:	6a39      	ldr	r1, [r7, #32]
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f967 	bl	8002d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00d      	beq.n	8002ad4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d107      	bne.n	8002ad0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ace:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e035      	b.n	8002b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f82b 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00d      	beq.n	8002b18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b0a:	d103      	bne.n	8002b14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e013      	b.n	8002b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b18:	897b      	ldrh	r3, [r7, #10]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	6a3a      	ldr	r2, [r7, #32]
 8002b2c:	4906      	ldr	r1, [pc, #24]	@ (8002b48 <I2C_RequestMemoryRead+0x1cc>)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f886 	bl	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	00010002 	.word	0x00010002

08002b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b5c:	e048      	b.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d044      	beq.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b66:	f7fe fbe1 	bl	800132c <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d302      	bcc.n	8002b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d139      	bne.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	0c1b      	lsrs	r3, r3, #16
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10d      	bne.n	8002ba2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4013      	ands	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	e00c      	b.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	43da      	mvns	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4013      	ands	r3, r2
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d116      	bne.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e023      	b.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10d      	bne.n	8002c16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	43da      	mvns	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4013      	ands	r3, r2
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	e00c      	b.n	8002c30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4013      	ands	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d093      	beq.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c4e:	e071      	b.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5e:	d123      	bne.n	8002ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f043 0204 	orr.w	r2, r3, #4
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e067      	b.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d041      	beq.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb0:	f7fe fb3c 	bl	800132c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d302      	bcc.n	8002cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d136      	bne.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10c      	bne.n	8002cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf14      	ite	ne
 8002ce2:	2301      	movne	r3, #1
 8002ce4:	2300      	moveq	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	e00b      	b.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf14      	ite	ne
 8002cfc:	2301      	movne	r3, #1
 8002cfe:	2300      	moveq	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e021      	b.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10c      	bne.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e00b      	b.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4013      	ands	r3, r2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f af6d 	bne.w	8002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d8c:	e034      	b.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f8e3 	bl	8002f5a <I2C_IsAcknowledgeFailed>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e034      	b.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d028      	beq.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7fe fac1 	bl	800132c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11d      	bne.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc6:	2b80      	cmp	r3, #128	@ 0x80
 8002dc8:	d016      	beq.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e007      	b.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e02:	2b80      	cmp	r3, #128	@ 0x80
 8002e04:	d1c3      	bne.n	8002d8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e1c:	e034      	b.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f89b 	bl	8002f5a <I2C_IsAcknowledgeFailed>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e034      	b.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d028      	beq.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7fe fa79 	bl	800132c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d11d      	bne.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d016      	beq.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e007      	b.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d1c3      	bne.n	8002e1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eac:	e049      	b.n	8002f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d119      	bne.n	8002ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0210 	mvn.w	r2, #16
 8002ec4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e030      	b.n	8002f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef0:	f7fe fa1c 	bl	800132c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d302      	bcc.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d11d      	bne.n	8002f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f10:	2b40      	cmp	r3, #64	@ 0x40
 8002f12:	d016      	beq.n	8002f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e007      	b.n	8002f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4c:	2b40      	cmp	r3, #64	@ 0x40
 8002f4e:	d1ae      	bne.n	8002eae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f70:	d11b      	bne.n	8002faa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	f043 0204 	orr.w	r2, r3, #4
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002fbe:	f7fe f9b5 	bl	800132c <HAL_GetTick>
 8002fc2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002fc4:	4b45      	ldr	r3, [pc, #276]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a44      	ldr	r2, [pc, #272]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd2:	f7fe f9ab 	bl	800132c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e077      	b.n	80030d4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002ff8:	4a38      	ldr	r2, [pc, #224]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 8002ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ffe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003000:	f7fe f994 	bl	800132c <HAL_GetTick>
 8003004:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003006:	4b35      	ldr	r3, [pc, #212]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300e:	f7fe f98d 	bl	800132c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e057      	b.n	80030d4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003024:	4b2d      	ldr	r3, [pc, #180]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ee      	bne.n	800300e <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003030:	4b2b      	ldr	r3, [pc, #172]	@ (80030e0 <HAL_RCC_DeInit+0x128>)
 8003032:	4a2c      	ldr	r2, [pc, #176]	@ (80030e4 <HAL_RCC_DeInit+0x12c>)
 8003034:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003036:	4b2c      	ldr	r3, [pc, #176]	@ (80030e8 <HAL_RCC_DeInit+0x130>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe f934 	bl	80012a8 <HAL_InitTick>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e044      	b.n	80030d4 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800304a:	f7fe f96f 	bl	800132c <HAL_GetTick>
 800304e:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003050:	4b22      	ldr	r3, [pc, #136]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a21      	ldr	r2, [pc, #132]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 8003056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800305a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305e:	f7fe f965 	bl	800132c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e031      	b.n	80030d4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003070:	4b1a      	ldr	r3, [pc, #104]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 800307c:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 800307e:	2200      	movs	r2, #0
 8003080:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003082:	f7fe f953 	bl	800132c <HAL_GetTick>
 8003086:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8003088:	4b14      	ldr	r3, [pc, #80]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a13      	ldr	r2, [pc, #76]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 800308e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003092:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003096:	f7fe f949 	bl	800132c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b64      	cmp	r3, #100	@ 0x64
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e015      	b.n	80030d4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80030a8:	4b0c      	ldr	r3, [pc, #48]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f0      	bne.n	8003096 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80030b4:	4b09      	ldr	r3, [pc, #36]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a08      	ldr	r2, [pc, #32]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 80030ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030be:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80030c0:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	4a05      	ldr	r2, [pc, #20]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 80030c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ca:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 80030cc:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <HAL_RCC_DeInit+0x124>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	20000000 	.word	0x20000000
 80030e4:	007a1200 	.word	0x007a1200
 80030e8:	20000004 	.word	0x20000004

080030ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e272      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8087 	beq.w	800321a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800310c:	4b92      	ldr	r3, [pc, #584]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b04      	cmp	r3, #4
 8003116:	d00c      	beq.n	8003132 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003118:	4b8f      	ldr	r3, [pc, #572]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b08      	cmp	r3, #8
 8003122:	d112      	bne.n	800314a <HAL_RCC_OscConfig+0x5e>
 8003124:	4b8c      	ldr	r3, [pc, #560]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003130:	d10b      	bne.n	800314a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003132:	4b89      	ldr	r3, [pc, #548]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d06c      	beq.n	8003218 <HAL_RCC_OscConfig+0x12c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d168      	bne.n	8003218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e24c      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x76>
 8003154:	4b80      	ldr	r3, [pc, #512]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a7f      	ldr	r2, [pc, #508]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 800315a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	e02e      	b.n	80031c0 <HAL_RCC_OscConfig+0xd4>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x98>
 800316a:	4b7b      	ldr	r3, [pc, #492]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a7a      	ldr	r2, [pc, #488]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	4b78      	ldr	r3, [pc, #480]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a77      	ldr	r2, [pc, #476]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 800317c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e01d      	b.n	80031c0 <HAL_RCC_OscConfig+0xd4>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0xbc>
 800318e:	4b72      	ldr	r3, [pc, #456]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a71      	ldr	r2, [pc, #452]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b6f      	ldr	r3, [pc, #444]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6e      	ldr	r2, [pc, #440]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0xd4>
 80031a8:	4b6b      	ldr	r3, [pc, #428]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4b68      	ldr	r3, [pc, #416]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a67      	ldr	r2, [pc, #412]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d013      	beq.n	80031f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe f8b0 	bl	800132c <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe f8ac 	bl	800132c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	@ 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e200      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0xe4>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fe f89c 	bl	800132c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fe f898 	bl	800132c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	@ 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e1ec      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320a:	4b53      	ldr	r3, [pc, #332]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x10c>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d063      	beq.n	80032ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003226:	4b4c      	ldr	r3, [pc, #304]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003232:	4b49      	ldr	r3, [pc, #292]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b08      	cmp	r3, #8
 800323c:	d11c      	bne.n	8003278 <HAL_RCC_OscConfig+0x18c>
 800323e:	4b46      	ldr	r3, [pc, #280]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d116      	bne.n	8003278 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	4b43      	ldr	r3, [pc, #268]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_RCC_OscConfig+0x176>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d001      	beq.n	8003262 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e1c0      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003262:	4b3d      	ldr	r3, [pc, #244]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4939      	ldr	r1, [pc, #228]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	e03a      	b.n	80032ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d020      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003280:	4b36      	ldr	r3, [pc, #216]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003286:	f7fe f851 	bl	800132c <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328e:	f7fe f84d 	bl	800132c <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e1a1      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4927      	ldr	r1, [pc, #156]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c2:	4b26      	ldr	r3, [pc, #152]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fe f830 	bl	800132c <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d0:	f7fe f82c 	bl	800132c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e180      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d03a      	beq.n	8003370 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d019      	beq.n	8003336 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003302:	4b17      	ldr	r3, [pc, #92]	@ (8003360 <HAL_RCC_OscConfig+0x274>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003308:	f7fe f810 	bl	800132c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003310:	f7fe f80c 	bl	800132c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e160      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003322:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <HAL_RCC_OscConfig+0x26c>)
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800332e:	2001      	movs	r0, #1
 8003330:	f000 face 	bl	80038d0 <RCC_Delay>
 8003334:	e01c      	b.n	8003370 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003336:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <HAL_RCC_OscConfig+0x274>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333c:	f7fd fff6 	bl	800132c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003342:	e00f      	b.n	8003364 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003344:	f7fd fff2 	bl	800132c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d908      	bls.n	8003364 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e146      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
 800335c:	42420000 	.word	0x42420000
 8003360:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	4b92      	ldr	r3, [pc, #584]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e9      	bne.n	8003344 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80a6 	beq.w	80034ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003382:	4b8b      	ldr	r3, [pc, #556]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10d      	bne.n	80033aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	4b88      	ldr	r3, [pc, #544]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	4a87      	ldr	r2, [pc, #540]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003398:	61d3      	str	r3, [r2, #28]
 800339a:	4b85      	ldr	r3, [pc, #532]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b82      	ldr	r3, [pc, #520]	@ (80035b4 <HAL_RCC_OscConfig+0x4c8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d118      	bne.n	80033e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b6:	4b7f      	ldr	r3, [pc, #508]	@ (80035b4 <HAL_RCC_OscConfig+0x4c8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7e      	ldr	r2, [pc, #504]	@ (80035b4 <HAL_RCC_OscConfig+0x4c8>)
 80033bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c2:	f7fd ffb3 	bl	800132c <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ca:	f7fd ffaf 	bl	800132c <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b64      	cmp	r3, #100	@ 0x64
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e103      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	4b75      	ldr	r3, [pc, #468]	@ (80035b4 <HAL_RCC_OscConfig+0x4c8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d106      	bne.n	80033fe <HAL_RCC_OscConfig+0x312>
 80033f0:	4b6f      	ldr	r3, [pc, #444]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4a6e      	ldr	r2, [pc, #440]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6213      	str	r3, [r2, #32]
 80033fc:	e02d      	b.n	800345a <HAL_RCC_OscConfig+0x36e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x334>
 8003406:	4b6a      	ldr	r3, [pc, #424]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	4a69      	ldr	r2, [pc, #420]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	6213      	str	r3, [r2, #32]
 8003412:	4b67      	ldr	r3, [pc, #412]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4a66      	ldr	r2, [pc, #408]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	6213      	str	r3, [r2, #32]
 800341e:	e01c      	b.n	800345a <HAL_RCC_OscConfig+0x36e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b05      	cmp	r3, #5
 8003426:	d10c      	bne.n	8003442 <HAL_RCC_OscConfig+0x356>
 8003428:	4b61      	ldr	r3, [pc, #388]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	4a60      	ldr	r2, [pc, #384]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 800342e:	f043 0304 	orr.w	r3, r3, #4
 8003432:	6213      	str	r3, [r2, #32]
 8003434:	4b5e      	ldr	r3, [pc, #376]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	4a5d      	ldr	r2, [pc, #372]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6213      	str	r3, [r2, #32]
 8003440:	e00b      	b.n	800345a <HAL_RCC_OscConfig+0x36e>
 8003442:	4b5b      	ldr	r3, [pc, #364]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4a5a      	ldr	r2, [pc, #360]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	6213      	str	r3, [r2, #32]
 800344e:	4b58      	ldr	r3, [pc, #352]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	4a57      	ldr	r2, [pc, #348]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d015      	beq.n	800348e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003462:	f7fd ff63 	bl	800132c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fd ff5f 	bl	800132c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e0b1      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003480:	4b4b      	ldr	r3, [pc, #300]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ee      	beq.n	800346a <HAL_RCC_OscConfig+0x37e>
 800348c:	e014      	b.n	80034b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348e:	f7fd ff4d 	bl	800132c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003494:	e00a      	b.n	80034ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fd ff49 	bl	800132c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e09b      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ac:	4b40      	ldr	r3, [pc, #256]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1ee      	bne.n	8003496 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d105      	bne.n	80034ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034be:	4b3c      	ldr	r3, [pc, #240]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	4a3b      	ldr	r2, [pc, #236]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8087 	beq.w	80035e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d4:	4b36      	ldr	r3, [pc, #216]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d061      	beq.n	80035a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d146      	bne.n	8003576 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e8:	4b33      	ldr	r3, [pc, #204]	@ (80035b8 <HAL_RCC_OscConfig+0x4cc>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fd ff1d 	bl	800132c <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f6:	f7fd ff19 	bl	800132c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e06d      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003508:	4b29      	ldr	r3, [pc, #164]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f0      	bne.n	80034f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800351c:	d108      	bne.n	8003530 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800351e:	4b24      	ldr	r3, [pc, #144]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4921      	ldr	r1, [pc, #132]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003530:	4b1f      	ldr	r3, [pc, #124]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a19      	ldr	r1, [r3, #32]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	430b      	orrs	r3, r1
 8003542:	491b      	ldr	r1, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <HAL_RCC_OscConfig+0x4cc>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fd feed 	bl	800132c <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003556:	f7fd fee9 	bl	800132c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e03d      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003568:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x46a>
 8003574:	e035      	b.n	80035e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003576:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <HAL_RCC_OscConfig+0x4cc>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fd fed6 	bl	800132c <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fd fed2 	bl	800132c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e026      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003596:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x498>
 80035a2:	e01e      	b.n	80035e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e019      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40007000 	.word	0x40007000
 80035b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035bc:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <HAL_RCC_OscConfig+0x500>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d106      	bne.n	80035de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d001      	beq.n	80035e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40021000 	.word	0x40021000

080035f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0d0      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003604:	4b6a      	ldr	r3, [pc, #424]	@ (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d910      	bls.n	8003634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b67      	ldr	r3, [pc, #412]	@ (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0207 	bic.w	r2, r3, #7
 800361a:	4965      	ldr	r1, [pc, #404]	@ (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b63      	ldr	r3, [pc, #396]	@ (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0b8      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800364c:	4b59      	ldr	r3, [pc, #356]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a58      	ldr	r2, [pc, #352]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003656:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003664:	4b53      	ldr	r3, [pc, #332]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a52      	ldr	r2, [pc, #328]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800366e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003670:	4b50      	ldr	r3, [pc, #320]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	494d      	ldr	r1, [pc, #308]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d040      	beq.n	8003710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b47      	ldr	r3, [pc, #284]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d115      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e07f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ae:	4b41      	ldr	r3, [pc, #260]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e073      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036be:	4b3d      	ldr	r3, [pc, #244]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e06b      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ce:	4b39      	ldr	r3, [pc, #228]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f023 0203 	bic.w	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4936      	ldr	r1, [pc, #216]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e0:	f7fd fe24 	bl	800132c <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e8:	f7fd fe20 	bl	800132c <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e053      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	4b2d      	ldr	r3, [pc, #180]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 020c 	and.w	r2, r3, #12
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	429a      	cmp	r2, r3
 800370e:	d1eb      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003710:	4b27      	ldr	r3, [pc, #156]	@ (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d210      	bcs.n	8003740 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b24      	ldr	r3, [pc, #144]	@ (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 0207 	bic.w	r2, r3, #7
 8003726:	4922      	ldr	r1, [pc, #136]	@ (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b20      	ldr	r3, [pc, #128]	@ (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e032      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800374c:	4b19      	ldr	r3, [pc, #100]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4916      	ldr	r1, [pc, #88]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800376a:	4b12      	ldr	r3, [pc, #72]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	490e      	ldr	r1, [pc, #56]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800377e:	f000 f821 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8003782:	4602      	mov	r2, r0
 8003784:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	490a      	ldr	r1, [pc, #40]	@ (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	5ccb      	ldrb	r3, [r1, r3]
 8003792:	fa22 f303 	lsr.w	r3, r2, r3
 8003796:	4a09      	ldr	r2, [pc, #36]	@ (80037bc <HAL_RCC_ClockConfig+0x1cc>)
 8003798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800379a:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <HAL_RCC_ClockConfig+0x1d0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fd fd82 	bl	80012a8 <HAL_InitTick>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40022000 	.word	0x40022000
 80037b4:	40021000 	.word	0x40021000
 80037b8:	08004bac 	.word	0x08004bac
 80037bc:	20000000 	.word	0x20000000
 80037c0:	20000004 	.word	0x20000004

080037c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037de:	4b1e      	ldr	r3, [pc, #120]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x94>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d002      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x30>
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d003      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x36>
 80037f2:	e027      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037f4:	4b19      	ldr	r3, [pc, #100]	@ (800385c <HAL_RCC_GetSysClockFreq+0x98>)
 80037f6:	613b      	str	r3, [r7, #16]
      break;
 80037f8:	e027      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	0c9b      	lsrs	r3, r3, #18
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	4a17      	ldr	r2, [pc, #92]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003804:	5cd3      	ldrb	r3, [r2, r3]
 8003806:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d010      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003812:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x94>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	0c5b      	lsrs	r3, r3, #17
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	4a11      	ldr	r2, [pc, #68]	@ (8003864 <HAL_RCC_GetSysClockFreq+0xa0>)
 800381e:	5cd3      	ldrb	r3, [r2, r3]
 8003820:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a0d      	ldr	r2, [pc, #52]	@ (800385c <HAL_RCC_GetSysClockFreq+0x98>)
 8003826:	fb03 f202 	mul.w	r2, r3, r2
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e004      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a0c      	ldr	r2, [pc, #48]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	613b      	str	r3, [r7, #16]
      break;
 8003842:	e002      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003844:	4b05      	ldr	r3, [pc, #20]	@ (800385c <HAL_RCC_GetSysClockFreq+0x98>)
 8003846:	613b      	str	r3, [r7, #16]
      break;
 8003848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800384a:	693b      	ldr	r3, [r7, #16]
}
 800384c:	4618      	mov	r0, r3
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
 800385c:	007a1200 	.word	0x007a1200
 8003860:	08004bc4 	.word	0x08004bc4
 8003864:	08004bd4 	.word	0x08004bd4
 8003868:	003d0900 	.word	0x003d0900

0800386c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003870:	4b02      	ldr	r3, [pc, #8]	@ (800387c <HAL_RCC_GetHCLKFreq+0x10>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	20000000 	.word	0x20000000

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003884:	f7ff fff2 	bl	800386c <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	@ (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	08004bbc 	.word	0x08004bbc

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038ac:	f7ff ffde 	bl	800386c <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0adb      	lsrs	r3, r3, #11
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	@ (80038cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	08004bbc 	.word	0x08004bbc

080038d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <RCC_Delay+0x34>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003908 <RCC_Delay+0x38>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	0a5b      	lsrs	r3, r3, #9
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038ec:	bf00      	nop
  }
  while (Delay --);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1e5a      	subs	r2, r3, #1
 80038f2:	60fa      	str	r2, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f9      	bne.n	80038ec <RCC_Delay+0x1c>
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	20000000 	.word	0x20000000
 8003908:	10624dd3 	.word	0x10624dd3

0800390c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e042      	b.n	80039a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd fc30 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	@ 0x24
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800394e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f91d 	bl	8003b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	@ 0x28
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d16d      	bne.n	8003aa8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_UART_Transmit+0x2c>
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e066      	b.n	8003aaa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2221      	movs	r2, #33	@ 0x21
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ea:	f7fd fc9f 	bl	800132c <HAL_GetTick>
 80039ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a04:	d108      	bne.n	8003a18 <HAL_UART_Transmit+0x6c>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d104      	bne.n	8003a18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	e003      	b.n	8003a20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a20:	e02a      	b.n	8003a78 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2180      	movs	r1, #128	@ 0x80
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f840 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e036      	b.n	8003aaa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10b      	bne.n	8003a5a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	3302      	adds	r3, #2
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	e007      	b.n	8003a6a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	3301      	adds	r3, #1
 8003a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1cf      	bne.n	8003a22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2140      	movs	r1, #64	@ 0x40
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f810 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e006      	b.n	8003aaa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e000      	b.n	8003aaa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b090      	sub	sp, #64	@ 0x40
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac2:	e050      	b.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	d04c      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ad2:	f7fd fc2b 	bl	800132c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d241      	bcs.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b02:	637a      	str	r2, [r7, #52]	@ 0x34
 8003b04:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e5      	bne.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3314      	adds	r3, #20
 8003b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	613b      	str	r3, [r7, #16]
   return(result);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3314      	adds	r3, #20
 8003b34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b36:	623a      	str	r2, [r7, #32]
 8003b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	69f9      	ldr	r1, [r7, #28]
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e5      	bne.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e00f      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d09f      	beq.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3740      	adds	r7, #64	@ 0x40
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003bca:	f023 030c 	bic.w	r3, r3, #12
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca4 <UART_SetConfig+0x114>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d103      	bne.n	8003c00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bf8:	f7ff fe56 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	e002      	b.n	8003c06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c00:	f7ff fe3e 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8003c04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	4a22      	ldr	r2, [pc, #136]	@ (8003ca8 <UART_SetConfig+0x118>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	0119      	lsls	r1, r3, #4
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009a      	lsls	r2, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca8 <UART_SetConfig+0x118>)
 8003c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2064      	movs	r0, #100	@ 0x64
 8003c46:	fb00 f303 	mul.w	r3, r0, r3
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	3332      	adds	r3, #50	@ 0x32
 8003c50:	4a15      	ldr	r2, [pc, #84]	@ (8003ca8 <UART_SetConfig+0x118>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c5c:	4419      	add	r1, r3
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009a      	lsls	r2, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca8 <UART_SetConfig+0x118>)
 8003c76:	fba3 0302 	umull	r0, r3, r3, r2
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	2064      	movs	r0, #100	@ 0x64
 8003c7e:	fb00 f303 	mul.w	r3, r0, r3
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	3332      	adds	r3, #50	@ 0x32
 8003c88:	4a07      	ldr	r2, [pc, #28]	@ (8003ca8 <UART_SetConfig+0x118>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	f003 020f 	and.w	r2, r3, #15
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	440a      	add	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	51eb851f 	.word	0x51eb851f

08003cac <siprintf>:
 8003cac:	b40e      	push	{r1, r2, r3}
 8003cae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cb2:	b500      	push	{lr}
 8003cb4:	b09c      	sub	sp, #112	@ 0x70
 8003cb6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003cb8:	9002      	str	r0, [sp, #8]
 8003cba:	9006      	str	r0, [sp, #24]
 8003cbc:	9107      	str	r1, [sp, #28]
 8003cbe:	9104      	str	r1, [sp, #16]
 8003cc0:	4808      	ldr	r0, [pc, #32]	@ (8003ce4 <siprintf+0x38>)
 8003cc2:	4909      	ldr	r1, [pc, #36]	@ (8003ce8 <siprintf+0x3c>)
 8003cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cc8:	9105      	str	r1, [sp, #20]
 8003cca:	6800      	ldr	r0, [r0, #0]
 8003ccc:	a902      	add	r1, sp, #8
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	f000 f992 	bl	8003ff8 <_svfiprintf_r>
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	9b02      	ldr	r3, [sp, #8]
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	b01c      	add	sp, #112	@ 0x70
 8003cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce0:	b003      	add	sp, #12
 8003ce2:	4770      	bx	lr
 8003ce4:	2000000c 	.word	0x2000000c
 8003ce8:	ffff0208 	.word	0xffff0208

08003cec <memset>:
 8003cec:	4603      	mov	r3, r0
 8003cee:	4402      	add	r2, r0
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <memset+0xa>
 8003cf4:	4770      	bx	lr
 8003cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfa:	e7f9      	b.n	8003cf0 <memset+0x4>

08003cfc <__errno>:
 8003cfc:	4b01      	ldr	r3, [pc, #4]	@ (8003d04 <__errno+0x8>)
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	2000000c 	.word	0x2000000c

08003d08 <__libc_init_array>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	2600      	movs	r6, #0
 8003d0c:	4d0c      	ldr	r5, [pc, #48]	@ (8003d40 <__libc_init_array+0x38>)
 8003d0e:	4c0d      	ldr	r4, [pc, #52]	@ (8003d44 <__libc_init_array+0x3c>)
 8003d10:	1b64      	subs	r4, r4, r5
 8003d12:	10a4      	asrs	r4, r4, #2
 8003d14:	42a6      	cmp	r6, r4
 8003d16:	d109      	bne.n	8003d2c <__libc_init_array+0x24>
 8003d18:	f000 fc78 	bl	800460c <_init>
 8003d1c:	2600      	movs	r6, #0
 8003d1e:	4d0a      	ldr	r5, [pc, #40]	@ (8003d48 <__libc_init_array+0x40>)
 8003d20:	4c0a      	ldr	r4, [pc, #40]	@ (8003d4c <__libc_init_array+0x44>)
 8003d22:	1b64      	subs	r4, r4, r5
 8003d24:	10a4      	asrs	r4, r4, #2
 8003d26:	42a6      	cmp	r6, r4
 8003d28:	d105      	bne.n	8003d36 <__libc_init_array+0x2e>
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d30:	4798      	blx	r3
 8003d32:	3601      	adds	r6, #1
 8003d34:	e7ee      	b.n	8003d14 <__libc_init_array+0xc>
 8003d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3a:	4798      	blx	r3
 8003d3c:	3601      	adds	r6, #1
 8003d3e:	e7f2      	b.n	8003d26 <__libc_init_array+0x1e>
 8003d40:	08004c14 	.word	0x08004c14
 8003d44:	08004c14 	.word	0x08004c14
 8003d48:	08004c14 	.word	0x08004c14
 8003d4c:	08004c18 	.word	0x08004c18

08003d50 <__retarget_lock_acquire_recursive>:
 8003d50:	4770      	bx	lr

08003d52 <__retarget_lock_release_recursive>:
 8003d52:	4770      	bx	lr

08003d54 <_free_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	4605      	mov	r5, r0
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	d040      	beq.n	8003dde <_free_r+0x8a>
 8003d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d60:	1f0c      	subs	r4, r1, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bfb8      	it	lt
 8003d66:	18e4      	addlt	r4, r4, r3
 8003d68:	f000 f8de 	bl	8003f28 <__malloc_lock>
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003de0 <_free_r+0x8c>)
 8003d6e:	6813      	ldr	r3, [r2, #0]
 8003d70:	b933      	cbnz	r3, 8003d80 <_free_r+0x2c>
 8003d72:	6063      	str	r3, [r4, #4]
 8003d74:	6014      	str	r4, [r2, #0]
 8003d76:	4628      	mov	r0, r5
 8003d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d7c:	f000 b8da 	b.w	8003f34 <__malloc_unlock>
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	d908      	bls.n	8003d96 <_free_r+0x42>
 8003d84:	6820      	ldr	r0, [r4, #0]
 8003d86:	1821      	adds	r1, r4, r0
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	bf01      	itttt	eq
 8003d8c:	6819      	ldreq	r1, [r3, #0]
 8003d8e:	685b      	ldreq	r3, [r3, #4]
 8003d90:	1809      	addeq	r1, r1, r0
 8003d92:	6021      	streq	r1, [r4, #0]
 8003d94:	e7ed      	b.n	8003d72 <_free_r+0x1e>
 8003d96:	461a      	mov	r2, r3
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	b10b      	cbz	r3, 8003da0 <_free_r+0x4c>
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	d9fa      	bls.n	8003d96 <_free_r+0x42>
 8003da0:	6811      	ldr	r1, [r2, #0]
 8003da2:	1850      	adds	r0, r2, r1
 8003da4:	42a0      	cmp	r0, r4
 8003da6:	d10b      	bne.n	8003dc0 <_free_r+0x6c>
 8003da8:	6820      	ldr	r0, [r4, #0]
 8003daa:	4401      	add	r1, r0
 8003dac:	1850      	adds	r0, r2, r1
 8003dae:	4283      	cmp	r3, r0
 8003db0:	6011      	str	r1, [r2, #0]
 8003db2:	d1e0      	bne.n	8003d76 <_free_r+0x22>
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4408      	add	r0, r1
 8003dba:	6010      	str	r0, [r2, #0]
 8003dbc:	6053      	str	r3, [r2, #4]
 8003dbe:	e7da      	b.n	8003d76 <_free_r+0x22>
 8003dc0:	d902      	bls.n	8003dc8 <_free_r+0x74>
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	602b      	str	r3, [r5, #0]
 8003dc6:	e7d6      	b.n	8003d76 <_free_r+0x22>
 8003dc8:	6820      	ldr	r0, [r4, #0]
 8003dca:	1821      	adds	r1, r4, r0
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	bf01      	itttt	eq
 8003dd0:	6819      	ldreq	r1, [r3, #0]
 8003dd2:	685b      	ldreq	r3, [r3, #4]
 8003dd4:	1809      	addeq	r1, r1, r0
 8003dd6:	6021      	streq	r1, [r4, #0]
 8003dd8:	6063      	str	r3, [r4, #4]
 8003dda:	6054      	str	r4, [r2, #4]
 8003ddc:	e7cb      	b.n	8003d76 <_free_r+0x22>
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
 8003de0:	20000284 	.word	0x20000284

08003de4 <sbrk_aligned>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	4e0f      	ldr	r6, [pc, #60]	@ (8003e24 <sbrk_aligned+0x40>)
 8003de8:	460c      	mov	r4, r1
 8003dea:	6831      	ldr	r1, [r6, #0]
 8003dec:	4605      	mov	r5, r0
 8003dee:	b911      	cbnz	r1, 8003df6 <sbrk_aligned+0x12>
 8003df0:	f000 fbaa 	bl	8004548 <_sbrk_r>
 8003df4:	6030      	str	r0, [r6, #0]
 8003df6:	4621      	mov	r1, r4
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f000 fba5 	bl	8004548 <_sbrk_r>
 8003dfe:	1c43      	adds	r3, r0, #1
 8003e00:	d103      	bne.n	8003e0a <sbrk_aligned+0x26>
 8003e02:	f04f 34ff 	mov.w	r4, #4294967295
 8003e06:	4620      	mov	r0, r4
 8003e08:	bd70      	pop	{r4, r5, r6, pc}
 8003e0a:	1cc4      	adds	r4, r0, #3
 8003e0c:	f024 0403 	bic.w	r4, r4, #3
 8003e10:	42a0      	cmp	r0, r4
 8003e12:	d0f8      	beq.n	8003e06 <sbrk_aligned+0x22>
 8003e14:	1a21      	subs	r1, r4, r0
 8003e16:	4628      	mov	r0, r5
 8003e18:	f000 fb96 	bl	8004548 <_sbrk_r>
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d1f2      	bne.n	8003e06 <sbrk_aligned+0x22>
 8003e20:	e7ef      	b.n	8003e02 <sbrk_aligned+0x1e>
 8003e22:	bf00      	nop
 8003e24:	20000280 	.word	0x20000280

08003e28 <_malloc_r>:
 8003e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e2c:	1ccd      	adds	r5, r1, #3
 8003e2e:	f025 0503 	bic.w	r5, r5, #3
 8003e32:	3508      	adds	r5, #8
 8003e34:	2d0c      	cmp	r5, #12
 8003e36:	bf38      	it	cc
 8003e38:	250c      	movcc	r5, #12
 8003e3a:	2d00      	cmp	r5, #0
 8003e3c:	4606      	mov	r6, r0
 8003e3e:	db01      	blt.n	8003e44 <_malloc_r+0x1c>
 8003e40:	42a9      	cmp	r1, r5
 8003e42:	d904      	bls.n	8003e4e <_malloc_r+0x26>
 8003e44:	230c      	movs	r3, #12
 8003e46:	6033      	str	r3, [r6, #0]
 8003e48:	2000      	movs	r0, #0
 8003e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f24 <_malloc_r+0xfc>
 8003e52:	f000 f869 	bl	8003f28 <__malloc_lock>
 8003e56:	f8d8 3000 	ldr.w	r3, [r8]
 8003e5a:	461c      	mov	r4, r3
 8003e5c:	bb44      	cbnz	r4, 8003eb0 <_malloc_r+0x88>
 8003e5e:	4629      	mov	r1, r5
 8003e60:	4630      	mov	r0, r6
 8003e62:	f7ff ffbf 	bl	8003de4 <sbrk_aligned>
 8003e66:	1c43      	adds	r3, r0, #1
 8003e68:	4604      	mov	r4, r0
 8003e6a:	d158      	bne.n	8003f1e <_malloc_r+0xf6>
 8003e6c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e70:	4627      	mov	r7, r4
 8003e72:	2f00      	cmp	r7, #0
 8003e74:	d143      	bne.n	8003efe <_malloc_r+0xd6>
 8003e76:	2c00      	cmp	r4, #0
 8003e78:	d04b      	beq.n	8003f12 <_malloc_r+0xea>
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	4639      	mov	r1, r7
 8003e7e:	4630      	mov	r0, r6
 8003e80:	eb04 0903 	add.w	r9, r4, r3
 8003e84:	f000 fb60 	bl	8004548 <_sbrk_r>
 8003e88:	4581      	cmp	r9, r0
 8003e8a:	d142      	bne.n	8003f12 <_malloc_r+0xea>
 8003e8c:	6821      	ldr	r1, [r4, #0]
 8003e8e:	4630      	mov	r0, r6
 8003e90:	1a6d      	subs	r5, r5, r1
 8003e92:	4629      	mov	r1, r5
 8003e94:	f7ff ffa6 	bl	8003de4 <sbrk_aligned>
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d03a      	beq.n	8003f12 <_malloc_r+0xea>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	442b      	add	r3, r5
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	bb62      	cbnz	r2, 8003f04 <_malloc_r+0xdc>
 8003eaa:	f8c8 7000 	str.w	r7, [r8]
 8003eae:	e00f      	b.n	8003ed0 <_malloc_r+0xa8>
 8003eb0:	6822      	ldr	r2, [r4, #0]
 8003eb2:	1b52      	subs	r2, r2, r5
 8003eb4:	d420      	bmi.n	8003ef8 <_malloc_r+0xd0>
 8003eb6:	2a0b      	cmp	r2, #11
 8003eb8:	d917      	bls.n	8003eea <_malloc_r+0xc2>
 8003eba:	1961      	adds	r1, r4, r5
 8003ebc:	42a3      	cmp	r3, r4
 8003ebe:	6025      	str	r5, [r4, #0]
 8003ec0:	bf18      	it	ne
 8003ec2:	6059      	strne	r1, [r3, #4]
 8003ec4:	6863      	ldr	r3, [r4, #4]
 8003ec6:	bf08      	it	eq
 8003ec8:	f8c8 1000 	streq.w	r1, [r8]
 8003ecc:	5162      	str	r2, [r4, r5]
 8003ece:	604b      	str	r3, [r1, #4]
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f000 f82f 	bl	8003f34 <__malloc_unlock>
 8003ed6:	f104 000b 	add.w	r0, r4, #11
 8003eda:	1d23      	adds	r3, r4, #4
 8003edc:	f020 0007 	bic.w	r0, r0, #7
 8003ee0:	1ac2      	subs	r2, r0, r3
 8003ee2:	bf1c      	itt	ne
 8003ee4:	1a1b      	subne	r3, r3, r0
 8003ee6:	50a3      	strne	r3, [r4, r2]
 8003ee8:	e7af      	b.n	8003e4a <_malloc_r+0x22>
 8003eea:	6862      	ldr	r2, [r4, #4]
 8003eec:	42a3      	cmp	r3, r4
 8003eee:	bf0c      	ite	eq
 8003ef0:	f8c8 2000 	streq.w	r2, [r8]
 8003ef4:	605a      	strne	r2, [r3, #4]
 8003ef6:	e7eb      	b.n	8003ed0 <_malloc_r+0xa8>
 8003ef8:	4623      	mov	r3, r4
 8003efa:	6864      	ldr	r4, [r4, #4]
 8003efc:	e7ae      	b.n	8003e5c <_malloc_r+0x34>
 8003efe:	463c      	mov	r4, r7
 8003f00:	687f      	ldr	r7, [r7, #4]
 8003f02:	e7b6      	b.n	8003e72 <_malloc_r+0x4a>
 8003f04:	461a      	mov	r2, r3
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	42a3      	cmp	r3, r4
 8003f0a:	d1fb      	bne.n	8003f04 <_malloc_r+0xdc>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	6053      	str	r3, [r2, #4]
 8003f10:	e7de      	b.n	8003ed0 <_malloc_r+0xa8>
 8003f12:	230c      	movs	r3, #12
 8003f14:	4630      	mov	r0, r6
 8003f16:	6033      	str	r3, [r6, #0]
 8003f18:	f000 f80c 	bl	8003f34 <__malloc_unlock>
 8003f1c:	e794      	b.n	8003e48 <_malloc_r+0x20>
 8003f1e:	6005      	str	r5, [r0, #0]
 8003f20:	e7d6      	b.n	8003ed0 <_malloc_r+0xa8>
 8003f22:	bf00      	nop
 8003f24:	20000284 	.word	0x20000284

08003f28 <__malloc_lock>:
 8003f28:	4801      	ldr	r0, [pc, #4]	@ (8003f30 <__malloc_lock+0x8>)
 8003f2a:	f7ff bf11 	b.w	8003d50 <__retarget_lock_acquire_recursive>
 8003f2e:	bf00      	nop
 8003f30:	2000027c 	.word	0x2000027c

08003f34 <__malloc_unlock>:
 8003f34:	4801      	ldr	r0, [pc, #4]	@ (8003f3c <__malloc_unlock+0x8>)
 8003f36:	f7ff bf0c 	b.w	8003d52 <__retarget_lock_release_recursive>
 8003f3a:	bf00      	nop
 8003f3c:	2000027c 	.word	0x2000027c

08003f40 <__ssputs_r>:
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	461f      	mov	r7, r3
 8003f46:	688e      	ldr	r6, [r1, #8]
 8003f48:	4682      	mov	sl, r0
 8003f4a:	42be      	cmp	r6, r7
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	4690      	mov	r8, r2
 8003f50:	680b      	ldr	r3, [r1, #0]
 8003f52:	d82d      	bhi.n	8003fb0 <__ssputs_r+0x70>
 8003f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f5c:	d026      	beq.n	8003fac <__ssputs_r+0x6c>
 8003f5e:	6965      	ldr	r5, [r4, #20]
 8003f60:	6909      	ldr	r1, [r1, #16]
 8003f62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f66:	eba3 0901 	sub.w	r9, r3, r1
 8003f6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f6e:	1c7b      	adds	r3, r7, #1
 8003f70:	444b      	add	r3, r9
 8003f72:	106d      	asrs	r5, r5, #1
 8003f74:	429d      	cmp	r5, r3
 8003f76:	bf38      	it	cc
 8003f78:	461d      	movcc	r5, r3
 8003f7a:	0553      	lsls	r3, r2, #21
 8003f7c:	d527      	bpl.n	8003fce <__ssputs_r+0x8e>
 8003f7e:	4629      	mov	r1, r5
 8003f80:	f7ff ff52 	bl	8003e28 <_malloc_r>
 8003f84:	4606      	mov	r6, r0
 8003f86:	b360      	cbz	r0, 8003fe2 <__ssputs_r+0xa2>
 8003f88:	464a      	mov	r2, r9
 8003f8a:	6921      	ldr	r1, [r4, #16]
 8003f8c:	f000 fafa 	bl	8004584 <memcpy>
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f9a:	81a3      	strh	r3, [r4, #12]
 8003f9c:	6126      	str	r6, [r4, #16]
 8003f9e:	444e      	add	r6, r9
 8003fa0:	6026      	str	r6, [r4, #0]
 8003fa2:	463e      	mov	r6, r7
 8003fa4:	6165      	str	r5, [r4, #20]
 8003fa6:	eba5 0509 	sub.w	r5, r5, r9
 8003faa:	60a5      	str	r5, [r4, #8]
 8003fac:	42be      	cmp	r6, r7
 8003fae:	d900      	bls.n	8003fb2 <__ssputs_r+0x72>
 8003fb0:	463e      	mov	r6, r7
 8003fb2:	4632      	mov	r2, r6
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	6820      	ldr	r0, [r4, #0]
 8003fb8:	f000 faac 	bl	8004514 <memmove>
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	68a3      	ldr	r3, [r4, #8]
 8003fc0:	1b9b      	subs	r3, r3, r6
 8003fc2:	60a3      	str	r3, [r4, #8]
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	4433      	add	r3, r6
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fce:	462a      	mov	r2, r5
 8003fd0:	f000 fae6 	bl	80045a0 <_realloc_r>
 8003fd4:	4606      	mov	r6, r0
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d1e0      	bne.n	8003f9c <__ssputs_r+0x5c>
 8003fda:	4650      	mov	r0, sl
 8003fdc:	6921      	ldr	r1, [r4, #16]
 8003fde:	f7ff feb9 	bl	8003d54 <_free_r>
 8003fe2:	230c      	movs	r3, #12
 8003fe4:	f8ca 3000 	str.w	r3, [sl]
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	f04f 30ff 	mov.w	r0, #4294967295
 8003fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ff2:	81a3      	strh	r3, [r4, #12]
 8003ff4:	e7e9      	b.n	8003fca <__ssputs_r+0x8a>
	...

08003ff8 <_svfiprintf_r>:
 8003ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ffc:	4698      	mov	r8, r3
 8003ffe:	898b      	ldrh	r3, [r1, #12]
 8004000:	4607      	mov	r7, r0
 8004002:	061b      	lsls	r3, r3, #24
 8004004:	460d      	mov	r5, r1
 8004006:	4614      	mov	r4, r2
 8004008:	b09d      	sub	sp, #116	@ 0x74
 800400a:	d510      	bpl.n	800402e <_svfiprintf_r+0x36>
 800400c:	690b      	ldr	r3, [r1, #16]
 800400e:	b973      	cbnz	r3, 800402e <_svfiprintf_r+0x36>
 8004010:	2140      	movs	r1, #64	@ 0x40
 8004012:	f7ff ff09 	bl	8003e28 <_malloc_r>
 8004016:	6028      	str	r0, [r5, #0]
 8004018:	6128      	str	r0, [r5, #16]
 800401a:	b930      	cbnz	r0, 800402a <_svfiprintf_r+0x32>
 800401c:	230c      	movs	r3, #12
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	f04f 30ff 	mov.w	r0, #4294967295
 8004024:	b01d      	add	sp, #116	@ 0x74
 8004026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402a:	2340      	movs	r3, #64	@ 0x40
 800402c:	616b      	str	r3, [r5, #20]
 800402e:	2300      	movs	r3, #0
 8004030:	9309      	str	r3, [sp, #36]	@ 0x24
 8004032:	2320      	movs	r3, #32
 8004034:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004038:	2330      	movs	r3, #48	@ 0x30
 800403a:	f04f 0901 	mov.w	r9, #1
 800403e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004042:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80041dc <_svfiprintf_r+0x1e4>
 8004046:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800404a:	4623      	mov	r3, r4
 800404c:	469a      	mov	sl, r3
 800404e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004052:	b10a      	cbz	r2, 8004058 <_svfiprintf_r+0x60>
 8004054:	2a25      	cmp	r2, #37	@ 0x25
 8004056:	d1f9      	bne.n	800404c <_svfiprintf_r+0x54>
 8004058:	ebba 0b04 	subs.w	fp, sl, r4
 800405c:	d00b      	beq.n	8004076 <_svfiprintf_r+0x7e>
 800405e:	465b      	mov	r3, fp
 8004060:	4622      	mov	r2, r4
 8004062:	4629      	mov	r1, r5
 8004064:	4638      	mov	r0, r7
 8004066:	f7ff ff6b 	bl	8003f40 <__ssputs_r>
 800406a:	3001      	adds	r0, #1
 800406c:	f000 80a7 	beq.w	80041be <_svfiprintf_r+0x1c6>
 8004070:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004072:	445a      	add	r2, fp
 8004074:	9209      	str	r2, [sp, #36]	@ 0x24
 8004076:	f89a 3000 	ldrb.w	r3, [sl]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 809f 	beq.w	80041be <_svfiprintf_r+0x1c6>
 8004080:	2300      	movs	r3, #0
 8004082:	f04f 32ff 	mov.w	r2, #4294967295
 8004086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800408a:	f10a 0a01 	add.w	sl, sl, #1
 800408e:	9304      	str	r3, [sp, #16]
 8004090:	9307      	str	r3, [sp, #28]
 8004092:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004096:	931a      	str	r3, [sp, #104]	@ 0x68
 8004098:	4654      	mov	r4, sl
 800409a:	2205      	movs	r2, #5
 800409c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a0:	484e      	ldr	r0, [pc, #312]	@ (80041dc <_svfiprintf_r+0x1e4>)
 80040a2:	f000 fa61 	bl	8004568 <memchr>
 80040a6:	9a04      	ldr	r2, [sp, #16]
 80040a8:	b9d8      	cbnz	r0, 80040e2 <_svfiprintf_r+0xea>
 80040aa:	06d0      	lsls	r0, r2, #27
 80040ac:	bf44      	itt	mi
 80040ae:	2320      	movmi	r3, #32
 80040b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040b4:	0711      	lsls	r1, r2, #28
 80040b6:	bf44      	itt	mi
 80040b8:	232b      	movmi	r3, #43	@ 0x2b
 80040ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040be:	f89a 3000 	ldrb.w	r3, [sl]
 80040c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80040c4:	d015      	beq.n	80040f2 <_svfiprintf_r+0xfa>
 80040c6:	4654      	mov	r4, sl
 80040c8:	2000      	movs	r0, #0
 80040ca:	f04f 0c0a 	mov.w	ip, #10
 80040ce:	9a07      	ldr	r2, [sp, #28]
 80040d0:	4621      	mov	r1, r4
 80040d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040d6:	3b30      	subs	r3, #48	@ 0x30
 80040d8:	2b09      	cmp	r3, #9
 80040da:	d94b      	bls.n	8004174 <_svfiprintf_r+0x17c>
 80040dc:	b1b0      	cbz	r0, 800410c <_svfiprintf_r+0x114>
 80040de:	9207      	str	r2, [sp, #28]
 80040e0:	e014      	b.n	800410c <_svfiprintf_r+0x114>
 80040e2:	eba0 0308 	sub.w	r3, r0, r8
 80040e6:	fa09 f303 	lsl.w	r3, r9, r3
 80040ea:	4313      	orrs	r3, r2
 80040ec:	46a2      	mov	sl, r4
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	e7d2      	b.n	8004098 <_svfiprintf_r+0xa0>
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	1d19      	adds	r1, r3, #4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	9103      	str	r1, [sp, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bfbb      	ittet	lt
 80040fe:	425b      	neglt	r3, r3
 8004100:	f042 0202 	orrlt.w	r2, r2, #2
 8004104:	9307      	strge	r3, [sp, #28]
 8004106:	9307      	strlt	r3, [sp, #28]
 8004108:	bfb8      	it	lt
 800410a:	9204      	strlt	r2, [sp, #16]
 800410c:	7823      	ldrb	r3, [r4, #0]
 800410e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004110:	d10a      	bne.n	8004128 <_svfiprintf_r+0x130>
 8004112:	7863      	ldrb	r3, [r4, #1]
 8004114:	2b2a      	cmp	r3, #42	@ 0x2a
 8004116:	d132      	bne.n	800417e <_svfiprintf_r+0x186>
 8004118:	9b03      	ldr	r3, [sp, #12]
 800411a:	3402      	adds	r4, #2
 800411c:	1d1a      	adds	r2, r3, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	9203      	str	r2, [sp, #12]
 8004122:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004126:	9305      	str	r3, [sp, #20]
 8004128:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80041e0 <_svfiprintf_r+0x1e8>
 800412c:	2203      	movs	r2, #3
 800412e:	4650      	mov	r0, sl
 8004130:	7821      	ldrb	r1, [r4, #0]
 8004132:	f000 fa19 	bl	8004568 <memchr>
 8004136:	b138      	cbz	r0, 8004148 <_svfiprintf_r+0x150>
 8004138:	2240      	movs	r2, #64	@ 0x40
 800413a:	9b04      	ldr	r3, [sp, #16]
 800413c:	eba0 000a 	sub.w	r0, r0, sl
 8004140:	4082      	lsls	r2, r0
 8004142:	4313      	orrs	r3, r2
 8004144:	3401      	adds	r4, #1
 8004146:	9304      	str	r3, [sp, #16]
 8004148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800414c:	2206      	movs	r2, #6
 800414e:	4825      	ldr	r0, [pc, #148]	@ (80041e4 <_svfiprintf_r+0x1ec>)
 8004150:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004154:	f000 fa08 	bl	8004568 <memchr>
 8004158:	2800      	cmp	r0, #0
 800415a:	d036      	beq.n	80041ca <_svfiprintf_r+0x1d2>
 800415c:	4b22      	ldr	r3, [pc, #136]	@ (80041e8 <_svfiprintf_r+0x1f0>)
 800415e:	bb1b      	cbnz	r3, 80041a8 <_svfiprintf_r+0x1b0>
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	3307      	adds	r3, #7
 8004164:	f023 0307 	bic.w	r3, r3, #7
 8004168:	3308      	adds	r3, #8
 800416a:	9303      	str	r3, [sp, #12]
 800416c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800416e:	4433      	add	r3, r6
 8004170:	9309      	str	r3, [sp, #36]	@ 0x24
 8004172:	e76a      	b.n	800404a <_svfiprintf_r+0x52>
 8004174:	460c      	mov	r4, r1
 8004176:	2001      	movs	r0, #1
 8004178:	fb0c 3202 	mla	r2, ip, r2, r3
 800417c:	e7a8      	b.n	80040d0 <_svfiprintf_r+0xd8>
 800417e:	2300      	movs	r3, #0
 8004180:	f04f 0c0a 	mov.w	ip, #10
 8004184:	4619      	mov	r1, r3
 8004186:	3401      	adds	r4, #1
 8004188:	9305      	str	r3, [sp, #20]
 800418a:	4620      	mov	r0, r4
 800418c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004190:	3a30      	subs	r2, #48	@ 0x30
 8004192:	2a09      	cmp	r2, #9
 8004194:	d903      	bls.n	800419e <_svfiprintf_r+0x1a6>
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0c6      	beq.n	8004128 <_svfiprintf_r+0x130>
 800419a:	9105      	str	r1, [sp, #20]
 800419c:	e7c4      	b.n	8004128 <_svfiprintf_r+0x130>
 800419e:	4604      	mov	r4, r0
 80041a0:	2301      	movs	r3, #1
 80041a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80041a6:	e7f0      	b.n	800418a <_svfiprintf_r+0x192>
 80041a8:	ab03      	add	r3, sp, #12
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	462a      	mov	r2, r5
 80041ae:	4638      	mov	r0, r7
 80041b0:	4b0e      	ldr	r3, [pc, #56]	@ (80041ec <_svfiprintf_r+0x1f4>)
 80041b2:	a904      	add	r1, sp, #16
 80041b4:	f3af 8000 	nop.w
 80041b8:	1c42      	adds	r2, r0, #1
 80041ba:	4606      	mov	r6, r0
 80041bc:	d1d6      	bne.n	800416c <_svfiprintf_r+0x174>
 80041be:	89ab      	ldrh	r3, [r5, #12]
 80041c0:	065b      	lsls	r3, r3, #25
 80041c2:	f53f af2d 	bmi.w	8004020 <_svfiprintf_r+0x28>
 80041c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041c8:	e72c      	b.n	8004024 <_svfiprintf_r+0x2c>
 80041ca:	ab03      	add	r3, sp, #12
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	462a      	mov	r2, r5
 80041d0:	4638      	mov	r0, r7
 80041d2:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <_svfiprintf_r+0x1f4>)
 80041d4:	a904      	add	r1, sp, #16
 80041d6:	f000 f87d 	bl	80042d4 <_printf_i>
 80041da:	e7ed      	b.n	80041b8 <_svfiprintf_r+0x1c0>
 80041dc:	08004bd6 	.word	0x08004bd6
 80041e0:	08004bdc 	.word	0x08004bdc
 80041e4:	08004be0 	.word	0x08004be0
 80041e8:	00000000 	.word	0x00000000
 80041ec:	08003f41 	.word	0x08003f41

080041f0 <_printf_common>:
 80041f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	4616      	mov	r6, r2
 80041f6:	4698      	mov	r8, r3
 80041f8:	688a      	ldr	r2, [r1, #8]
 80041fa:	690b      	ldr	r3, [r1, #16]
 80041fc:	4607      	mov	r7, r0
 80041fe:	4293      	cmp	r3, r2
 8004200:	bfb8      	it	lt
 8004202:	4613      	movlt	r3, r2
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800420a:	460c      	mov	r4, r1
 800420c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004210:	b10a      	cbz	r2, 8004216 <_printf_common+0x26>
 8004212:	3301      	adds	r3, #1
 8004214:	6033      	str	r3, [r6, #0]
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	0699      	lsls	r1, r3, #26
 800421a:	bf42      	ittt	mi
 800421c:	6833      	ldrmi	r3, [r6, #0]
 800421e:	3302      	addmi	r3, #2
 8004220:	6033      	strmi	r3, [r6, #0]
 8004222:	6825      	ldr	r5, [r4, #0]
 8004224:	f015 0506 	ands.w	r5, r5, #6
 8004228:	d106      	bne.n	8004238 <_printf_common+0x48>
 800422a:	f104 0a19 	add.w	sl, r4, #25
 800422e:	68e3      	ldr	r3, [r4, #12]
 8004230:	6832      	ldr	r2, [r6, #0]
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	42ab      	cmp	r3, r5
 8004236:	dc2b      	bgt.n	8004290 <_printf_common+0xa0>
 8004238:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800423c:	6822      	ldr	r2, [r4, #0]
 800423e:	3b00      	subs	r3, #0
 8004240:	bf18      	it	ne
 8004242:	2301      	movne	r3, #1
 8004244:	0692      	lsls	r2, r2, #26
 8004246:	d430      	bmi.n	80042aa <_printf_common+0xba>
 8004248:	4641      	mov	r1, r8
 800424a:	4638      	mov	r0, r7
 800424c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004250:	47c8      	blx	r9
 8004252:	3001      	adds	r0, #1
 8004254:	d023      	beq.n	800429e <_printf_common+0xae>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	6922      	ldr	r2, [r4, #16]
 800425a:	f003 0306 	and.w	r3, r3, #6
 800425e:	2b04      	cmp	r3, #4
 8004260:	bf14      	ite	ne
 8004262:	2500      	movne	r5, #0
 8004264:	6833      	ldreq	r3, [r6, #0]
 8004266:	f04f 0600 	mov.w	r6, #0
 800426a:	bf08      	it	eq
 800426c:	68e5      	ldreq	r5, [r4, #12]
 800426e:	f104 041a 	add.w	r4, r4, #26
 8004272:	bf08      	it	eq
 8004274:	1aed      	subeq	r5, r5, r3
 8004276:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800427a:	bf08      	it	eq
 800427c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004280:	4293      	cmp	r3, r2
 8004282:	bfc4      	itt	gt
 8004284:	1a9b      	subgt	r3, r3, r2
 8004286:	18ed      	addgt	r5, r5, r3
 8004288:	42b5      	cmp	r5, r6
 800428a:	d11a      	bne.n	80042c2 <_printf_common+0xd2>
 800428c:	2000      	movs	r0, #0
 800428e:	e008      	b.n	80042a2 <_printf_common+0xb2>
 8004290:	2301      	movs	r3, #1
 8004292:	4652      	mov	r2, sl
 8004294:	4641      	mov	r1, r8
 8004296:	4638      	mov	r0, r7
 8004298:	47c8      	blx	r9
 800429a:	3001      	adds	r0, #1
 800429c:	d103      	bne.n	80042a6 <_printf_common+0xb6>
 800429e:	f04f 30ff 	mov.w	r0, #4294967295
 80042a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a6:	3501      	adds	r5, #1
 80042a8:	e7c1      	b.n	800422e <_printf_common+0x3e>
 80042aa:	2030      	movs	r0, #48	@ 0x30
 80042ac:	18e1      	adds	r1, r4, r3
 80042ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042b8:	4422      	add	r2, r4
 80042ba:	3302      	adds	r3, #2
 80042bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042c0:	e7c2      	b.n	8004248 <_printf_common+0x58>
 80042c2:	2301      	movs	r3, #1
 80042c4:	4622      	mov	r2, r4
 80042c6:	4641      	mov	r1, r8
 80042c8:	4638      	mov	r0, r7
 80042ca:	47c8      	blx	r9
 80042cc:	3001      	adds	r0, #1
 80042ce:	d0e6      	beq.n	800429e <_printf_common+0xae>
 80042d0:	3601      	adds	r6, #1
 80042d2:	e7d9      	b.n	8004288 <_printf_common+0x98>

080042d4 <_printf_i>:
 80042d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042d8:	7e0f      	ldrb	r7, [r1, #24]
 80042da:	4691      	mov	r9, r2
 80042dc:	2f78      	cmp	r7, #120	@ 0x78
 80042de:	4680      	mov	r8, r0
 80042e0:	460c      	mov	r4, r1
 80042e2:	469a      	mov	sl, r3
 80042e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042ea:	d807      	bhi.n	80042fc <_printf_i+0x28>
 80042ec:	2f62      	cmp	r7, #98	@ 0x62
 80042ee:	d80a      	bhi.n	8004306 <_printf_i+0x32>
 80042f0:	2f00      	cmp	r7, #0
 80042f2:	f000 80d3 	beq.w	800449c <_printf_i+0x1c8>
 80042f6:	2f58      	cmp	r7, #88	@ 0x58
 80042f8:	f000 80ba 	beq.w	8004470 <_printf_i+0x19c>
 80042fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004300:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004304:	e03a      	b.n	800437c <_printf_i+0xa8>
 8004306:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800430a:	2b15      	cmp	r3, #21
 800430c:	d8f6      	bhi.n	80042fc <_printf_i+0x28>
 800430e:	a101      	add	r1, pc, #4	@ (adr r1, 8004314 <_printf_i+0x40>)
 8004310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004314:	0800436d 	.word	0x0800436d
 8004318:	08004381 	.word	0x08004381
 800431c:	080042fd 	.word	0x080042fd
 8004320:	080042fd 	.word	0x080042fd
 8004324:	080042fd 	.word	0x080042fd
 8004328:	080042fd 	.word	0x080042fd
 800432c:	08004381 	.word	0x08004381
 8004330:	080042fd 	.word	0x080042fd
 8004334:	080042fd 	.word	0x080042fd
 8004338:	080042fd 	.word	0x080042fd
 800433c:	080042fd 	.word	0x080042fd
 8004340:	08004483 	.word	0x08004483
 8004344:	080043ab 	.word	0x080043ab
 8004348:	0800443d 	.word	0x0800443d
 800434c:	080042fd 	.word	0x080042fd
 8004350:	080042fd 	.word	0x080042fd
 8004354:	080044a5 	.word	0x080044a5
 8004358:	080042fd 	.word	0x080042fd
 800435c:	080043ab 	.word	0x080043ab
 8004360:	080042fd 	.word	0x080042fd
 8004364:	080042fd 	.word	0x080042fd
 8004368:	08004445 	.word	0x08004445
 800436c:	6833      	ldr	r3, [r6, #0]
 800436e:	1d1a      	adds	r2, r3, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6032      	str	r2, [r6, #0]
 8004374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004378:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800437c:	2301      	movs	r3, #1
 800437e:	e09e      	b.n	80044be <_printf_i+0x1ea>
 8004380:	6833      	ldr	r3, [r6, #0]
 8004382:	6820      	ldr	r0, [r4, #0]
 8004384:	1d19      	adds	r1, r3, #4
 8004386:	6031      	str	r1, [r6, #0]
 8004388:	0606      	lsls	r6, r0, #24
 800438a:	d501      	bpl.n	8004390 <_printf_i+0xbc>
 800438c:	681d      	ldr	r5, [r3, #0]
 800438e:	e003      	b.n	8004398 <_printf_i+0xc4>
 8004390:	0645      	lsls	r5, r0, #25
 8004392:	d5fb      	bpl.n	800438c <_printf_i+0xb8>
 8004394:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004398:	2d00      	cmp	r5, #0
 800439a:	da03      	bge.n	80043a4 <_printf_i+0xd0>
 800439c:	232d      	movs	r3, #45	@ 0x2d
 800439e:	426d      	negs	r5, r5
 80043a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043a4:	230a      	movs	r3, #10
 80043a6:	4859      	ldr	r0, [pc, #356]	@ (800450c <_printf_i+0x238>)
 80043a8:	e011      	b.n	80043ce <_printf_i+0xfa>
 80043aa:	6821      	ldr	r1, [r4, #0]
 80043ac:	6833      	ldr	r3, [r6, #0]
 80043ae:	0608      	lsls	r0, r1, #24
 80043b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80043b4:	d402      	bmi.n	80043bc <_printf_i+0xe8>
 80043b6:	0649      	lsls	r1, r1, #25
 80043b8:	bf48      	it	mi
 80043ba:	b2ad      	uxthmi	r5, r5
 80043bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80043be:	6033      	str	r3, [r6, #0]
 80043c0:	bf14      	ite	ne
 80043c2:	230a      	movne	r3, #10
 80043c4:	2308      	moveq	r3, #8
 80043c6:	4851      	ldr	r0, [pc, #324]	@ (800450c <_printf_i+0x238>)
 80043c8:	2100      	movs	r1, #0
 80043ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043ce:	6866      	ldr	r6, [r4, #4]
 80043d0:	2e00      	cmp	r6, #0
 80043d2:	bfa8      	it	ge
 80043d4:	6821      	ldrge	r1, [r4, #0]
 80043d6:	60a6      	str	r6, [r4, #8]
 80043d8:	bfa4      	itt	ge
 80043da:	f021 0104 	bicge.w	r1, r1, #4
 80043de:	6021      	strge	r1, [r4, #0]
 80043e0:	b90d      	cbnz	r5, 80043e6 <_printf_i+0x112>
 80043e2:	2e00      	cmp	r6, #0
 80043e4:	d04b      	beq.n	800447e <_printf_i+0x1aa>
 80043e6:	4616      	mov	r6, r2
 80043e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80043ec:	fb03 5711 	mls	r7, r3, r1, r5
 80043f0:	5dc7      	ldrb	r7, [r0, r7]
 80043f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043f6:	462f      	mov	r7, r5
 80043f8:	42bb      	cmp	r3, r7
 80043fa:	460d      	mov	r5, r1
 80043fc:	d9f4      	bls.n	80043e8 <_printf_i+0x114>
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d10b      	bne.n	800441a <_printf_i+0x146>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	07df      	lsls	r7, r3, #31
 8004406:	d508      	bpl.n	800441a <_printf_i+0x146>
 8004408:	6923      	ldr	r3, [r4, #16]
 800440a:	6861      	ldr	r1, [r4, #4]
 800440c:	4299      	cmp	r1, r3
 800440e:	bfde      	ittt	le
 8004410:	2330      	movle	r3, #48	@ 0x30
 8004412:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004416:	f106 36ff 	addle.w	r6, r6, #4294967295
 800441a:	1b92      	subs	r2, r2, r6
 800441c:	6122      	str	r2, [r4, #16]
 800441e:	464b      	mov	r3, r9
 8004420:	4621      	mov	r1, r4
 8004422:	4640      	mov	r0, r8
 8004424:	f8cd a000 	str.w	sl, [sp]
 8004428:	aa03      	add	r2, sp, #12
 800442a:	f7ff fee1 	bl	80041f0 <_printf_common>
 800442e:	3001      	adds	r0, #1
 8004430:	d14a      	bne.n	80044c8 <_printf_i+0x1f4>
 8004432:	f04f 30ff 	mov.w	r0, #4294967295
 8004436:	b004      	add	sp, #16
 8004438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	f043 0320 	orr.w	r3, r3, #32
 8004442:	6023      	str	r3, [r4, #0]
 8004444:	2778      	movs	r7, #120	@ 0x78
 8004446:	4832      	ldr	r0, [pc, #200]	@ (8004510 <_printf_i+0x23c>)
 8004448:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	6831      	ldr	r1, [r6, #0]
 8004450:	061f      	lsls	r7, r3, #24
 8004452:	f851 5b04 	ldr.w	r5, [r1], #4
 8004456:	d402      	bmi.n	800445e <_printf_i+0x18a>
 8004458:	065f      	lsls	r7, r3, #25
 800445a:	bf48      	it	mi
 800445c:	b2ad      	uxthmi	r5, r5
 800445e:	6031      	str	r1, [r6, #0]
 8004460:	07d9      	lsls	r1, r3, #31
 8004462:	bf44      	itt	mi
 8004464:	f043 0320 	orrmi.w	r3, r3, #32
 8004468:	6023      	strmi	r3, [r4, #0]
 800446a:	b11d      	cbz	r5, 8004474 <_printf_i+0x1a0>
 800446c:	2310      	movs	r3, #16
 800446e:	e7ab      	b.n	80043c8 <_printf_i+0xf4>
 8004470:	4826      	ldr	r0, [pc, #152]	@ (800450c <_printf_i+0x238>)
 8004472:	e7e9      	b.n	8004448 <_printf_i+0x174>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	f023 0320 	bic.w	r3, r3, #32
 800447a:	6023      	str	r3, [r4, #0]
 800447c:	e7f6      	b.n	800446c <_printf_i+0x198>
 800447e:	4616      	mov	r6, r2
 8004480:	e7bd      	b.n	80043fe <_printf_i+0x12a>
 8004482:	6833      	ldr	r3, [r6, #0]
 8004484:	6825      	ldr	r5, [r4, #0]
 8004486:	1d18      	adds	r0, r3, #4
 8004488:	6961      	ldr	r1, [r4, #20]
 800448a:	6030      	str	r0, [r6, #0]
 800448c:	062e      	lsls	r6, r5, #24
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	d501      	bpl.n	8004496 <_printf_i+0x1c2>
 8004492:	6019      	str	r1, [r3, #0]
 8004494:	e002      	b.n	800449c <_printf_i+0x1c8>
 8004496:	0668      	lsls	r0, r5, #25
 8004498:	d5fb      	bpl.n	8004492 <_printf_i+0x1be>
 800449a:	8019      	strh	r1, [r3, #0]
 800449c:	2300      	movs	r3, #0
 800449e:	4616      	mov	r6, r2
 80044a0:	6123      	str	r3, [r4, #16]
 80044a2:	e7bc      	b.n	800441e <_printf_i+0x14a>
 80044a4:	6833      	ldr	r3, [r6, #0]
 80044a6:	2100      	movs	r1, #0
 80044a8:	1d1a      	adds	r2, r3, #4
 80044aa:	6032      	str	r2, [r6, #0]
 80044ac:	681e      	ldr	r6, [r3, #0]
 80044ae:	6862      	ldr	r2, [r4, #4]
 80044b0:	4630      	mov	r0, r6
 80044b2:	f000 f859 	bl	8004568 <memchr>
 80044b6:	b108      	cbz	r0, 80044bc <_printf_i+0x1e8>
 80044b8:	1b80      	subs	r0, r0, r6
 80044ba:	6060      	str	r0, [r4, #4]
 80044bc:	6863      	ldr	r3, [r4, #4]
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	2300      	movs	r3, #0
 80044c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044c6:	e7aa      	b.n	800441e <_printf_i+0x14a>
 80044c8:	4632      	mov	r2, r6
 80044ca:	4649      	mov	r1, r9
 80044cc:	4640      	mov	r0, r8
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	47d0      	blx	sl
 80044d2:	3001      	adds	r0, #1
 80044d4:	d0ad      	beq.n	8004432 <_printf_i+0x15e>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	079b      	lsls	r3, r3, #30
 80044da:	d413      	bmi.n	8004504 <_printf_i+0x230>
 80044dc:	68e0      	ldr	r0, [r4, #12]
 80044de:	9b03      	ldr	r3, [sp, #12]
 80044e0:	4298      	cmp	r0, r3
 80044e2:	bfb8      	it	lt
 80044e4:	4618      	movlt	r0, r3
 80044e6:	e7a6      	b.n	8004436 <_printf_i+0x162>
 80044e8:	2301      	movs	r3, #1
 80044ea:	4632      	mov	r2, r6
 80044ec:	4649      	mov	r1, r9
 80044ee:	4640      	mov	r0, r8
 80044f0:	47d0      	blx	sl
 80044f2:	3001      	adds	r0, #1
 80044f4:	d09d      	beq.n	8004432 <_printf_i+0x15e>
 80044f6:	3501      	adds	r5, #1
 80044f8:	68e3      	ldr	r3, [r4, #12]
 80044fa:	9903      	ldr	r1, [sp, #12]
 80044fc:	1a5b      	subs	r3, r3, r1
 80044fe:	42ab      	cmp	r3, r5
 8004500:	dcf2      	bgt.n	80044e8 <_printf_i+0x214>
 8004502:	e7eb      	b.n	80044dc <_printf_i+0x208>
 8004504:	2500      	movs	r5, #0
 8004506:	f104 0619 	add.w	r6, r4, #25
 800450a:	e7f5      	b.n	80044f8 <_printf_i+0x224>
 800450c:	08004be7 	.word	0x08004be7
 8004510:	08004bf8 	.word	0x08004bf8

08004514 <memmove>:
 8004514:	4288      	cmp	r0, r1
 8004516:	b510      	push	{r4, lr}
 8004518:	eb01 0402 	add.w	r4, r1, r2
 800451c:	d902      	bls.n	8004524 <memmove+0x10>
 800451e:	4284      	cmp	r4, r0
 8004520:	4623      	mov	r3, r4
 8004522:	d807      	bhi.n	8004534 <memmove+0x20>
 8004524:	1e43      	subs	r3, r0, #1
 8004526:	42a1      	cmp	r1, r4
 8004528:	d008      	beq.n	800453c <memmove+0x28>
 800452a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800452e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004532:	e7f8      	b.n	8004526 <memmove+0x12>
 8004534:	4601      	mov	r1, r0
 8004536:	4402      	add	r2, r0
 8004538:	428a      	cmp	r2, r1
 800453a:	d100      	bne.n	800453e <memmove+0x2a>
 800453c:	bd10      	pop	{r4, pc}
 800453e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004546:	e7f7      	b.n	8004538 <memmove+0x24>

08004548 <_sbrk_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	2300      	movs	r3, #0
 800454c:	4d05      	ldr	r5, [pc, #20]	@ (8004564 <_sbrk_r+0x1c>)
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	602b      	str	r3, [r5, #0]
 8004554:	f7fc fdba 	bl	80010cc <_sbrk>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d102      	bne.n	8004562 <_sbrk_r+0x1a>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	b103      	cbz	r3, 8004562 <_sbrk_r+0x1a>
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	20000278 	.word	0x20000278

08004568 <memchr>:
 8004568:	4603      	mov	r3, r0
 800456a:	b510      	push	{r4, lr}
 800456c:	b2c9      	uxtb	r1, r1
 800456e:	4402      	add	r2, r0
 8004570:	4293      	cmp	r3, r2
 8004572:	4618      	mov	r0, r3
 8004574:	d101      	bne.n	800457a <memchr+0x12>
 8004576:	2000      	movs	r0, #0
 8004578:	e003      	b.n	8004582 <memchr+0x1a>
 800457a:	7804      	ldrb	r4, [r0, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	428c      	cmp	r4, r1
 8004580:	d1f6      	bne.n	8004570 <memchr+0x8>
 8004582:	bd10      	pop	{r4, pc}

08004584 <memcpy>:
 8004584:	440a      	add	r2, r1
 8004586:	4291      	cmp	r1, r2
 8004588:	f100 33ff 	add.w	r3, r0, #4294967295
 800458c:	d100      	bne.n	8004590 <memcpy+0xc>
 800458e:	4770      	bx	lr
 8004590:	b510      	push	{r4, lr}
 8004592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004596:	4291      	cmp	r1, r2
 8004598:	f803 4f01 	strb.w	r4, [r3, #1]!
 800459c:	d1f9      	bne.n	8004592 <memcpy+0xe>
 800459e:	bd10      	pop	{r4, pc}

080045a0 <_realloc_r>:
 80045a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a4:	4680      	mov	r8, r0
 80045a6:	4615      	mov	r5, r2
 80045a8:	460c      	mov	r4, r1
 80045aa:	b921      	cbnz	r1, 80045b6 <_realloc_r+0x16>
 80045ac:	4611      	mov	r1, r2
 80045ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b2:	f7ff bc39 	b.w	8003e28 <_malloc_r>
 80045b6:	b92a      	cbnz	r2, 80045c4 <_realloc_r+0x24>
 80045b8:	f7ff fbcc 	bl	8003d54 <_free_r>
 80045bc:	2400      	movs	r4, #0
 80045be:	4620      	mov	r0, r4
 80045c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c4:	f000 f81a 	bl	80045fc <_malloc_usable_size_r>
 80045c8:	4285      	cmp	r5, r0
 80045ca:	4606      	mov	r6, r0
 80045cc:	d802      	bhi.n	80045d4 <_realloc_r+0x34>
 80045ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045d2:	d8f4      	bhi.n	80045be <_realloc_r+0x1e>
 80045d4:	4629      	mov	r1, r5
 80045d6:	4640      	mov	r0, r8
 80045d8:	f7ff fc26 	bl	8003e28 <_malloc_r>
 80045dc:	4607      	mov	r7, r0
 80045de:	2800      	cmp	r0, #0
 80045e0:	d0ec      	beq.n	80045bc <_realloc_r+0x1c>
 80045e2:	42b5      	cmp	r5, r6
 80045e4:	462a      	mov	r2, r5
 80045e6:	4621      	mov	r1, r4
 80045e8:	bf28      	it	cs
 80045ea:	4632      	movcs	r2, r6
 80045ec:	f7ff ffca 	bl	8004584 <memcpy>
 80045f0:	4621      	mov	r1, r4
 80045f2:	4640      	mov	r0, r8
 80045f4:	f7ff fbae 	bl	8003d54 <_free_r>
 80045f8:	463c      	mov	r4, r7
 80045fa:	e7e0      	b.n	80045be <_realloc_r+0x1e>

080045fc <_malloc_usable_size_r>:
 80045fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004600:	1f18      	subs	r0, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfbc      	itt	lt
 8004606:	580b      	ldrlt	r3, [r1, r0]
 8004608:	18c0      	addlt	r0, r0, r3
 800460a:	4770      	bx	lr

0800460c <_init>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	bf00      	nop
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr

08004618 <_fini>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr
